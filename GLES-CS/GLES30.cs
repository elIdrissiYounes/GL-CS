// This file was autogenerated by GLCSGen on 11/5/2013 3:08:40 PM UTC
// Original copyright from gl.xml:
// 
// Copyright (c) 2013 The Khronos Group Inc.
// 
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
// 
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
// 
// ------------------------------------------------------------------------
// 
// This file, gl.xml, is the OpenGL and OpenGL API Registry. The older
// ".spec" file format has been retired and will no longer be updated with
// new extensions and API versions. The canonical version of the registry,
// together with documentation, schema, and Python generator scripts used
// to generate C header files for OpenGL and OpenGL ES, can always be found
// in the Khronos Registry at
//         http://www.opengl.org/registry/
//     

using System;
using System.Reflection;
using System.Runtime.InteropServices;

namespace OpenGL
{
    public static class GLES30
    {
        #region Enums
        public static uint GL_VERSION_ES_CL_1_0 = 1;
        public static uint GL_VERSION_ES_CM_1_1 = 1;
        public static uint GL_VERSION_ES_CL_1_1 = 1;
        public static uint GL_DEPTH_BUFFER_BIT = 0x00000100;
        public static uint GL_STENCIL_BUFFER_BIT = 0x00000400;
        public static uint GL_COLOR_BUFFER_BIT = 0x00004000;
        public static uint GL_FALSE = 0;
        public static uint GL_TRUE = 1;
        public static uint GL_POINTS = 0x0000;
        public static uint GL_LINES = 0x0001;
        public static uint GL_LINE_LOOP = 0x0002;
        public static uint GL_LINE_STRIP = 0x0003;
        public static uint GL_TRIANGLES = 0x0004;
        public static uint GL_TRIANGLE_STRIP = 0x0005;
        public static uint GL_TRIANGLE_FAN = 0x0006;
        public static uint GL_NEVER = 0x0200;
        public static uint GL_LESS = 0x0201;
        public static uint GL_EQUAL = 0x0202;
        public static uint GL_LEQUAL = 0x0203;
        public static uint GL_GREATER = 0x0204;
        public static uint GL_NOTEQUAL = 0x0205;
        public static uint GL_GEQUAL = 0x0206;
        public static uint GL_ALWAYS = 0x0207;
        public static uint GL_ZERO = 0;
        public static uint GL_ONE = 1;
        public static uint GL_SRC_COLOR = 0x0300;
        public static uint GL_ONE_MINUS_SRC_COLOR = 0x0301;
        public static uint GL_SRC_ALPHA = 0x0302;
        public static uint GL_ONE_MINUS_SRC_ALPHA = 0x0303;
        public static uint GL_DST_ALPHA = 0x0304;
        public static uint GL_ONE_MINUS_DST_ALPHA = 0x0305;
        public static uint GL_DST_COLOR = 0x0306;
        public static uint GL_ONE_MINUS_DST_COLOR = 0x0307;
        public static uint GL_SRC_ALPHA_SATURATE = 0x0308;
        public static uint GL_CLIP_PLANE0 = 0x3000;
        public static uint GL_CLIP_PLANE1 = 0x3001;
        public static uint GL_CLIP_PLANE2 = 0x3002;
        public static uint GL_CLIP_PLANE3 = 0x3003;
        public static uint GL_CLIP_PLANE4 = 0x3004;
        public static uint GL_CLIP_PLANE5 = 0x3005;
        public static uint GL_FRONT = 0x0404;
        public static uint GL_BACK = 0x0405;
        public static uint GL_FRONT_AND_BACK = 0x0408;
        public static uint GL_FOG = 0x0B60;
        public static uint GL_LIGHTING = 0x0B50;
        public static uint GL_TEXTURE_2D = 0x0DE1;
        public static uint GL_CULL_FACE = 0x0B44;
        public static uint GL_ALPHA_TEST = 0x0BC0;
        public static uint GL_BLEND = 0x0BE2;
        public static uint GL_COLOR_LOGIC_OP = 0x0BF2;
        public static uint GL_DITHER = 0x0BD0;
        public static uint GL_STENCIL_TEST = 0x0B90;
        public static uint GL_DEPTH_TEST = 0x0B71;
        public static uint GL_POINT_SMOOTH = 0x0B10;
        public static uint GL_LINE_SMOOTH = 0x0B20;
        public static uint GL_SCISSOR_TEST = 0x0C11;
        public static uint GL_COLOR_MATERIAL = 0x0B57;
        public static uint GL_NORMALIZE = 0x0BA1;
        public static uint GL_RESCALE_NORMAL = 0x803A;
        public static uint GL_VERTEX_ARRAY = 0x8074;
        public static uint GL_NORMAL_ARRAY = 0x8075;
        public static uint GL_COLOR_ARRAY = 0x8076;
        public static uint GL_TEXTURE_COORD_ARRAY = 0x8078;
        public static uint GL_MULTISAMPLE = 0x809D;
        public static uint GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
        public static uint GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
        public static uint GL_SAMPLE_COVERAGE = 0x80A0;
        public static uint GL_NO_ERROR = 0;
        public static uint GL_INVALID_ENUM = 0x0500;
        public static uint GL_INVALID_VALUE = 0x0501;
        public static uint GL_INVALID_OPERATION = 0x0502;
        public static uint GL_STACK_OVERFLOW = 0x0503;
        public static uint GL_STACK_UNDERFLOW = 0x0504;
        public static uint GL_OUT_OF_MEMORY = 0x0505;
        public static uint GL_EXP = 0x0800;
        public static uint GL_EXP2 = 0x0801;
        public static uint GL_FOG_DENSITY = 0x0B62;
        public static uint GL_FOG_START = 0x0B63;
        public static uint GL_FOG_END = 0x0B64;
        public static uint GL_FOG_MODE = 0x0B65;
        public static uint GL_FOG_COLOR = 0x0B66;
        public static uint GL_CW = 0x0900;
        public static uint GL_CCW = 0x0901;
        public static uint GL_CURRENT_COLOR = 0x0B00;
        public static uint GL_CURRENT_NORMAL = 0x0B02;
        public static uint GL_CURRENT_TEXTURE_COORDS = 0x0B03;
        public static uint GL_POINT_SIZE = 0x0B11;
        public static uint GL_POINT_SIZE_MIN = 0x8126;
        public static uint GL_POINT_SIZE_MAX = 0x8127;
        public static uint GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
        public static uint GL_POINT_DISTANCE_ATTENUATION = 0x8129;
        public static uint GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
        public static uint GL_LINE_WIDTH = 0x0B21;
        public static uint GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
        public static uint GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
        public static uint GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
        public static uint GL_CULL_FACE_MODE = 0x0B45;
        public static uint GL_FRONT_FACE = 0x0B46;
        public static uint GL_SHADE_MODEL = 0x0B54;
        public static uint GL_DEPTH_RANGE = 0x0B70;
        public static uint GL_DEPTH_WRITEMASK = 0x0B72;
        public static uint GL_DEPTH_CLEAR_VALUE = 0x0B73;
        public static uint GL_DEPTH_FUNC = 0x0B74;
        public static uint GL_STENCIL_CLEAR_VALUE = 0x0B91;
        public static uint GL_STENCIL_FUNC = 0x0B92;
        public static uint GL_STENCIL_VALUE_MASK = 0x0B93;
        public static uint GL_STENCIL_FAIL = 0x0B94;
        public static uint GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
        public static uint GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
        public static uint GL_STENCIL_REF = 0x0B97;
        public static uint GL_STENCIL_WRITEMASK = 0x0B98;
        public static uint GL_MATRIX_MODE = 0x0BA0;
        public static uint GL_VIEWPORT = 0x0BA2;
        public static uint GL_MODELVIEW_STACK_DEPTH = 0x0BA3;
        public static uint GL_PROJECTION_STACK_DEPTH = 0x0BA4;
        public static uint GL_TEXTURE_STACK_DEPTH = 0x0BA5;
        public static uint GL_MODELVIEW_MATRIX = 0x0BA6;
        public static uint GL_PROJECTION_MATRIX = 0x0BA7;
        public static uint GL_TEXTURE_MATRIX = 0x0BA8;
        public static uint GL_ALPHA_TEST_FUNC = 0x0BC1;
        public static uint GL_ALPHA_TEST_REF = 0x0BC2;
        public static uint GL_BLEND_DST = 0x0BE0;
        public static uint GL_BLEND_SRC = 0x0BE1;
        public static uint GL_LOGIC_OP_MODE = 0x0BF0;
        public static uint GL_SCISSOR_BOX = 0x0C10;
        public static uint GL_COLOR_CLEAR_VALUE = 0x0C22;
        public static uint GL_COLOR_WRITEMASK = 0x0C23;
        public static uint GL_MAX_LIGHTS = 0x0D31;
        public static uint GL_MAX_CLIP_PLANES = 0x0D32;
        public static uint GL_MAX_TEXTURE_SIZE = 0x0D33;
        public static uint GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
        public static uint GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38;
        public static uint GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39;
        public static uint GL_MAX_VIEWPORT_DIMS = 0x0D3A;
        public static uint GL_MAX_TEXTURE_UNITS = 0x84E2;
        public static uint GL_SUBPIXEL_BITS = 0x0D50;
        public static uint GL_RED_BITS = 0x0D52;
        public static uint GL_GREEN_BITS = 0x0D53;
        public static uint GL_BLUE_BITS = 0x0D54;
        public static uint GL_ALPHA_BITS = 0x0D55;
        public static uint GL_DEPTH_BITS = 0x0D56;
        public static uint GL_STENCIL_BITS = 0x0D57;
        public static uint GL_POLYGON_OFFSET_UNITS = 0x2A00;
        public static uint GL_POLYGON_OFFSET_FILL = 0x8037;
        public static uint GL_POLYGON_OFFSET_FACTOR = 0x8038;
        public static uint GL_TEXTURE_BINDING_2D = 0x8069;
        public static uint GL_VERTEX_ARRAY_SIZE = 0x807A;
        public static uint GL_VERTEX_ARRAY_TYPE = 0x807B;
        public static uint GL_VERTEX_ARRAY_STRIDE = 0x807C;
        public static uint GL_NORMAL_ARRAY_TYPE = 0x807E;
        public static uint GL_NORMAL_ARRAY_STRIDE = 0x807F;
        public static uint GL_COLOR_ARRAY_SIZE = 0x8081;
        public static uint GL_COLOR_ARRAY_TYPE = 0x8082;
        public static uint GL_COLOR_ARRAY_STRIDE = 0x8083;
        public static uint GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088;
        public static uint GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089;
        public static uint GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
        public static uint GL_VERTEX_ARRAY_POINTER = 0x808E;
        public static uint GL_NORMAL_ARRAY_POINTER = 0x808F;
        public static uint GL_COLOR_ARRAY_POINTER = 0x8090;
        public static uint GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092;
        public static uint GL_SAMPLE_BUFFERS = 0x80A8;
        public static uint GL_SAMPLES = 0x80A9;
        public static uint GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
        public static uint GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
        public static uint GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
        public static uint GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
        public static uint GL_DONT_CARE = 0x1100;
        public static uint GL_FASTEST = 0x1101;
        public static uint GL_NICEST = 0x1102;
        public static uint GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
        public static uint GL_POINT_SMOOTH_HINT = 0x0C51;
        public static uint GL_LINE_SMOOTH_HINT = 0x0C52;
        public static uint GL_FOG_HINT = 0x0C54;
        public static uint GL_GENERATE_MIPMAP_HINT = 0x8192;
        public static uint GL_LIGHT_MODEL_AMBIENT = 0x0B53;
        public static uint GL_LIGHT_MODEL_TWO_SIDE = 0x0B52;
        public static uint GL_AMBIENT = 0x1200;
        public static uint GL_DIFFUSE = 0x1201;
        public static uint GL_SPECULAR = 0x1202;
        public static uint GL_POSITION = 0x1203;
        public static uint GL_SPOT_DIRECTION = 0x1204;
        public static uint GL_SPOT_EXPONENT = 0x1205;
        public static uint GL_SPOT_CUTOFF = 0x1206;
        public static uint GL_CONSTANT_ATTENUATION = 0x1207;
        public static uint GL_LINEAR_ATTENUATION = 0x1208;
        public static uint GL_QUADRATIC_ATTENUATION = 0x1209;
        public static uint GL_BYTE = 0x1400;
        public static uint GL_UNSIGNED_BYTE = 0x1401;
        public static uint GL_SHORT = 0x1402;
        public static uint GL_UNSIGNED_SHORT = 0x1403;
        public static uint GL_FLOAT = 0x1406;
        public static uint GL_FIXED = 0x140C;
        public static uint GL_CLEAR = 0x1500;
        public static uint GL_AND = 0x1501;
        public static uint GL_AND_REVERSE = 0x1502;
        public static uint GL_COPY = 0x1503;
        public static uint GL_AND_INVERTED = 0x1504;
        public static uint GL_NOOP = 0x1505;
        public static uint GL_XOR = 0x1506;
        public static uint GL_OR = 0x1507;
        public static uint GL_NOR = 0x1508;
        public static uint GL_EQUIV = 0x1509;
        public static uint GL_INVERT = 0x150A;
        public static uint GL_OR_REVERSE = 0x150B;
        public static uint GL_COPY_INVERTED = 0x150C;
        public static uint GL_OR_INVERTED = 0x150D;
        public static uint GL_NAND = 0x150E;
        public static uint GL_SET = 0x150F;
        public static uint GL_EMISSION = 0x1600;
        public static uint GL_SHININESS = 0x1601;
        public static uint GL_AMBIENT_AND_DIFFUSE = 0x1602;
        public static uint GL_MODELVIEW = 0x1700;
        public static uint GL_PROJECTION = 0x1701;
        public static uint GL_TEXTURE = 0x1702;
        public static uint GL_ALPHA = 0x1906;
        public static uint GL_RGB = 0x1907;
        public static uint GL_RGBA = 0x1908;
        public static uint GL_LUMINANCE = 0x1909;
        public static uint GL_LUMINANCE_ALPHA = 0x190A;
        public static uint GL_UNPACK_ALIGNMENT = 0x0CF5;
        public static uint GL_PACK_ALIGNMENT = 0x0D05;
        public static uint GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
        public static uint GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
        public static uint GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
        public static uint GL_FLAT = 0x1D00;
        public static uint GL_SMOOTH = 0x1D01;
        public static uint GL_KEEP = 0x1E00;
        public static uint GL_REPLACE = 0x1E01;
        public static uint GL_INCR = 0x1E02;
        public static uint GL_DECR = 0x1E03;
        public static uint GL_VENDOR = 0x1F00;
        public static uint GL_RENDERER = 0x1F01;
        public static uint GL_VERSION = 0x1F02;
        public static uint GL_EXTENSIONS = 0x1F03;
        public static uint GL_MODULATE = 0x2100;
        public static uint GL_DECAL = 0x2101;
        public static uint GL_ADD = 0x0104;
        public static uint GL_TEXTURE_ENV_MODE = 0x2200;
        public static uint GL_TEXTURE_ENV_COLOR = 0x2201;
        public static uint GL_TEXTURE_ENV = 0x2300;
        public static uint GL_NEAREST = 0x2600;
        public static uint GL_LINEAR = 0x2601;
        public static uint GL_NEAREST_MIPMAP_NEAREST = 0x2700;
        public static uint GL_LINEAR_MIPMAP_NEAREST = 0x2701;
        public static uint GL_NEAREST_MIPMAP_LINEAR = 0x2702;
        public static uint GL_LINEAR_MIPMAP_LINEAR = 0x2703;
        public static uint GL_TEXTURE_MAG_FILTER = 0x2800;
        public static uint GL_TEXTURE_MIN_FILTER = 0x2801;
        public static uint GL_TEXTURE_WRAP_S = 0x2802;
        public static uint GL_TEXTURE_WRAP_T = 0x2803;
        public static uint GL_GENERATE_MIPMAP = 0x8191;
        public static uint GL_TEXTURE0 = 0x84C0;
        public static uint GL_TEXTURE1 = 0x84C1;
        public static uint GL_TEXTURE2 = 0x84C2;
        public static uint GL_TEXTURE3 = 0x84C3;
        public static uint GL_TEXTURE4 = 0x84C4;
        public static uint GL_TEXTURE5 = 0x84C5;
        public static uint GL_TEXTURE6 = 0x84C6;
        public static uint GL_TEXTURE7 = 0x84C7;
        public static uint GL_TEXTURE8 = 0x84C8;
        public static uint GL_TEXTURE9 = 0x84C9;
        public static uint GL_TEXTURE10 = 0x84CA;
        public static uint GL_TEXTURE11 = 0x84CB;
        public static uint GL_TEXTURE12 = 0x84CC;
        public static uint GL_TEXTURE13 = 0x84CD;
        public static uint GL_TEXTURE14 = 0x84CE;
        public static uint GL_TEXTURE15 = 0x84CF;
        public static uint GL_TEXTURE16 = 0x84D0;
        public static uint GL_TEXTURE17 = 0x84D1;
        public static uint GL_TEXTURE18 = 0x84D2;
        public static uint GL_TEXTURE19 = 0x84D3;
        public static uint GL_TEXTURE20 = 0x84D4;
        public static uint GL_TEXTURE21 = 0x84D5;
        public static uint GL_TEXTURE22 = 0x84D6;
        public static uint GL_TEXTURE23 = 0x84D7;
        public static uint GL_TEXTURE24 = 0x84D8;
        public static uint GL_TEXTURE25 = 0x84D9;
        public static uint GL_TEXTURE26 = 0x84DA;
        public static uint GL_TEXTURE27 = 0x84DB;
        public static uint GL_TEXTURE28 = 0x84DC;
        public static uint GL_TEXTURE29 = 0x84DD;
        public static uint GL_TEXTURE30 = 0x84DE;
        public static uint GL_TEXTURE31 = 0x84DF;
        public static uint GL_ACTIVE_TEXTURE = 0x84E0;
        public static uint GL_CLIENT_ACTIVE_TEXTURE = 0x84E1;
        public static uint GL_REPEAT = 0x2901;
        public static uint GL_CLAMP_TO_EDGE = 0x812F;
        public static uint GL_LIGHT0 = 0x4000;
        public static uint GL_LIGHT1 = 0x4001;
        public static uint GL_LIGHT2 = 0x4002;
        public static uint GL_LIGHT3 = 0x4003;
        public static uint GL_LIGHT4 = 0x4004;
        public static uint GL_LIGHT5 = 0x4005;
        public static uint GL_LIGHT6 = 0x4006;
        public static uint GL_LIGHT7 = 0x4007;
        public static uint GL_ARRAY_BUFFER = 0x8892;
        public static uint GL_ELEMENT_ARRAY_BUFFER = 0x8893;
        public static uint GL_ARRAY_BUFFER_BINDING = 0x8894;
        public static uint GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
        public static uint GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
        public static uint GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
        public static uint GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898;
        public static uint GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
        public static uint GL_STATIC_DRAW = 0x88E4;
        public static uint GL_DYNAMIC_DRAW = 0x88E8;
        public static uint GL_BUFFER_SIZE = 0x8764;
        public static uint GL_BUFFER_USAGE = 0x8765;
        public static uint GL_SUBTRACT = 0x84E7;
        public static uint GL_COMBINE = 0x8570;
        public static uint GL_COMBINE_RGB = 0x8571;
        public static uint GL_COMBINE_ALPHA = 0x8572;
        public static uint GL_RGB_SCALE = 0x8573;
        public static uint GL_ADD_SIGNED = 0x8574;
        public static uint GL_INTERPOLATE = 0x8575;
        public static uint GL_CONSTANT = 0x8576;
        public static uint GL_PRIMARY_COLOR = 0x8577;
        public static uint GL_PREVIOUS = 0x8578;
        public static uint GL_OPERAND0_RGB = 0x8590;
        public static uint GL_OPERAND1_RGB = 0x8591;
        public static uint GL_OPERAND2_RGB = 0x8592;
        public static uint GL_OPERAND0_ALPHA = 0x8598;
        public static uint GL_OPERAND1_ALPHA = 0x8599;
        public static uint GL_OPERAND2_ALPHA = 0x859A;
        public static uint GL_ALPHA_SCALE = 0x0D1C;
        public static uint GL_SRC0_RGB = 0x8580;
        public static uint GL_SRC1_RGB = 0x8581;
        public static uint GL_SRC2_RGB = 0x8582;
        public static uint GL_SRC0_ALPHA = 0x8588;
        public static uint GL_SRC1_ALPHA = 0x8589;
        public static uint GL_SRC2_ALPHA = 0x858A;
        public static uint GL_DOT3_RGB = 0x86AE;
        public static uint GL_DOT3_RGBA = 0x86AF;
        public static uint GL_FUNC_ADD = 0x8006;
        public static uint GL_BLEND_EQUATION = 0x8009;
        public static uint GL_BLEND_EQUATION_RGB = 0x8009;
        public static uint GL_BLEND_EQUATION_ALPHA = 0x883D;
        public static uint GL_FUNC_SUBTRACT = 0x800A;
        public static uint GL_FUNC_REVERSE_SUBTRACT = 0x800B;
        public static uint GL_BLEND_DST_RGB = 0x80C8;
        public static uint GL_BLEND_SRC_RGB = 0x80C9;
        public static uint GL_BLEND_DST_ALPHA = 0x80CA;
        public static uint GL_BLEND_SRC_ALPHA = 0x80CB;
        public static uint GL_CONSTANT_COLOR = 0x8001;
        public static uint GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
        public static uint GL_CONSTANT_ALPHA = 0x8003;
        public static uint GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
        public static uint GL_BLEND_COLOR = 0x8005;
        public static uint GL_STREAM_DRAW = 0x88E0;
        public static uint GL_CURRENT_VERTEX_ATTRIB = 0x8626;
        public static uint GL_STENCIL_BACK_FUNC = 0x8800;
        public static uint GL_STENCIL_BACK_FAIL = 0x8801;
        public static uint GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
        public static uint GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
        public static uint GL_STENCIL_BACK_REF = 0x8CA3;
        public static uint GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
        public static uint GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
        public static uint GL_INT = 0x1404;
        public static uint GL_UNSIGNED_INT = 0x1405;
        public static uint GL_DEPTH_COMPONENT = 0x1902;
        public static uint GL_FRAGMENT_SHADER = 0x8B30;
        public static uint GL_VERTEX_SHADER = 0x8B31;
        public static uint GL_MAX_VERTEX_ATTRIBS = 0x8869;
        public static uint GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
        public static uint GL_MAX_VARYING_VECTORS = 0x8DFC;
        public static uint GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
        public static uint GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
        public static uint GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
        public static uint GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
        public static uint GL_SHADER_TYPE = 0x8B4F;
        public static uint GL_DELETE_STATUS = 0x8B80;
        public static uint GL_LINK_STATUS = 0x8B82;
        public static uint GL_VALIDATE_STATUS = 0x8B83;
        public static uint GL_ATTACHED_SHADERS = 0x8B85;
        public static uint GL_ACTIVE_UNIFORMS = 0x8B86;
        public static uint GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
        public static uint GL_ACTIVE_ATTRIBUTES = 0x8B89;
        public static uint GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
        public static uint GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
        public static uint GL_CURRENT_PROGRAM = 0x8B8D;
        public static uint GL_INCR_WRAP = 0x8507;
        public static uint GL_DECR_WRAP = 0x8508;
        public static uint GL_TEXTURE_CUBE_MAP = 0x8513;
        public static uint GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
        public static uint GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
        public static uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
        public static uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
        public static uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
        public static uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
        public static uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
        public static uint GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
        public static uint GL_MIRRORED_REPEAT = 0x8370;
        public static uint GL_FLOAT_VEC2 = 0x8B50;
        public static uint GL_FLOAT_VEC3 = 0x8B51;
        public static uint GL_FLOAT_VEC4 = 0x8B52;
        public static uint GL_INT_VEC2 = 0x8B53;
        public static uint GL_INT_VEC3 = 0x8B54;
        public static uint GL_INT_VEC4 = 0x8B55;
        public static uint GL_BOOL = 0x8B56;
        public static uint GL_BOOL_VEC2 = 0x8B57;
        public static uint GL_BOOL_VEC3 = 0x8B58;
        public static uint GL_BOOL_VEC4 = 0x8B59;
        public static uint GL_FLOAT_MAT2 = 0x8B5A;
        public static uint GL_FLOAT_MAT3 = 0x8B5B;
        public static uint GL_FLOAT_MAT4 = 0x8B5C;
        public static uint GL_SAMPLER_2D = 0x8B5E;
        public static uint GL_SAMPLER_CUBE = 0x8B60;
        public static uint GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
        public static uint GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
        public static uint GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
        public static uint GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
        public static uint GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
        public static uint GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
        public static uint GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
        public static uint GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
        public static uint GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
        public static uint GL_COMPILE_STATUS = 0x8B81;
        public static uint GL_INFO_LOG_LENGTH = 0x8B84;
        public static uint GL_SHADER_SOURCE_LENGTH = 0x8B88;
        public static uint GL_SHADER_COMPILER = 0x8DFA;
        public static uint GL_SHADER_BINARY_FORMATS = 0x8DF8;
        public static uint GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
        public static uint GL_LOW_FLOAT = 0x8DF0;
        public static uint GL_MEDIUM_FLOAT = 0x8DF1;
        public static uint GL_HIGH_FLOAT = 0x8DF2;
        public static uint GL_LOW_INT = 0x8DF3;
        public static uint GL_MEDIUM_INT = 0x8DF4;
        public static uint GL_HIGH_INT = 0x8DF5;
        public static uint GL_FRAMEBUFFER = 0x8D40;
        public static uint GL_RENDERBUFFER = 0x8D41;
        public static uint GL_RGBA4 = 0x8056;
        public static uint GL_RGB5_A1 = 0x8057;
        public static uint GL_RGB565 = 0x8D62;
        public static uint GL_DEPTH_COMPONENT16 = 0x81A5;
        public static uint GL_STENCIL_INDEX8 = 0x8D48;
        public static uint GL_RENDERBUFFER_WIDTH = 0x8D42;
        public static uint GL_RENDERBUFFER_HEIGHT = 0x8D43;
        public static uint GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
        public static uint GL_RENDERBUFFER_RED_SIZE = 0x8D50;
        public static uint GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
        public static uint GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
        public static uint GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
        public static uint GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
        public static uint GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
        public static uint GL_COLOR_ATTACHMENT0 = 0x8CE0;
        public static uint GL_DEPTH_ATTACHMENT = 0x8D00;
        public static uint GL_STENCIL_ATTACHMENT = 0x8D20;
        public static uint GL_NONE = 0;
        public static uint GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
        public static uint GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
        public static uint GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
        public static uint GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;
        public static uint GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
        public static uint GL_FRAMEBUFFER_BINDING = 0x8CA6;
        public static uint GL_RENDERBUFFER_BINDING = 0x8CA7;
        public static uint GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
        public static uint GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
        public static uint GL_READ_BUFFER = 0x0C02;
        public static uint GL_UNPACK_ROW_LENGTH = 0x0CF2;
        public static uint GL_UNPACK_SKIP_ROWS = 0x0CF3;
        public static uint GL_UNPACK_SKIP_PIXELS = 0x0CF4;
        public static uint GL_PACK_ROW_LENGTH = 0x0D02;
        public static uint GL_PACK_SKIP_ROWS = 0x0D03;
        public static uint GL_PACK_SKIP_PIXELS = 0x0D04;
        public static uint GL_COLOR = 0x1800;
        public static uint GL_DEPTH = 0x1801;
        public static uint GL_STENCIL = 0x1802;
        public static uint GL_RED = 0x1903;
        public static uint GL_RGB8 = 0x8051;
        public static uint GL_RGBA8 = 0x8058;
        public static uint GL_RGB10_A2 = 0x8059;
        public static uint GL_TEXTURE_BINDING_3D = 0x806A;
        public static uint GL_UNPACK_SKIP_IMAGES = 0x806D;
        public static uint GL_UNPACK_IMAGE_HEIGHT = 0x806E;
        public static uint GL_TEXTURE_3D = 0x806F;
        public static uint GL_TEXTURE_WRAP_R = 0x8072;
        public static uint GL_MAX_3D_TEXTURE_SIZE = 0x8073;
        public static uint GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
        public static uint GL_MAX_ELEMENTS_VERTICES = 0x80E8;
        public static uint GL_MAX_ELEMENTS_INDICES = 0x80E9;
        public static uint GL_TEXTURE_MIN_LOD = 0x813A;
        public static uint GL_TEXTURE_MAX_LOD = 0x813B;
        public static uint GL_TEXTURE_BASE_LEVEL = 0x813C;
        public static uint GL_TEXTURE_MAX_LEVEL = 0x813D;
        public static uint GL_MIN = 0x8007;
        public static uint GL_MAX = 0x8008;
        public static uint GL_DEPTH_COMPONENT24 = 0x81A6;
        public static uint GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
        public static uint GL_TEXTURE_COMPARE_MODE = 0x884C;
        public static uint GL_TEXTURE_COMPARE_FUNC = 0x884D;
        public static uint GL_CURRENT_QUERY = 0x8865;
        public static uint GL_QUERY_RESULT = 0x8866;
        public static uint GL_QUERY_RESULT_AVAILABLE = 0x8867;
        public static uint GL_BUFFER_MAPPED = 0x88BC;
        public static uint GL_BUFFER_MAP_POINTER = 0x88BD;
        public static uint GL_STREAM_READ = 0x88E1;
        public static uint GL_STREAM_COPY = 0x88E2;
        public static uint GL_STATIC_READ = 0x88E5;
        public static uint GL_STATIC_COPY = 0x88E6;
        public static uint GL_DYNAMIC_READ = 0x88E9;
        public static uint GL_DYNAMIC_COPY = 0x88EA;
        public static uint GL_MAX_DRAW_BUFFERS = 0x8824;
        public static uint GL_DRAW_BUFFER0 = 0x8825;
        public static uint GL_DRAW_BUFFER1 = 0x8826;
        public static uint GL_DRAW_BUFFER2 = 0x8827;
        public static uint GL_DRAW_BUFFER3 = 0x8828;
        public static uint GL_DRAW_BUFFER4 = 0x8829;
        public static uint GL_DRAW_BUFFER5 = 0x882A;
        public static uint GL_DRAW_BUFFER6 = 0x882B;
        public static uint GL_DRAW_BUFFER7 = 0x882C;
        public static uint GL_DRAW_BUFFER8 = 0x882D;
        public static uint GL_DRAW_BUFFER9 = 0x882E;
        public static uint GL_DRAW_BUFFER10 = 0x882F;
        public static uint GL_DRAW_BUFFER11 = 0x8830;
        public static uint GL_DRAW_BUFFER12 = 0x8831;
        public static uint GL_DRAW_BUFFER13 = 0x8832;
        public static uint GL_DRAW_BUFFER14 = 0x8833;
        public static uint GL_DRAW_BUFFER15 = 0x8834;
        public static uint GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
        public static uint GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
        public static uint GL_SAMPLER_3D = 0x8B5F;
        public static uint GL_SAMPLER_2D_SHADOW = 0x8B62;
        public static uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
        public static uint GL_PIXEL_PACK_BUFFER = 0x88EB;
        public static uint GL_PIXEL_UNPACK_BUFFER = 0x88EC;
        public static uint GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
        public static uint GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
        public static uint GL_FLOAT_MAT2x3 = 0x8B65;
        public static uint GL_FLOAT_MAT2x4 = 0x8B66;
        public static uint GL_FLOAT_MAT3x2 = 0x8B67;
        public static uint GL_FLOAT_MAT3x4 = 0x8B68;
        public static uint GL_FLOAT_MAT4x2 = 0x8B69;
        public static uint GL_FLOAT_MAT4x3 = 0x8B6A;
        public static uint GL_SRGB = 0x8C40;
        public static uint GL_SRGB8 = 0x8C41;
        public static uint GL_SRGB8_ALPHA8 = 0x8C43;
        public static uint GL_COMPARE_REF_TO_TEXTURE = 0x884E;
        public static uint GL_MAJOR_VERSION = 0x821B;
        public static uint GL_MINOR_VERSION = 0x821C;
        public static uint GL_NUM_EXTENSIONS = 0x821D;
        public static uint GL_RGBA32F = 0x8814;
        public static uint GL_RGB32F = 0x8815;
        public static uint GL_RGBA16F = 0x881A;
        public static uint GL_RGB16F = 0x881B;
        public static uint GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
        public static uint GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
        public static uint GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
        public static uint GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
        public static uint GL_MAX_VARYING_COMPONENTS = 0x8B4B;
        public static uint GL_TEXTURE_2D_ARRAY = 0x8C1A;
        public static uint GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
        public static uint GL_R11F_G11F_B10F = 0x8C3A;
        public static uint GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
        public static uint GL_RGB9_E5 = 0x8C3D;
        public static uint GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
        public static uint GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
        public static uint GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
        public static uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
        public static uint GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
        public static uint GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
        public static uint GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
        public static uint GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
        public static uint GL_RASTERIZER_DISCARD = 0x8C89;
        public static uint GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
        public static uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
        public static uint GL_INTERLEAVED_ATTRIBS = 0x8C8C;
        public static uint GL_SEPARATE_ATTRIBS = 0x8C8D;
        public static uint GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
        public static uint GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
        public static uint GL_RGBA32UI = 0x8D70;
        public static uint GL_RGB32UI = 0x8D71;
        public static uint GL_RGBA16UI = 0x8D76;
        public static uint GL_RGB16UI = 0x8D77;
        public static uint GL_RGBA8UI = 0x8D7C;
        public static uint GL_RGB8UI = 0x8D7D;
        public static uint GL_RGBA32I = 0x8D82;
        public static uint GL_RGB32I = 0x8D83;
        public static uint GL_RGBA16I = 0x8D88;
        public static uint GL_RGB16I = 0x8D89;
        public static uint GL_RGBA8I = 0x8D8E;
        public static uint GL_RGB8I = 0x8D8F;
        public static uint GL_RED_INTEGER = 0x8D94;
        public static uint GL_RGB_INTEGER = 0x8D98;
        public static uint GL_RGBA_INTEGER = 0x8D99;
        public static uint GL_SAMPLER_2D_ARRAY = 0x8DC1;
        public static uint GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
        public static uint GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
        public static uint GL_UNSIGNED_INT_VEC2 = 0x8DC6;
        public static uint GL_UNSIGNED_INT_VEC3 = 0x8DC7;
        public static uint GL_UNSIGNED_INT_VEC4 = 0x8DC8;
        public static uint GL_INT_SAMPLER_2D = 0x8DCA;
        public static uint GL_INT_SAMPLER_3D = 0x8DCB;
        public static uint GL_INT_SAMPLER_CUBE = 0x8DCC;
        public static uint GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
        public static uint GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
        public static uint GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
        public static uint GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
        public static uint GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
        public static uint GL_BUFFER_ACCESS_FLAGS = 0x911F;
        public static uint GL_BUFFER_MAP_LENGTH = 0x9120;
        public static uint GL_BUFFER_MAP_OFFSET = 0x9121;
        public static uint GL_DEPTH_COMPONENT32F = 0x8CAC;
        public static uint GL_DEPTH32F_STENCIL8 = 0x8CAD;
        public static uint GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
        public static uint GL_FRAMEBUFFER_DEFAULT = 0x8218;
        public static uint GL_FRAMEBUFFER_UNDEFINED = 0x8219;
        public static uint GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
        public static uint GL_DEPTH_STENCIL = 0x84F9;
        public static uint GL_UNSIGNED_INT_24_8 = 0x84FA;
        public static uint GL_DEPTH24_STENCIL8 = 0x88F0;
        public static uint GL_UNSIGNED_NORMALIZED = 0x8C17;
        public static uint GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
        public static uint GL_READ_FRAMEBUFFER = 0x8CA8;
        public static uint GL_DRAW_FRAMEBUFFER = 0x8CA9;
        public static uint GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
        public static uint GL_RENDERBUFFER_SAMPLES = 0x8CAB;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
        public static uint GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
        public static uint GL_COLOR_ATTACHMENT1 = 0x8CE1;
        public static uint GL_COLOR_ATTACHMENT2 = 0x8CE2;
        public static uint GL_COLOR_ATTACHMENT3 = 0x8CE3;
        public static uint GL_COLOR_ATTACHMENT4 = 0x8CE4;
        public static uint GL_COLOR_ATTACHMENT5 = 0x8CE5;
        public static uint GL_COLOR_ATTACHMENT6 = 0x8CE6;
        public static uint GL_COLOR_ATTACHMENT7 = 0x8CE7;
        public static uint GL_COLOR_ATTACHMENT8 = 0x8CE8;
        public static uint GL_COLOR_ATTACHMENT9 = 0x8CE9;
        public static uint GL_COLOR_ATTACHMENT10 = 0x8CEA;
        public static uint GL_COLOR_ATTACHMENT11 = 0x8CEB;
        public static uint GL_COLOR_ATTACHMENT12 = 0x8CEC;
        public static uint GL_COLOR_ATTACHMENT13 = 0x8CED;
        public static uint GL_COLOR_ATTACHMENT14 = 0x8CEE;
        public static uint GL_COLOR_ATTACHMENT15 = 0x8CEF;
        public static uint GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
        public static uint GL_MAX_SAMPLES = 0x8D57;
        public static uint GL_HALF_FLOAT = 0x140B;
        public static uint GL_MAP_READ_BIT = 0x0001;
        public static uint GL_MAP_WRITE_BIT = 0x0002;
        public static uint GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
        public static uint GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
        public static uint GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
        public static uint GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
        public static uint GL_RG = 0x8227;
        public static uint GL_RG_INTEGER = 0x8228;
        public static uint GL_R8 = 0x8229;
        public static uint GL_RG8 = 0x822B;
        public static uint GL_R16F = 0x822D;
        public static uint GL_R32F = 0x822E;
        public static uint GL_RG16F = 0x822F;
        public static uint GL_RG32F = 0x8230;
        public static uint GL_R8I = 0x8231;
        public static uint GL_R8UI = 0x8232;
        public static uint GL_R16I = 0x8233;
        public static uint GL_R16UI = 0x8234;
        public static uint GL_R32I = 0x8235;
        public static uint GL_R32UI = 0x8236;
        public static uint GL_RG8I = 0x8237;
        public static uint GL_RG8UI = 0x8238;
        public static uint GL_RG16I = 0x8239;
        public static uint GL_RG16UI = 0x823A;
        public static uint GL_RG32I = 0x823B;
        public static uint GL_RG32UI = 0x823C;
        public static uint GL_VERTEX_ARRAY_BINDING = 0x85B5;
        public static uint GL_R8_SNORM = 0x8F94;
        public static uint GL_RG8_SNORM = 0x8F95;
        public static uint GL_RGB8_SNORM = 0x8F96;
        public static uint GL_RGBA8_SNORM = 0x8F97;
        public static uint GL_SIGNED_NORMALIZED = 0x8F9C;
        public static uint GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
        public static uint GL_COPY_READ_BUFFER = 0x8F36;
        public static uint GL_COPY_WRITE_BUFFER = 0x8F37;
        public static uint GL_COPY_READ_BUFFER_BINDING = 0x8F36;
        public static uint GL_COPY_WRITE_BUFFER_BINDING = 0x8F37;
        public static uint GL_UNIFORM_BUFFER = 0x8A11;
        public static uint GL_UNIFORM_BUFFER_BINDING = 0x8A28;
        public static uint GL_UNIFORM_BUFFER_START = 0x8A29;
        public static uint GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
        public static uint GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
        public static uint GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
        public static uint GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
        public static uint GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
        public static uint GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
        public static uint GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
        public static uint GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
        public static uint GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
        public static uint GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
        public static uint GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
        public static uint GL_UNIFORM_TYPE = 0x8A37;
        public static uint GL_UNIFORM_SIZE = 0x8A38;
        public static uint GL_UNIFORM_NAME_LENGTH = 0x8A39;
        public static uint GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
        public static uint GL_UNIFORM_OFFSET = 0x8A3B;
        public static uint GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
        public static uint GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
        public static uint GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
        public static uint GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
        public static uint GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
        public static uint GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
        public static uint GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
        public static uint GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
        public static uint GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
        public static uint GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
        public static uint GL_INVALID_INDEX = 0xFFFFFFFF;
        public static uint GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
        public static uint GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
        public static uint GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
        public static uint GL_OBJECT_TYPE = 0x9112;
        public static uint GL_SYNC_CONDITION = 0x9113;
        public static uint GL_SYNC_STATUS = 0x9114;
        public static uint GL_SYNC_FLAGS = 0x9115;
        public static uint GL_SYNC_FENCE = 0x9116;
        public static uint GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
        public static uint GL_UNSIGNALED = 0x9118;
        public static uint GL_SIGNALED = 0x9119;
        public static uint GL_ALREADY_SIGNALED = 0x911A;
        public static uint GL_TIMEOUT_EXPIRED = 0x911B;
        public static uint GL_CONDITION_SATISFIED = 0x911C;
        public static uint GL_WAIT_FAILED = 0x911D;
        public static uint GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
        public static ulong GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;
        public static uint GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
        public static uint GL_ANY_SAMPLES_PASSED = 0x8C2F;
        public static uint GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
        public static uint GL_SAMPLER_BINDING = 0x8919;
        public static uint GL_RGB10_A2UI = 0x906F;
        public static uint GL_TEXTURE_SWIZZLE_R = 0x8E42;
        public static uint GL_TEXTURE_SWIZZLE_G = 0x8E43;
        public static uint GL_TEXTURE_SWIZZLE_B = 0x8E44;
        public static uint GL_TEXTURE_SWIZZLE_A = 0x8E45;
        public static uint GL_GREEN = 0x1904;
        public static uint GL_BLUE = 0x1905;
        public static uint GL_INT_2_10_10_10_REV = 0x8D9F;
        public static uint GL_TRANSFORM_FEEDBACK = 0x8E22;
        public static uint GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
        public static uint GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
        public static uint GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
        public static uint GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
        public static uint GL_PROGRAM_BINARY_LENGTH = 0x8741;
        public static uint GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
        public static uint GL_PROGRAM_BINARY_FORMATS = 0x87FF;
        public static uint GL_COMPRESSED_R11_EAC = 0x9270;
        public static uint GL_COMPRESSED_SIGNED_R11_EAC = 0x9271;
        public static uint GL_COMPRESSED_RG11_EAC = 0x9272;
        public static uint GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273;
        public static uint GL_COMPRESSED_RGB8_ETC2 = 0x9274;
        public static uint GL_COMPRESSED_SRGB8_ETC2 = 0x9275;
        public static uint GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
        public static uint GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
        public static uint GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
        public static uint GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
        public static uint GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F;
        public static uint GL_MAX_ELEMENT_INDEX = 0x8D6B;
        public static uint GL_NUM_SAMPLE_COUNTS = 0x9380;
        public static uint GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
        #endregion

        #region Commands
        public static void glAlphaFunc(uint func, float @ref)
        {
            GLESInterop.glAlphaFuncPtr(func, @ref);
        }
        public static void glClearColor(float red, float green, float blue, float alpha)
        {
            GLESInterop.glClearColorPtr(red, green, blue, alpha);
        }
        public static void glClearDepthf(float d)
        {
            GLESInterop.glClearDepthfPtr(d);
        }
        public static void glClipPlanef(uint p, IntPtr eqn)
        {
            GLESInterop.glClipPlanefPtr(p, eqn);
        }
        public static void glColor4f(float red, float green, float blue, float alpha)
        {
            GLESInterop.glColor4fPtr(red, green, blue, alpha);
        }
        public static void glDepthRangef(float n, float f)
        {
            GLESInterop.glDepthRangefPtr(n, f);
        }
        public static void glFogf(uint pname, float param)
        {
            GLESInterop.glFogfPtr(pname, param);
        }
        public static void glFogfv(uint pname, IntPtr @params)
        {
            GLESInterop.glFogfvPtr(pname, @params);
        }
        public static void glFrustumf(float l, float r, float b, float t, float n, float f)
        {
            GLESInterop.glFrustumfPtr(l, r, b, t, n, f);
        }
        public static void glGetClipPlanef(uint plane, IntPtr equation)
        {
            GLESInterop.glGetClipPlanefPtr(plane, equation);
        }
        public static void glGetFloatv(uint pname, IntPtr data)
        {
            GLESInterop.glGetFloatvPtr(pname, data);
        }
        public static void glGetLightfv(uint light, uint pname, IntPtr @params)
        {
            GLESInterop.glGetLightfvPtr(light, pname, @params);
        }
        public static void glGetMaterialfv(uint face, uint pname, IntPtr @params)
        {
            GLESInterop.glGetMaterialfvPtr(face, pname, @params);
        }
        public static void glGetTexEnvfv(uint target, uint pname, IntPtr @params)
        {
            GLESInterop.glGetTexEnvfvPtr(target, pname, @params);
        }
        public static void glGetTexParameterfv(uint target, uint pname, IntPtr @params)
        {
            GLESInterop.glGetTexParameterfvPtr(target, pname, @params);
        }
        public static void glLightModelf(uint pname, float param)
        {
            GLESInterop.glLightModelfPtr(pname, param);
        }
        public static void glLightModelfv(uint pname, IntPtr @params)
        {
            GLESInterop.glLightModelfvPtr(pname, @params);
        }
        public static void glLightf(uint light, uint pname, float param)
        {
            GLESInterop.glLightfPtr(light, pname, param);
        }
        public static void glLightfv(uint light, uint pname, IntPtr @params)
        {
            GLESInterop.glLightfvPtr(light, pname, @params);
        }
        public static void glLineWidth(float width)
        {
            GLESInterop.glLineWidthPtr(width);
        }
        public static void glLoadMatrixf(IntPtr m)
        {
            GLESInterop.glLoadMatrixfPtr(m);
        }
        public static void glMaterialf(uint face, uint pname, float param)
        {
            GLESInterop.glMaterialfPtr(face, pname, param);
        }
        public static void glMaterialfv(uint face, uint pname, IntPtr @params)
        {
            GLESInterop.glMaterialfvPtr(face, pname, @params);
        }
        public static void glMultMatrixf(IntPtr m)
        {
            GLESInterop.glMultMatrixfPtr(m);
        }
        public static void glMultiTexCoord4f(uint target, float s, float t, float r, float q)
        {
            GLESInterop.glMultiTexCoord4fPtr(target, s, t, r, q);
        }
        public static void glNormal3f(float nx, float ny, float nz)
        {
            GLESInterop.glNormal3fPtr(nx, ny, nz);
        }
        public static void glOrthof(float l, float r, float b, float t, float n, float f)
        {
            GLESInterop.glOrthofPtr(l, r, b, t, n, f);
        }
        public static void glPointParameterf(uint pname, float param)
        {
            GLESInterop.glPointParameterfPtr(pname, param);
        }
        public static void glPointParameterfv(uint pname, IntPtr @params)
        {
            GLESInterop.glPointParameterfvPtr(pname, @params);
        }
        public static void glPointSize(float size)
        {
            GLESInterop.glPointSizePtr(size);
        }
        public static void glPolygonOffset(float factor, float units)
        {
            GLESInterop.glPolygonOffsetPtr(factor, units);
        }
        public static void glRotatef(float angle, float x, float y, float z)
        {
            GLESInterop.glRotatefPtr(angle, x, y, z);
        }
        public static void glScalef(float x, float y, float z)
        {
            GLESInterop.glScalefPtr(x, y, z);
        }
        public static void glTexEnvf(uint target, uint pname, float param)
        {
            GLESInterop.glTexEnvfPtr(target, pname, param);
        }
        public static void glTexEnvfv(uint target, uint pname, IntPtr @params)
        {
            GLESInterop.glTexEnvfvPtr(target, pname, @params);
        }
        public static void glTexParameterf(uint target, uint pname, float param)
        {
            GLESInterop.glTexParameterfPtr(target, pname, param);
        }
        public static void glTexParameterfv(uint target, uint pname, IntPtr @params)
        {
            GLESInterop.glTexParameterfvPtr(target, pname, @params);
        }
        public static void glTranslatef(float x, float y, float z)
        {
            GLESInterop.glTranslatefPtr(x, y, z);
        }
        public static void glActiveTexture(uint texture)
        {
            GLESInterop.glActiveTexturePtr(texture);
        }
        public static void glAlphaFuncx(uint func, int @ref)
        {
            GLESInterop.glAlphaFuncxPtr(func, @ref);
        }
        public static void glBindBuffer(uint target, uint buffer)
        {
            GLESInterop.glBindBufferPtr(target, buffer);
        }
        public static void glBindTexture(uint target, uint texture)
        {
            GLESInterop.glBindTexturePtr(target, texture);
        }
        public static void glBlendFunc(uint sfactor, uint dfactor)
        {
            GLESInterop.glBlendFuncPtr(sfactor, dfactor);
        }
        public static void glBufferData(uint target, int size, IntPtr data, uint usage)
        {
            GLESInterop.glBufferDataPtr(target, size, data, usage);
        }
        public static void glBufferSubData(uint target, IntPtr offset, int size, IntPtr data)
        {
            GLESInterop.glBufferSubDataPtr(target, offset, size, data);
        }
        public static void glClear(uint mask)
        {
            GLESInterop.glClearPtr(mask);
        }
        public static void glClearColorx(int red, int green, int blue, int alpha)
        {
            GLESInterop.glClearColorxPtr(red, green, blue, alpha);
        }
        public static void glClearDepthx(int depth)
        {
            GLESInterop.glClearDepthxPtr(depth);
        }
        public static void glClearStencil(int s)
        {
            GLESInterop.glClearStencilPtr(s);
        }
        public static void glClientActiveTexture(uint texture)
        {
            GLESInterop.glClientActiveTexturePtr(texture);
        }
        public static void glClipPlanex(uint plane, IntPtr equation)
        {
            GLESInterop.glClipPlanexPtr(plane, equation);
        }
        public static void glColor4ub(byte red, byte green, byte blue, byte alpha)
        {
            GLESInterop.glColor4ubPtr(red, green, blue, alpha);
        }
        public static void glColor4x(int red, int green, int blue, int alpha)
        {
            GLESInterop.glColor4xPtr(red, green, blue, alpha);
        }
        public static void glColorMask(bool red, bool green, bool blue, bool alpha)
        {
            GLESInterop.glColorMaskPtr(red, green, blue, alpha);
        }
        public static void glColorPointer(int size, uint type, int stride, IntPtr pointer)
        {
            GLESInterop.glColorPointerPtr(size, type, stride, pointer);
        }
        public static void glCompressedTexImage2D(uint target, int level, uint internalformat, int width, int height, int border, int imageSize, IntPtr data)
        {
            GLESInterop.glCompressedTexImage2DPtr(target, level, internalformat, width, height, border, imageSize, data);
        }
        public static void glCompressedTexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, IntPtr data)
        {
            GLESInterop.glCompressedTexSubImage2DPtr(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }
        public static void glCopyTexImage2D(uint target, int level, uint internalformat, int x, int y, int width, int height, int border)
        {
            GLESInterop.glCopyTexImage2DPtr(target, level, internalformat, x, y, width, height, border);
        }
        public static void glCopyTexSubImage2D(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            GLESInterop.glCopyTexSubImage2DPtr(target, level, xoffset, yoffset, x, y, width, height);
        }
        public static void glCullFace(uint mode)
        {
            GLESInterop.glCullFacePtr(mode);
        }
        public static void glDeleteBuffers(int n, IntPtr buffers)
        {
            GLESInterop.glDeleteBuffersPtr(n, buffers);
        }
        public static void glDeleteTextures(int n, IntPtr textures)
        {
            GLESInterop.glDeleteTexturesPtr(n, textures);
        }
        public static void glDepthFunc(uint func)
        {
            GLESInterop.glDepthFuncPtr(func);
        }
        public static void glDepthMask(bool flag)
        {
            GLESInterop.glDepthMaskPtr(flag);
        }
        public static void glDepthRangex(int n, int f)
        {
            GLESInterop.glDepthRangexPtr(n, f);
        }
        public static void glDisable(uint cap)
        {
            GLESInterop.glDisablePtr(cap);
        }
        public static void glDisableClientState(uint array)
        {
            GLESInterop.glDisableClientStatePtr(array);
        }
        public static void glDrawArrays(uint mode, int first, int count)
        {
            GLESInterop.glDrawArraysPtr(mode, first, count);
        }
        public static void glDrawElements(uint mode, int count, uint type, IntPtr indices)
        {
            GLESInterop.glDrawElementsPtr(mode, count, type, indices);
        }
        public static void glEnable(uint cap)
        {
            GLESInterop.glEnablePtr(cap);
        }
        public static void glEnableClientState(uint array)
        {
            GLESInterop.glEnableClientStatePtr(array);
        }
        public static void glFinish()
        {
            GLESInterop.glFinishPtr();
        }
        public static void glFlush()
        {
            GLESInterop.glFlushPtr();
        }
        public static void glFogx(uint pname, int param)
        {
            GLESInterop.glFogxPtr(pname, param);
        }
        public static void glFogxv(uint pname, IntPtr param)
        {
            GLESInterop.glFogxvPtr(pname, param);
        }
        public static void glFrontFace(uint mode)
        {
            GLESInterop.glFrontFacePtr(mode);
        }
        public static void glFrustumx(int l, int r, int b, int t, int n, int f)
        {
            GLESInterop.glFrustumxPtr(l, r, b, t, n, f);
        }
        public static void glGetBooleanv(uint pname, IntPtr data)
        {
            GLESInterop.glGetBooleanvPtr(pname, data);
        }
        public static void glGetBufferParameteriv(uint target, uint pname, IntPtr @params)
        {
            GLESInterop.glGetBufferParameterivPtr(target, pname, @params);
        }
        public static void glGetClipPlanex(uint plane, IntPtr equation)
        {
            GLESInterop.glGetClipPlanexPtr(plane, equation);
        }
        public static void glGenBuffers(int n, IntPtr buffers)
        {
            GLESInterop.glGenBuffersPtr(n, buffers);
        }
        public static void glGenTextures(int n, IntPtr textures)
        {
            GLESInterop.glGenTexturesPtr(n, textures);
        }
        public static uint glGetError()
        {
            return GLESInterop.glGetErrorPtr();
        }
        public static void glGetFixedv(uint pname, IntPtr @params)
        {
            GLESInterop.glGetFixedvPtr(pname, @params);
        }
        public static void glGetIntegerv(uint pname, IntPtr data)
        {
            GLESInterop.glGetIntegervPtr(pname, data);
        }
        public static void glGetLightxv(uint light, uint pname, IntPtr @params)
        {
            GLESInterop.glGetLightxvPtr(light, pname, @params);
        }
        public static void glGetMaterialxv(uint face, uint pname, IntPtr @params)
        {
            GLESInterop.glGetMaterialxvPtr(face, pname, @params);
        }
        public static void glGetPointerv(uint pname, IntPtr @params)
        {
            GLESInterop.glGetPointervPtr(pname, @params);
        }
        public static IntPtr glGetString(uint name)
        {
            return GLESInterop.glGetStringPtr(name);
        }
        public static void glGetTexEnviv(uint target, uint pname, IntPtr @params)
        {
            GLESInterop.glGetTexEnvivPtr(target, pname, @params);
        }
        public static void glGetTexEnvxv(uint target, uint pname, IntPtr @params)
        {
            GLESInterop.glGetTexEnvxvPtr(target, pname, @params);
        }
        public static void glGetTexParameteriv(uint target, uint pname, IntPtr @params)
        {
            GLESInterop.glGetTexParameterivPtr(target, pname, @params);
        }
        public static void glGetTexParameterxv(uint target, uint pname, IntPtr @params)
        {
            GLESInterop.glGetTexParameterxvPtr(target, pname, @params);
        }
        public static void glHint(uint target, uint mode)
        {
            GLESInterop.glHintPtr(target, mode);
        }
        public static bool glIsBuffer(uint buffer)
        {
            return GLESInterop.glIsBufferPtr(buffer);
        }
        public static bool glIsEnabled(uint cap)
        {
            return GLESInterop.glIsEnabledPtr(cap);
        }
        public static bool glIsTexture(uint texture)
        {
            return GLESInterop.glIsTexturePtr(texture);
        }
        public static void glLightModelx(uint pname, int param)
        {
            GLESInterop.glLightModelxPtr(pname, param);
        }
        public static void glLightModelxv(uint pname, IntPtr param)
        {
            GLESInterop.glLightModelxvPtr(pname, param);
        }
        public static void glLightx(uint light, uint pname, int param)
        {
            GLESInterop.glLightxPtr(light, pname, param);
        }
        public static void glLightxv(uint light, uint pname, IntPtr @params)
        {
            GLESInterop.glLightxvPtr(light, pname, @params);
        }
        public static void glLineWidthx(int width)
        {
            GLESInterop.glLineWidthxPtr(width);
        }
        public static void glLoadIdentity()
        {
            GLESInterop.glLoadIdentityPtr();
        }
        public static void glLoadMatrixx(IntPtr m)
        {
            GLESInterop.glLoadMatrixxPtr(m);
        }
        public static void glLogicOp(uint opcode)
        {
            GLESInterop.glLogicOpPtr(opcode);
        }
        public static void glMaterialx(uint face, uint pname, int param)
        {
            GLESInterop.glMaterialxPtr(face, pname, param);
        }
        public static void glMaterialxv(uint face, uint pname, IntPtr param)
        {
            GLESInterop.glMaterialxvPtr(face, pname, param);
        }
        public static void glMatrixMode(uint mode)
        {
            GLESInterop.glMatrixModePtr(mode);
        }
        public static void glMultMatrixx(IntPtr m)
        {
            GLESInterop.glMultMatrixxPtr(m);
        }
        public static void glMultiTexCoord4x(uint texture, int s, int t, int r, int q)
        {
            GLESInterop.glMultiTexCoord4xPtr(texture, s, t, r, q);
        }
        public static void glNormal3x(int nx, int ny, int nz)
        {
            GLESInterop.glNormal3xPtr(nx, ny, nz);
        }
        public static void glNormalPointer(uint type, int stride, IntPtr pointer)
        {
            GLESInterop.glNormalPointerPtr(type, stride, pointer);
        }
        public static void glOrthox(int l, int r, int b, int t, int n, int f)
        {
            GLESInterop.glOrthoxPtr(l, r, b, t, n, f);
        }
        public static void glPixelStorei(uint pname, int param)
        {
            GLESInterop.glPixelStoreiPtr(pname, param);
        }
        public static void glPointParameterx(uint pname, int param)
        {
            GLESInterop.glPointParameterxPtr(pname, param);
        }
        public static void glPointParameterxv(uint pname, IntPtr @params)
        {
            GLESInterop.glPointParameterxvPtr(pname, @params);
        }
        public static void glPointSizex(int size)
        {
            GLESInterop.glPointSizexPtr(size);
        }
        public static void glPolygonOffsetx(int factor, int units)
        {
            GLESInterop.glPolygonOffsetxPtr(factor, units);
        }
        public static void glPopMatrix()
        {
            GLESInterop.glPopMatrixPtr();
        }
        public static void glPushMatrix()
        {
            GLESInterop.glPushMatrixPtr();
        }
        public static void glReadPixels(int x, int y, int width, int height, uint format, uint type, IntPtr pixels)
        {
            GLESInterop.glReadPixelsPtr(x, y, width, height, format, type, pixels);
        }
        public static void glRotatex(int angle, int x, int y, int z)
        {
            GLESInterop.glRotatexPtr(angle, x, y, z);
        }
        public static void glSampleCoverage(float value, bool invert)
        {
            GLESInterop.glSampleCoveragePtr(value, invert);
        }
        public static void glSampleCoveragex(int value, bool invert)
        {
            GLESInterop.glSampleCoveragexPtr(value, invert);
        }
        public static void glScalex(int x, int y, int z)
        {
            GLESInterop.glScalexPtr(x, y, z);
        }
        public static void glScissor(int x, int y, int width, int height)
        {
            GLESInterop.glScissorPtr(x, y, width, height);
        }
        public static void glShadeModel(uint mode)
        {
            GLESInterop.glShadeModelPtr(mode);
        }
        public static void glStencilFunc(uint func, int @ref, uint mask)
        {
            GLESInterop.glStencilFuncPtr(func, @ref, mask);
        }
        public static void glStencilMask(uint mask)
        {
            GLESInterop.glStencilMaskPtr(mask);
        }
        public static void glStencilOp(uint fail, uint zfail, uint zpass)
        {
            GLESInterop.glStencilOpPtr(fail, zfail, zpass);
        }
        public static void glTexCoordPointer(int size, uint type, int stride, IntPtr pointer)
        {
            GLESInterop.glTexCoordPointerPtr(size, type, stride, pointer);
        }
        public static void glTexEnvi(uint target, uint pname, int param)
        {
            GLESInterop.glTexEnviPtr(target, pname, param);
        }
        public static void glTexEnvx(uint target, uint pname, int param)
        {
            GLESInterop.glTexEnvxPtr(target, pname, param);
        }
        public static void glTexEnviv(uint target, uint pname, IntPtr @params)
        {
            GLESInterop.glTexEnvivPtr(target, pname, @params);
        }
        public static void glTexEnvxv(uint target, uint pname, IntPtr @params)
        {
            GLESInterop.glTexEnvxvPtr(target, pname, @params);
        }
        public static void glTexImage2D(uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, IntPtr pixels)
        {
            GLESInterop.glTexImage2DPtr(target, level, internalformat, width, height, border, format, type, pixels);
        }
        public static void glTexParameteri(uint target, uint pname, int param)
        {
            GLESInterop.glTexParameteriPtr(target, pname, param);
        }
        public static void glTexParameterx(uint target, uint pname, int param)
        {
            GLESInterop.glTexParameterxPtr(target, pname, param);
        }
        public static void glTexParameteriv(uint target, uint pname, IntPtr @params)
        {
            GLESInterop.glTexParameterivPtr(target, pname, @params);
        }
        public static void glTexParameterxv(uint target, uint pname, IntPtr @params)
        {
            GLESInterop.glTexParameterxvPtr(target, pname, @params);
        }
        public static void glTexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, IntPtr pixels)
        {
            GLESInterop.glTexSubImage2DPtr(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }
        public static void glTranslatex(int x, int y, int z)
        {
            GLESInterop.glTranslatexPtr(x, y, z);
        }
        public static void glVertexPointer(int size, uint type, int stride, IntPtr pointer)
        {
            GLESInterop.glVertexPointerPtr(size, type, stride, pointer);
        }
        public static void glViewport(int x, int y, int width, int height)
        {
            GLESInterop.glViewportPtr(x, y, width, height);
        }
        public static void glAttachShader(uint program, uint shader)
        {
            GLESInterop.glAttachShaderPtr(program, shader);
        }
        public static void glBindAttribLocation(uint program, uint index, IntPtr name)
        {
            GLESInterop.glBindAttribLocationPtr(program, index, name);
        }
        public static void glBindFramebuffer(uint target, uint framebuffer)
        {
            GLESInterop.glBindFramebufferPtr(target, framebuffer);
        }
        public static void glBindRenderbuffer(uint target, uint renderbuffer)
        {
            GLESInterop.glBindRenderbufferPtr(target, renderbuffer);
        }
        public static void glBlendColor(float red, float green, float blue, float alpha)
        {
            GLESInterop.glBlendColorPtr(red, green, blue, alpha);
        }
        public static void glBlendEquation(uint mode)
        {
            GLESInterop.glBlendEquationPtr(mode);
        }
        public static void glBlendEquationSeparate(uint modeRGB, uint modeAlpha)
        {
            GLESInterop.glBlendEquationSeparatePtr(modeRGB, modeAlpha);
        }
        public static void glBlendFuncSeparate(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha)
        {
            GLESInterop.glBlendFuncSeparatePtr(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }
        public static uint glCheckFramebufferStatus(uint target)
        {
            return GLESInterop.glCheckFramebufferStatusPtr(target);
        }
        public static void glCompileShader(uint shader)
        {
            GLESInterop.glCompileShaderPtr(shader);
        }
        public static uint glCreateProgram()
        {
            return GLESInterop.glCreateProgramPtr();
        }
        public static uint glCreateShader(uint type)
        {
            return GLESInterop.glCreateShaderPtr(type);
        }
        public static void glDeleteFramebuffers(int n, IntPtr framebuffers)
        {
            GLESInterop.glDeleteFramebuffersPtr(n, framebuffers);
        }
        public static void glDeleteProgram(uint program)
        {
            GLESInterop.glDeleteProgramPtr(program);
        }
        public static void glDeleteRenderbuffers(int n, IntPtr renderbuffers)
        {
            GLESInterop.glDeleteRenderbuffersPtr(n, renderbuffers);
        }
        public static void glDeleteShader(uint shader)
        {
            GLESInterop.glDeleteShaderPtr(shader);
        }
        public static void glDetachShader(uint program, uint shader)
        {
            GLESInterop.glDetachShaderPtr(program, shader);
        }
        public static void glDisableVertexAttribArray(uint index)
        {
            GLESInterop.glDisableVertexAttribArrayPtr(index);
        }
        public static void glEnableVertexAttribArray(uint index)
        {
            GLESInterop.glEnableVertexAttribArrayPtr(index);
        }
        public static void glFramebufferRenderbuffer(uint target, uint attachment, uint renderbuffertarget, uint renderbuffer)
        {
            GLESInterop.glFramebufferRenderbufferPtr(target, attachment, renderbuffertarget, renderbuffer);
        }
        public static void glFramebufferTexture2D(uint target, uint attachment, uint textarget, uint texture, int level)
        {
            GLESInterop.glFramebufferTexture2DPtr(target, attachment, textarget, texture, level);
        }
        public static void glGenerateMipmap(uint target)
        {
            GLESInterop.glGenerateMipmapPtr(target);
        }
        public static void glGenFramebuffers(int n, IntPtr framebuffers)
        {
            GLESInterop.glGenFramebuffersPtr(n, framebuffers);
        }
        public static void glGenRenderbuffers(int n, IntPtr renderbuffers)
        {
            GLESInterop.glGenRenderbuffersPtr(n, renderbuffers);
        }
        public static void glGetActiveAttrib(uint program, uint index, int bufSize, IntPtr length, IntPtr size, IntPtr type, IntPtr name)
        {
            GLESInterop.glGetActiveAttribPtr(program, index, bufSize, length, size, type, name);
        }
        public static void glGetActiveUniform(uint program, uint index, int bufSize, IntPtr length, IntPtr size, IntPtr type, IntPtr name)
        {
            GLESInterop.glGetActiveUniformPtr(program, index, bufSize, length, size, type, name);
        }
        public static void glGetAttachedShaders(uint program, int maxCount, IntPtr count, IntPtr shaders)
        {
            GLESInterop.glGetAttachedShadersPtr(program, maxCount, count, shaders);
        }
        public static int glGetAttribLocation(uint program, IntPtr name)
        {
            return GLESInterop.glGetAttribLocationPtr(program, name);
        }
        public static void glGetFramebufferAttachmentParameteriv(uint target, uint attachment, uint pname, IntPtr @params)
        {
            GLESInterop.glGetFramebufferAttachmentParameterivPtr(target, attachment, pname, @params);
        }
        public static void glGetProgramiv(uint program, uint pname, IntPtr @params)
        {
            GLESInterop.glGetProgramivPtr(program, pname, @params);
        }
        public static void glGetProgramInfoLog(uint program, int bufSize, IntPtr length, IntPtr infoLog)
        {
            GLESInterop.glGetProgramInfoLogPtr(program, bufSize, length, infoLog);
        }
        public static void glGetRenderbufferParameteriv(uint target, uint pname, IntPtr @params)
        {
            GLESInterop.glGetRenderbufferParameterivPtr(target, pname, @params);
        }
        public static void glGetShaderiv(uint shader, uint pname, IntPtr @params)
        {
            GLESInterop.glGetShaderivPtr(shader, pname, @params);
        }
        public static void glGetShaderInfoLog(uint shader, int bufSize, IntPtr length, IntPtr infoLog)
        {
            GLESInterop.glGetShaderInfoLogPtr(shader, bufSize, length, infoLog);
        }
        public static void glGetShaderPrecisionFormat(uint shadertype, uint precisiontype, IntPtr range, IntPtr precision)
        {
            GLESInterop.glGetShaderPrecisionFormatPtr(shadertype, precisiontype, range, precision);
        }
        public static void glGetShaderSource(uint shader, int bufSize, IntPtr length, IntPtr source)
        {
            GLESInterop.glGetShaderSourcePtr(shader, bufSize, length, source);
        }
        public static void glGetUniformfv(uint program, int location, IntPtr @params)
        {
            GLESInterop.glGetUniformfvPtr(program, location, @params);
        }
        public static void glGetUniformiv(uint program, int location, IntPtr @params)
        {
            GLESInterop.glGetUniformivPtr(program, location, @params);
        }
        public static int glGetUniformLocation(uint program, IntPtr name)
        {
            return GLESInterop.glGetUniformLocationPtr(program, name);
        }
        public static void glGetVertexAttribfv(uint index, uint pname, IntPtr @params)
        {
            GLESInterop.glGetVertexAttribfvPtr(index, pname, @params);
        }
        public static void glGetVertexAttribiv(uint index, uint pname, IntPtr @params)
        {
            GLESInterop.glGetVertexAttribivPtr(index, pname, @params);
        }
        public static void glGetVertexAttribPointerv(uint index, uint pname, IntPtr pointer)
        {
            GLESInterop.glGetVertexAttribPointervPtr(index, pname, pointer);
        }
        public static bool glIsFramebuffer(uint framebuffer)
        {
            return GLESInterop.glIsFramebufferPtr(framebuffer);
        }
        public static bool glIsProgram(uint program)
        {
            return GLESInterop.glIsProgramPtr(program);
        }
        public static bool glIsRenderbuffer(uint renderbuffer)
        {
            return GLESInterop.glIsRenderbufferPtr(renderbuffer);
        }
        public static bool glIsShader(uint shader)
        {
            return GLESInterop.glIsShaderPtr(shader);
        }
        public static void glLinkProgram(uint program)
        {
            GLESInterop.glLinkProgramPtr(program);
        }
        public static void glReleaseShaderCompiler()
        {
            GLESInterop.glReleaseShaderCompilerPtr();
        }
        public static void glRenderbufferStorage(uint target, uint internalformat, int width, int height)
        {
            GLESInterop.glRenderbufferStoragePtr(target, internalformat, width, height);
        }
        public static void glShaderBinary(int count, IntPtr shaders, uint binaryformat, IntPtr binary, int length)
        {
            GLESInterop.glShaderBinaryPtr(count, shaders, binaryformat, binary, length);
        }
        public static void glShaderSource(uint shader, int count, IntPtr @string, IntPtr length)
        {
            GLESInterop.glShaderSourcePtr(shader, count, @string, length);
        }
        public static void glStencilFuncSeparate(uint face, uint func, int @ref, uint mask)
        {
            GLESInterop.glStencilFuncSeparatePtr(face, func, @ref, mask);
        }
        public static void glStencilMaskSeparate(uint face, uint mask)
        {
            GLESInterop.glStencilMaskSeparatePtr(face, mask);
        }
        public static void glStencilOpSeparate(uint face, uint sfail, uint dpfail, uint dppass)
        {
            GLESInterop.glStencilOpSeparatePtr(face, sfail, dpfail, dppass);
        }
        public static void glUniform1f(int location, float v0)
        {
            GLESInterop.glUniform1fPtr(location, v0);
        }
        public static void glUniform1fv(int location, int count, IntPtr value)
        {
            GLESInterop.glUniform1fvPtr(location, count, value);
        }
        public static void glUniform1i(int location, int v0)
        {
            GLESInterop.glUniform1iPtr(location, v0);
        }
        public static void glUniform1iv(int location, int count, IntPtr value)
        {
            GLESInterop.glUniform1ivPtr(location, count, value);
        }
        public static void glUniform2f(int location, float v0, float v1)
        {
            GLESInterop.glUniform2fPtr(location, v0, v1);
        }
        public static void glUniform2fv(int location, int count, IntPtr value)
        {
            GLESInterop.glUniform2fvPtr(location, count, value);
        }
        public static void glUniform2i(int location, int v0, int v1)
        {
            GLESInterop.glUniform2iPtr(location, v0, v1);
        }
        public static void glUniform2iv(int location, int count, IntPtr value)
        {
            GLESInterop.glUniform2ivPtr(location, count, value);
        }
        public static void glUniform3f(int location, float v0, float v1, float v2)
        {
            GLESInterop.glUniform3fPtr(location, v0, v1, v2);
        }
        public static void glUniform3fv(int location, int count, IntPtr value)
        {
            GLESInterop.glUniform3fvPtr(location, count, value);
        }
        public static void glUniform3i(int location, int v0, int v1, int v2)
        {
            GLESInterop.glUniform3iPtr(location, v0, v1, v2);
        }
        public static void glUniform3iv(int location, int count, IntPtr value)
        {
            GLESInterop.glUniform3ivPtr(location, count, value);
        }
        public static void glUniform4f(int location, float v0, float v1, float v2, float v3)
        {
            GLESInterop.glUniform4fPtr(location, v0, v1, v2, v3);
        }
        public static void glUniform4fv(int location, int count, IntPtr value)
        {
            GLESInterop.glUniform4fvPtr(location, count, value);
        }
        public static void glUniform4i(int location, int v0, int v1, int v2, int v3)
        {
            GLESInterop.glUniform4iPtr(location, v0, v1, v2, v3);
        }
        public static void glUniform4iv(int location, int count, IntPtr value)
        {
            GLESInterop.glUniform4ivPtr(location, count, value);
        }
        public static void glUniformMatrix2fv(int location, int count, bool transpose, IntPtr value)
        {
            GLESInterop.glUniformMatrix2fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix3fv(int location, int count, bool transpose, IntPtr value)
        {
            GLESInterop.glUniformMatrix3fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix4fv(int location, int count, bool transpose, IntPtr value)
        {
            GLESInterop.glUniformMatrix4fvPtr(location, count, transpose, value);
        }
        public static void glUseProgram(uint program)
        {
            GLESInterop.glUseProgramPtr(program);
        }
        public static void glValidateProgram(uint program)
        {
            GLESInterop.glValidateProgramPtr(program);
        }
        public static void glVertexAttrib1f(uint index, float x)
        {
            GLESInterop.glVertexAttrib1fPtr(index, x);
        }
        public static void glVertexAttrib1fv(uint index, IntPtr v)
        {
            GLESInterop.glVertexAttrib1fvPtr(index, v);
        }
        public static void glVertexAttrib2f(uint index, float x, float y)
        {
            GLESInterop.glVertexAttrib2fPtr(index, x, y);
        }
        public static void glVertexAttrib2fv(uint index, IntPtr v)
        {
            GLESInterop.glVertexAttrib2fvPtr(index, v);
        }
        public static void glVertexAttrib3f(uint index, float x, float y, float z)
        {
            GLESInterop.glVertexAttrib3fPtr(index, x, y, z);
        }
        public static void glVertexAttrib3fv(uint index, IntPtr v)
        {
            GLESInterop.glVertexAttrib3fvPtr(index, v);
        }
        public static void glVertexAttrib4f(uint index, float x, float y, float z, float w)
        {
            GLESInterop.glVertexAttrib4fPtr(index, x, y, z, w);
        }
        public static void glVertexAttrib4fv(uint index, IntPtr v)
        {
            GLESInterop.glVertexAttrib4fvPtr(index, v);
        }
        public static void glVertexAttribPointer(uint index, int size, uint type, bool normalized, int stride, IntPtr pointer)
        {
            GLESInterop.glVertexAttribPointerPtr(index, size, type, normalized, stride, pointer);
        }
        public static void glReadBuffer(uint mode)
        {
            GLESInterop.glReadBufferPtr(mode);
        }
        public static void glDrawRangeElements(uint mode, uint start, uint end, int count, uint type, IntPtr indices)
        {
            GLESInterop.glDrawRangeElementsPtr(mode, start, end, count, type, indices);
        }
        public static void glTexImage3D(uint target, int level, int internalformat, int width, int height, int depth, int border, uint format, uint type, IntPtr pixels)
        {
            GLESInterop.glTexImage3DPtr(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }
        public static void glTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, IntPtr pixels)
        {
            GLESInterop.glTexSubImage3DPtr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        public static void glCopyTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            GLESInterop.glCopyTexSubImage3DPtr(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        public static void glCompressedTexImage3D(uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
        {
            GLESInterop.glCompressedTexImage3DPtr(target, level, internalformat, width, height, depth, border, imageSize, data);
        }
        public static void glCompressedTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, IntPtr data)
        {
            GLESInterop.glCompressedTexSubImage3DPtr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }
        public static void glGenQueries(int n, IntPtr ids)
        {
            GLESInterop.glGenQueriesPtr(n, ids);
        }
        public static void glDeleteQueries(int n, IntPtr ids)
        {
            GLESInterop.glDeleteQueriesPtr(n, ids);
        }
        public static bool glIsQuery(uint id)
        {
            return GLESInterop.glIsQueryPtr(id);
        }
        public static void glBeginQuery(uint target, uint id)
        {
            GLESInterop.glBeginQueryPtr(target, id);
        }
        public static void glEndQuery(uint target)
        {
            GLESInterop.glEndQueryPtr(target);
        }
        public static void glGetQueryiv(uint target, uint pname, IntPtr @params)
        {
            GLESInterop.glGetQueryivPtr(target, pname, @params);
        }
        public static void glGetQueryObjectuiv(uint id, uint pname, IntPtr @params)
        {
            GLESInterop.glGetQueryObjectuivPtr(id, pname, @params);
        }
        public static bool glUnmapBuffer(uint target)
        {
            return GLESInterop.glUnmapBufferPtr(target);
        }
        public static void glGetBufferPointerv(uint target, uint pname, IntPtr @params)
        {
            GLESInterop.glGetBufferPointervPtr(target, pname, @params);
        }
        public static void glDrawBuffers(int n, IntPtr bufs)
        {
            GLESInterop.glDrawBuffersPtr(n, bufs);
        }
        public static void glUniformMatrix2x3fv(int location, int count, bool transpose, IntPtr value)
        {
            GLESInterop.glUniformMatrix2x3fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix3x2fv(int location, int count, bool transpose, IntPtr value)
        {
            GLESInterop.glUniformMatrix3x2fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix2x4fv(int location, int count, bool transpose, IntPtr value)
        {
            GLESInterop.glUniformMatrix2x4fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix4x2fv(int location, int count, bool transpose, IntPtr value)
        {
            GLESInterop.glUniformMatrix4x2fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix3x4fv(int location, int count, bool transpose, IntPtr value)
        {
            GLESInterop.glUniformMatrix3x4fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix4x3fv(int location, int count, bool transpose, IntPtr value)
        {
            GLESInterop.glUniformMatrix4x3fvPtr(location, count, transpose, value);
        }
        public static void glBlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter)
        {
            GLESInterop.glBlitFramebufferPtr(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        public static void glRenderbufferStorageMultisample(uint target, int samples, uint internalformat, int width, int height)
        {
            GLESInterop.glRenderbufferStorageMultisamplePtr(target, samples, internalformat, width, height);
        }
        public static void glFramebufferTextureLayer(uint target, uint attachment, uint texture, int level, int layer)
        {
            GLESInterop.glFramebufferTextureLayerPtr(target, attachment, texture, level, layer);
        }
        public static IntPtr glMapBufferRange(uint target, IntPtr offset, int length, uint access)
        {
            return GLESInterop.glMapBufferRangePtr(target, offset, length, access);
        }
        public static void glFlushMappedBufferRange(uint target, IntPtr offset, int length)
        {
            GLESInterop.glFlushMappedBufferRangePtr(target, offset, length);
        }
        public static void glBindVertexArray(uint array)
        {
            GLESInterop.glBindVertexArrayPtr(array);
        }
        public static void glDeleteVertexArrays(int n, IntPtr arrays)
        {
            GLESInterop.glDeleteVertexArraysPtr(n, arrays);
        }
        public static void glGenVertexArrays(int n, IntPtr arrays)
        {
            GLESInterop.glGenVertexArraysPtr(n, arrays);
        }
        public static bool glIsVertexArray(uint array)
        {
            return GLESInterop.glIsVertexArrayPtr(array);
        }
        public static void glGetIntegeri_v(uint target, uint index, IntPtr data)
        {
            GLESInterop.glGetIntegeri_vPtr(target, index, data);
        }
        public static void glBeginTransformFeedback(uint primitiveMode)
        {
            GLESInterop.glBeginTransformFeedbackPtr(primitiveMode);
        }
        public static void glEndTransformFeedback()
        {
            GLESInterop.glEndTransformFeedbackPtr();
        }
        public static void glBindBufferRange(uint target, uint index, uint buffer, IntPtr offset, int size)
        {
            GLESInterop.glBindBufferRangePtr(target, index, buffer, offset, size);
        }
        public static void glBindBufferBase(uint target, uint index, uint buffer)
        {
            GLESInterop.glBindBufferBasePtr(target, index, buffer);
        }
        public static void glTransformFeedbackVaryings(uint program, int count, IntPtr varyings, uint bufferMode)
        {
            GLESInterop.glTransformFeedbackVaryingsPtr(program, count, varyings, bufferMode);
        }
        public static void glGetTransformFeedbackVarying(uint program, uint index, int bufSize, IntPtr length, IntPtr size, IntPtr type, IntPtr name)
        {
            GLESInterop.glGetTransformFeedbackVaryingPtr(program, index, bufSize, length, size, type, name);
        }
        public static void glVertexAttribIPointer(uint index, int size, uint type, int stride, IntPtr pointer)
        {
            GLESInterop.glVertexAttribIPointerPtr(index, size, type, stride, pointer);
        }
        public static void glGetVertexAttribIiv(uint index, uint pname, IntPtr @params)
        {
            GLESInterop.glGetVertexAttribIivPtr(index, pname, @params);
        }
        public static void glGetVertexAttribIuiv(uint index, uint pname, IntPtr @params)
        {
            GLESInterop.glGetVertexAttribIuivPtr(index, pname, @params);
        }
        public static void glVertexAttribI4i(uint index, int x, int y, int z, int w)
        {
            GLESInterop.glVertexAttribI4iPtr(index, x, y, z, w);
        }
        public static void glVertexAttribI4ui(uint index, uint x, uint y, uint z, uint w)
        {
            GLESInterop.glVertexAttribI4uiPtr(index, x, y, z, w);
        }
        public static void glVertexAttribI4iv(uint index, IntPtr v)
        {
            GLESInterop.glVertexAttribI4ivPtr(index, v);
        }
        public static void glVertexAttribI4uiv(uint index, IntPtr v)
        {
            GLESInterop.glVertexAttribI4uivPtr(index, v);
        }
        public static void glGetUniformuiv(uint program, int location, IntPtr @params)
        {
            GLESInterop.glGetUniformuivPtr(program, location, @params);
        }
        public static int glGetFragDataLocation(uint program, IntPtr name)
        {
            return GLESInterop.glGetFragDataLocationPtr(program, name);
        }
        public static void glUniform1ui(int location, uint v0)
        {
            GLESInterop.glUniform1uiPtr(location, v0);
        }
        public static void glUniform2ui(int location, uint v0, uint v1)
        {
            GLESInterop.glUniform2uiPtr(location, v0, v1);
        }
        public static void glUniform3ui(int location, uint v0, uint v1, uint v2)
        {
            GLESInterop.glUniform3uiPtr(location, v0, v1, v2);
        }
        public static void glUniform4ui(int location, uint v0, uint v1, uint v2, uint v3)
        {
            GLESInterop.glUniform4uiPtr(location, v0, v1, v2, v3);
        }
        public static void glUniform1uiv(int location, int count, IntPtr value)
        {
            GLESInterop.glUniform1uivPtr(location, count, value);
        }
        public static void glUniform2uiv(int location, int count, IntPtr value)
        {
            GLESInterop.glUniform2uivPtr(location, count, value);
        }
        public static void glUniform3uiv(int location, int count, IntPtr value)
        {
            GLESInterop.glUniform3uivPtr(location, count, value);
        }
        public static void glUniform4uiv(int location, int count, IntPtr value)
        {
            GLESInterop.glUniform4uivPtr(location, count, value);
        }
        public static void glClearBufferiv(uint buffer, int drawbuffer, IntPtr value)
        {
            GLESInterop.glClearBufferivPtr(buffer, drawbuffer, value);
        }
        public static void glClearBufferuiv(uint buffer, int drawbuffer, IntPtr value)
        {
            GLESInterop.glClearBufferuivPtr(buffer, drawbuffer, value);
        }
        public static void glClearBufferfv(uint buffer, int drawbuffer, IntPtr value)
        {
            GLESInterop.glClearBufferfvPtr(buffer, drawbuffer, value);
        }
        public static void glClearBufferfi(uint buffer, int drawbuffer, float depth, int stencil)
        {
            GLESInterop.glClearBufferfiPtr(buffer, drawbuffer, depth, stencil);
        }
        public static IntPtr glGetStringi(uint name, uint index)
        {
            return GLESInterop.glGetStringiPtr(name, index);
        }
        public static void glCopyBufferSubData(uint readTarget, uint writeTarget, IntPtr readOffset, IntPtr writeOffset, int size)
        {
            GLESInterop.glCopyBufferSubDataPtr(readTarget, writeTarget, readOffset, writeOffset, size);
        }
        public static void glGetUniformIndices(uint program, int uniformCount, IntPtr uniformNames, IntPtr uniformIndices)
        {
            GLESInterop.glGetUniformIndicesPtr(program, uniformCount, uniformNames, uniformIndices);
        }
        public static void glGetActiveUniformsiv(uint program, int uniformCount, IntPtr uniformIndices, uint pname, IntPtr @params)
        {
            GLESInterop.glGetActiveUniformsivPtr(program, uniformCount, uniformIndices, pname, @params);
        }
        public static uint glGetUniformBlockIndex(uint program, IntPtr uniformBlockName)
        {
            return GLESInterop.glGetUniformBlockIndexPtr(program, uniformBlockName);
        }
        public static void glGetActiveUniformBlockiv(uint program, uint uniformBlockIndex, uint pname, IntPtr @params)
        {
            GLESInterop.glGetActiveUniformBlockivPtr(program, uniformBlockIndex, pname, @params);
        }
        public static void glGetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, IntPtr length, IntPtr uniformBlockName)
        {
            GLESInterop.glGetActiveUniformBlockNamePtr(program, uniformBlockIndex, bufSize, length, uniformBlockName);
        }
        public static void glUniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding)
        {
            GLESInterop.glUniformBlockBindingPtr(program, uniformBlockIndex, uniformBlockBinding);
        }
        public static void glDrawArraysInstanced(uint mode, int first, int count, int instancecount)
        {
            GLESInterop.glDrawArraysInstancedPtr(mode, first, count, instancecount);
        }
        public static void glDrawElementsInstanced(uint mode, int count, uint type, IntPtr indices, int instancecount)
        {
            GLESInterop.glDrawElementsInstancedPtr(mode, count, type, indices, instancecount);
        }
        public static IntPtr glFenceSync(uint condition, uint flags)
        {
            return GLESInterop.glFenceSyncPtr(condition, flags);
        }
        public static bool glIsSync(IntPtr sync)
        {
            return GLESInterop.glIsSyncPtr(sync);
        }
        public static void glDeleteSync(IntPtr sync)
        {
            GLESInterop.glDeleteSyncPtr(sync);
        }
        public static uint glClientWaitSync(IntPtr sync, uint flags, ulong timeout)
        {
            return GLESInterop.glClientWaitSyncPtr(sync, flags, timeout);
        }
        public static void glWaitSync(IntPtr sync, uint flags, ulong timeout)
        {
            GLESInterop.glWaitSyncPtr(sync, flags, timeout);
        }
        public static void glGetInteger64v(uint pname, IntPtr data)
        {
            GLESInterop.glGetInteger64vPtr(pname, data);
        }
        public static void glGetSynciv(IntPtr sync, uint pname, int bufSize, IntPtr length, IntPtr values)
        {
            GLESInterop.glGetSyncivPtr(sync, pname, bufSize, length, values);
        }
        public static void glGetInteger64i_v(uint target, uint index, IntPtr data)
        {
            GLESInterop.glGetInteger64i_vPtr(target, index, data);
        }
        public static void glGetBufferParameteri64v(uint target, uint pname, IntPtr @params)
        {
            GLESInterop.glGetBufferParameteri64vPtr(target, pname, @params);
        }
        public static void glGenSamplers(int count, IntPtr samplers)
        {
            GLESInterop.glGenSamplersPtr(count, samplers);
        }
        public static void glDeleteSamplers(int count, IntPtr samplers)
        {
            GLESInterop.glDeleteSamplersPtr(count, samplers);
        }
        public static bool glIsSampler(uint sampler)
        {
            return GLESInterop.glIsSamplerPtr(sampler);
        }
        public static void glBindSampler(uint unit, uint sampler)
        {
            GLESInterop.glBindSamplerPtr(unit, sampler);
        }
        public static void glSamplerParameteri(uint sampler, uint pname, int param)
        {
            GLESInterop.glSamplerParameteriPtr(sampler, pname, param);
        }
        public static void glSamplerParameteriv(uint sampler, uint pname, IntPtr param)
        {
            GLESInterop.glSamplerParameterivPtr(sampler, pname, param);
        }
        public static void glSamplerParameterf(uint sampler, uint pname, float param)
        {
            GLESInterop.glSamplerParameterfPtr(sampler, pname, param);
        }
        public static void glSamplerParameterfv(uint sampler, uint pname, IntPtr param)
        {
            GLESInterop.glSamplerParameterfvPtr(sampler, pname, param);
        }
        public static void glGetSamplerParameteriv(uint sampler, uint pname, IntPtr @params)
        {
            GLESInterop.glGetSamplerParameterivPtr(sampler, pname, @params);
        }
        public static void glGetSamplerParameterfv(uint sampler, uint pname, IntPtr @params)
        {
            GLESInterop.glGetSamplerParameterfvPtr(sampler, pname, @params);
        }
        public static void glVertexAttribDivisor(uint index, uint divisor)
        {
            GLESInterop.glVertexAttribDivisorPtr(index, divisor);
        }
        public static void glBindTransformFeedback(uint target, uint id)
        {
            GLESInterop.glBindTransformFeedbackPtr(target, id);
        }
        public static void glDeleteTransformFeedbacks(int n, IntPtr ids)
        {
            GLESInterop.glDeleteTransformFeedbacksPtr(n, ids);
        }
        public static void glGenTransformFeedbacks(int n, IntPtr ids)
        {
            GLESInterop.glGenTransformFeedbacksPtr(n, ids);
        }
        public static bool glIsTransformFeedback(uint id)
        {
            return GLESInterop.glIsTransformFeedbackPtr(id);
        }
        public static void glPauseTransformFeedback()
        {
            GLESInterop.glPauseTransformFeedbackPtr();
        }
        public static void glResumeTransformFeedback()
        {
            GLESInterop.glResumeTransformFeedbackPtr();
        }
        public static void glGetProgramBinary(uint program, int bufSize, IntPtr length, IntPtr binaryFormat, IntPtr binary)
        {
            GLESInterop.glGetProgramBinaryPtr(program, bufSize, length, binaryFormat, binary);
        }
        public static void glProgramBinary(uint program, uint binaryFormat, IntPtr binary, int length)
        {
            GLESInterop.glProgramBinaryPtr(program, binaryFormat, binary, length);
        }
        public static void glProgramParameteri(uint program, uint pname, int value)
        {
            GLESInterop.glProgramParameteriPtr(program, pname, value);
        }
        public static void glInvalidateFramebuffer(uint target, int numAttachments, IntPtr attachments)
        {
            GLESInterop.glInvalidateFramebufferPtr(target, numAttachments, attachments);
        }
        public static void glInvalidateSubFramebuffer(uint target, int numAttachments, IntPtr attachments, int x, int y, int width, int height)
        {
            GLESInterop.glInvalidateSubFramebufferPtr(target, numAttachments, attachments, x, y, width, height);
        }
        public static void glTexStorage2D(uint target, int levels, uint internalformat, int width, int height)
        {
            GLESInterop.glTexStorage2DPtr(target, levels, internalformat, width, height);
        }
        public static void glTexStorage3D(uint target, int levels, uint internalformat, int width, int height, int depth)
        {
            GLESInterop.glTexStorage3DPtr(target, levels, internalformat, width, height, depth);
        }
        public static void glGetInternalformativ(uint target, uint internalformat, uint pname, int bufSize, IntPtr @params)
        {
            GLESInterop.glGetInternalformativPtr(target, internalformat, pname, bufSize, @params);
        }
        #endregion

        #region Interop
        public static Func<string, IntPtr> GetProcAddress = null;

        public static void LoadAllFunctions()
        {
            GLESInterop.glAlphaFuncPtr = (GLESInterop.glAlphaFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glAlphaFunc"), typeof(GLESInterop.glAlphaFuncFunc));
            GLESInterop.glClearColorPtr = (GLESInterop.glClearColorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearColor"), typeof(GLESInterop.glClearColorFunc));
            GLESInterop.glClearDepthfPtr = (GLESInterop.glClearDepthfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearDepthf"), typeof(GLESInterop.glClearDepthfFunc));
            GLESInterop.glClipPlanefPtr = (GLESInterop.glClipPlanefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClipPlanef"), typeof(GLESInterop.glClipPlanefFunc));
            GLESInterop.glColor4fPtr = (GLESInterop.glColor4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4f"), typeof(GLESInterop.glColor4fFunc));
            GLESInterop.glDepthRangefPtr = (GLESInterop.glDepthRangefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthRangef"), typeof(GLESInterop.glDepthRangefFunc));
            GLESInterop.glFogfPtr = (GLESInterop.glFogfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogf"), typeof(GLESInterop.glFogfFunc));
            GLESInterop.glFogfvPtr = (GLESInterop.glFogfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogfv"), typeof(GLESInterop.glFogfvFunc));
            GLESInterop.glFrustumfPtr = (GLESInterop.glFrustumfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFrustumf"), typeof(GLESInterop.glFrustumfFunc));
            GLESInterop.glGetClipPlanefPtr = (GLESInterop.glGetClipPlanefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetClipPlanef"), typeof(GLESInterop.glGetClipPlanefFunc));
            GLESInterop.glGetFloatvPtr = (GLESInterop.glGetFloatvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFloatv"), typeof(GLESInterop.glGetFloatvFunc));
            GLESInterop.glGetLightfvPtr = (GLESInterop.glGetLightfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetLightfv"), typeof(GLESInterop.glGetLightfvFunc));
            GLESInterop.glGetMaterialfvPtr = (GLESInterop.glGetMaterialfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetMaterialfv"), typeof(GLESInterop.glGetMaterialfvFunc));
            GLESInterop.glGetTexEnvfvPtr = (GLESInterop.glGetTexEnvfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexEnvfv"), typeof(GLESInterop.glGetTexEnvfvFunc));
            GLESInterop.glGetTexParameterfvPtr = (GLESInterop.glGetTexParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameterfv"), typeof(GLESInterop.glGetTexParameterfvFunc));
            GLESInterop.glLightModelfPtr = (GLESInterop.glLightModelfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightModelf"), typeof(GLESInterop.glLightModelfFunc));
            GLESInterop.glLightModelfvPtr = (GLESInterop.glLightModelfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightModelfv"), typeof(GLESInterop.glLightModelfvFunc));
            GLESInterop.glLightfPtr = (GLESInterop.glLightfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightf"), typeof(GLESInterop.glLightfFunc));
            GLESInterop.glLightfvPtr = (GLESInterop.glLightfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightfv"), typeof(GLESInterop.glLightfvFunc));
            GLESInterop.glLineWidthPtr = (GLESInterop.glLineWidthFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLineWidth"), typeof(GLESInterop.glLineWidthFunc));
            GLESInterop.glLoadMatrixfPtr = (GLESInterop.glLoadMatrixfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLoadMatrixf"), typeof(GLESInterop.glLoadMatrixfFunc));
            GLESInterop.glMaterialfPtr = (GLESInterop.glMaterialfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMaterialf"), typeof(GLESInterop.glMaterialfFunc));
            GLESInterop.glMaterialfvPtr = (GLESInterop.glMaterialfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMaterialfv"), typeof(GLESInterop.glMaterialfvFunc));
            GLESInterop.glMultMatrixfPtr = (GLESInterop.glMultMatrixfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultMatrixf"), typeof(GLESInterop.glMultMatrixfFunc));
            GLESInterop.glMultiTexCoord4fPtr = (GLESInterop.glMultiTexCoord4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord4f"), typeof(GLESInterop.glMultiTexCoord4fFunc));
            GLESInterop.glNormal3fPtr = (GLESInterop.glNormal3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3f"), typeof(GLESInterop.glNormal3fFunc));
            GLESInterop.glOrthofPtr = (GLESInterop.glOrthofFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glOrthof"), typeof(GLESInterop.glOrthofFunc));
            GLESInterop.glPointParameterfPtr = (GLESInterop.glPointParameterfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameterf"), typeof(GLESInterop.glPointParameterfFunc));
            GLESInterop.glPointParameterfvPtr = (GLESInterop.glPointParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameterfv"), typeof(GLESInterop.glPointParameterfvFunc));
            GLESInterop.glPointSizePtr = (GLESInterop.glPointSizeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointSize"), typeof(GLESInterop.glPointSizeFunc));
            GLESInterop.glPolygonOffsetPtr = (GLESInterop.glPolygonOffsetFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPolygonOffset"), typeof(GLESInterop.glPolygonOffsetFunc));
            GLESInterop.glRotatefPtr = (GLESInterop.glRotatefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRotatef"), typeof(GLESInterop.glRotatefFunc));
            GLESInterop.glScalefPtr = (GLESInterop.glScalefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScalef"), typeof(GLESInterop.glScalefFunc));
            GLESInterop.glTexEnvfPtr = (GLESInterop.glTexEnvfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnvf"), typeof(GLESInterop.glTexEnvfFunc));
            GLESInterop.glTexEnvfvPtr = (GLESInterop.glTexEnvfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnvfv"), typeof(GLESInterop.glTexEnvfvFunc));
            GLESInterop.glTexParameterfPtr = (GLESInterop.glTexParameterfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterf"), typeof(GLESInterop.glTexParameterfFunc));
            GLESInterop.glTexParameterfvPtr = (GLESInterop.glTexParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterfv"), typeof(GLESInterop.glTexParameterfvFunc));
            GLESInterop.glTranslatefPtr = (GLESInterop.glTranslatefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTranslatef"), typeof(GLESInterop.glTranslatefFunc));
            GLESInterop.glActiveTexturePtr = (GLESInterop.glActiveTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glActiveTexture"), typeof(GLESInterop.glActiveTextureFunc));
            GLESInterop.glAlphaFuncxPtr = (GLESInterop.glAlphaFuncxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glAlphaFuncx"), typeof(GLESInterop.glAlphaFuncxFunc));
            GLESInterop.glBindBufferPtr = (GLESInterop.glBindBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindBuffer"), typeof(GLESInterop.glBindBufferFunc));
            GLESInterop.glBindTexturePtr = (GLESInterop.glBindTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindTexture"), typeof(GLESInterop.glBindTextureFunc));
            GLESInterop.glBlendFuncPtr = (GLESInterop.glBlendFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendFunc"), typeof(GLESInterop.glBlendFuncFunc));
            GLESInterop.glBufferDataPtr = (GLESInterop.glBufferDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBufferData"), typeof(GLESInterop.glBufferDataFunc));
            GLESInterop.glBufferSubDataPtr = (GLESInterop.glBufferSubDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBufferSubData"), typeof(GLESInterop.glBufferSubDataFunc));
            GLESInterop.glClearPtr = (GLESInterop.glClearFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClear"), typeof(GLESInterop.glClearFunc));
            GLESInterop.glClearColorxPtr = (GLESInterop.glClearColorxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearColorx"), typeof(GLESInterop.glClearColorxFunc));
            GLESInterop.glClearDepthxPtr = (GLESInterop.glClearDepthxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearDepthx"), typeof(GLESInterop.glClearDepthxFunc));
            GLESInterop.glClearStencilPtr = (GLESInterop.glClearStencilFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearStencil"), typeof(GLESInterop.glClearStencilFunc));
            GLESInterop.glClientActiveTexturePtr = (GLESInterop.glClientActiveTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClientActiveTexture"), typeof(GLESInterop.glClientActiveTextureFunc));
            GLESInterop.glClipPlanexPtr = (GLESInterop.glClipPlanexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClipPlanex"), typeof(GLESInterop.glClipPlanexFunc));
            GLESInterop.glColor4ubPtr = (GLESInterop.glColor4ubFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4ub"), typeof(GLESInterop.glColor4ubFunc));
            GLESInterop.glColor4xPtr = (GLESInterop.glColor4xFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4x"), typeof(GLESInterop.glColor4xFunc));
            GLESInterop.glColorMaskPtr = (GLESInterop.glColorMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorMask"), typeof(GLESInterop.glColorMaskFunc));
            GLESInterop.glColorPointerPtr = (GLESInterop.glColorPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorPointer"), typeof(GLESInterop.glColorPointerFunc));
            GLESInterop.glCompressedTexImage2DPtr = (GLESInterop.glCompressedTexImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexImage2D"), typeof(GLESInterop.glCompressedTexImage2DFunc));
            GLESInterop.glCompressedTexSubImage2DPtr = (GLESInterop.glCompressedTexSubImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexSubImage2D"), typeof(GLESInterop.glCompressedTexSubImage2DFunc));
            GLESInterop.glCopyTexImage2DPtr = (GLESInterop.glCopyTexImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexImage2D"), typeof(GLESInterop.glCopyTexImage2DFunc));
            GLESInterop.glCopyTexSubImage2DPtr = (GLESInterop.glCopyTexSubImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexSubImage2D"), typeof(GLESInterop.glCopyTexSubImage2DFunc));
            GLESInterop.glCullFacePtr = (GLESInterop.glCullFaceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCullFace"), typeof(GLESInterop.glCullFaceFunc));
            GLESInterop.glDeleteBuffersPtr = (GLESInterop.glDeleteBuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteBuffers"), typeof(GLESInterop.glDeleteBuffersFunc));
            GLESInterop.glDeleteTexturesPtr = (GLESInterop.glDeleteTexturesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteTextures"), typeof(GLESInterop.glDeleteTexturesFunc));
            GLESInterop.glDepthFuncPtr = (GLESInterop.glDepthFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthFunc"), typeof(GLESInterop.glDepthFuncFunc));
            GLESInterop.glDepthMaskPtr = (GLESInterop.glDepthMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthMask"), typeof(GLESInterop.glDepthMaskFunc));
            GLESInterop.glDepthRangexPtr = (GLESInterop.glDepthRangexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthRangex"), typeof(GLESInterop.glDepthRangexFunc));
            GLESInterop.glDisablePtr = (GLESInterop.glDisableFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDisable"), typeof(GLESInterop.glDisableFunc));
            GLESInterop.glDisableClientStatePtr = (GLESInterop.glDisableClientStateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDisableClientState"), typeof(GLESInterop.glDisableClientStateFunc));
            GLESInterop.glDrawArraysPtr = (GLESInterop.glDrawArraysFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawArrays"), typeof(GLESInterop.glDrawArraysFunc));
            GLESInterop.glDrawElementsPtr = (GLESInterop.glDrawElementsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElements"), typeof(GLESInterop.glDrawElementsFunc));
            GLESInterop.glEnablePtr = (GLESInterop.glEnableFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnable"), typeof(GLESInterop.glEnableFunc));
            GLESInterop.glEnableClientStatePtr = (GLESInterop.glEnableClientStateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnableClientState"), typeof(GLESInterop.glEnableClientStateFunc));
            GLESInterop.glFinishPtr = (GLESInterop.glFinishFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFinish"), typeof(GLESInterop.glFinishFunc));
            GLESInterop.glFlushPtr = (GLESInterop.glFlushFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFlush"), typeof(GLESInterop.glFlushFunc));
            GLESInterop.glFogxPtr = (GLESInterop.glFogxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogx"), typeof(GLESInterop.glFogxFunc));
            GLESInterop.glFogxvPtr = (GLESInterop.glFogxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogxv"), typeof(GLESInterop.glFogxvFunc));
            GLESInterop.glFrontFacePtr = (GLESInterop.glFrontFaceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFrontFace"), typeof(GLESInterop.glFrontFaceFunc));
            GLESInterop.glFrustumxPtr = (GLESInterop.glFrustumxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFrustumx"), typeof(GLESInterop.glFrustumxFunc));
            GLESInterop.glGetBooleanvPtr = (GLESInterop.glGetBooleanvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBooleanv"), typeof(GLESInterop.glGetBooleanvFunc));
            GLESInterop.glGetBufferParameterivPtr = (GLESInterop.glGetBufferParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBufferParameteriv"), typeof(GLESInterop.glGetBufferParameterivFunc));
            GLESInterop.glGetClipPlanexPtr = (GLESInterop.glGetClipPlanexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetClipPlanex"), typeof(GLESInterop.glGetClipPlanexFunc));
            GLESInterop.glGenBuffersPtr = (GLESInterop.glGenBuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenBuffers"), typeof(GLESInterop.glGenBuffersFunc));
            GLESInterop.glGenTexturesPtr = (GLESInterop.glGenTexturesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenTextures"), typeof(GLESInterop.glGenTexturesFunc));
            GLESInterop.glGetErrorPtr = (GLESInterop.glGetErrorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetError"), typeof(GLESInterop.glGetErrorFunc));
            GLESInterop.glGetFixedvPtr = (GLESInterop.glGetFixedvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFixedv"), typeof(GLESInterop.glGetFixedvFunc));
            GLESInterop.glGetIntegervPtr = (GLESInterop.glGetIntegervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetIntegerv"), typeof(GLESInterop.glGetIntegervFunc));
            GLESInterop.glGetLightxvPtr = (GLESInterop.glGetLightxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetLightxv"), typeof(GLESInterop.glGetLightxvFunc));
            GLESInterop.glGetMaterialxvPtr = (GLESInterop.glGetMaterialxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetMaterialxv"), typeof(GLESInterop.glGetMaterialxvFunc));
            GLESInterop.glGetPointervPtr = (GLESInterop.glGetPointervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetPointerv"), typeof(GLESInterop.glGetPointervFunc));
            GLESInterop.glGetStringPtr = (GLESInterop.glGetStringFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetString"), typeof(GLESInterop.glGetStringFunc));
            GLESInterop.glGetTexEnvivPtr = (GLESInterop.glGetTexEnvivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexEnviv"), typeof(GLESInterop.glGetTexEnvivFunc));
            GLESInterop.glGetTexEnvxvPtr = (GLESInterop.glGetTexEnvxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexEnvxv"), typeof(GLESInterop.glGetTexEnvxvFunc));
            GLESInterop.glGetTexParameterivPtr = (GLESInterop.glGetTexParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameteriv"), typeof(GLESInterop.glGetTexParameterivFunc));
            GLESInterop.glGetTexParameterxvPtr = (GLESInterop.glGetTexParameterxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameterxv"), typeof(GLESInterop.glGetTexParameterxvFunc));
            GLESInterop.glHintPtr = (GLESInterop.glHintFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glHint"), typeof(GLESInterop.glHintFunc));
            GLESInterop.glIsBufferPtr = (GLESInterop.glIsBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsBuffer"), typeof(GLESInterop.glIsBufferFunc));
            GLESInterop.glIsEnabledPtr = (GLESInterop.glIsEnabledFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsEnabled"), typeof(GLESInterop.glIsEnabledFunc));
            GLESInterop.glIsTexturePtr = (GLESInterop.glIsTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsTexture"), typeof(GLESInterop.glIsTextureFunc));
            GLESInterop.glLightModelxPtr = (GLESInterop.glLightModelxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightModelx"), typeof(GLESInterop.glLightModelxFunc));
            GLESInterop.glLightModelxvPtr = (GLESInterop.glLightModelxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightModelxv"), typeof(GLESInterop.glLightModelxvFunc));
            GLESInterop.glLightxPtr = (GLESInterop.glLightxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightx"), typeof(GLESInterop.glLightxFunc));
            GLESInterop.glLightxvPtr = (GLESInterop.glLightxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightxv"), typeof(GLESInterop.glLightxvFunc));
            GLESInterop.glLineWidthxPtr = (GLESInterop.glLineWidthxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLineWidthx"), typeof(GLESInterop.glLineWidthxFunc));
            GLESInterop.glLoadIdentityPtr = (GLESInterop.glLoadIdentityFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLoadIdentity"), typeof(GLESInterop.glLoadIdentityFunc));
            GLESInterop.glLoadMatrixxPtr = (GLESInterop.glLoadMatrixxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLoadMatrixx"), typeof(GLESInterop.glLoadMatrixxFunc));
            GLESInterop.glLogicOpPtr = (GLESInterop.glLogicOpFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLogicOp"), typeof(GLESInterop.glLogicOpFunc));
            GLESInterop.glMaterialxPtr = (GLESInterop.glMaterialxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMaterialx"), typeof(GLESInterop.glMaterialxFunc));
            GLESInterop.glMaterialxvPtr = (GLESInterop.glMaterialxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMaterialxv"), typeof(GLESInterop.glMaterialxvFunc));
            GLESInterop.glMatrixModePtr = (GLESInterop.glMatrixModeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMatrixMode"), typeof(GLESInterop.glMatrixModeFunc));
            GLESInterop.glMultMatrixxPtr = (GLESInterop.glMultMatrixxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultMatrixx"), typeof(GLESInterop.glMultMatrixxFunc));
            GLESInterop.glMultiTexCoord4xPtr = (GLESInterop.glMultiTexCoord4xFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord4x"), typeof(GLESInterop.glMultiTexCoord4xFunc));
            GLESInterop.glNormal3xPtr = (GLESInterop.glNormal3xFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3x"), typeof(GLESInterop.glNormal3xFunc));
            GLESInterop.glNormalPointerPtr = (GLESInterop.glNormalPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormalPointer"), typeof(GLESInterop.glNormalPointerFunc));
            GLESInterop.glOrthoxPtr = (GLESInterop.glOrthoxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glOrthox"), typeof(GLESInterop.glOrthoxFunc));
            GLESInterop.glPixelStoreiPtr = (GLESInterop.glPixelStoreiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelStorei"), typeof(GLESInterop.glPixelStoreiFunc));
            GLESInterop.glPointParameterxPtr = (GLESInterop.glPointParameterxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameterx"), typeof(GLESInterop.glPointParameterxFunc));
            GLESInterop.glPointParameterxvPtr = (GLESInterop.glPointParameterxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameterxv"), typeof(GLESInterop.glPointParameterxvFunc));
            GLESInterop.glPointSizexPtr = (GLESInterop.glPointSizexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointSizex"), typeof(GLESInterop.glPointSizexFunc));
            GLESInterop.glPolygonOffsetxPtr = (GLESInterop.glPolygonOffsetxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPolygonOffsetx"), typeof(GLESInterop.glPolygonOffsetxFunc));
            GLESInterop.glPopMatrixPtr = (GLESInterop.glPopMatrixFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPopMatrix"), typeof(GLESInterop.glPopMatrixFunc));
            GLESInterop.glPushMatrixPtr = (GLESInterop.glPushMatrixFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPushMatrix"), typeof(GLESInterop.glPushMatrixFunc));
            GLESInterop.glReadPixelsPtr = (GLESInterop.glReadPixelsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glReadPixels"), typeof(GLESInterop.glReadPixelsFunc));
            GLESInterop.glRotatexPtr = (GLESInterop.glRotatexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRotatex"), typeof(GLESInterop.glRotatexFunc));
            GLESInterop.glSampleCoveragePtr = (GLESInterop.glSampleCoverageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSampleCoverage"), typeof(GLESInterop.glSampleCoverageFunc));
            GLESInterop.glSampleCoveragexPtr = (GLESInterop.glSampleCoveragexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSampleCoveragex"), typeof(GLESInterop.glSampleCoveragexFunc));
            GLESInterop.glScalexPtr = (GLESInterop.glScalexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScalex"), typeof(GLESInterop.glScalexFunc));
            GLESInterop.glScissorPtr = (GLESInterop.glScissorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScissor"), typeof(GLESInterop.glScissorFunc));
            GLESInterop.glShadeModelPtr = (GLESInterop.glShadeModelFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glShadeModel"), typeof(GLESInterop.glShadeModelFunc));
            GLESInterop.glStencilFuncPtr = (GLESInterop.glStencilFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilFunc"), typeof(GLESInterop.glStencilFuncFunc));
            GLESInterop.glStencilMaskPtr = (GLESInterop.glStencilMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilMask"), typeof(GLESInterop.glStencilMaskFunc));
            GLESInterop.glStencilOpPtr = (GLESInterop.glStencilOpFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilOp"), typeof(GLESInterop.glStencilOpFunc));
            GLESInterop.glTexCoordPointerPtr = (GLESInterop.glTexCoordPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordPointer"), typeof(GLESInterop.glTexCoordPointerFunc));
            GLESInterop.glTexEnviPtr = (GLESInterop.glTexEnviFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnvi"), typeof(GLESInterop.glTexEnviFunc));
            GLESInterop.glTexEnvxPtr = (GLESInterop.glTexEnvxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnvx"), typeof(GLESInterop.glTexEnvxFunc));
            GLESInterop.glTexEnvivPtr = (GLESInterop.glTexEnvivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnviv"), typeof(GLESInterop.glTexEnvivFunc));
            GLESInterop.glTexEnvxvPtr = (GLESInterop.glTexEnvxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnvxv"), typeof(GLESInterop.glTexEnvxvFunc));
            GLESInterop.glTexImage2DPtr = (GLESInterop.glTexImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage2D"), typeof(GLESInterop.glTexImage2DFunc));
            GLESInterop.glTexParameteriPtr = (GLESInterop.glTexParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameteri"), typeof(GLESInterop.glTexParameteriFunc));
            GLESInterop.glTexParameterxPtr = (GLESInterop.glTexParameterxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterx"), typeof(GLESInterop.glTexParameterxFunc));
            GLESInterop.glTexParameterivPtr = (GLESInterop.glTexParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameteriv"), typeof(GLESInterop.glTexParameterivFunc));
            GLESInterop.glTexParameterxvPtr = (GLESInterop.glTexParameterxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterxv"), typeof(GLESInterop.glTexParameterxvFunc));
            GLESInterop.glTexSubImage2DPtr = (GLESInterop.glTexSubImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexSubImage2D"), typeof(GLESInterop.glTexSubImage2DFunc));
            GLESInterop.glTranslatexPtr = (GLESInterop.glTranslatexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTranslatex"), typeof(GLESInterop.glTranslatexFunc));
            GLESInterop.glVertexPointerPtr = (GLESInterop.glVertexPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexPointer"), typeof(GLESInterop.glVertexPointerFunc));
            GLESInterop.glViewportPtr = (GLESInterop.glViewportFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glViewport"), typeof(GLESInterop.glViewportFunc));
            GLESInterop.glAttachShaderPtr = (GLESInterop.glAttachShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glAttachShader"), typeof(GLESInterop.glAttachShaderFunc));
            GLESInterop.glBindAttribLocationPtr = (GLESInterop.glBindAttribLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindAttribLocation"), typeof(GLESInterop.glBindAttribLocationFunc));
            GLESInterop.glBindFramebufferPtr = (GLESInterop.glBindFramebufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindFramebuffer"), typeof(GLESInterop.glBindFramebufferFunc));
            GLESInterop.glBindRenderbufferPtr = (GLESInterop.glBindRenderbufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindRenderbuffer"), typeof(GLESInterop.glBindRenderbufferFunc));
            GLESInterop.glBlendColorPtr = (GLESInterop.glBlendColorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendColor"), typeof(GLESInterop.glBlendColorFunc));
            GLESInterop.glBlendEquationPtr = (GLESInterop.glBlendEquationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendEquation"), typeof(GLESInterop.glBlendEquationFunc));
            GLESInterop.glBlendEquationSeparatePtr = (GLESInterop.glBlendEquationSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendEquationSeparate"), typeof(GLESInterop.glBlendEquationSeparateFunc));
            GLESInterop.glBlendFuncSeparatePtr = (GLESInterop.glBlendFuncSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendFuncSeparate"), typeof(GLESInterop.glBlendFuncSeparateFunc));
            GLESInterop.glCheckFramebufferStatusPtr = (GLESInterop.glCheckFramebufferStatusFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCheckFramebufferStatus"), typeof(GLESInterop.glCheckFramebufferStatusFunc));
            GLESInterop.glCompileShaderPtr = (GLESInterop.glCompileShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompileShader"), typeof(GLESInterop.glCompileShaderFunc));
            GLESInterop.glCreateProgramPtr = (GLESInterop.glCreateProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCreateProgram"), typeof(GLESInterop.glCreateProgramFunc));
            GLESInterop.glCreateShaderPtr = (GLESInterop.glCreateShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCreateShader"), typeof(GLESInterop.glCreateShaderFunc));
            GLESInterop.glDeleteFramebuffersPtr = (GLESInterop.glDeleteFramebuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteFramebuffers"), typeof(GLESInterop.glDeleteFramebuffersFunc));
            GLESInterop.glDeleteProgramPtr = (GLESInterop.glDeleteProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteProgram"), typeof(GLESInterop.glDeleteProgramFunc));
            GLESInterop.glDeleteRenderbuffersPtr = (GLESInterop.glDeleteRenderbuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteRenderbuffers"), typeof(GLESInterop.glDeleteRenderbuffersFunc));
            GLESInterop.glDeleteShaderPtr = (GLESInterop.glDeleteShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteShader"), typeof(GLESInterop.glDeleteShaderFunc));
            GLESInterop.glDetachShaderPtr = (GLESInterop.glDetachShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDetachShader"), typeof(GLESInterop.glDetachShaderFunc));
            GLESInterop.glDisableVertexAttribArrayPtr = (GLESInterop.glDisableVertexAttribArrayFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDisableVertexAttribArray"), typeof(GLESInterop.glDisableVertexAttribArrayFunc));
            GLESInterop.glEnableVertexAttribArrayPtr = (GLESInterop.glEnableVertexAttribArrayFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnableVertexAttribArray"), typeof(GLESInterop.glEnableVertexAttribArrayFunc));
            GLESInterop.glFramebufferRenderbufferPtr = (GLESInterop.glFramebufferRenderbufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferRenderbuffer"), typeof(GLESInterop.glFramebufferRenderbufferFunc));
            GLESInterop.glFramebufferTexture2DPtr = (GLESInterop.glFramebufferTexture2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferTexture2D"), typeof(GLESInterop.glFramebufferTexture2DFunc));
            GLESInterop.glGenerateMipmapPtr = (GLESInterop.glGenerateMipmapFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenerateMipmap"), typeof(GLESInterop.glGenerateMipmapFunc));
            GLESInterop.glGenFramebuffersPtr = (GLESInterop.glGenFramebuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenFramebuffers"), typeof(GLESInterop.glGenFramebuffersFunc));
            GLESInterop.glGenRenderbuffersPtr = (GLESInterop.glGenRenderbuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenRenderbuffers"), typeof(GLESInterop.glGenRenderbuffersFunc));
            GLESInterop.glGetActiveAttribPtr = (GLESInterop.glGetActiveAttribFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveAttrib"), typeof(GLESInterop.glGetActiveAttribFunc));
            GLESInterop.glGetActiveUniformPtr = (GLESInterop.glGetActiveUniformFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveUniform"), typeof(GLESInterop.glGetActiveUniformFunc));
            GLESInterop.glGetAttachedShadersPtr = (GLESInterop.glGetAttachedShadersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetAttachedShaders"), typeof(GLESInterop.glGetAttachedShadersFunc));
            GLESInterop.glGetAttribLocationPtr = (GLESInterop.glGetAttribLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetAttribLocation"), typeof(GLESInterop.glGetAttribLocationFunc));
            GLESInterop.glGetFramebufferAttachmentParameterivPtr = (GLESInterop.glGetFramebufferAttachmentParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFramebufferAttachmentParameteriv"), typeof(GLESInterop.glGetFramebufferAttachmentParameterivFunc));
            GLESInterop.glGetProgramivPtr = (GLESInterop.glGetProgramivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramiv"), typeof(GLESInterop.glGetProgramivFunc));
            GLESInterop.glGetProgramInfoLogPtr = (GLESInterop.glGetProgramInfoLogFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramInfoLog"), typeof(GLESInterop.glGetProgramInfoLogFunc));
            GLESInterop.glGetRenderbufferParameterivPtr = (GLESInterop.glGetRenderbufferParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetRenderbufferParameteriv"), typeof(GLESInterop.glGetRenderbufferParameterivFunc));
            GLESInterop.glGetShaderivPtr = (GLESInterop.glGetShaderivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetShaderiv"), typeof(GLESInterop.glGetShaderivFunc));
            GLESInterop.glGetShaderInfoLogPtr = (GLESInterop.glGetShaderInfoLogFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetShaderInfoLog"), typeof(GLESInterop.glGetShaderInfoLogFunc));
            GLESInterop.glGetShaderPrecisionFormatPtr = (GLESInterop.glGetShaderPrecisionFormatFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetShaderPrecisionFormat"), typeof(GLESInterop.glGetShaderPrecisionFormatFunc));
            GLESInterop.glGetShaderSourcePtr = (GLESInterop.glGetShaderSourceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetShaderSource"), typeof(GLESInterop.glGetShaderSourceFunc));
            GLESInterop.glGetUniformfvPtr = (GLESInterop.glGetUniformfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformfv"), typeof(GLESInterop.glGetUniformfvFunc));
            GLESInterop.glGetUniformivPtr = (GLESInterop.glGetUniformivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformiv"), typeof(GLESInterop.glGetUniformivFunc));
            GLESInterop.glGetUniformLocationPtr = (GLESInterop.glGetUniformLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformLocation"), typeof(GLESInterop.glGetUniformLocationFunc));
            GLESInterop.glGetVertexAttribfvPtr = (GLESInterop.glGetVertexAttribfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribfv"), typeof(GLESInterop.glGetVertexAttribfvFunc));
            GLESInterop.glGetVertexAttribivPtr = (GLESInterop.glGetVertexAttribivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribiv"), typeof(GLESInterop.glGetVertexAttribivFunc));
            GLESInterop.glGetVertexAttribPointervPtr = (GLESInterop.glGetVertexAttribPointervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribPointerv"), typeof(GLESInterop.glGetVertexAttribPointervFunc));
            GLESInterop.glIsFramebufferPtr = (GLESInterop.glIsFramebufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsFramebuffer"), typeof(GLESInterop.glIsFramebufferFunc));
            GLESInterop.glIsProgramPtr = (GLESInterop.glIsProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsProgram"), typeof(GLESInterop.glIsProgramFunc));
            GLESInterop.glIsRenderbufferPtr = (GLESInterop.glIsRenderbufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsRenderbuffer"), typeof(GLESInterop.glIsRenderbufferFunc));
            GLESInterop.glIsShaderPtr = (GLESInterop.glIsShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsShader"), typeof(GLESInterop.glIsShaderFunc));
            GLESInterop.glLinkProgramPtr = (GLESInterop.glLinkProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLinkProgram"), typeof(GLESInterop.glLinkProgramFunc));
            GLESInterop.glReleaseShaderCompilerPtr = (GLESInterop.glReleaseShaderCompilerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glReleaseShaderCompiler"), typeof(GLESInterop.glReleaseShaderCompilerFunc));
            GLESInterop.glRenderbufferStoragePtr = (GLESInterop.glRenderbufferStorageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRenderbufferStorage"), typeof(GLESInterop.glRenderbufferStorageFunc));
            GLESInterop.glShaderBinaryPtr = (GLESInterop.glShaderBinaryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glShaderBinary"), typeof(GLESInterop.glShaderBinaryFunc));
            GLESInterop.glShaderSourcePtr = (GLESInterop.glShaderSourceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glShaderSource"), typeof(GLESInterop.glShaderSourceFunc));
            GLESInterop.glStencilFuncSeparatePtr = (GLESInterop.glStencilFuncSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilFuncSeparate"), typeof(GLESInterop.glStencilFuncSeparateFunc));
            GLESInterop.glStencilMaskSeparatePtr = (GLESInterop.glStencilMaskSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilMaskSeparate"), typeof(GLESInterop.glStencilMaskSeparateFunc));
            GLESInterop.glStencilOpSeparatePtr = (GLESInterop.glStencilOpSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilOpSeparate"), typeof(GLESInterop.glStencilOpSeparateFunc));
            GLESInterop.glUniform1fPtr = (GLESInterop.glUniform1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1f"), typeof(GLESInterop.glUniform1fFunc));
            GLESInterop.glUniform1fvPtr = (GLESInterop.glUniform1fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1fv"), typeof(GLESInterop.glUniform1fvFunc));
            GLESInterop.glUniform1iPtr = (GLESInterop.glUniform1iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1i"), typeof(GLESInterop.glUniform1iFunc));
            GLESInterop.glUniform1ivPtr = (GLESInterop.glUniform1ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1iv"), typeof(GLESInterop.glUniform1ivFunc));
            GLESInterop.glUniform2fPtr = (GLESInterop.glUniform2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2f"), typeof(GLESInterop.glUniform2fFunc));
            GLESInterop.glUniform2fvPtr = (GLESInterop.glUniform2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2fv"), typeof(GLESInterop.glUniform2fvFunc));
            GLESInterop.glUniform2iPtr = (GLESInterop.glUniform2iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2i"), typeof(GLESInterop.glUniform2iFunc));
            GLESInterop.glUniform2ivPtr = (GLESInterop.glUniform2ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2iv"), typeof(GLESInterop.glUniform2ivFunc));
            GLESInterop.glUniform3fPtr = (GLESInterop.glUniform3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3f"), typeof(GLESInterop.glUniform3fFunc));
            GLESInterop.glUniform3fvPtr = (GLESInterop.glUniform3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3fv"), typeof(GLESInterop.glUniform3fvFunc));
            GLESInterop.glUniform3iPtr = (GLESInterop.glUniform3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3i"), typeof(GLESInterop.glUniform3iFunc));
            GLESInterop.glUniform3ivPtr = (GLESInterop.glUniform3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3iv"), typeof(GLESInterop.glUniform3ivFunc));
            GLESInterop.glUniform4fPtr = (GLESInterop.glUniform4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4f"), typeof(GLESInterop.glUniform4fFunc));
            GLESInterop.glUniform4fvPtr = (GLESInterop.glUniform4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4fv"), typeof(GLESInterop.glUniform4fvFunc));
            GLESInterop.glUniform4iPtr = (GLESInterop.glUniform4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4i"), typeof(GLESInterop.glUniform4iFunc));
            GLESInterop.glUniform4ivPtr = (GLESInterop.glUniform4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4iv"), typeof(GLESInterop.glUniform4ivFunc));
            GLESInterop.glUniformMatrix2fvPtr = (GLESInterop.glUniformMatrix2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix2fv"), typeof(GLESInterop.glUniformMatrix2fvFunc));
            GLESInterop.glUniformMatrix3fvPtr = (GLESInterop.glUniformMatrix3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix3fv"), typeof(GLESInterop.glUniformMatrix3fvFunc));
            GLESInterop.glUniformMatrix4fvPtr = (GLESInterop.glUniformMatrix4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix4fv"), typeof(GLESInterop.glUniformMatrix4fvFunc));
            GLESInterop.glUseProgramPtr = (GLESInterop.glUseProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUseProgram"), typeof(GLESInterop.glUseProgramFunc));
            GLESInterop.glValidateProgramPtr = (GLESInterop.glValidateProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glValidateProgram"), typeof(GLESInterop.glValidateProgramFunc));
            GLESInterop.glVertexAttrib1fPtr = (GLESInterop.glVertexAttrib1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1f"), typeof(GLESInterop.glVertexAttrib1fFunc));
            GLESInterop.glVertexAttrib1fvPtr = (GLESInterop.glVertexAttrib1fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1fv"), typeof(GLESInterop.glVertexAttrib1fvFunc));
            GLESInterop.glVertexAttrib2fPtr = (GLESInterop.glVertexAttrib2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2f"), typeof(GLESInterop.glVertexAttrib2fFunc));
            GLESInterop.glVertexAttrib2fvPtr = (GLESInterop.glVertexAttrib2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2fv"), typeof(GLESInterop.glVertexAttrib2fvFunc));
            GLESInterop.glVertexAttrib3fPtr = (GLESInterop.glVertexAttrib3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3f"), typeof(GLESInterop.glVertexAttrib3fFunc));
            GLESInterop.glVertexAttrib3fvPtr = (GLESInterop.glVertexAttrib3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3fv"), typeof(GLESInterop.glVertexAttrib3fvFunc));
            GLESInterop.glVertexAttrib4fPtr = (GLESInterop.glVertexAttrib4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4f"), typeof(GLESInterop.glVertexAttrib4fFunc));
            GLESInterop.glVertexAttrib4fvPtr = (GLESInterop.glVertexAttrib4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4fv"), typeof(GLESInterop.glVertexAttrib4fvFunc));
            GLESInterop.glVertexAttribPointerPtr = (GLESInterop.glVertexAttribPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribPointer"), typeof(GLESInterop.glVertexAttribPointerFunc));
            GLESInterop.glReadBufferPtr = (GLESInterop.glReadBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glReadBuffer"), typeof(GLESInterop.glReadBufferFunc));
            GLESInterop.glDrawRangeElementsPtr = (GLESInterop.glDrawRangeElementsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawRangeElements"), typeof(GLESInterop.glDrawRangeElementsFunc));
            GLESInterop.glTexImage3DPtr = (GLESInterop.glTexImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage3D"), typeof(GLESInterop.glTexImage3DFunc));
            GLESInterop.glTexSubImage3DPtr = (GLESInterop.glTexSubImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexSubImage3D"), typeof(GLESInterop.glTexSubImage3DFunc));
            GLESInterop.glCopyTexSubImage3DPtr = (GLESInterop.glCopyTexSubImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexSubImage3D"), typeof(GLESInterop.glCopyTexSubImage3DFunc));
            GLESInterop.glCompressedTexImage3DPtr = (GLESInterop.glCompressedTexImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexImage3D"), typeof(GLESInterop.glCompressedTexImage3DFunc));
            GLESInterop.glCompressedTexSubImage3DPtr = (GLESInterop.glCompressedTexSubImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexSubImage3D"), typeof(GLESInterop.glCompressedTexSubImage3DFunc));
            GLESInterop.glGenQueriesPtr = (GLESInterop.glGenQueriesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenQueries"), typeof(GLESInterop.glGenQueriesFunc));
            GLESInterop.glDeleteQueriesPtr = (GLESInterop.glDeleteQueriesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteQueries"), typeof(GLESInterop.glDeleteQueriesFunc));
            GLESInterop.glIsQueryPtr = (GLESInterop.glIsQueryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsQuery"), typeof(GLESInterop.glIsQueryFunc));
            GLESInterop.glBeginQueryPtr = (GLESInterop.glBeginQueryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBeginQuery"), typeof(GLESInterop.glBeginQueryFunc));
            GLESInterop.glEndQueryPtr = (GLESInterop.glEndQueryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEndQuery"), typeof(GLESInterop.glEndQueryFunc));
            GLESInterop.glGetQueryivPtr = (GLESInterop.glGetQueryivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetQueryiv"), typeof(GLESInterop.glGetQueryivFunc));
            GLESInterop.glGetQueryObjectuivPtr = (GLESInterop.glGetQueryObjectuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetQueryObjectuiv"), typeof(GLESInterop.glGetQueryObjectuivFunc));
            GLESInterop.glUnmapBufferPtr = (GLESInterop.glUnmapBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUnmapBuffer"), typeof(GLESInterop.glUnmapBufferFunc));
            GLESInterop.glGetBufferPointervPtr = (GLESInterop.glGetBufferPointervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBufferPointerv"), typeof(GLESInterop.glGetBufferPointervFunc));
            GLESInterop.glDrawBuffersPtr = (GLESInterop.glDrawBuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawBuffers"), typeof(GLESInterop.glDrawBuffersFunc));
            GLESInterop.glUniformMatrix2x3fvPtr = (GLESInterop.glUniformMatrix2x3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix2x3fv"), typeof(GLESInterop.glUniformMatrix2x3fvFunc));
            GLESInterop.glUniformMatrix3x2fvPtr = (GLESInterop.glUniformMatrix3x2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix3x2fv"), typeof(GLESInterop.glUniformMatrix3x2fvFunc));
            GLESInterop.glUniformMatrix2x4fvPtr = (GLESInterop.glUniformMatrix2x4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix2x4fv"), typeof(GLESInterop.glUniformMatrix2x4fvFunc));
            GLESInterop.glUniformMatrix4x2fvPtr = (GLESInterop.glUniformMatrix4x2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix4x2fv"), typeof(GLESInterop.glUniformMatrix4x2fvFunc));
            GLESInterop.glUniformMatrix3x4fvPtr = (GLESInterop.glUniformMatrix3x4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix3x4fv"), typeof(GLESInterop.glUniformMatrix3x4fvFunc));
            GLESInterop.glUniformMatrix4x3fvPtr = (GLESInterop.glUniformMatrix4x3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix4x3fv"), typeof(GLESInterop.glUniformMatrix4x3fvFunc));
            GLESInterop.glBlitFramebufferPtr = (GLESInterop.glBlitFramebufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlitFramebuffer"), typeof(GLESInterop.glBlitFramebufferFunc));
            GLESInterop.glRenderbufferStorageMultisamplePtr = (GLESInterop.glRenderbufferStorageMultisampleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRenderbufferStorageMultisample"), typeof(GLESInterop.glRenderbufferStorageMultisampleFunc));
            GLESInterop.glFramebufferTextureLayerPtr = (GLESInterop.glFramebufferTextureLayerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferTextureLayer"), typeof(GLESInterop.glFramebufferTextureLayerFunc));
            GLESInterop.glMapBufferRangePtr = (GLESInterop.glMapBufferRangeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMapBufferRange"), typeof(GLESInterop.glMapBufferRangeFunc));
            GLESInterop.glFlushMappedBufferRangePtr = (GLESInterop.glFlushMappedBufferRangeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFlushMappedBufferRange"), typeof(GLESInterop.glFlushMappedBufferRangeFunc));
            GLESInterop.glBindVertexArrayPtr = (GLESInterop.glBindVertexArrayFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindVertexArray"), typeof(GLESInterop.glBindVertexArrayFunc));
            GLESInterop.glDeleteVertexArraysPtr = (GLESInterop.glDeleteVertexArraysFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteVertexArrays"), typeof(GLESInterop.glDeleteVertexArraysFunc));
            GLESInterop.glGenVertexArraysPtr = (GLESInterop.glGenVertexArraysFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenVertexArrays"), typeof(GLESInterop.glGenVertexArraysFunc));
            GLESInterop.glIsVertexArrayPtr = (GLESInterop.glIsVertexArrayFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsVertexArray"), typeof(GLESInterop.glIsVertexArrayFunc));
            GLESInterop.glGetIntegeri_vPtr = (GLESInterop.glGetIntegeri_vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetIntegeri_v"), typeof(GLESInterop.glGetIntegeri_vFunc));
            GLESInterop.glBeginTransformFeedbackPtr = (GLESInterop.glBeginTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBeginTransformFeedback"), typeof(GLESInterop.glBeginTransformFeedbackFunc));
            GLESInterop.glEndTransformFeedbackPtr = (GLESInterop.glEndTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEndTransformFeedback"), typeof(GLESInterop.glEndTransformFeedbackFunc));
            GLESInterop.glBindBufferRangePtr = (GLESInterop.glBindBufferRangeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindBufferRange"), typeof(GLESInterop.glBindBufferRangeFunc));
            GLESInterop.glBindBufferBasePtr = (GLESInterop.glBindBufferBaseFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindBufferBase"), typeof(GLESInterop.glBindBufferBaseFunc));
            GLESInterop.glTransformFeedbackVaryingsPtr = (GLESInterop.glTransformFeedbackVaryingsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTransformFeedbackVaryings"), typeof(GLESInterop.glTransformFeedbackVaryingsFunc));
            GLESInterop.glGetTransformFeedbackVaryingPtr = (GLESInterop.glGetTransformFeedbackVaryingFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTransformFeedbackVarying"), typeof(GLESInterop.glGetTransformFeedbackVaryingFunc));
            GLESInterop.glVertexAttribIPointerPtr = (GLESInterop.glVertexAttribIPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribIPointer"), typeof(GLESInterop.glVertexAttribIPointerFunc));
            GLESInterop.glGetVertexAttribIivPtr = (GLESInterop.glGetVertexAttribIivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribIiv"), typeof(GLESInterop.glGetVertexAttribIivFunc));
            GLESInterop.glGetVertexAttribIuivPtr = (GLESInterop.glGetVertexAttribIuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribIuiv"), typeof(GLESInterop.glGetVertexAttribIuivFunc));
            GLESInterop.glVertexAttribI4iPtr = (GLESInterop.glVertexAttribI4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4i"), typeof(GLESInterop.glVertexAttribI4iFunc));
            GLESInterop.glVertexAttribI4uiPtr = (GLESInterop.glVertexAttribI4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4ui"), typeof(GLESInterop.glVertexAttribI4uiFunc));
            GLESInterop.glVertexAttribI4ivPtr = (GLESInterop.glVertexAttribI4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4iv"), typeof(GLESInterop.glVertexAttribI4ivFunc));
            GLESInterop.glVertexAttribI4uivPtr = (GLESInterop.glVertexAttribI4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4uiv"), typeof(GLESInterop.glVertexAttribI4uivFunc));
            GLESInterop.glGetUniformuivPtr = (GLESInterop.glGetUniformuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformuiv"), typeof(GLESInterop.glGetUniformuivFunc));
            GLESInterop.glGetFragDataLocationPtr = (GLESInterop.glGetFragDataLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFragDataLocation"), typeof(GLESInterop.glGetFragDataLocationFunc));
            GLESInterop.glUniform1uiPtr = (GLESInterop.glUniform1uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1ui"), typeof(GLESInterop.glUniform1uiFunc));
            GLESInterop.glUniform2uiPtr = (GLESInterop.glUniform2uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2ui"), typeof(GLESInterop.glUniform2uiFunc));
            GLESInterop.glUniform3uiPtr = (GLESInterop.glUniform3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3ui"), typeof(GLESInterop.glUniform3uiFunc));
            GLESInterop.glUniform4uiPtr = (GLESInterop.glUniform4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4ui"), typeof(GLESInterop.glUniform4uiFunc));
            GLESInterop.glUniform1uivPtr = (GLESInterop.glUniform1uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1uiv"), typeof(GLESInterop.glUniform1uivFunc));
            GLESInterop.glUniform2uivPtr = (GLESInterop.glUniform2uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2uiv"), typeof(GLESInterop.glUniform2uivFunc));
            GLESInterop.glUniform3uivPtr = (GLESInterop.glUniform3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3uiv"), typeof(GLESInterop.glUniform3uivFunc));
            GLESInterop.glUniform4uivPtr = (GLESInterop.glUniform4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4uiv"), typeof(GLESInterop.glUniform4uivFunc));
            GLESInterop.glClearBufferivPtr = (GLESInterop.glClearBufferivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearBufferiv"), typeof(GLESInterop.glClearBufferivFunc));
            GLESInterop.glClearBufferuivPtr = (GLESInterop.glClearBufferuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearBufferuiv"), typeof(GLESInterop.glClearBufferuivFunc));
            GLESInterop.glClearBufferfvPtr = (GLESInterop.glClearBufferfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearBufferfv"), typeof(GLESInterop.glClearBufferfvFunc));
            GLESInterop.glClearBufferfiPtr = (GLESInterop.glClearBufferfiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearBufferfi"), typeof(GLESInterop.glClearBufferfiFunc));
            GLESInterop.glGetStringiPtr = (GLESInterop.glGetStringiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetStringi"), typeof(GLESInterop.glGetStringiFunc));
            GLESInterop.glCopyBufferSubDataPtr = (GLESInterop.glCopyBufferSubDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyBufferSubData"), typeof(GLESInterop.glCopyBufferSubDataFunc));
            GLESInterop.glGetUniformIndicesPtr = (GLESInterop.glGetUniformIndicesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformIndices"), typeof(GLESInterop.glGetUniformIndicesFunc));
            GLESInterop.glGetActiveUniformsivPtr = (GLESInterop.glGetActiveUniformsivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveUniformsiv"), typeof(GLESInterop.glGetActiveUniformsivFunc));
            GLESInterop.glGetUniformBlockIndexPtr = (GLESInterop.glGetUniformBlockIndexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformBlockIndex"), typeof(GLESInterop.glGetUniformBlockIndexFunc));
            GLESInterop.glGetActiveUniformBlockivPtr = (GLESInterop.glGetActiveUniformBlockivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveUniformBlockiv"), typeof(GLESInterop.glGetActiveUniformBlockivFunc));
            GLESInterop.glGetActiveUniformBlockNamePtr = (GLESInterop.glGetActiveUniformBlockNameFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveUniformBlockName"), typeof(GLESInterop.glGetActiveUniformBlockNameFunc));
            GLESInterop.glUniformBlockBindingPtr = (GLESInterop.glUniformBlockBindingFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformBlockBinding"), typeof(GLESInterop.glUniformBlockBindingFunc));
            GLESInterop.glDrawArraysInstancedPtr = (GLESInterop.glDrawArraysInstancedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawArraysInstanced"), typeof(GLESInterop.glDrawArraysInstancedFunc));
            GLESInterop.glDrawElementsInstancedPtr = (GLESInterop.glDrawElementsInstancedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElementsInstanced"), typeof(GLESInterop.glDrawElementsInstancedFunc));
            GLESInterop.glFenceSyncPtr = (GLESInterop.glFenceSyncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFenceSync"), typeof(GLESInterop.glFenceSyncFunc));
            GLESInterop.glIsSyncPtr = (GLESInterop.glIsSyncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsSync"), typeof(GLESInterop.glIsSyncFunc));
            GLESInterop.glDeleteSyncPtr = (GLESInterop.glDeleteSyncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteSync"), typeof(GLESInterop.glDeleteSyncFunc));
            GLESInterop.glClientWaitSyncPtr = (GLESInterop.glClientWaitSyncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClientWaitSync"), typeof(GLESInterop.glClientWaitSyncFunc));
            GLESInterop.glWaitSyncPtr = (GLESInterop.glWaitSyncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWaitSync"), typeof(GLESInterop.glWaitSyncFunc));
            GLESInterop.glGetInteger64vPtr = (GLESInterop.glGetInteger64vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetInteger64v"), typeof(GLESInterop.glGetInteger64vFunc));
            GLESInterop.glGetSyncivPtr = (GLESInterop.glGetSyncivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetSynciv"), typeof(GLESInterop.glGetSyncivFunc));
            GLESInterop.glGetInteger64i_vPtr = (GLESInterop.glGetInteger64i_vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetInteger64i_v"), typeof(GLESInterop.glGetInteger64i_vFunc));
            GLESInterop.glGetBufferParameteri64vPtr = (GLESInterop.glGetBufferParameteri64vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBufferParameteri64v"), typeof(GLESInterop.glGetBufferParameteri64vFunc));
            GLESInterop.glGenSamplersPtr = (GLESInterop.glGenSamplersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenSamplers"), typeof(GLESInterop.glGenSamplersFunc));
            GLESInterop.glDeleteSamplersPtr = (GLESInterop.glDeleteSamplersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteSamplers"), typeof(GLESInterop.glDeleteSamplersFunc));
            GLESInterop.glIsSamplerPtr = (GLESInterop.glIsSamplerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsSampler"), typeof(GLESInterop.glIsSamplerFunc));
            GLESInterop.glBindSamplerPtr = (GLESInterop.glBindSamplerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindSampler"), typeof(GLESInterop.glBindSamplerFunc));
            GLESInterop.glSamplerParameteriPtr = (GLESInterop.glSamplerParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSamplerParameteri"), typeof(GLESInterop.glSamplerParameteriFunc));
            GLESInterop.glSamplerParameterivPtr = (GLESInterop.glSamplerParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSamplerParameteriv"), typeof(GLESInterop.glSamplerParameterivFunc));
            GLESInterop.glSamplerParameterfPtr = (GLESInterop.glSamplerParameterfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSamplerParameterf"), typeof(GLESInterop.glSamplerParameterfFunc));
            GLESInterop.glSamplerParameterfvPtr = (GLESInterop.glSamplerParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSamplerParameterfv"), typeof(GLESInterop.glSamplerParameterfvFunc));
            GLESInterop.glGetSamplerParameterivPtr = (GLESInterop.glGetSamplerParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetSamplerParameteriv"), typeof(GLESInterop.glGetSamplerParameterivFunc));
            GLESInterop.glGetSamplerParameterfvPtr = (GLESInterop.glGetSamplerParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetSamplerParameterfv"), typeof(GLESInterop.glGetSamplerParameterfvFunc));
            GLESInterop.glVertexAttribDivisorPtr = (GLESInterop.glVertexAttribDivisorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribDivisor"), typeof(GLESInterop.glVertexAttribDivisorFunc));
            GLESInterop.glBindTransformFeedbackPtr = (GLESInterop.glBindTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindTransformFeedback"), typeof(GLESInterop.glBindTransformFeedbackFunc));
            GLESInterop.glDeleteTransformFeedbacksPtr = (GLESInterop.glDeleteTransformFeedbacksFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteTransformFeedbacks"), typeof(GLESInterop.glDeleteTransformFeedbacksFunc));
            GLESInterop.glGenTransformFeedbacksPtr = (GLESInterop.glGenTransformFeedbacksFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenTransformFeedbacks"), typeof(GLESInterop.glGenTransformFeedbacksFunc));
            GLESInterop.glIsTransformFeedbackPtr = (GLESInterop.glIsTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsTransformFeedback"), typeof(GLESInterop.glIsTransformFeedbackFunc));
            GLESInterop.glPauseTransformFeedbackPtr = (GLESInterop.glPauseTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPauseTransformFeedback"), typeof(GLESInterop.glPauseTransformFeedbackFunc));
            GLESInterop.glResumeTransformFeedbackPtr = (GLESInterop.glResumeTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glResumeTransformFeedback"), typeof(GLESInterop.glResumeTransformFeedbackFunc));
            GLESInterop.glGetProgramBinaryPtr = (GLESInterop.glGetProgramBinaryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramBinary"), typeof(GLESInterop.glGetProgramBinaryFunc));
            GLESInterop.glProgramBinaryPtr = (GLESInterop.glProgramBinaryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramBinary"), typeof(GLESInterop.glProgramBinaryFunc));
            GLESInterop.glProgramParameteriPtr = (GLESInterop.glProgramParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramParameteri"), typeof(GLESInterop.glProgramParameteriFunc));
            GLESInterop.glInvalidateFramebufferPtr = (GLESInterop.glInvalidateFramebufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glInvalidateFramebuffer"), typeof(GLESInterop.glInvalidateFramebufferFunc));
            GLESInterop.glInvalidateSubFramebufferPtr = (GLESInterop.glInvalidateSubFramebufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glInvalidateSubFramebuffer"), typeof(GLESInterop.glInvalidateSubFramebufferFunc));
            GLESInterop.glTexStorage2DPtr = (GLESInterop.glTexStorage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexStorage2D"), typeof(GLESInterop.glTexStorage2DFunc));
            GLESInterop.glTexStorage3DPtr = (GLESInterop.glTexStorage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexStorage3D"), typeof(GLESInterop.glTexStorage3DFunc));
            GLESInterop.glGetInternalformativPtr = (GLESInterop.glGetInternalformativFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetInternalformativ"), typeof(GLESInterop.glGetInternalformativFunc));
        }

        public static void LoadFunction(string name)
        {
            var memberInfo = typeof(GLESInterop).GetField(name + "Ptr", BindingFlags.Public | BindingFlags.Static);
            memberInfo.SetValue(null, Marshal.GetDelegateForFunctionPointer(GetProcAddress(name), memberInfo.FieldType));
        }
        #endregion
    }
}
