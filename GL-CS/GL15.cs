// This file was autogenerated by GLCSGen on 11/4/2013 8:49:49 AM
// Original copyright from gl.xml:
// 
// Copyright (c) 2013 The Khronos Group Inc.
// 
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
// 
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
// 
// ------------------------------------------------------------------------
// 
// This file, gl.xml, is the OpenGL and OpenGL API Registry. The older
// ".spec" file format has been retired and will no longer be updated with
// new extensions and API versions. The canonical version of the registry,
// together with documentation, schema, and Python generator scripts used
// to generate C header files for OpenGL and OpenGL ES, can always be found
// in the Khronos Registry at
//         http://www.opengl.org/registry/
//     

using System;
using System.Reflection;
using System.Runtime.InteropServices;

namespace OpenGL
{
    public static class GL15
    {
        #region Enums
        public static uint GL_BACK = 0x0405;
        public static uint GL_FRONT = 0x0404;
        public static uint GL_FRONT_AND_BACK = 0x0408;
        public static uint GL_CCW = 0x0901;
        public static uint GL_CW = 0x0900;
        public static uint GL_ALLOW_DRAW_FRG_HINT_PGI = 0x1A210;
        public static uint GL_ALLOW_DRAW_MEM_HINT_PGI = 0x1A211;
        public static uint GL_ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E;
        public static uint GL_ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F;
        public static uint GL_ALWAYS_FAST_HINT_PGI = 0x1A20C;
        public static uint GL_ALWAYS_SOFT_HINT_PGI = 0x1A20D;
        public static uint GL_BACK_NORMALS_HINT_PGI = 0x1A223;
        public static uint GL_BINNING_CONTROL_HINT_QCOM = 0x8FB0;
        public static uint GL_CLIP_FAR_HINT_PGI = 0x1A221;
        public static uint GL_CLIP_NEAR_HINT_PGI = 0x1A220;
        public static uint GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0;
        public static uint GL_CONSERVE_MEMORY_HINT_PGI = 0x1A1FD;
        public static uint GL_CONVOLUTION_HINT_SGIX = 0x8316;
        public static uint GL_FOG_HINT = 0x0C54;
        public static uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
        public static uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B;
        public static uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES = 0x8B8B;
        public static uint GL_FULL_STIPPLE_HINT_PGI = 0x1A219;
        public static uint GL_GENERATE_MIPMAP_HINT = 0x8192;
        public static uint GL_GENERATE_MIPMAP_HINT_SGIS = 0x8192;
        public static uint GL_LINE_QUALITY_HINT_SGIX = 0x835B;
        public static uint GL_LINE_SMOOTH_HINT = 0x0C52;
        public static uint GL_MATERIAL_SIDE_HINT_PGI = 0x1A22C;
        public static uint GL_MAX_VERTEX_HINT_PGI = 0x1A22D;
        public static uint GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534;
        public static uint GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203;
        public static uint GL_NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204;
        public static uint GL_PACK_CMYK_HINT_EXT = 0x800E;
        public static uint GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
        public static uint GL_PHONG_HINT_WIN = 0x80EB;
        public static uint GL_POINT_SMOOTH_HINT = 0x0C51;
        public static uint GL_POLYGON_SMOOTH_HINT = 0x0C53;
        public static uint GL_PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8;
        public static uint GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
        public static uint GL_RECLAIM_MEMORY_HINT_PGI = 0x1A1FE;
        public static uint GL_SCALEBIAS_HINT_SGIX = 0x8322;
        public static uint GL_STRICT_DEPTHFUNC_HINT_PGI = 0x1A216;
        public static uint GL_STRICT_LIGHTING_HINT_PGI = 0x1A217;
        public static uint GL_STRICT_SCISSOR_HINT_PGI = 0x1A218;
        public static uint GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
        public static uint GL_TEXTURE_COMPRESSION_HINT_ARB = 0x84EF;
        public static uint GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E;
        public static uint GL_TEXTURE_STORAGE_HINT_APPLE = 0x85BC;
        public static uint GL_TRANSFORM_HINT_APPLE = 0x85B1;
        public static uint GL_UNPACK_CMYK_HINT_EXT = 0x800F;
        public static uint GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F;
        public static uint GL_VERTEX_CONSISTENT_HINT_PGI = 0x1A22B;
        public static uint GL_VERTEX_DATA_HINT_PGI = 0x1A22A;
        public static uint GL_VERTEX_PRECLIP_HINT_SGIX = 0x83EF;
        public static uint GL_VERTEX_PRECLIP_SGIX = 0x83EE;
        public static uint GL_WIDE_LINE_HINT_PGI = 0x1A222;
        public static uint GL_DONT_CARE = 0x1100;
        public static uint GL_FASTEST = 0x1101;
        public static uint GL_NICEST = 0x1102;
        public static uint GL_FILL = 0x1B02;
        public static uint GL_LINE = 0x1B01;
        public static uint GL_POINT = 0x1B00;
        public static uint GL_DETAIL_TEXTURE_2D_SGIS = 0x8095;
        public static uint GL_PROXY_TEXTURE_1D = 0x8063;
        public static uint GL_PROXY_TEXTURE_1D_EXT = 0x8063;
        public static uint GL_PROXY_TEXTURE_2D = 0x8064;
        public static uint GL_PROXY_TEXTURE_2D_EXT = 0x8064;
        public static uint GL_PROXY_TEXTURE_3D = 0x8070;
        public static uint GL_PROXY_TEXTURE_3D_EXT = 0x8070;
        public static uint GL_PROXY_TEXTURE_4D_SGIS = 0x8135;
        public static uint GL_TEXTURE_1D = 0x0DE0;
        public static uint GL_TEXTURE_2D = 0x0DE1;
        public static uint GL_TEXTURE_3D = 0x806F;
        public static uint GL_TEXTURE_3D_EXT = 0x806F;
        public static uint GL_TEXTURE_3D_OES = 0x806F;
        public static uint GL_TEXTURE_4D_SGIS = 0x8134;
        public static uint GL_TEXTURE_BASE_LEVEL = 0x813C;
        public static uint GL_TEXTURE_BASE_LEVEL_SGIS = 0x813C;
        public static uint GL_TEXTURE_MAX_LEVEL = 0x813D;
        public static uint GL_TEXTURE_MAX_LEVEL_SGIS = 0x813D;
        public static uint GL_TEXTURE_MAX_LOD = 0x813B;
        public static uint GL_TEXTURE_MAX_LOD_SGIS = 0x813B;
        public static uint GL_TEXTURE_MIN_LOD = 0x813A;
        public static uint GL_TEXTURE_MIN_LOD_SGIS = 0x813A;
        public static uint GL_DETAIL_TEXTURE_LEVEL_SGIS = 0x809A;
        public static uint GL_DETAIL_TEXTURE_MODE_SGIS = 0x809B;
        public static uint GL_DUAL_TEXTURE_SELECT_SGIS = 0x8124;
        public static uint GL_GENERATE_MIPMAP = 0x8191;
        public static uint GL_GENERATE_MIPMAP_SGIS = 0x8191;
        public static uint GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179;
        public static uint GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A;
        public static uint GL_QUAD_TEXTURE_SELECT_SGIS = 0x8125;
        public static uint GL_SHADOW_AMBIENT_SGIX = 0x80BF;
        public static uint GL_TEXTURE_BORDER_COLOR = 0x1004;
        public static uint GL_TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171;
        public static uint GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176;
        public static uint GL_TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172;
        public static uint GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175;
        public static uint GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173;
        public static uint GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174;
        public static uint GL_TEXTURE_COMPARE_SGIX = 0x819A;
        public static uint GL_TEXTURE_LOD_BIAS_R_SGIX = 0x8190;
        public static uint GL_TEXTURE_LOD_BIAS_S_SGIX = 0x818E;
        public static uint GL_TEXTURE_LOD_BIAS_T_SGIX = 0x818F;
        public static uint GL_TEXTURE_MAG_FILTER = 0x2800;
        public static uint GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x836B;
        public static uint GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x8369;
        public static uint GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x836A;
        public static uint GL_TEXTURE_MIN_FILTER = 0x2801;
        public static uint GL_TEXTURE_PRIORITY = 0x8066;
        public static uint GL_TEXTURE_PRIORITY_EXT = 0x8066;
        public static uint GL_TEXTURE_WRAP_Q_SGIS = 0x8137;
        public static uint GL_TEXTURE_WRAP_R = 0x8072;
        public static uint GL_TEXTURE_WRAP_R_EXT = 0x8072;
        public static uint GL_TEXTURE_WRAP_R_OES = 0x8072;
        public static uint GL_TEXTURE_WRAP_S = 0x2802;
        public static uint GL_TEXTURE_WRAP_T = 0x2803;
        public static uint GL_ABGR_EXT = 0x8000;
        public static uint GL_ALPHA = 0x1906;
        public static uint GL_BLUE = 0x1905;
        public static uint GL_CMYKA_EXT = 0x800D;
        public static uint GL_CMYK_EXT = 0x800C;
        public static uint GL_COLOR_INDEX = 0x1900;
        public static uint GL_DEPTH_COMPONENT = 0x1902;
        public static uint GL_GREEN = 0x1904;
        public static uint GL_LUMINANCE = 0x1909;
        public static uint GL_LUMINANCE_ALPHA = 0x190A;
        public static uint GL_RED = 0x1903;
        public static uint GL_RED_EXT = 0x1903;
        public static uint GL_RGB = 0x1907;
        public static uint GL_RGBA = 0x1908;
        public static uint GL_STENCIL_INDEX = 0x1901;
        public static uint GL_UNSIGNED_INT = 0x1405;
        public static uint GL_UNSIGNED_SHORT = 0x1403;
        public static uint GL_YCRCB_422_SGIX = 0x81BB;
        public static uint GL_YCRCB_444_SGIX = 0x81BC;
        public static uint GL_BITMAP = 0x1A00;
        public static uint GL_BYTE = 0x1400;
        public static uint GL_FLOAT = 0x1406;
        public static uint GL_INT = 0x1404;
        public static uint GL_SHORT = 0x1402;
        public static uint GL_UNSIGNED_BYTE = 0x1401;
        public static uint GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
        public static uint GL_UNSIGNED_BYTE_3_3_2_EXT = 0x8032;
        public static uint GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
        public static uint GL_UNSIGNED_INT_10_10_10_2_EXT = 0x8036;
        public static uint GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
        public static uint GL_UNSIGNED_INT_8_8_8_8_EXT = 0x8035;
        public static uint GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
        public static uint GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033;
        public static uint GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
        public static uint GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034;
        public static uint GL_AUX0 = 0x0409;
        public static uint GL_AUX1 = 0x040A;
        public static uint GL_AUX2 = 0x040B;
        public static uint GL_AUX3 = 0x040C;
        public static uint GL_BACK_LEFT = 0x0402;
        public static uint GL_BACK_RIGHT = 0x0403;
        public static uint GL_FRONT_LEFT = 0x0400;
        public static uint GL_FRONT_RIGHT = 0x0401;
        public static uint GL_LEFT = 0x0406;
        public static uint GL_NONE = 0;
        public static uint GL_NONE_OES = 0;
        public static uint GL_RIGHT = 0x0407;
        public static uint GL_ACCUM_BUFFER_BIT = 0x00000200;
        public static uint GL_COLOR_BUFFER_BIT = 0x00004000;
        public static uint GL_COVERAGE_BUFFER_BIT_NV = 0x00008000;
        public static uint GL_DEPTH_BUFFER_BIT = 0x00000100;
        public static uint GL_STENCIL_BUFFER_BIT = 0x00000400;
        public static uint GL_FALSE = 0;
        public static uint GL_TRUE = 1;
        public static uint GL_ALPHA_TEST = 0x0BC0;
        public static uint GL_ASYNC_DRAW_PIXELS_SGIX = 0x835D;
        public static uint GL_ASYNC_HISTOGRAM_SGIX = 0x832C;
        public static uint GL_ASYNC_READ_PIXELS_SGIX = 0x835E;
        public static uint GL_ASYNC_TEX_IMAGE_SGIX = 0x835C;
        public static uint GL_AUTO_NORMAL = 0x0D80;
        public static uint GL_BLEND = 0x0BE2;
        public static uint GL_CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183;
        public static uint GL_CLIP_PLANE0 = 0x3000;
        public static uint GL_CLIP_PLANE1 = 0x3001;
        public static uint GL_CLIP_PLANE2 = 0x3002;
        public static uint GL_CLIP_PLANE3 = 0x3003;
        public static uint GL_CLIP_PLANE4 = 0x3004;
        public static uint GL_CLIP_PLANE5 = 0x3005;
        public static uint GL_COLOR_ARRAY = 0x8076;
        public static uint GL_COLOR_LOGIC_OP = 0x0BF2;
        public static uint GL_COLOR_MATERIAL = 0x0B57;
        public static uint GL_COLOR_TABLE_SGI = 0x80D0;
        public static uint GL_CONVOLUTION_1D_EXT = 0x8010;
        public static uint GL_CONVOLUTION_2D_EXT = 0x8011;
        public static uint GL_CULL_FACE = 0x0B44;
        public static uint GL_DEPTH_TEST = 0x0B71;
        public static uint GL_DITHER = 0x0BD0;
        public static uint GL_EDGE_FLAG_ARRAY = 0x8079;
        public static uint GL_FOG = 0x0B60;
        public static uint GL_FOG_OFFSET_SGIX = 0x8198;
        public static uint GL_FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401;
        public static uint GL_FRAGMENT_LIGHT0_SGIX = 0x840C;
        public static uint GL_FRAGMENT_LIGHT1_SGIX = 0x840D;
        public static uint GL_FRAGMENT_LIGHT2_SGIX = 0x840E;
        public static uint GL_FRAGMENT_LIGHT3_SGIX = 0x840F;
        public static uint GL_FRAGMENT_LIGHT4_SGIX = 0x8410;
        public static uint GL_FRAGMENT_LIGHT5_SGIX = 0x8411;
        public static uint GL_FRAGMENT_LIGHT6_SGIX = 0x8412;
        public static uint GL_FRAGMENT_LIGHT7_SGIX = 0x8413;
        public static uint GL_FRAGMENT_LIGHTING_SGIX = 0x8400;
        public static uint GL_FRAMEZOOM_SGIX = 0x818B;
        public static uint GL_HISTOGRAM_EXT = 0x8024;
        public static uint GL_INDEX_ARRAY = 0x8077;
        public static uint GL_INDEX_LOGIC_OP = 0x0BF1;
        public static uint GL_INTERLACE_SGIX = 0x8094;
        public static uint GL_IR_INSTRUMENT1_SGIX = 0x817F;
        public static uint GL_LIGHT0 = 0x4000;
        public static uint GL_LIGHT1 = 0x4001;
        public static uint GL_LIGHT2 = 0x4002;
        public static uint GL_LIGHT3 = 0x4003;
        public static uint GL_LIGHT4 = 0x4004;
        public static uint GL_LIGHT5 = 0x4005;
        public static uint GL_LIGHT6 = 0x4006;
        public static uint GL_LIGHT7 = 0x4007;
        public static uint GL_LIGHTING = 0x0B50;
        public static uint GL_LINE_SMOOTH = 0x0B20;
        public static uint GL_LINE_STIPPLE = 0x0B24;
        public static uint GL_MAP1_COLOR_4 = 0x0D90;
        public static uint GL_MAP1_INDEX = 0x0D91;
        public static uint GL_MAP1_NORMAL = 0x0D92;
        public static uint GL_MAP1_TEXTURE_COORD_1 = 0x0D93;
        public static uint GL_MAP1_TEXTURE_COORD_2 = 0x0D94;
        public static uint GL_MAP1_TEXTURE_COORD_3 = 0x0D95;
        public static uint GL_MAP1_TEXTURE_COORD_4 = 0x0D96;
        public static uint GL_MAP1_VERTEX_3 = 0x0D97;
        public static uint GL_MAP1_VERTEX_4 = 0x0D98;
        public static uint GL_MAP2_COLOR_4 = 0x0DB0;
        public static uint GL_MAP2_INDEX = 0x0DB1;
        public static uint GL_MAP2_NORMAL = 0x0DB2;
        public static uint GL_MAP2_TEXTURE_COORD_1 = 0x0DB3;
        public static uint GL_MAP2_TEXTURE_COORD_2 = 0x0DB4;
        public static uint GL_MAP2_TEXTURE_COORD_3 = 0x0DB5;
        public static uint GL_MAP2_TEXTURE_COORD_4 = 0x0DB6;
        public static uint GL_MAP2_VERTEX_3 = 0x0DB7;
        public static uint GL_MAP2_VERTEX_4 = 0x0DB8;
        public static uint GL_MINMAX_EXT = 0x802E;
        public static uint GL_MULTISAMPLE_SGIS = 0x809D;
        public static uint GL_NORMALIZE = 0x0BA1;
        public static uint GL_NORMAL_ARRAY = 0x8075;
        public static uint GL_PIXEL_TEXTURE_SGIS = 0x8353;
        public static uint GL_PIXEL_TEX_GEN_SGIX = 0x8139;
        public static uint GL_POINT_SMOOTH = 0x0B10;
        public static uint GL_POLYGON_OFFSET_FILL = 0x8037;
        public static uint GL_POLYGON_OFFSET_LINE = 0x2A02;
        public static uint GL_POLYGON_OFFSET_POINT = 0x2A01;
        public static uint GL_POLYGON_SMOOTH = 0x0B41;
        public static uint GL_POLYGON_STIPPLE = 0x0B42;
        public static uint GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2;
        public static uint GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1;
        public static uint GL_REFERENCE_PLANE_SGIX = 0x817D;
        public static uint GL_RESCALE_NORMAL_EXT = 0x803A;
        public static uint GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E;
        public static uint GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F;
        public static uint GL_SAMPLE_MASK_SGIS = 0x80A0;
        public static uint GL_SCISSOR_TEST = 0x0C11;
        public static uint GL_SEPARABLE_2D_EXT = 0x8012;
        public static uint GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB;
        public static uint GL_SPRITE_SGIX = 0x8148;
        public static uint GL_STENCIL_TEST = 0x0B90;
        public static uint GL_TEXTURE_COLOR_TABLE_SGI = 0x80BC;
        public static uint GL_TEXTURE_COORD_ARRAY = 0x8078;
        public static uint GL_TEXTURE_GEN_Q = 0x0C63;
        public static uint GL_TEXTURE_GEN_R = 0x0C62;
        public static uint GL_TEXTURE_GEN_S = 0x0C60;
        public static uint GL_TEXTURE_GEN_T = 0x0C61;
        public static uint GL_VERTEX_ARRAY = 0x8074;
        public static uint GL_CONSTANT_ALPHA_EXT = 0x8003;
        public static uint GL_CONSTANT_COLOR_EXT = 0x8001;
        public static uint GL_DST_ALPHA = 0x0304;
        public static uint GL_DST_COLOR = 0x0306;
        public static uint GL_ONE = 1;
        public static uint GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004;
        public static uint GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002;
        public static uint GL_ONE_MINUS_DST_ALPHA = 0x0305;
        public static uint GL_ONE_MINUS_DST_COLOR = 0x0307;
        public static uint GL_ONE_MINUS_SRC_ALPHA = 0x0303;
        public static uint GL_SRC_ALPHA = 0x0302;
        public static uint GL_SRC_ALPHA_SATURATE = 0x0308;
        public static uint GL_ZERO = 0;
        public static uint GL_ONE_MINUS_SRC_COLOR = 0x0301;
        public static uint GL_SRC_COLOR = 0x0300;
        public static uint GL_AND = 0x1501;
        public static uint GL_AND_INVERTED = 0x1504;
        public static uint GL_AND_REVERSE = 0x1502;
        public static uint GL_CLEAR = 0x1500;
        public static uint GL_COPY = 0x1503;
        public static uint GL_COPY_INVERTED = 0x150C;
        public static uint GL_EQUIV = 0x1509;
        public static uint GL_INVERT = 0x150A;
        public static uint GL_NAND = 0x150E;
        public static uint GL_NOOP = 0x1505;
        public static uint GL_NOR = 0x1508;
        public static uint GL_OR = 0x1507;
        public static uint GL_OR_INVERTED = 0x150D;
        public static uint GL_OR_REVERSE = 0x150B;
        public static uint GL_SET = 0x150F;
        public static uint GL_XOR = 0x1506;
        public static uint GL_ALWAYS = 0x0207;
        public static uint GL_EQUAL = 0x0202;
        public static uint GL_GEQUAL = 0x0206;
        public static uint GL_GREATER = 0x0204;
        public static uint GL_LEQUAL = 0x0203;
        public static uint GL_LESS = 0x0201;
        public static uint GL_NEVER = 0x0200;
        public static uint GL_NOTEQUAL = 0x0205;
        public static uint GL_DECR = 0x1E03;
        public static uint GL_INCR = 0x1E02;
        public static uint GL_KEEP = 0x1E00;
        public static uint GL_REPLACE = 0x1E01;
        public static uint GL_PACK_ALIGNMENT = 0x0D05;
        public static uint GL_PACK_IMAGE_DEPTH_SGIS = 0x8131;
        public static uint GL_PACK_IMAGE_HEIGHT = 0x806C;
        public static uint GL_PACK_IMAGE_HEIGHT_EXT = 0x806C;
        public static uint GL_PACK_LSB_FIRST = 0x0D01;
        public static uint GL_PACK_RESAMPLE_OML = 0x8984;
        public static uint GL_PACK_RESAMPLE_SGIX = 0x842C;
        public static uint GL_PACK_ROW_LENGTH = 0x0D02;
        public static uint GL_PACK_SKIP_IMAGES = 0x806B;
        public static uint GL_PACK_SKIP_IMAGES_EXT = 0x806B;
        public static uint GL_PACK_SKIP_PIXELS = 0x0D04;
        public static uint GL_PACK_SKIP_ROWS = 0x0D03;
        public static uint GL_PACK_SKIP_VOLUMES_SGIS = 0x8130;
        public static uint GL_PACK_SUBSAMPLE_RATE_SGIX = 0x85A0;
        public static uint GL_PACK_SWAP_BYTES = 0x0D00;
        public static uint GL_PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145;
        public static uint GL_PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144;
        public static uint GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143;
        public static uint GL_PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142;
        public static uint GL_PIXEL_TILE_HEIGHT_SGIX = 0x8141;
        public static uint GL_PIXEL_TILE_WIDTH_SGIX = 0x8140;
        public static uint GL_UNPACK_ALIGNMENT = 0x0CF5;
        public static uint GL_UNPACK_IMAGE_DEPTH_SGIS = 0x8133;
        public static uint GL_UNPACK_IMAGE_HEIGHT = 0x806E;
        public static uint GL_UNPACK_IMAGE_HEIGHT_EXT = 0x806E;
        public static uint GL_UNPACK_LSB_FIRST = 0x0CF1;
        public static uint GL_UNPACK_RESAMPLE_OML = 0x8985;
        public static uint GL_UNPACK_RESAMPLE_SGIX = 0x842D;
        public static uint GL_UNPACK_ROW_LENGTH = 0x0CF2;
        public static uint GL_UNPACK_ROW_LENGTH_EXT = 0x0CF2;
        public static uint GL_UNPACK_SKIP_IMAGES = 0x806D;
        public static uint GL_UNPACK_SKIP_IMAGES_EXT = 0x806D;
        public static uint GL_UNPACK_SKIP_PIXELS = 0x0CF4;
        public static uint GL_UNPACK_SKIP_PIXELS_EXT = 0x0CF4;
        public static uint GL_UNPACK_SKIP_ROWS = 0x0CF3;
        public static uint GL_UNPACK_SKIP_ROWS_EXT = 0x0CF3;
        public static uint GL_UNPACK_SKIP_VOLUMES_SGIS = 0x8132;
        public static uint GL_UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1;
        public static uint GL_UNPACK_SWAP_BYTES = 0x0CF0;
        public static uint GL_ACCUM_ALPHA_BITS = 0x0D5B;
        public static uint GL_ACCUM_BLUE_BITS = 0x0D5A;
        public static uint GL_ACCUM_CLEAR_VALUE = 0x0B80;
        public static uint GL_ACCUM_GREEN_BITS = 0x0D59;
        public static uint GL_ACCUM_RED_BITS = 0x0D58;
        public static uint GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
        public static uint GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
        public static uint GL_ALPHA_BIAS = 0x0D1D;
        public static uint GL_ALPHA_BITS = 0x0D55;
        public static uint GL_ALPHA_SCALE = 0x0D1C;
        public static uint GL_ALPHA_TEST_FUNC = 0x0BC1;
        public static uint GL_ALPHA_TEST_FUNC_QCOM = 0x0BC1;
        public static uint GL_ALPHA_TEST_QCOM = 0x0BC0;
        public static uint GL_ALPHA_TEST_REF = 0x0BC2;
        public static uint GL_ALPHA_TEST_REF_QCOM = 0x0BC2;
        public static uint GL_ASYNC_MARKER_SGIX = 0x8329;
        public static uint GL_ATTRIB_STACK_DEPTH = 0x0BB0;
        public static uint GL_AUX_BUFFERS = 0x0C00;
        public static uint GL_BLEND_COLOR_EXT = 0x8005;
        public static uint GL_BLEND_DST = 0x0BE0;
        public static uint GL_BLEND_EQUATION_EXT = 0x8009;
        public static uint GL_BLEND_SRC = 0x0BE1;
        public static uint GL_BLUE_BIAS = 0x0D1B;
        public static uint GL_BLUE_BITS = 0x0D54;
        public static uint GL_BLUE_SCALE = 0x0D1A;
        public static uint GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
        public static uint GL_COLOR_ARRAY_COUNT_EXT = 0x8084;
        public static uint GL_COLOR_ARRAY_SIZE = 0x8081;
        public static uint GL_COLOR_ARRAY_STRIDE = 0x8083;
        public static uint GL_COLOR_ARRAY_TYPE = 0x8082;
        public static uint GL_COLOR_CLEAR_VALUE = 0x0C22;
        public static uint GL_COLOR_MATERIAL_FACE = 0x0B55;
        public static uint GL_COLOR_MATERIAL_PARAMETER = 0x0B56;
        public static uint GL_COLOR_MATRIX_SGI = 0x80B1;
        public static uint GL_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2;
        public static uint GL_COLOR_WRITEMASK = 0x0C23;
        public static uint GL_CULL_FACE_MODE = 0x0B45;
        public static uint GL_CURRENT_COLOR = 0x0B00;
        public static uint GL_CURRENT_INDEX = 0x0B01;
        public static uint GL_CURRENT_NORMAL = 0x0B02;
        public static uint GL_CURRENT_RASTER_COLOR = 0x0B04;
        public static uint GL_CURRENT_RASTER_DISTANCE = 0x0B09;
        public static uint GL_CURRENT_RASTER_INDEX = 0x0B05;
        public static uint GL_CURRENT_RASTER_POSITION = 0x0B07;
        public static uint GL_CURRENT_RASTER_POSITION_VALID = 0x0B08;
        public static uint GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
        public static uint GL_CURRENT_TEXTURE_COORDS = 0x0B03;
        public static uint GL_DEFORMATIONS_MASK_SGIX = 0x8196;
        public static uint GL_DEPTH_BIAS = 0x0D1F;
        public static uint GL_DEPTH_BITS = 0x0D56;
        public static uint GL_DEPTH_CLEAR_VALUE = 0x0B73;
        public static uint GL_DEPTH_FUNC = 0x0B74;
        public static uint GL_DEPTH_RANGE = 0x0B70;
        public static uint GL_DEPTH_SCALE = 0x0D1E;
        public static uint GL_DEPTH_WRITEMASK = 0x0B72;
        public static uint GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096;
        public static uint GL_DISTANCE_ATTENUATION_SGIS = 0x8129;
        public static uint GL_DOUBLEBUFFER = 0x0C32;
        public static uint GL_DRAW_BUFFER = 0x0C01;
        public static uint GL_DRAW_BUFFER_EXT = 0x0C01;
        public static uint GL_EDGE_FLAG = 0x0B43;
        public static uint GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D;
        public static uint GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C;
        public static uint GL_FEEDBACK_BUFFER_SIZE = 0x0DF1;
        public static uint GL_FEEDBACK_BUFFER_TYPE = 0x0DF2;
        public static uint GL_FOG_COLOR = 0x0B66;
        public static uint GL_FOG_DENSITY = 0x0B62;
        public static uint GL_FOG_END = 0x0B64;
        public static uint GL_FOG_FUNC_POINTS_SGIS = 0x812B;
        public static uint GL_FOG_INDEX = 0x0B61;
        public static uint GL_FOG_MODE = 0x0B65;
        public static uint GL_FOG_OFFSET_VALUE_SGIX = 0x8199;
        public static uint GL_FOG_START = 0x0B63;
        public static uint GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402;
        public static uint GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403;
        public static uint GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A;
        public static uint GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408;
        public static uint GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B;
        public static uint GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409;
        public static uint GL_FRAMEZOOM_FACTOR_SGIX = 0x818C;
        public static uint GL_FRONT_FACE = 0x0B46;
        public static uint GL_GREEN_BIAS = 0x0D19;
        public static uint GL_GREEN_BITS = 0x0D53;
        public static uint GL_GREEN_SCALE = 0x0D18;
        public static uint GL_INDEX_ARRAY_COUNT_EXT = 0x8087;
        public static uint GL_INDEX_ARRAY_STRIDE = 0x8086;
        public static uint GL_INDEX_ARRAY_TYPE = 0x8085;
        public static uint GL_INDEX_BITS = 0x0D51;
        public static uint GL_INDEX_CLEAR_VALUE = 0x0C20;
        public static uint GL_INDEX_MODE = 0x0C30;
        public static uint GL_INDEX_OFFSET = 0x0D13;
        public static uint GL_INDEX_SHIFT = 0x0D12;
        public static uint GL_INDEX_WRITEMASK = 0x0C21;
        public static uint GL_INSTRUMENT_MEASUREMENTS_SGIX = 0x8181;
        public static uint GL_LIGHT_ENV_MODE_SGIX = 0x8407;
        public static uint GL_LIGHT_MODEL_AMBIENT = 0x0B53;
        public static uint GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
        public static uint GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
        public static uint GL_LIGHT_MODEL_TWO_SIDE = 0x0B52;
        public static uint GL_LINE_STIPPLE_PATTERN = 0x0B25;
        public static uint GL_LINE_STIPPLE_REPEAT = 0x0B26;
        public static uint GL_LINE_WIDTH = 0x0B21;
        public static uint GL_LINE_WIDTH_GRANULARITY = 0x0B23;
        public static uint GL_LINE_WIDTH_RANGE = 0x0B22;
        public static uint GL_LIST_BASE = 0x0B32;
        public static uint GL_LIST_INDEX = 0x0B33;
        public static uint GL_LIST_MODE = 0x0B30;
        public static uint GL_LOGIC_OP = 0x0BF1;
        public static uint GL_LOGIC_OP_MODE = 0x0BF0;
        public static uint GL_MAP1_GRID_DOMAIN = 0x0DD0;
        public static uint GL_MAP1_GRID_SEGMENTS = 0x0DD1;
        public static uint GL_MAP2_GRID_DOMAIN = 0x0DD2;
        public static uint GL_MAP2_GRID_SEGMENTS = 0x0DD3;
        public static uint GL_MAP_COLOR = 0x0D10;
        public static uint GL_MAP_STENCIL = 0x0D11;
        public static uint GL_MATRIX_MODE = 0x0BA0;
        public static uint GL_MAX_3D_TEXTURE_SIZE_EXT = 0x8073;
        public static uint GL_MAX_4D_TEXTURE_SIZE_SGIS = 0x8138;
        public static uint GL_MAX_ACTIVE_LIGHTS_SGIX = 0x8405;
        public static uint GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360;
        public static uint GL_MAX_ASYNC_HISTOGRAM_SGIX = 0x832D;
        public static uint GL_MAX_ASYNC_READ_PIXELS_SGIX = 0x8361;
        public static uint GL_MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F;
        public static uint GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35;
        public static uint GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
        public static uint GL_MAX_CLIPMAP_DEPTH_SGIX = 0x8177;
        public static uint GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178;
        public static uint GL_MAX_CLIP_DISTANCES = 0x0D32;
        public static uint GL_MAX_CLIP_PLANES = 0x0D32;
        public static uint GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3;
        public static uint GL_MAX_EVAL_ORDER = 0x0D30;
        public static uint GL_MAX_FOG_FUNC_POINTS_SGIS = 0x812C;
        public static uint GL_MAX_FRAGMENT_LIGHTS_SGIX = 0x8404;
        public static uint GL_MAX_FRAMEZOOM_FACTOR_SGIX = 0x818D;
        public static uint GL_MAX_LIGHTS = 0x0D31;
        public static uint GL_MAX_LIST_NESTING = 0x0B31;
        public static uint GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
        public static uint GL_MAX_NAME_STACK_DEPTH = 0x0D37;
        public static uint GL_MAX_PIXEL_MAP_TABLE = 0x0D34;
        public static uint GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38;
        public static uint GL_MAX_TEXTURE_SIZE = 0x0D33;
        public static uint GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39;
        public static uint GL_MAX_VIEWPORT_DIMS = 0x0D3A;
        public static uint GL_MODELVIEW0_MATRIX_EXT = 0x0BA6;
        public static uint GL_MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3;
        public static uint GL_MODELVIEW_MATRIX = 0x0BA6;
        public static uint GL_MODELVIEW_STACK_DEPTH = 0x0BA3;
        public static uint GL_NAME_STACK_DEPTH = 0x0D70;
        public static uint GL_NORMAL_ARRAY_COUNT_EXT = 0x8080;
        public static uint GL_NORMAL_ARRAY_STRIDE = 0x807F;
        public static uint GL_NORMAL_ARRAY_TYPE = 0x807E;
        public static uint GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
        public static uint GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
        public static uint GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
        public static uint GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
        public static uint GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
        public static uint GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
        public static uint GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
        public static uint GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
        public static uint GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
        public static uint GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
        public static uint GL_PIXEL_TEX_GEN_MODE_SGIX = 0x832B;
        public static uint GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E;
        public static uint GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F;
        public static uint GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128;
        public static uint GL_POINT_SIZE = 0x0B11;
        public static uint GL_POINT_SIZE_GRANULARITY = 0x0B13;
        public static uint GL_POINT_SIZE_MAX_SGIS = 0x8127;
        public static uint GL_POINT_SIZE_MIN_SGIS = 0x8126;
        public static uint GL_POINT_SIZE_RANGE = 0x0B12;
        public static uint GL_POLYGON_MODE = 0x0B40;
        public static uint GL_POLYGON_OFFSET_BIAS_EXT = 0x8039;
        public static uint GL_POLYGON_OFFSET_FACTOR = 0x8038;
        public static uint GL_POLYGON_OFFSET_UNITS = 0x2A00;
        public static uint GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB;
        public static uint GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7;
        public static uint GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA;
        public static uint GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6;
        public static uint GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9;
        public static uint GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5;
        public static uint GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8;
        public static uint GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4;
        public static uint GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023;
        public static uint GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F;
        public static uint GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022;
        public static uint GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E;
        public static uint GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021;
        public static uint GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D;
        public static uint GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x8020;
        public static uint GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x801C;
        public static uint GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B;
        public static uint GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C;
        public static uint GL_PROJECTION_MATRIX = 0x0BA7;
        public static uint GL_PROJECTION_STACK_DEPTH = 0x0BA4;
        public static uint GL_READ_BUFFER = 0x0C02;
        public static uint GL_READ_BUFFER_EXT = 0x0C02;
        public static uint GL_READ_BUFFER_NV = 0x0C02;
        public static uint GL_RED_BIAS = 0x0D15;
        public static uint GL_RED_BITS = 0x0D52;
        public static uint GL_RED_SCALE = 0x0D14;
        public static uint GL_REFERENCE_PLANE_EQUATION_SGIX = 0x817E;
        public static uint GL_RENDER_MODE = 0x0C40;
        public static uint GL_RGBA_MODE = 0x0C31;
        public static uint GL_SAMPLES_SGIS = 0x80A9;
        public static uint GL_SAMPLE_BUFFERS_SGIS = 0x80A8;
        public static uint GL_SAMPLE_MASK_INVERT_SGIS = 0x80AB;
        public static uint GL_SAMPLE_MASK_VALUE_SGIS = 0x80AA;
        public static uint GL_SAMPLE_PATTERN_SGIS = 0x80AC;
        public static uint GL_SCISSOR_BOX = 0x0C10;
        public static uint GL_SELECTION_BUFFER_SIZE = 0x0DF4;
        public static uint GL_SHADE_MODEL = 0x0B54;
        public static uint GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
        public static uint GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
        public static uint GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
        public static uint GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
        public static uint GL_SPRITE_AXIS_SGIX = 0x814A;
        public static uint GL_SPRITE_MODE_SGIX = 0x8149;
        public static uint GL_SPRITE_TRANSLATION_SGIX = 0x814B;
        public static uint GL_STENCIL_BITS = 0x0D57;
        public static uint GL_STENCIL_CLEAR_VALUE = 0x0B91;
        public static uint GL_STENCIL_FAIL = 0x0B94;
        public static uint GL_STENCIL_FUNC = 0x0B92;
        public static uint GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
        public static uint GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
        public static uint GL_STENCIL_REF = 0x0B97;
        public static uint GL_STENCIL_VALUE_MASK = 0x0B93;
        public static uint GL_STENCIL_WRITEMASK = 0x0B98;
        public static uint GL_STEREO = 0x0C33;
        public static uint GL_SUBPIXEL_BITS = 0x0D50;
        public static uint GL_TEXTURE_3D_BINDING_EXT = 0x806A;
        public static uint GL_TEXTURE_4D_BINDING_SGIS = 0x814F;
        public static uint GL_TEXTURE_BINDING_1D = 0x8068;
        public static uint GL_TEXTURE_BINDING_2D = 0x8069;
        public static uint GL_TEXTURE_BINDING_3D = 0x806A;
        public static uint GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B;
        public static uint GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088;
        public static uint GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
        public static uint GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089;
        public static uint GL_TEXTURE_MATRIX = 0x0BA8;
        public static uint GL_TEXTURE_STACK_DEPTH = 0x0BA5;
        public static uint GL_VERTEX_ARRAY_COUNT_EXT = 0x807D;
        public static uint GL_VERTEX_ARRAY_SIZE = 0x807A;
        public static uint GL_VERTEX_ARRAY_STRIDE = 0x807C;
        public static uint GL_VERTEX_ARRAY_TYPE = 0x807B;
        public static uint GL_VIEWPORT = 0x0BA2;
        public static uint GL_ZOOM_X = 0x0D16;
        public static uint GL_ZOOM_Y = 0x0D17;
        public static uint GL_EXTENSIONS = 0x1F03;
        public static uint GL_RENDERER = 0x1F01;
        public static uint GL_VENDOR = 0x1F00;
        public static uint GL_VERSION = 0x1F02;
        public static uint GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C;
        public static uint GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0;
        public static uint GL_TEXTURE_4DSIZE_SGIS = 0x8136;
        public static uint GL_TEXTURE_ALPHA_SIZE = 0x805F;
        public static uint GL_TEXTURE_BLUE_SIZE = 0x805E;
        public static uint GL_TEXTURE_BORDER = 0x1005;
        public static uint GL_TEXTURE_BORDER_COLOR_NV = 0x1004;
        public static uint GL_TEXTURE_COMPARE_OPERATOR_SGIX = 0x819B;
        public static uint GL_TEXTURE_COMPONENTS = 0x1003;
        public static uint GL_TEXTURE_DEPTH_EXT = 0x8071;
        public static uint GL_TEXTURE_FILTER4_SIZE_SGIS = 0x8147;
        public static uint GL_TEXTURE_GEQUAL_R_SGIX = 0x819D;
        public static uint GL_TEXTURE_GREEN_SIZE = 0x805D;
        public static uint GL_TEXTURE_HEIGHT = 0x1001;
        public static uint GL_TEXTURE_INTENSITY_SIZE = 0x8061;
        public static uint GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
        public static uint GL_TEXTURE_LEQUAL_R_SGIX = 0x819C;
        public static uint GL_TEXTURE_LUMINANCE_SIZE = 0x8060;
        public static uint GL_TEXTURE_RED_SIZE = 0x805C;
        public static uint GL_TEXTURE_RESIDENT = 0x8067;
        public static uint GL_TEXTURE_WIDTH = 0x1000;
        public static uint GL_COMPILE = 0x1300;
        public static uint GL_COMPILE_AND_EXECUTE = 0x1301;
        public static uint GL_2_BYTES = 0x1407;
        public static uint GL_3_BYTES = 0x1408;
        public static uint GL_4_BYTES = 0x1409;
        public static uint GL_LINES = 0x0001;
        public static uint GL_LINES_ADJACENCY = 0x000A;
        public static uint GL_LINES_ADJACENCY_ARB = 0x000A;
        public static uint GL_LINES_ADJACENCY_EXT = 0x000A;
        public static uint GL_LINE_LOOP = 0x0002;
        public static uint GL_LINE_STRIP = 0x0003;
        public static uint GL_LINE_STRIP_ADJACENCY = 0x000B;
        public static uint GL_LINE_STRIP_ADJACENCY_ARB = 0x000B;
        public static uint GL_LINE_STRIP_ADJACENCY_EXT = 0x000B;
        public static uint GL_PATCHES = 0x000E;
        public static uint GL_POINTS = 0x0000;
        public static uint GL_POLYGON = 0x0009;
        public static uint GL_QUADS = 0x0007;
        public static uint GL_QUAD_STRIP = 0x0008;
        public static uint GL_TRIANGLES = 0x0004;
        public static uint GL_TRIANGLES_ADJACENCY = 0x000C;
        public static uint GL_TRIANGLES_ADJACENCY_ARB = 0x000C;
        public static uint GL_TRIANGLES_ADJACENCY_EXT = 0x000C;
        public static uint GL_TRIANGLE_FAN = 0x0006;
        public static uint GL_TRIANGLE_STRIP = 0x0005;
        public static uint GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
        public static uint GL_TRIANGLE_STRIP_ADJACENCY_ARB = 0x000D;
        public static uint GL_TRIANGLE_STRIP_ADJACENCY_EXT = 0x000D;
        public static uint GL_CLIP_DISTANCE0 = 0x3000;
        public static uint GL_CLIP_DISTANCE1 = 0x3001;
        public static uint GL_CLIP_DISTANCE2 = 0x3002;
        public static uint GL_CLIP_DISTANCE3 = 0x3003;
        public static uint GL_CLIP_DISTANCE4 = 0x3004;
        public static uint GL_CLIP_DISTANCE5 = 0x3005;
        public static uint GL_CLIP_DISTANCE6 = 0x3006;
        public static uint GL_CLIP_DISTANCE7 = 0x3007;
        public static uint GL_AMBIENT = 0x1200;
        public static uint GL_AMBIENT_AND_DIFFUSE = 0x1602;
        public static uint GL_DIFFUSE = 0x1201;
        public static uint GL_EMISSION = 0x1600;
        public static uint GL_SPECULAR = 0x1202;
        public static uint GL_CONSTANT_ATTENUATION = 0x1207;
        public static uint GL_LINEAR_ATTENUATION = 0x1208;
        public static uint GL_POSITION = 0x1203;
        public static uint GL_QUADRATIC_ATTENUATION = 0x1209;
        public static uint GL_SPOT_CUTOFF = 0x1206;
        public static uint GL_SPOT_DIRECTION = 0x1204;
        public static uint GL_SPOT_EXPONENT = 0x1205;
        public static uint GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8;
        public static uint GL_COLOR_INDEXES = 0x1603;
        public static uint GL_SHININESS = 0x1601;
        public static uint GL_FLAT = 0x1D00;
        public static uint GL_SMOOTH = 0x1D01;
        public static uint GL_TEXTURE_ENV = 0x2300;
        public static uint GL_TEXTURE_ENV_COLOR = 0x2201;
        public static uint GL_TEXTURE_ENV_MODE = 0x2200;
        public static uint GL_S = 0x2000;
        public static uint GL_T = 0x2001;
        public static uint GL_R = 0x2002;
        public static uint GL_Q = 0x2003;
        public static uint GL_EYE_LINE_SGIS = 0x81F6;
        public static uint GL_EYE_PLANE = 0x2502;
        public static uint GL_EYE_POINT_SGIS = 0x81F4;
        public static uint GL_OBJECT_LINE_SGIS = 0x81F7;
        public static uint GL_OBJECT_PLANE = 0x2501;
        public static uint GL_OBJECT_POINT_SGIS = 0x81F5;
        public static uint GL_TEXTURE_GEN_MODE = 0x2500;
        public static uint GL_2D = 0x0600;
        public static uint GL_3D = 0x0601;
        public static uint GL_3D_COLOR = 0x0602;
        public static uint GL_3D_COLOR_TEXTURE = 0x0603;
        public static uint GL_4D_COLOR_TEXTURE = 0x0604;
        public static uint GL_FEEDBACK = 0x1C01;
        public static uint GL_RENDER = 0x1C00;
        public static uint GL_SELECT = 0x1C02;
        public static uint GL_ACCUM = 0x0100;
        public static uint GL_LOAD = 0x0101;
        public static uint GL_RETURN = 0x0102;
        public static uint GL_MULT = 0x0103;
        public static uint GL_ADD = 0x0104;
        public static uint GL_ALL_ATTRIB_BITS = 0xFFFFFFFF;
        public static uint GL_CURRENT_BIT = 0x00000001;
        public static uint GL_ENABLE_BIT = 0x00002000;
        public static uint GL_EVAL_BIT = 0x00010000;
        public static uint GL_FOG_BIT = 0x00000080;
        public static uint GL_HINT_BIT = 0x00008000;
        public static uint GL_LIGHTING_BIT = 0x00000040;
        public static uint GL_LINE_BIT = 0x00000004;
        public static uint GL_LIST_BIT = 0x00020000;
        public static uint GL_MULTISAMPLE_BIT = 0x20000000;
        public static uint GL_MULTISAMPLE_BIT_3DFX = 0x20000000;
        public static uint GL_MULTISAMPLE_BIT_ARB = 0x20000000;
        public static uint GL_MULTISAMPLE_BIT_EXT = 0x20000000;
        public static uint GL_PIXEL_MODE_BIT = 0x00000020;
        public static uint GL_POINT_BIT = 0x00000002;
        public static uint GL_POLYGON_BIT = 0x00000008;
        public static uint GL_POLYGON_STIPPLE_BIT = 0x00000010;
        public static uint GL_SCISSOR_BIT = 0x00080000;
        public static uint GL_TEXTURE_BIT = 0x00040000;
        public static uint GL_TRANSFORM_BIT = 0x00001000;
        public static uint GL_VIEWPORT_BIT = 0x00000800;
        public static uint GL_GEOMETRY_DEFORMATION_SGIX = 0x8194;
        public static uint GL_TEXTURE_DEFORMATION_SGIX = 0x8195;
        public static uint GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB;
        public static uint GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7;
        public static uint GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA;
        public static uint GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6;
        public static uint GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9;
        public static uint GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5;
        public static uint GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8;
        public static uint GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4;
        public static uint GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023;
        public static uint GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F;
        public static uint GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022;
        public static uint GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E;
        public static uint GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021;
        public static uint GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D;
        public static uint GL_POST_CONVOLUTION_RED_BIAS = 0x8020;
        public static uint GL_POST_CONVOLUTION_RED_SCALE = 0x801C;
        public static uint GL_PIXEL_MAP_A_TO_A = 0x0C79;
        public static uint GL_PIXEL_MAP_B_TO_B = 0x0C78;
        public static uint GL_PIXEL_MAP_G_TO_G = 0x0C77;
        public static uint GL_PIXEL_MAP_I_TO_A = 0x0C75;
        public static uint GL_PIXEL_MAP_I_TO_B = 0x0C74;
        public static uint GL_PIXEL_MAP_I_TO_G = 0x0C73;
        public static uint GL_PIXEL_MAP_I_TO_I = 0x0C70;
        public static uint GL_PIXEL_MAP_I_TO_R = 0x0C72;
        public static uint GL_PIXEL_MAP_R_TO_R = 0x0C76;
        public static uint GL_PIXEL_MAP_S_TO_S = 0x0C71;
        public static uint GL_COLOR = 0x1800;
        public static uint GL_COLOR_EXT = 0x1800;
        public static uint GL_DEPTH = 0x1801;
        public static uint GL_DEPTH_EXT = 0x1801;
        public static uint GL_STENCIL = 0x1802;
        public static uint GL_STENCIL_EXT = 0x1802;
        public static uint GL_COEFF = 0x0A00;
        public static uint GL_DOMAIN = 0x0A02;
        public static uint GL_ORDER = 0x0A01;
        public static uint GL_MODELVIEW = 0x1700;
        public static uint GL_MODELVIEW0_EXT = 0x1700;
        public static uint GL_PROJECTION = 0x1701;
        public static uint GL_TEXTURE = 0x1702;
        public static uint GL_NO_ERROR = 0;
        public static uint GL_INVALID_ENUM = 0x0500;
        public static uint GL_INVALID_VALUE = 0x0501;
        public static uint GL_INVALID_OPERATION = 0x0502;
        public static uint GL_OUT_OF_MEMORY = 0x0505;
        public static uint GL_DOUBLE = 0x140A;
        public static uint GL_STACK_OVERFLOW = 0x0503;
        public static uint GL_STACK_UNDERFLOW = 0x0504;
        public static uint GL_NEAREST = 0x2600;
        public static uint GL_LINEAR = 0x2601;
        public static uint GL_NEAREST_MIPMAP_NEAREST = 0x2700;
        public static uint GL_LINEAR_MIPMAP_NEAREST = 0x2701;
        public static uint GL_NEAREST_MIPMAP_LINEAR = 0x2702;
        public static uint GL_LINEAR_MIPMAP_LINEAR = 0x2703;
        public static uint GL_REPEAT = 0x2901;
        public static uint GL_R3_G3_B2 = 0x2A10;
        public static uint GL_RGB4 = 0x804F;
        public static uint GL_RGB5 = 0x8050;
        public static uint GL_RGB8 = 0x8051;
        public static uint GL_RGB10 = 0x8052;
        public static uint GL_RGB12 = 0x8053;
        public static uint GL_RGB16 = 0x8054;
        public static uint GL_RGBA2 = 0x8055;
        public static uint GL_RGBA4 = 0x8056;
        public static uint GL_RGB5_A1 = 0x8057;
        public static uint GL_RGBA8 = 0x8058;
        public static uint GL_RGB10_A2 = 0x8059;
        public static uint GL_RGBA12 = 0x805A;
        public static uint GL_RGBA16 = 0x805B;
        public static uint GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
        public static uint GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
        public static uint GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF;
        public static uint GL_PASS_THROUGH_TOKEN = 0x0700;
        public static uint GL_POINT_TOKEN = 0x0701;
        public static uint GL_LINE_TOKEN = 0x0702;
        public static uint GL_POLYGON_TOKEN = 0x0703;
        public static uint GL_BITMAP_TOKEN = 0x0704;
        public static uint GL_DRAW_PIXEL_TOKEN = 0x0705;
        public static uint GL_COPY_PIXEL_TOKEN = 0x0706;
        public static uint GL_LINE_RESET_TOKEN = 0x0707;
        public static uint GL_EXP = 0x0800;
        public static uint GL_EXP2 = 0x0801;
        public static uint GL_VERTEX_ARRAY_POINTER = 0x808E;
        public static uint GL_NORMAL_ARRAY_POINTER = 0x808F;
        public static uint GL_COLOR_ARRAY_POINTER = 0x8090;
        public static uint GL_INDEX_ARRAY_POINTER = 0x8091;
        public static uint GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092;
        public static uint GL_EDGE_FLAG_ARRAY_POINTER = 0x8093;
        public static uint GL_FEEDBACK_BUFFER_POINTER = 0x0DF0;
        public static uint GL_SELECTION_BUFFER_POINTER = 0x0DF3;
        public static uint GL_MODULATE = 0x2100;
        public static uint GL_DECAL = 0x2101;
        public static uint GL_EYE_LINEAR = 0x2400;
        public static uint GL_OBJECT_LINEAR = 0x2401;
        public static uint GL_SPHERE_MAP = 0x2402;
        public static uint GL_CLAMP = 0x2900;
        public static uint GL_ALPHA4 = 0x803B;
        public static uint GL_ALPHA8 = 0x803C;
        public static uint GL_ALPHA12 = 0x803D;
        public static uint GL_ALPHA16 = 0x803E;
        public static uint GL_LUMINANCE4 = 0x803F;
        public static uint GL_LUMINANCE8 = 0x8040;
        public static uint GL_LUMINANCE12 = 0x8041;
        public static uint GL_LUMINANCE16 = 0x8042;
        public static uint GL_LUMINANCE4_ALPHA4 = 0x8043;
        public static uint GL_LUMINANCE6_ALPHA2 = 0x8044;
        public static uint GL_LUMINANCE8_ALPHA8 = 0x8045;
        public static uint GL_LUMINANCE12_ALPHA4 = 0x8046;
        public static uint GL_LUMINANCE12_ALPHA12 = 0x8047;
        public static uint GL_LUMINANCE16_ALPHA16 = 0x8048;
        public static uint GL_INTENSITY = 0x8049;
        public static uint GL_INTENSITY4 = 0x804A;
        public static uint GL_INTENSITY8 = 0x804B;
        public static uint GL_INTENSITY12 = 0x804C;
        public static uint GL_INTENSITY16 = 0x804D;
        public static uint GL_V2F = 0x2A20;
        public static uint GL_V3F = 0x2A21;
        public static uint GL_C4UB_V2F = 0x2A22;
        public static uint GL_C4UB_V3F = 0x2A23;
        public static uint GL_C3F_V3F = 0x2A24;
        public static uint GL_N3F_V3F = 0x2A25;
        public static uint GL_C4F_N3F_V3F = 0x2A26;
        public static uint GL_T2F_V3F = 0x2A27;
        public static uint GL_T4F_V4F = 0x2A28;
        public static uint GL_T2F_C4UB_V3F = 0x2A29;
        public static uint GL_T2F_C3F_V3F = 0x2A2A;
        public static uint GL_T2F_N3F_V3F = 0x2A2B;
        public static uint GL_T2F_C4F_N3F_V3F = 0x2A2C;
        public static uint GL_T4F_C4F_N3F_V4F = 0x2A2D;
        public static uint GL_TEXTURE_DEPTH = 0x8071;
        public static uint GL_MAX_3D_TEXTURE_SIZE = 0x8073;
        public static uint GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
        public static uint GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
        public static uint GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
        public static uint GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
        public static uint GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
        public static uint GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
        public static uint GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
        public static uint GL_BGR = 0x80E0;
        public static uint GL_BGRA = 0x80E1;
        public static uint GL_MAX_ELEMENTS_VERTICES = 0x80E8;
        public static uint GL_MAX_ELEMENTS_INDICES = 0x80E9;
        public static uint GL_CLAMP_TO_EDGE = 0x812F;
        public static uint GL_RESCALE_NORMAL = 0x803A;
        public static uint GL_SINGLE_COLOR = 0x81F9;
        public static uint GL_SEPARATE_SPECULAR_COLOR = 0x81FA;
        public static uint GL_TEXTURE0 = 0x84C0;
        public static uint GL_TEXTURE1 = 0x84C1;
        public static uint GL_TEXTURE2 = 0x84C2;
        public static uint GL_TEXTURE3 = 0x84C3;
        public static uint GL_TEXTURE4 = 0x84C4;
        public static uint GL_TEXTURE5 = 0x84C5;
        public static uint GL_TEXTURE6 = 0x84C6;
        public static uint GL_TEXTURE7 = 0x84C7;
        public static uint GL_TEXTURE8 = 0x84C8;
        public static uint GL_TEXTURE9 = 0x84C9;
        public static uint GL_TEXTURE10 = 0x84CA;
        public static uint GL_TEXTURE11 = 0x84CB;
        public static uint GL_TEXTURE12 = 0x84CC;
        public static uint GL_TEXTURE13 = 0x84CD;
        public static uint GL_TEXTURE14 = 0x84CE;
        public static uint GL_TEXTURE15 = 0x84CF;
        public static uint GL_TEXTURE16 = 0x84D0;
        public static uint GL_TEXTURE17 = 0x84D1;
        public static uint GL_TEXTURE18 = 0x84D2;
        public static uint GL_TEXTURE19 = 0x84D3;
        public static uint GL_TEXTURE20 = 0x84D4;
        public static uint GL_TEXTURE21 = 0x84D5;
        public static uint GL_TEXTURE22 = 0x84D6;
        public static uint GL_TEXTURE23 = 0x84D7;
        public static uint GL_TEXTURE24 = 0x84D8;
        public static uint GL_TEXTURE25 = 0x84D9;
        public static uint GL_TEXTURE26 = 0x84DA;
        public static uint GL_TEXTURE27 = 0x84DB;
        public static uint GL_TEXTURE28 = 0x84DC;
        public static uint GL_TEXTURE29 = 0x84DD;
        public static uint GL_TEXTURE30 = 0x84DE;
        public static uint GL_TEXTURE31 = 0x84DF;
        public static uint GL_ACTIVE_TEXTURE = 0x84E0;
        public static uint GL_MULTISAMPLE = 0x809D;
        public static uint GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
        public static uint GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
        public static uint GL_SAMPLE_COVERAGE = 0x80A0;
        public static uint GL_SAMPLE_BUFFERS = 0x80A8;
        public static uint GL_SAMPLES = 0x80A9;
        public static uint GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
        public static uint GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
        public static uint GL_TEXTURE_CUBE_MAP = 0x8513;
        public static uint GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
        public static uint GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
        public static uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
        public static uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
        public static uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
        public static uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
        public static uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
        public static uint GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
        public static uint GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
        public static uint GL_COMPRESSED_RGB = 0x84ED;
        public static uint GL_COMPRESSED_RGBA = 0x84EE;
        public static uint GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
        public static uint GL_TEXTURE_COMPRESSED = 0x86A1;
        public static uint GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
        public static uint GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
        public static uint GL_CLAMP_TO_BORDER = 0x812D;
        public static uint GL_CLIENT_ACTIVE_TEXTURE = 0x84E1;
        public static uint GL_MAX_TEXTURE_UNITS = 0x84E2;
        public static uint GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
        public static uint GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
        public static uint GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
        public static uint GL_TRANSPOSE_COLOR_MATRIX = 0x84E6;
        public static uint GL_NORMAL_MAP = 0x8511;
        public static uint GL_REFLECTION_MAP = 0x8512;
        public static uint GL_COMPRESSED_ALPHA = 0x84E9;
        public static uint GL_COMPRESSED_LUMINANCE = 0x84EA;
        public static uint GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
        public static uint GL_COMPRESSED_INTENSITY = 0x84EC;
        public static uint GL_COMBINE = 0x8570;
        public static uint GL_COMBINE_RGB = 0x8571;
        public static uint GL_COMBINE_ALPHA = 0x8572;
        public static uint GL_SOURCE0_RGB = 0x8580;
        public static uint GL_SOURCE1_RGB = 0x8581;
        public static uint GL_SOURCE2_RGB = 0x8582;
        public static uint GL_SOURCE0_ALPHA = 0x8588;
        public static uint GL_SOURCE1_ALPHA = 0x8589;
        public static uint GL_SOURCE2_ALPHA = 0x858A;
        public static uint GL_OPERAND0_RGB = 0x8590;
        public static uint GL_OPERAND1_RGB = 0x8591;
        public static uint GL_OPERAND2_RGB = 0x8592;
        public static uint GL_OPERAND0_ALPHA = 0x8598;
        public static uint GL_OPERAND1_ALPHA = 0x8599;
        public static uint GL_OPERAND2_ALPHA = 0x859A;
        public static uint GL_RGB_SCALE = 0x8573;
        public static uint GL_ADD_SIGNED = 0x8574;
        public static uint GL_INTERPOLATE = 0x8575;
        public static uint GL_SUBTRACT = 0x84E7;
        public static uint GL_CONSTANT = 0x8576;
        public static uint GL_PRIMARY_COLOR = 0x8577;
        public static uint GL_PREVIOUS = 0x8578;
        public static uint GL_DOT3_RGB = 0x86AE;
        public static uint GL_DOT3_RGBA = 0x86AF;
        public static uint GL_BLEND_DST_RGB = 0x80C8;
        public static uint GL_BLEND_SRC_RGB = 0x80C9;
        public static uint GL_BLEND_DST_ALPHA = 0x80CA;
        public static uint GL_BLEND_SRC_ALPHA = 0x80CB;
        public static uint GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
        public static uint GL_DEPTH_COMPONENT16 = 0x81A5;
        public static uint GL_DEPTH_COMPONENT24 = 0x81A6;
        public static uint GL_DEPTH_COMPONENT32 = 0x81A7;
        public static uint GL_MIRRORED_REPEAT = 0x8370;
        public static uint GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
        public static uint GL_TEXTURE_LOD_BIAS = 0x8501;
        public static uint GL_INCR_WRAP = 0x8507;
        public static uint GL_DECR_WRAP = 0x8508;
        public static uint GL_TEXTURE_DEPTH_SIZE = 0x884A;
        public static uint GL_TEXTURE_COMPARE_MODE = 0x884C;
        public static uint GL_TEXTURE_COMPARE_FUNC = 0x884D;
        public static uint GL_POINT_SIZE_MIN = 0x8126;
        public static uint GL_POINT_SIZE_MAX = 0x8127;
        public static uint GL_POINT_DISTANCE_ATTENUATION = 0x8129;
        public static uint GL_FOG_COORDINATE_SOURCE = 0x8450;
        public static uint GL_FOG_COORDINATE = 0x8451;
        public static uint GL_FRAGMENT_DEPTH = 0x8452;
        public static uint GL_CURRENT_FOG_COORDINATE = 0x8453;
        public static uint GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454;
        public static uint GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
        public static uint GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456;
        public static uint GL_FOG_COORDINATE_ARRAY = 0x8457;
        public static uint GL_COLOR_SUM = 0x8458;
        public static uint GL_CURRENT_SECONDARY_COLOR = 0x8459;
        public static uint GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
        public static uint GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
        public static uint GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
        public static uint GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
        public static uint GL_SECONDARY_COLOR_ARRAY = 0x845E;
        public static uint GL_TEXTURE_FILTER_CONTROL = 0x8500;
        public static uint GL_DEPTH_TEXTURE_MODE = 0x884B;
        public static uint GL_COMPARE_R_TO_TEXTURE = 0x884E;
        public static uint GL_FUNC_ADD = 0x8006;
        public static uint GL_FUNC_SUBTRACT = 0x800A;
        public static uint GL_FUNC_REVERSE_SUBTRACT = 0x800B;
        public static uint GL_MIN = 0x8007;
        public static uint GL_MAX = 0x8008;
        public static uint GL_CONSTANT_COLOR = 0x8001;
        public static uint GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
        public static uint GL_CONSTANT_ALPHA = 0x8003;
        public static uint GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
        public static uint GL_BUFFER_SIZE = 0x8764;
        public static uint GL_BUFFER_USAGE = 0x8765;
        public static uint GL_QUERY_COUNTER_BITS = 0x8864;
        public static uint GL_CURRENT_QUERY = 0x8865;
        public static uint GL_QUERY_RESULT = 0x8866;
        public static uint GL_QUERY_RESULT_AVAILABLE = 0x8867;
        public static uint GL_ARRAY_BUFFER = 0x8892;
        public static uint GL_ELEMENT_ARRAY_BUFFER = 0x8893;
        public static uint GL_ARRAY_BUFFER_BINDING = 0x8894;
        public static uint GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
        public static uint GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
        public static uint GL_READ_ONLY = 0x88B8;
        public static uint GL_WRITE_ONLY = 0x88B9;
        public static uint GL_READ_WRITE = 0x88BA;
        public static uint GL_BUFFER_ACCESS = 0x88BB;
        public static uint GL_BUFFER_MAPPED = 0x88BC;
        public static uint GL_BUFFER_MAP_POINTER = 0x88BD;
        public static uint GL_STREAM_DRAW = 0x88E0;
        public static uint GL_STREAM_READ = 0x88E1;
        public static uint GL_STREAM_COPY = 0x88E2;
        public static uint GL_STATIC_DRAW = 0x88E4;
        public static uint GL_STATIC_READ = 0x88E5;
        public static uint GL_STATIC_COPY = 0x88E6;
        public static uint GL_DYNAMIC_DRAW = 0x88E8;
        public static uint GL_DYNAMIC_READ = 0x88E9;
        public static uint GL_DYNAMIC_COPY = 0x88EA;
        public static uint GL_SAMPLES_PASSED = 0x8914;
        public static uint GL_SRC1_ALPHA = 0x8589;
        public static uint GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
        public static uint GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
        public static uint GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898;
        public static uint GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899;
        public static uint GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
        public static uint GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
        public static uint GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
        public static uint GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
        public static uint GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E;
        public static uint GL_FOG_COORD_SRC = 0x8450;
        public static uint GL_FOG_COORD = 0x8451;
        public static uint GL_CURRENT_FOG_COORD = 0x8453;
        public static uint GL_FOG_COORD_ARRAY_TYPE = 0x8454;
        public static uint GL_FOG_COORD_ARRAY_STRIDE = 0x8455;
        public static uint GL_FOG_COORD_ARRAY_POINTER = 0x8456;
        public static uint GL_FOG_COORD_ARRAY = 0x8457;
        public static uint GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D;
        public static uint GL_SRC0_RGB = 0x8580;
        public static uint GL_SRC1_RGB = 0x8581;
        public static uint GL_SRC2_RGB = 0x8582;
        public static uint GL_SRC0_ALPHA = 0x8588;
        public static uint GL_SRC2_ALPHA = 0x858A;
        #endregion

        #region Commands
        public static void glCullFace(uint mode)
        {
            glCullFacePtr(mode);
        }
        public static void glFrontFace(uint mode)
        {
            glFrontFacePtr(mode);
        }
        public static void glHint(uint target, uint mode)
        {
            glHintPtr(target, mode);
        }
        public static void glLineWidth(float width)
        {
            glLineWidthPtr(width);
        }
        public static void glPointSize(float size)
        {
            glPointSizePtr(size);
        }
        public static void glPolygonMode(uint face, uint mode)
        {
            glPolygonModePtr(face, mode);
        }
        public static void glScissor(int x, int y, int width, int height)
        {
            glScissorPtr(x, y, width, height);
        }
        public static void glTexParameterf(uint target, uint pname, float param)
        {
            glTexParameterfPtr(target, pname, param);
        }
        public static void glTexParameterfv(uint target, uint pname, IntPtr @params)
        {
            glTexParameterfvPtr(target, pname, @params);
        }
        public static void glTexParameteri(uint target, uint pname, int param)
        {
            glTexParameteriPtr(target, pname, param);
        }
        public static void glTexParameteriv(uint target, uint pname, IntPtr @params)
        {
            glTexParameterivPtr(target, pname, @params);
        }
        public static void glTexImage1D(uint target, int level, int internalformat, int width, int border, uint format, uint type, IntPtr pixels)
        {
            glTexImage1DPtr(target, level, internalformat, width, border, format, type, pixels);
        }
        public static void glTexImage2D(uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, IntPtr pixels)
        {
            glTexImage2DPtr(target, level, internalformat, width, height, border, format, type, pixels);
        }
        public static void glDrawBuffer(uint mode)
        {
            glDrawBufferPtr(mode);
        }
        public static void glClear(uint mask)
        {
            glClearPtr(mask);
        }
        public static void glClearColor(float red, float green, float blue, float alpha)
        {
            glClearColorPtr(red, green, blue, alpha);
        }
        public static void glClearStencil(int s)
        {
            glClearStencilPtr(s);
        }
        public static void glClearDepth(double depth)
        {
            glClearDepthPtr(depth);
        }
        public static void glStencilMask(uint mask)
        {
            glStencilMaskPtr(mask);
        }
        public static void glColorMask(bool red, bool green, bool blue, bool alpha)
        {
            glColorMaskPtr(red, green, blue, alpha);
        }
        public static void glDepthMask(bool flag)
        {
            glDepthMaskPtr(flag);
        }
        public static void glDisable(uint cap)
        {
            glDisablePtr(cap);
        }
        public static void glEnable(uint cap)
        {
            glEnablePtr(cap);
        }
        public static void glFinish()
        {
            glFinishPtr();
        }
        public static void glFlush()
        {
            glFlushPtr();
        }
        public static void glBlendFunc(uint sfactor, uint dfactor)
        {
            glBlendFuncPtr(sfactor, dfactor);
        }
        public static void glLogicOp(uint opcode)
        {
            glLogicOpPtr(opcode);
        }
        public static void glStencilFunc(uint func, int @ref, uint mask)
        {
            glStencilFuncPtr(func, @ref, mask);
        }
        public static void glStencilOp(uint fail, uint zfail, uint zpass)
        {
            glStencilOpPtr(fail, zfail, zpass);
        }
        public static void glDepthFunc(uint func)
        {
            glDepthFuncPtr(func);
        }
        public static void glPixelStoref(uint pname, float param)
        {
            glPixelStorefPtr(pname, param);
        }
        public static void glPixelStorei(uint pname, int param)
        {
            glPixelStoreiPtr(pname, param);
        }
        public static void glReadBuffer(uint mode)
        {
            glReadBufferPtr(mode);
        }
        public static void glReadPixels(int x, int y, int width, int height, uint format, uint type, IntPtr pixels)
        {
            glReadPixelsPtr(x, y, width, height, format, type, pixels);
        }
        public static void glGetBooleanv(uint pname, IntPtr data)
        {
            glGetBooleanvPtr(pname, data);
        }
        public static void glGetDoublev(uint pname, IntPtr data)
        {
            glGetDoublevPtr(pname, data);
        }
        public static uint glGetError()
        {
            return glGetErrorPtr();
        }
        public static void glGetFloatv(uint pname, IntPtr data)
        {
            glGetFloatvPtr(pname, data);
        }
        public static void glGetIntegerv(uint pname, IntPtr data)
        {
            glGetIntegervPtr(pname, data);
        }
        public static IntPtr glGetString(uint name)
        {
            return glGetStringPtr(name);
        }
        public static void glGetTexImage(uint target, int level, uint format, uint type, IntPtr pixels)
        {
            glGetTexImagePtr(target, level, format, type, pixels);
        }
        public static void glGetTexParameterfv(uint target, uint pname, IntPtr @params)
        {
            glGetTexParameterfvPtr(target, pname, @params);
        }
        public static void glGetTexParameteriv(uint target, uint pname, IntPtr @params)
        {
            glGetTexParameterivPtr(target, pname, @params);
        }
        public static void glGetTexLevelParameterfv(uint target, int level, uint pname, IntPtr @params)
        {
            glGetTexLevelParameterfvPtr(target, level, pname, @params);
        }
        public static void glGetTexLevelParameteriv(uint target, int level, uint pname, IntPtr @params)
        {
            glGetTexLevelParameterivPtr(target, level, pname, @params);
        }
        public static bool glIsEnabled(uint cap)
        {
            return glIsEnabledPtr(cap);
        }
        public static void glDepthRange(double near, double far)
        {
            glDepthRangePtr(near, far);
        }
        public static void glViewport(int x, int y, int width, int height)
        {
            glViewportPtr(x, y, width, height);
        }
        public static void glNewList(uint list, uint mode)
        {
            glNewListPtr(list, mode);
        }
        public static void glEndList()
        {
            glEndListPtr();
        }
        public static void glCallList(uint list)
        {
            glCallListPtr(list);
        }
        public static void glCallLists(int n, uint type, IntPtr lists)
        {
            glCallListsPtr(n, type, lists);
        }
        public static void glDeleteLists(uint list, int range)
        {
            glDeleteListsPtr(list, range);
        }
        public static uint glGenLists(int range)
        {
            return glGenListsPtr(range);
        }
        public static void glListBase(uint @base)
        {
            glListBasePtr(@base);
        }
        public static void glBegin(uint mode)
        {
            glBeginPtr(mode);
        }
        public static void glBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, IntPtr bitmap)
        {
            glBitmapPtr(width, height, xorig, yorig, xmove, ymove, bitmap);
        }
        public static void glColor3b(sbyte red, sbyte green, sbyte blue)
        {
            glColor3bPtr(red, green, blue);
        }
        public static void glColor3bv(IntPtr v)
        {
            glColor3bvPtr(v);
        }
        public static void glColor3d(double red, double green, double blue)
        {
            glColor3dPtr(red, green, blue);
        }
        public static void glColor3dv(IntPtr v)
        {
            glColor3dvPtr(v);
        }
        public static void glColor3f(float red, float green, float blue)
        {
            glColor3fPtr(red, green, blue);
        }
        public static void glColor3fv(IntPtr v)
        {
            glColor3fvPtr(v);
        }
        public static void glColor3i(int red, int green, int blue)
        {
            glColor3iPtr(red, green, blue);
        }
        public static void glColor3iv(IntPtr v)
        {
            glColor3ivPtr(v);
        }
        public static void glColor3s(short red, short green, short blue)
        {
            glColor3sPtr(red, green, blue);
        }
        public static void glColor3sv(IntPtr v)
        {
            glColor3svPtr(v);
        }
        public static void glColor3ub(byte red, byte green, byte blue)
        {
            glColor3ubPtr(red, green, blue);
        }
        public static void glColor3ubv(IntPtr v)
        {
            glColor3ubvPtr(v);
        }
        public static void glColor3ui(uint red, uint green, uint blue)
        {
            glColor3uiPtr(red, green, blue);
        }
        public static void glColor3uiv(IntPtr v)
        {
            glColor3uivPtr(v);
        }
        public static void glColor3us(ushort red, ushort green, ushort blue)
        {
            glColor3usPtr(red, green, blue);
        }
        public static void glColor3usv(IntPtr v)
        {
            glColor3usvPtr(v);
        }
        public static void glColor4b(sbyte red, sbyte green, sbyte blue, sbyte alpha)
        {
            glColor4bPtr(red, green, blue, alpha);
        }
        public static void glColor4bv(IntPtr v)
        {
            glColor4bvPtr(v);
        }
        public static void glColor4d(double red, double green, double blue, double alpha)
        {
            glColor4dPtr(red, green, blue, alpha);
        }
        public static void glColor4dv(IntPtr v)
        {
            glColor4dvPtr(v);
        }
        public static void glColor4f(float red, float green, float blue, float alpha)
        {
            glColor4fPtr(red, green, blue, alpha);
        }
        public static void glColor4fv(IntPtr v)
        {
            glColor4fvPtr(v);
        }
        public static void glColor4i(int red, int green, int blue, int alpha)
        {
            glColor4iPtr(red, green, blue, alpha);
        }
        public static void glColor4iv(IntPtr v)
        {
            glColor4ivPtr(v);
        }
        public static void glColor4s(short red, short green, short blue, short alpha)
        {
            glColor4sPtr(red, green, blue, alpha);
        }
        public static void glColor4sv(IntPtr v)
        {
            glColor4svPtr(v);
        }
        public static void glColor4ub(byte red, byte green, byte blue, byte alpha)
        {
            glColor4ubPtr(red, green, blue, alpha);
        }
        public static void glColor4ubv(IntPtr v)
        {
            glColor4ubvPtr(v);
        }
        public static void glColor4ui(uint red, uint green, uint blue, uint alpha)
        {
            glColor4uiPtr(red, green, blue, alpha);
        }
        public static void glColor4uiv(IntPtr v)
        {
            glColor4uivPtr(v);
        }
        public static void glColor4us(ushort red, ushort green, ushort blue, ushort alpha)
        {
            glColor4usPtr(red, green, blue, alpha);
        }
        public static void glColor4usv(IntPtr v)
        {
            glColor4usvPtr(v);
        }
        public static void glEdgeFlag(bool flag)
        {
            glEdgeFlagPtr(flag);
        }
        public static void glEdgeFlagv(IntPtr flag)
        {
            glEdgeFlagvPtr(flag);
        }
        public static void glEnd()
        {
            glEndPtr();
        }
        public static void glIndexd(double c)
        {
            glIndexdPtr(c);
        }
        public static void glIndexdv(IntPtr c)
        {
            glIndexdvPtr(c);
        }
        public static void glIndexf(float c)
        {
            glIndexfPtr(c);
        }
        public static void glIndexfv(IntPtr c)
        {
            glIndexfvPtr(c);
        }
        public static void glIndexi(int c)
        {
            glIndexiPtr(c);
        }
        public static void glIndexiv(IntPtr c)
        {
            glIndexivPtr(c);
        }
        public static void glIndexs(short c)
        {
            glIndexsPtr(c);
        }
        public static void glIndexsv(IntPtr c)
        {
            glIndexsvPtr(c);
        }
        public static void glNormal3b(sbyte nx, sbyte ny, sbyte nz)
        {
            glNormal3bPtr(nx, ny, nz);
        }
        public static void glNormal3bv(IntPtr v)
        {
            glNormal3bvPtr(v);
        }
        public static void glNormal3d(double nx, double ny, double nz)
        {
            glNormal3dPtr(nx, ny, nz);
        }
        public static void glNormal3dv(IntPtr v)
        {
            glNormal3dvPtr(v);
        }
        public static void glNormal3f(float nx, float ny, float nz)
        {
            glNormal3fPtr(nx, ny, nz);
        }
        public static void glNormal3fv(IntPtr v)
        {
            glNormal3fvPtr(v);
        }
        public static void glNormal3i(int nx, int ny, int nz)
        {
            glNormal3iPtr(nx, ny, nz);
        }
        public static void glNormal3iv(IntPtr v)
        {
            glNormal3ivPtr(v);
        }
        public static void glNormal3s(short nx, short ny, short nz)
        {
            glNormal3sPtr(nx, ny, nz);
        }
        public static void glNormal3sv(IntPtr v)
        {
            glNormal3svPtr(v);
        }
        public static void glRasterPos2d(double x, double y)
        {
            glRasterPos2dPtr(x, y);
        }
        public static void glRasterPos2dv(IntPtr v)
        {
            glRasterPos2dvPtr(v);
        }
        public static void glRasterPos2f(float x, float y)
        {
            glRasterPos2fPtr(x, y);
        }
        public static void glRasterPos2fv(IntPtr v)
        {
            glRasterPos2fvPtr(v);
        }
        public static void glRasterPos2i(int x, int y)
        {
            glRasterPos2iPtr(x, y);
        }
        public static void glRasterPos2iv(IntPtr v)
        {
            glRasterPos2ivPtr(v);
        }
        public static void glRasterPos2s(short x, short y)
        {
            glRasterPos2sPtr(x, y);
        }
        public static void glRasterPos2sv(IntPtr v)
        {
            glRasterPos2svPtr(v);
        }
        public static void glRasterPos3d(double x, double y, double z)
        {
            glRasterPos3dPtr(x, y, z);
        }
        public static void glRasterPos3dv(IntPtr v)
        {
            glRasterPos3dvPtr(v);
        }
        public static void glRasterPos3f(float x, float y, float z)
        {
            glRasterPos3fPtr(x, y, z);
        }
        public static void glRasterPos3fv(IntPtr v)
        {
            glRasterPos3fvPtr(v);
        }
        public static void glRasterPos3i(int x, int y, int z)
        {
            glRasterPos3iPtr(x, y, z);
        }
        public static void glRasterPos3iv(IntPtr v)
        {
            glRasterPos3ivPtr(v);
        }
        public static void glRasterPos3s(short x, short y, short z)
        {
            glRasterPos3sPtr(x, y, z);
        }
        public static void glRasterPos3sv(IntPtr v)
        {
            glRasterPos3svPtr(v);
        }
        public static void glRasterPos4d(double x, double y, double z, double w)
        {
            glRasterPos4dPtr(x, y, z, w);
        }
        public static void glRasterPos4dv(IntPtr v)
        {
            glRasterPos4dvPtr(v);
        }
        public static void glRasterPos4f(float x, float y, float z, float w)
        {
            glRasterPos4fPtr(x, y, z, w);
        }
        public static void glRasterPos4fv(IntPtr v)
        {
            glRasterPos4fvPtr(v);
        }
        public static void glRasterPos4i(int x, int y, int z, int w)
        {
            glRasterPos4iPtr(x, y, z, w);
        }
        public static void glRasterPos4iv(IntPtr v)
        {
            glRasterPos4ivPtr(v);
        }
        public static void glRasterPos4s(short x, short y, short z, short w)
        {
            glRasterPos4sPtr(x, y, z, w);
        }
        public static void glRasterPos4sv(IntPtr v)
        {
            glRasterPos4svPtr(v);
        }
        public static void glRectd(double x1, double y1, double x2, double y2)
        {
            glRectdPtr(x1, y1, x2, y2);
        }
        public static void glRectdv(IntPtr v1, IntPtr v2)
        {
            glRectdvPtr(v1, v2);
        }
        public static void glRectf(float x1, float y1, float x2, float y2)
        {
            glRectfPtr(x1, y1, x2, y2);
        }
        public static void glRectfv(IntPtr v1, IntPtr v2)
        {
            glRectfvPtr(v1, v2);
        }
        public static void glRecti(int x1, int y1, int x2, int y2)
        {
            glRectiPtr(x1, y1, x2, y2);
        }
        public static void glRectiv(IntPtr v1, IntPtr v2)
        {
            glRectivPtr(v1, v2);
        }
        public static void glRects(short x1, short y1, short x2, short y2)
        {
            glRectsPtr(x1, y1, x2, y2);
        }
        public static void glRectsv(IntPtr v1, IntPtr v2)
        {
            glRectsvPtr(v1, v2);
        }
        public static void glTexCoord1d(double s)
        {
            glTexCoord1dPtr(s);
        }
        public static void glTexCoord1dv(IntPtr v)
        {
            glTexCoord1dvPtr(v);
        }
        public static void glTexCoord1f(float s)
        {
            glTexCoord1fPtr(s);
        }
        public static void glTexCoord1fv(IntPtr v)
        {
            glTexCoord1fvPtr(v);
        }
        public static void glTexCoord1i(int s)
        {
            glTexCoord1iPtr(s);
        }
        public static void glTexCoord1iv(IntPtr v)
        {
            glTexCoord1ivPtr(v);
        }
        public static void glTexCoord1s(short s)
        {
            glTexCoord1sPtr(s);
        }
        public static void glTexCoord1sv(IntPtr v)
        {
            glTexCoord1svPtr(v);
        }
        public static void glTexCoord2d(double s, double t)
        {
            glTexCoord2dPtr(s, t);
        }
        public static void glTexCoord2dv(IntPtr v)
        {
            glTexCoord2dvPtr(v);
        }
        public static void glTexCoord2f(float s, float t)
        {
            glTexCoord2fPtr(s, t);
        }
        public static void glTexCoord2fv(IntPtr v)
        {
            glTexCoord2fvPtr(v);
        }
        public static void glTexCoord2i(int s, int t)
        {
            glTexCoord2iPtr(s, t);
        }
        public static void glTexCoord2iv(IntPtr v)
        {
            glTexCoord2ivPtr(v);
        }
        public static void glTexCoord2s(short s, short t)
        {
            glTexCoord2sPtr(s, t);
        }
        public static void glTexCoord2sv(IntPtr v)
        {
            glTexCoord2svPtr(v);
        }
        public static void glTexCoord3d(double s, double t, double r)
        {
            glTexCoord3dPtr(s, t, r);
        }
        public static void glTexCoord3dv(IntPtr v)
        {
            glTexCoord3dvPtr(v);
        }
        public static void glTexCoord3f(float s, float t, float r)
        {
            glTexCoord3fPtr(s, t, r);
        }
        public static void glTexCoord3fv(IntPtr v)
        {
            glTexCoord3fvPtr(v);
        }
        public static void glTexCoord3i(int s, int t, int r)
        {
            glTexCoord3iPtr(s, t, r);
        }
        public static void glTexCoord3iv(IntPtr v)
        {
            glTexCoord3ivPtr(v);
        }
        public static void glTexCoord3s(short s, short t, short r)
        {
            glTexCoord3sPtr(s, t, r);
        }
        public static void glTexCoord3sv(IntPtr v)
        {
            glTexCoord3svPtr(v);
        }
        public static void glTexCoord4d(double s, double t, double r, double q)
        {
            glTexCoord4dPtr(s, t, r, q);
        }
        public static void glTexCoord4dv(IntPtr v)
        {
            glTexCoord4dvPtr(v);
        }
        public static void glTexCoord4f(float s, float t, float r, float q)
        {
            glTexCoord4fPtr(s, t, r, q);
        }
        public static void glTexCoord4fv(IntPtr v)
        {
            glTexCoord4fvPtr(v);
        }
        public static void glTexCoord4i(int s, int t, int r, int q)
        {
            glTexCoord4iPtr(s, t, r, q);
        }
        public static void glTexCoord4iv(IntPtr v)
        {
            glTexCoord4ivPtr(v);
        }
        public static void glTexCoord4s(short s, short t, short r, short q)
        {
            glTexCoord4sPtr(s, t, r, q);
        }
        public static void glTexCoord4sv(IntPtr v)
        {
            glTexCoord4svPtr(v);
        }
        public static void glVertex2d(double x, double y)
        {
            glVertex2dPtr(x, y);
        }
        public static void glVertex2dv(IntPtr v)
        {
            glVertex2dvPtr(v);
        }
        public static void glVertex2f(float x, float y)
        {
            glVertex2fPtr(x, y);
        }
        public static void glVertex2fv(IntPtr v)
        {
            glVertex2fvPtr(v);
        }
        public static void glVertex2i(int x, int y)
        {
            glVertex2iPtr(x, y);
        }
        public static void glVertex2iv(IntPtr v)
        {
            glVertex2ivPtr(v);
        }
        public static void glVertex2s(short x, short y)
        {
            glVertex2sPtr(x, y);
        }
        public static void glVertex2sv(IntPtr v)
        {
            glVertex2svPtr(v);
        }
        public static void glVertex3d(double x, double y, double z)
        {
            glVertex3dPtr(x, y, z);
        }
        public static void glVertex3dv(IntPtr v)
        {
            glVertex3dvPtr(v);
        }
        public static void glVertex3f(float x, float y, float z)
        {
            glVertex3fPtr(x, y, z);
        }
        public static void glVertex3fv(IntPtr v)
        {
            glVertex3fvPtr(v);
        }
        public static void glVertex3i(int x, int y, int z)
        {
            glVertex3iPtr(x, y, z);
        }
        public static void glVertex3iv(IntPtr v)
        {
            glVertex3ivPtr(v);
        }
        public static void glVertex3s(short x, short y, short z)
        {
            glVertex3sPtr(x, y, z);
        }
        public static void glVertex3sv(IntPtr v)
        {
            glVertex3svPtr(v);
        }
        public static void glVertex4d(double x, double y, double z, double w)
        {
            glVertex4dPtr(x, y, z, w);
        }
        public static void glVertex4dv(IntPtr v)
        {
            glVertex4dvPtr(v);
        }
        public static void glVertex4f(float x, float y, float z, float w)
        {
            glVertex4fPtr(x, y, z, w);
        }
        public static void glVertex4fv(IntPtr v)
        {
            glVertex4fvPtr(v);
        }
        public static void glVertex4i(int x, int y, int z, int w)
        {
            glVertex4iPtr(x, y, z, w);
        }
        public static void glVertex4iv(IntPtr v)
        {
            glVertex4ivPtr(v);
        }
        public static void glVertex4s(short x, short y, short z, short w)
        {
            glVertex4sPtr(x, y, z, w);
        }
        public static void glVertex4sv(IntPtr v)
        {
            glVertex4svPtr(v);
        }
        public static void glClipPlane(uint plane, IntPtr equation)
        {
            glClipPlanePtr(plane, equation);
        }
        public static void glColorMaterial(uint face, uint mode)
        {
            glColorMaterialPtr(face, mode);
        }
        public static void glFogf(uint pname, float param)
        {
            glFogfPtr(pname, param);
        }
        public static void glFogfv(uint pname, IntPtr @params)
        {
            glFogfvPtr(pname, @params);
        }
        public static void glFogi(uint pname, int param)
        {
            glFogiPtr(pname, param);
        }
        public static void glFogiv(uint pname, IntPtr @params)
        {
            glFogivPtr(pname, @params);
        }
        public static void glLightf(uint light, uint pname, float param)
        {
            glLightfPtr(light, pname, param);
        }
        public static void glLightfv(uint light, uint pname, IntPtr @params)
        {
            glLightfvPtr(light, pname, @params);
        }
        public static void glLighti(uint light, uint pname, int param)
        {
            glLightiPtr(light, pname, param);
        }
        public static void glLightiv(uint light, uint pname, IntPtr @params)
        {
            glLightivPtr(light, pname, @params);
        }
        public static void glLightModelf(uint pname, float param)
        {
            glLightModelfPtr(pname, param);
        }
        public static void glLightModelfv(uint pname, IntPtr @params)
        {
            glLightModelfvPtr(pname, @params);
        }
        public static void glLightModeli(uint pname, int param)
        {
            glLightModeliPtr(pname, param);
        }
        public static void glLightModeliv(uint pname, IntPtr @params)
        {
            glLightModelivPtr(pname, @params);
        }
        public static void glLineStipple(int factor, ushort pattern)
        {
            glLineStipplePtr(factor, pattern);
        }
        public static void glMaterialf(uint face, uint pname, float param)
        {
            glMaterialfPtr(face, pname, param);
        }
        public static void glMaterialfv(uint face, uint pname, IntPtr @params)
        {
            glMaterialfvPtr(face, pname, @params);
        }
        public static void glMateriali(uint face, uint pname, int param)
        {
            glMaterialiPtr(face, pname, param);
        }
        public static void glMaterialiv(uint face, uint pname, IntPtr @params)
        {
            glMaterialivPtr(face, pname, @params);
        }
        public static void glPolygonStipple(IntPtr mask)
        {
            glPolygonStipplePtr(mask);
        }
        public static void glShadeModel(uint mode)
        {
            glShadeModelPtr(mode);
        }
        public static void glTexEnvf(uint target, uint pname, float param)
        {
            glTexEnvfPtr(target, pname, param);
        }
        public static void glTexEnvfv(uint target, uint pname, IntPtr @params)
        {
            glTexEnvfvPtr(target, pname, @params);
        }
        public static void glTexEnvi(uint target, uint pname, int param)
        {
            glTexEnviPtr(target, pname, param);
        }
        public static void glTexEnviv(uint target, uint pname, IntPtr @params)
        {
            glTexEnvivPtr(target, pname, @params);
        }
        public static void glTexGend(uint coord, uint pname, double param)
        {
            glTexGendPtr(coord, pname, param);
        }
        public static void glTexGendv(uint coord, uint pname, IntPtr @params)
        {
            glTexGendvPtr(coord, pname, @params);
        }
        public static void glTexGenf(uint coord, uint pname, float param)
        {
            glTexGenfPtr(coord, pname, param);
        }
        public static void glTexGenfv(uint coord, uint pname, IntPtr @params)
        {
            glTexGenfvPtr(coord, pname, @params);
        }
        public static void glTexGeni(uint coord, uint pname, int param)
        {
            glTexGeniPtr(coord, pname, param);
        }
        public static void glTexGeniv(uint coord, uint pname, IntPtr @params)
        {
            glTexGenivPtr(coord, pname, @params);
        }
        public static void glFeedbackBuffer(int size, uint type, IntPtr buffer)
        {
            glFeedbackBufferPtr(size, type, buffer);
        }
        public static void glSelectBuffer(int size, IntPtr buffer)
        {
            glSelectBufferPtr(size, buffer);
        }
        public static int glRenderMode(uint mode)
        {
            return glRenderModePtr(mode);
        }
        public static void glInitNames()
        {
            glInitNamesPtr();
        }
        public static void glLoadName(uint name)
        {
            glLoadNamePtr(name);
        }
        public static void glPassThrough(float token)
        {
            glPassThroughPtr(token);
        }
        public static void glPopName()
        {
            glPopNamePtr();
        }
        public static void glPushName(uint name)
        {
            glPushNamePtr(name);
        }
        public static void glClearAccum(float red, float green, float blue, float alpha)
        {
            glClearAccumPtr(red, green, blue, alpha);
        }
        public static void glClearIndex(float c)
        {
            glClearIndexPtr(c);
        }
        public static void glIndexMask(uint mask)
        {
            glIndexMaskPtr(mask);
        }
        public static void glAccum(uint op, float value)
        {
            glAccumPtr(op, value);
        }
        public static void glPopAttrib()
        {
            glPopAttribPtr();
        }
        public static void glPushAttrib(uint mask)
        {
            glPushAttribPtr(mask);
        }
        public static void glMap1d(uint target, double u1, double u2, int stride, int order, IntPtr points)
        {
            glMap1dPtr(target, u1, u2, stride, order, points);
        }
        public static void glMap1f(uint target, float u1, float u2, int stride, int order, IntPtr points)
        {
            glMap1fPtr(target, u1, u2, stride, order, points);
        }
        public static void glMap2d(uint target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, IntPtr points)
        {
            glMap2dPtr(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        public static void glMap2f(uint target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, IntPtr points)
        {
            glMap2fPtr(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        public static void glMapGrid1d(int un, double u1, double u2)
        {
            glMapGrid1dPtr(un, u1, u2);
        }
        public static void glMapGrid1f(int un, float u1, float u2)
        {
            glMapGrid1fPtr(un, u1, u2);
        }
        public static void glMapGrid2d(int un, double u1, double u2, int vn, double v1, double v2)
        {
            glMapGrid2dPtr(un, u1, u2, vn, v1, v2);
        }
        public static void glMapGrid2f(int un, float u1, float u2, int vn, float v1, float v2)
        {
            glMapGrid2fPtr(un, u1, u2, vn, v1, v2);
        }
        public static void glEvalCoord1d(double u)
        {
            glEvalCoord1dPtr(u);
        }
        public static void glEvalCoord1dv(IntPtr u)
        {
            glEvalCoord1dvPtr(u);
        }
        public static void glEvalCoord1f(float u)
        {
            glEvalCoord1fPtr(u);
        }
        public static void glEvalCoord1fv(IntPtr u)
        {
            glEvalCoord1fvPtr(u);
        }
        public static void glEvalCoord2d(double u, double v)
        {
            glEvalCoord2dPtr(u, v);
        }
        public static void glEvalCoord2dv(IntPtr u)
        {
            glEvalCoord2dvPtr(u);
        }
        public static void glEvalCoord2f(float u, float v)
        {
            glEvalCoord2fPtr(u, v);
        }
        public static void glEvalCoord2fv(IntPtr u)
        {
            glEvalCoord2fvPtr(u);
        }
        public static void glEvalMesh1(uint mode, int i1, int i2)
        {
            glEvalMesh1Ptr(mode, i1, i2);
        }
        public static void glEvalPoint1(int i)
        {
            glEvalPoint1Ptr(i);
        }
        public static void glEvalMesh2(uint mode, int i1, int i2, int j1, int j2)
        {
            glEvalMesh2Ptr(mode, i1, i2, j1, j2);
        }
        public static void glEvalPoint2(int i, int j)
        {
            glEvalPoint2Ptr(i, j);
        }
        public static void glAlphaFunc(uint func, float @ref)
        {
            glAlphaFuncPtr(func, @ref);
        }
        public static void glPixelZoom(float xfactor, float yfactor)
        {
            glPixelZoomPtr(xfactor, yfactor);
        }
        public static void glPixelTransferf(uint pname, float param)
        {
            glPixelTransferfPtr(pname, param);
        }
        public static void glPixelTransferi(uint pname, int param)
        {
            glPixelTransferiPtr(pname, param);
        }
        public static void glPixelMapfv(uint map, int mapsize, IntPtr values)
        {
            glPixelMapfvPtr(map, mapsize, values);
        }
        public static void glPixelMapuiv(uint map, int mapsize, IntPtr values)
        {
            glPixelMapuivPtr(map, mapsize, values);
        }
        public static void glPixelMapusv(uint map, int mapsize, IntPtr values)
        {
            glPixelMapusvPtr(map, mapsize, values);
        }
        public static void glCopyPixels(int x, int y, int width, int height, uint type)
        {
            glCopyPixelsPtr(x, y, width, height, type);
        }
        public static void glDrawPixels(int width, int height, uint format, uint type, IntPtr pixels)
        {
            glDrawPixelsPtr(width, height, format, type, pixels);
        }
        public static void glGetClipPlane(uint plane, IntPtr equation)
        {
            glGetClipPlanePtr(plane, equation);
        }
        public static void glGetLightfv(uint light, uint pname, IntPtr @params)
        {
            glGetLightfvPtr(light, pname, @params);
        }
        public static void glGetLightiv(uint light, uint pname, IntPtr @params)
        {
            glGetLightivPtr(light, pname, @params);
        }
        public static void glGetMapdv(uint target, uint query, IntPtr v)
        {
            glGetMapdvPtr(target, query, v);
        }
        public static void glGetMapfv(uint target, uint query, IntPtr v)
        {
            glGetMapfvPtr(target, query, v);
        }
        public static void glGetMapiv(uint target, uint query, IntPtr v)
        {
            glGetMapivPtr(target, query, v);
        }
        public static void glGetMaterialfv(uint face, uint pname, IntPtr @params)
        {
            glGetMaterialfvPtr(face, pname, @params);
        }
        public static void glGetMaterialiv(uint face, uint pname, IntPtr @params)
        {
            glGetMaterialivPtr(face, pname, @params);
        }
        public static void glGetPixelMapfv(uint map, IntPtr values)
        {
            glGetPixelMapfvPtr(map, values);
        }
        public static void glGetPixelMapuiv(uint map, IntPtr values)
        {
            glGetPixelMapuivPtr(map, values);
        }
        public static void glGetPixelMapusv(uint map, IntPtr values)
        {
            glGetPixelMapusvPtr(map, values);
        }
        public static void glGetPolygonStipple(IntPtr mask)
        {
            glGetPolygonStipplePtr(mask);
        }
        public static void glGetTexEnvfv(uint target, uint pname, IntPtr @params)
        {
            glGetTexEnvfvPtr(target, pname, @params);
        }
        public static void glGetTexEnviv(uint target, uint pname, IntPtr @params)
        {
            glGetTexEnvivPtr(target, pname, @params);
        }
        public static void glGetTexGendv(uint coord, uint pname, IntPtr @params)
        {
            glGetTexGendvPtr(coord, pname, @params);
        }
        public static void glGetTexGenfv(uint coord, uint pname, IntPtr @params)
        {
            glGetTexGenfvPtr(coord, pname, @params);
        }
        public static void glGetTexGeniv(uint coord, uint pname, IntPtr @params)
        {
            glGetTexGenivPtr(coord, pname, @params);
        }
        public static bool glIsList(uint list)
        {
            return glIsListPtr(list);
        }
        public static void glFrustum(double left, double right, double bottom, double top, double zNear, double zFar)
        {
            glFrustumPtr(left, right, bottom, top, zNear, zFar);
        }
        public static void glLoadIdentity()
        {
            glLoadIdentityPtr();
        }
        public static void glLoadMatrixf(IntPtr m)
        {
            glLoadMatrixfPtr(m);
        }
        public static void glLoadMatrixd(IntPtr m)
        {
            glLoadMatrixdPtr(m);
        }
        public static void glMatrixMode(uint mode)
        {
            glMatrixModePtr(mode);
        }
        public static void glMultMatrixf(IntPtr m)
        {
            glMultMatrixfPtr(m);
        }
        public static void glMultMatrixd(IntPtr m)
        {
            glMultMatrixdPtr(m);
        }
        public static void glOrtho(double left, double right, double bottom, double top, double zNear, double zFar)
        {
            glOrthoPtr(left, right, bottom, top, zNear, zFar);
        }
        public static void glPopMatrix()
        {
            glPopMatrixPtr();
        }
        public static void glPushMatrix()
        {
            glPushMatrixPtr();
        }
        public static void glRotated(double angle, double x, double y, double z)
        {
            glRotatedPtr(angle, x, y, z);
        }
        public static void glRotatef(float angle, float x, float y, float z)
        {
            glRotatefPtr(angle, x, y, z);
        }
        public static void glScaled(double x, double y, double z)
        {
            glScaledPtr(x, y, z);
        }
        public static void glScalef(float x, float y, float z)
        {
            glScalefPtr(x, y, z);
        }
        public static void glTranslated(double x, double y, double z)
        {
            glTranslatedPtr(x, y, z);
        }
        public static void glTranslatef(float x, float y, float z)
        {
            glTranslatefPtr(x, y, z);
        }
        public static void glDrawArrays(uint mode, int first, int count)
        {
            glDrawArraysPtr(mode, first, count);
        }
        public static void glDrawElements(uint mode, int count, uint type, IntPtr indices)
        {
            glDrawElementsPtr(mode, count, type, indices);
        }
        public static void glGetPointerv(uint pname, IntPtr @params)
        {
            glGetPointervPtr(pname, @params);
        }
        public static void glPolygonOffset(float factor, float units)
        {
            glPolygonOffsetPtr(factor, units);
        }
        public static void glCopyTexImage1D(uint target, int level, uint internalformat, int x, int y, int width, int border)
        {
            glCopyTexImage1DPtr(target, level, internalformat, x, y, width, border);
        }
        public static void glCopyTexImage2D(uint target, int level, uint internalformat, int x, int y, int width, int height, int border)
        {
            glCopyTexImage2DPtr(target, level, internalformat, x, y, width, height, border);
        }
        public static void glCopyTexSubImage1D(uint target, int level, int xoffset, int x, int y, int width)
        {
            glCopyTexSubImage1DPtr(target, level, xoffset, x, y, width);
        }
        public static void glCopyTexSubImage2D(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            glCopyTexSubImage2DPtr(target, level, xoffset, yoffset, x, y, width, height);
        }
        public static void glTexSubImage1D(uint target, int level, int xoffset, int width, uint format, uint type, IntPtr pixels)
        {
            glTexSubImage1DPtr(target, level, xoffset, width, format, type, pixels);
        }
        public static void glTexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, IntPtr pixels)
        {
            glTexSubImage2DPtr(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }
        public static void glBindTexture(uint target, uint texture)
        {
            glBindTexturePtr(target, texture);
        }
        public static void glDeleteTextures(int n, IntPtr textures)
        {
            glDeleteTexturesPtr(n, textures);
        }
        public static void glGenTextures(int n, IntPtr textures)
        {
            glGenTexturesPtr(n, textures);
        }
        public static bool glIsTexture(uint texture)
        {
            return glIsTexturePtr(texture);
        }
        public static void glArrayElement(int i)
        {
            glArrayElementPtr(i);
        }
        public static void glColorPointer(int size, uint type, int stride, IntPtr pointer)
        {
            glColorPointerPtr(size, type, stride, pointer);
        }
        public static void glDisableClientState(uint array)
        {
            glDisableClientStatePtr(array);
        }
        public static void glEdgeFlagPointer(int stride, IntPtr pointer)
        {
            glEdgeFlagPointerPtr(stride, pointer);
        }
        public static void glEnableClientState(uint array)
        {
            glEnableClientStatePtr(array);
        }
        public static void glIndexPointer(uint type, int stride, IntPtr pointer)
        {
            glIndexPointerPtr(type, stride, pointer);
        }
        public static void glInterleavedArrays(uint format, int stride, IntPtr pointer)
        {
            glInterleavedArraysPtr(format, stride, pointer);
        }
        public static void glNormalPointer(uint type, int stride, IntPtr pointer)
        {
            glNormalPointerPtr(type, stride, pointer);
        }
        public static void glTexCoordPointer(int size, uint type, int stride, IntPtr pointer)
        {
            glTexCoordPointerPtr(size, type, stride, pointer);
        }
        public static void glVertexPointer(int size, uint type, int stride, IntPtr pointer)
        {
            glVertexPointerPtr(size, type, stride, pointer);
        }
        public static bool glAreTexturesResident(int n, IntPtr textures, IntPtr residences)
        {
            return glAreTexturesResidentPtr(n, textures, residences);
        }
        public static void glPrioritizeTextures(int n, IntPtr textures, IntPtr priorities)
        {
            glPrioritizeTexturesPtr(n, textures, priorities);
        }
        public static void glIndexub(byte c)
        {
            glIndexubPtr(c);
        }
        public static void glIndexubv(IntPtr c)
        {
            glIndexubvPtr(c);
        }
        public static void glPopClientAttrib()
        {
            glPopClientAttribPtr();
        }
        public static void glPushClientAttrib(uint mask)
        {
            glPushClientAttribPtr(mask);
        }
        public static void glDrawRangeElements(uint mode, uint start, uint end, int count, uint type, IntPtr indices)
        {
            glDrawRangeElementsPtr(mode, start, end, count, type, indices);
        }
        public static void glTexImage3D(uint target, int level, int internalformat, int width, int height, int depth, int border, uint format, uint type, IntPtr pixels)
        {
            glTexImage3DPtr(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }
        public static void glTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, IntPtr pixels)
        {
            glTexSubImage3DPtr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        public static void glCopyTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            glCopyTexSubImage3DPtr(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        public static void glActiveTexture(uint texture)
        {
            glActiveTexturePtr(texture);
        }
        public static void glSampleCoverage(float value, bool invert)
        {
            glSampleCoveragePtr(value, invert);
        }
        public static void glCompressedTexImage3D(uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
        {
            glCompressedTexImage3DPtr(target, level, internalformat, width, height, depth, border, imageSize, data);
        }
        public static void glCompressedTexImage2D(uint target, int level, uint internalformat, int width, int height, int border, int imageSize, IntPtr data)
        {
            glCompressedTexImage2DPtr(target, level, internalformat, width, height, border, imageSize, data);
        }
        public static void glCompressedTexImage1D(uint target, int level, uint internalformat, int width, int border, int imageSize, IntPtr data)
        {
            glCompressedTexImage1DPtr(target, level, internalformat, width, border, imageSize, data);
        }
        public static void glCompressedTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, IntPtr data)
        {
            glCompressedTexSubImage3DPtr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }
        public static void glCompressedTexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, IntPtr data)
        {
            glCompressedTexSubImage2DPtr(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }
        public static void glCompressedTexSubImage1D(uint target, int level, int xoffset, int width, uint format, int imageSize, IntPtr data)
        {
            glCompressedTexSubImage1DPtr(target, level, xoffset, width, format, imageSize, data);
        }
        public static void glGetCompressedTexImage(uint target, int level, IntPtr img)
        {
            glGetCompressedTexImagePtr(target, level, img);
        }
        public static void glClientActiveTexture(uint texture)
        {
            glClientActiveTexturePtr(texture);
        }
        public static void glMultiTexCoord1d(uint target, double s)
        {
            glMultiTexCoord1dPtr(target, s);
        }
        public static void glMultiTexCoord1dv(uint target, IntPtr v)
        {
            glMultiTexCoord1dvPtr(target, v);
        }
        public static void glMultiTexCoord1f(uint target, float s)
        {
            glMultiTexCoord1fPtr(target, s);
        }
        public static void glMultiTexCoord1fv(uint target, IntPtr v)
        {
            glMultiTexCoord1fvPtr(target, v);
        }
        public static void glMultiTexCoord1i(uint target, int s)
        {
            glMultiTexCoord1iPtr(target, s);
        }
        public static void glMultiTexCoord1iv(uint target, IntPtr v)
        {
            glMultiTexCoord1ivPtr(target, v);
        }
        public static void glMultiTexCoord1s(uint target, short s)
        {
            glMultiTexCoord1sPtr(target, s);
        }
        public static void glMultiTexCoord1sv(uint target, IntPtr v)
        {
            glMultiTexCoord1svPtr(target, v);
        }
        public static void glMultiTexCoord2d(uint target, double s, double t)
        {
            glMultiTexCoord2dPtr(target, s, t);
        }
        public static void glMultiTexCoord2dv(uint target, IntPtr v)
        {
            glMultiTexCoord2dvPtr(target, v);
        }
        public static void glMultiTexCoord2f(uint target, float s, float t)
        {
            glMultiTexCoord2fPtr(target, s, t);
        }
        public static void glMultiTexCoord2fv(uint target, IntPtr v)
        {
            glMultiTexCoord2fvPtr(target, v);
        }
        public static void glMultiTexCoord2i(uint target, int s, int t)
        {
            glMultiTexCoord2iPtr(target, s, t);
        }
        public static void glMultiTexCoord2iv(uint target, IntPtr v)
        {
            glMultiTexCoord2ivPtr(target, v);
        }
        public static void glMultiTexCoord2s(uint target, short s, short t)
        {
            glMultiTexCoord2sPtr(target, s, t);
        }
        public static void glMultiTexCoord2sv(uint target, IntPtr v)
        {
            glMultiTexCoord2svPtr(target, v);
        }
        public static void glMultiTexCoord3d(uint target, double s, double t, double r)
        {
            glMultiTexCoord3dPtr(target, s, t, r);
        }
        public static void glMultiTexCoord3dv(uint target, IntPtr v)
        {
            glMultiTexCoord3dvPtr(target, v);
        }
        public static void glMultiTexCoord3f(uint target, float s, float t, float r)
        {
            glMultiTexCoord3fPtr(target, s, t, r);
        }
        public static void glMultiTexCoord3fv(uint target, IntPtr v)
        {
            glMultiTexCoord3fvPtr(target, v);
        }
        public static void glMultiTexCoord3i(uint target, int s, int t, int r)
        {
            glMultiTexCoord3iPtr(target, s, t, r);
        }
        public static void glMultiTexCoord3iv(uint target, IntPtr v)
        {
            glMultiTexCoord3ivPtr(target, v);
        }
        public static void glMultiTexCoord3s(uint target, short s, short t, short r)
        {
            glMultiTexCoord3sPtr(target, s, t, r);
        }
        public static void glMultiTexCoord3sv(uint target, IntPtr v)
        {
            glMultiTexCoord3svPtr(target, v);
        }
        public static void glMultiTexCoord4d(uint target, double s, double t, double r, double q)
        {
            glMultiTexCoord4dPtr(target, s, t, r, q);
        }
        public static void glMultiTexCoord4dv(uint target, IntPtr v)
        {
            glMultiTexCoord4dvPtr(target, v);
        }
        public static void glMultiTexCoord4f(uint target, float s, float t, float r, float q)
        {
            glMultiTexCoord4fPtr(target, s, t, r, q);
        }
        public static void glMultiTexCoord4fv(uint target, IntPtr v)
        {
            glMultiTexCoord4fvPtr(target, v);
        }
        public static void glMultiTexCoord4i(uint target, int s, int t, int r, int q)
        {
            glMultiTexCoord4iPtr(target, s, t, r, q);
        }
        public static void glMultiTexCoord4iv(uint target, IntPtr v)
        {
            glMultiTexCoord4ivPtr(target, v);
        }
        public static void glMultiTexCoord4s(uint target, short s, short t, short r, short q)
        {
            glMultiTexCoord4sPtr(target, s, t, r, q);
        }
        public static void glMultiTexCoord4sv(uint target, IntPtr v)
        {
            glMultiTexCoord4svPtr(target, v);
        }
        public static void glLoadTransposeMatrixf(IntPtr m)
        {
            glLoadTransposeMatrixfPtr(m);
        }
        public static void glLoadTransposeMatrixd(IntPtr m)
        {
            glLoadTransposeMatrixdPtr(m);
        }
        public static void glMultTransposeMatrixf(IntPtr m)
        {
            glMultTransposeMatrixfPtr(m);
        }
        public static void glMultTransposeMatrixd(IntPtr m)
        {
            glMultTransposeMatrixdPtr(m);
        }
        public static void glBlendFuncSeparate(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha)
        {
            glBlendFuncSeparatePtr(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }
        public static void glMultiDrawArrays(uint mode, IntPtr first, IntPtr count, int drawcount)
        {
            glMultiDrawArraysPtr(mode, first, count, drawcount);
        }
        public static void glMultiDrawElements(uint mode, IntPtr count, uint type, IntPtr indices, int drawcount)
        {
            glMultiDrawElementsPtr(mode, count, type, indices, drawcount);
        }
        public static void glPointParameterf(uint pname, float param)
        {
            glPointParameterfPtr(pname, param);
        }
        public static void glPointParameterfv(uint pname, IntPtr @params)
        {
            glPointParameterfvPtr(pname, @params);
        }
        public static void glPointParameteri(uint pname, int param)
        {
            glPointParameteriPtr(pname, param);
        }
        public static void glPointParameteriv(uint pname, IntPtr @params)
        {
            glPointParameterivPtr(pname, @params);
        }
        public static void glFogCoordf(float coord)
        {
            glFogCoordfPtr(coord);
        }
        public static void glFogCoordfv(IntPtr coord)
        {
            glFogCoordfvPtr(coord);
        }
        public static void glFogCoordd(double coord)
        {
            glFogCoorddPtr(coord);
        }
        public static void glFogCoorddv(IntPtr coord)
        {
            glFogCoorddvPtr(coord);
        }
        public static void glFogCoordPointer(uint type, int stride, IntPtr pointer)
        {
            glFogCoordPointerPtr(type, stride, pointer);
        }
        public static void glSecondaryColor3b(sbyte red, sbyte green, sbyte blue)
        {
            glSecondaryColor3bPtr(red, green, blue);
        }
        public static void glSecondaryColor3bv(IntPtr v)
        {
            glSecondaryColor3bvPtr(v);
        }
        public static void glSecondaryColor3d(double red, double green, double blue)
        {
            glSecondaryColor3dPtr(red, green, blue);
        }
        public static void glSecondaryColor3dv(IntPtr v)
        {
            glSecondaryColor3dvPtr(v);
        }
        public static void glSecondaryColor3f(float red, float green, float blue)
        {
            glSecondaryColor3fPtr(red, green, blue);
        }
        public static void glSecondaryColor3fv(IntPtr v)
        {
            glSecondaryColor3fvPtr(v);
        }
        public static void glSecondaryColor3i(int red, int green, int blue)
        {
            glSecondaryColor3iPtr(red, green, blue);
        }
        public static void glSecondaryColor3iv(IntPtr v)
        {
            glSecondaryColor3ivPtr(v);
        }
        public static void glSecondaryColor3s(short red, short green, short blue)
        {
            glSecondaryColor3sPtr(red, green, blue);
        }
        public static void glSecondaryColor3sv(IntPtr v)
        {
            glSecondaryColor3svPtr(v);
        }
        public static void glSecondaryColor3ub(byte red, byte green, byte blue)
        {
            glSecondaryColor3ubPtr(red, green, blue);
        }
        public static void glSecondaryColor3ubv(IntPtr v)
        {
            glSecondaryColor3ubvPtr(v);
        }
        public static void glSecondaryColor3ui(uint red, uint green, uint blue)
        {
            glSecondaryColor3uiPtr(red, green, blue);
        }
        public static void glSecondaryColor3uiv(IntPtr v)
        {
            glSecondaryColor3uivPtr(v);
        }
        public static void glSecondaryColor3us(ushort red, ushort green, ushort blue)
        {
            glSecondaryColor3usPtr(red, green, blue);
        }
        public static void glSecondaryColor3usv(IntPtr v)
        {
            glSecondaryColor3usvPtr(v);
        }
        public static void glSecondaryColorPointer(int size, uint type, int stride, IntPtr pointer)
        {
            glSecondaryColorPointerPtr(size, type, stride, pointer);
        }
        public static void glWindowPos2d(double x, double y)
        {
            glWindowPos2dPtr(x, y);
        }
        public static void glWindowPos2dv(IntPtr v)
        {
            glWindowPos2dvPtr(v);
        }
        public static void glWindowPos2f(float x, float y)
        {
            glWindowPos2fPtr(x, y);
        }
        public static void glWindowPos2fv(IntPtr v)
        {
            glWindowPos2fvPtr(v);
        }
        public static void glWindowPos2i(int x, int y)
        {
            glWindowPos2iPtr(x, y);
        }
        public static void glWindowPos2iv(IntPtr v)
        {
            glWindowPos2ivPtr(v);
        }
        public static void glWindowPos2s(short x, short y)
        {
            glWindowPos2sPtr(x, y);
        }
        public static void glWindowPos2sv(IntPtr v)
        {
            glWindowPos2svPtr(v);
        }
        public static void glWindowPos3d(double x, double y, double z)
        {
            glWindowPos3dPtr(x, y, z);
        }
        public static void glWindowPos3dv(IntPtr v)
        {
            glWindowPos3dvPtr(v);
        }
        public static void glWindowPos3f(float x, float y, float z)
        {
            glWindowPos3fPtr(x, y, z);
        }
        public static void glWindowPos3fv(IntPtr v)
        {
            glWindowPos3fvPtr(v);
        }
        public static void glWindowPos3i(int x, int y, int z)
        {
            glWindowPos3iPtr(x, y, z);
        }
        public static void glWindowPos3iv(IntPtr v)
        {
            glWindowPos3ivPtr(v);
        }
        public static void glWindowPos3s(short x, short y, short z)
        {
            glWindowPos3sPtr(x, y, z);
        }
        public static void glWindowPos3sv(IntPtr v)
        {
            glWindowPos3svPtr(v);
        }
        public static void glBlendColor(float red, float green, float blue, float alpha)
        {
            glBlendColorPtr(red, green, blue, alpha);
        }
        public static void glBlendEquation(uint mode)
        {
            glBlendEquationPtr(mode);
        }
        public static void glGenQueries(int n, IntPtr ids)
        {
            glGenQueriesPtr(n, ids);
        }
        public static void glDeleteQueries(int n, IntPtr ids)
        {
            glDeleteQueriesPtr(n, ids);
        }
        public static bool glIsQuery(uint id)
        {
            return glIsQueryPtr(id);
        }
        public static void glBeginQuery(uint target, uint id)
        {
            glBeginQueryPtr(target, id);
        }
        public static void glEndQuery(uint target)
        {
            glEndQueryPtr(target);
        }
        public static void glGetQueryiv(uint target, uint pname, IntPtr @params)
        {
            glGetQueryivPtr(target, pname, @params);
        }
        public static void glGetQueryObjectiv(uint id, uint pname, IntPtr @params)
        {
            glGetQueryObjectivPtr(id, pname, @params);
        }
        public static void glGetQueryObjectuiv(uint id, uint pname, IntPtr @params)
        {
            glGetQueryObjectuivPtr(id, pname, @params);
        }
        public static void glBindBuffer(uint target, uint buffer)
        {
            glBindBufferPtr(target, buffer);
        }
        public static void glDeleteBuffers(int n, IntPtr buffers)
        {
            glDeleteBuffersPtr(n, buffers);
        }
        public static void glGenBuffers(int n, IntPtr buffers)
        {
            glGenBuffersPtr(n, buffers);
        }
        public static bool glIsBuffer(uint buffer)
        {
            return glIsBufferPtr(buffer);
        }
        public static void glBufferData(uint target, int size, IntPtr data, uint usage)
        {
            glBufferDataPtr(target, size, data, usage);
        }
        public static void glBufferSubData(uint target, IntPtr offset, int size, IntPtr data)
        {
            glBufferSubDataPtr(target, offset, size, data);
        }
        public static void glGetBufferSubData(uint target, IntPtr offset, int size, IntPtr data)
        {
            glGetBufferSubDataPtr(target, offset, size, data);
        }
        public static IntPtr glMapBuffer(uint target, uint access)
        {
            return glMapBufferPtr(target, access);
        }
        public static bool glUnmapBuffer(uint target)
        {
            return glUnmapBufferPtr(target);
        }
        public static void glGetBufferParameteriv(uint target, uint pname, IntPtr @params)
        {
            glGetBufferParameterivPtr(target, pname, @params);
        }
        public static void glGetBufferPointerv(uint target, uint pname, IntPtr @params)
        {
            glGetBufferPointervPtr(target, pname, @params);
        }
        #endregion

        #region Command Delegates
        private delegate void glCullFaceFunc(uint mode);
        private static glCullFaceFunc glCullFacePtr;
        private delegate void glFrontFaceFunc(uint mode);
        private static glFrontFaceFunc glFrontFacePtr;
        private delegate void glHintFunc(uint target, uint mode);
        private static glHintFunc glHintPtr;
        private delegate void glLineWidthFunc(float width);
        private static glLineWidthFunc glLineWidthPtr;
        private delegate void glPointSizeFunc(float size);
        private static glPointSizeFunc glPointSizePtr;
        private delegate void glPolygonModeFunc(uint face, uint mode);
        private static glPolygonModeFunc glPolygonModePtr;
        private delegate void glScissorFunc(int x, int y, int width, int height);
        private static glScissorFunc glScissorPtr;
        private delegate void glTexParameterfFunc(uint target, uint pname, float param);
        private static glTexParameterfFunc glTexParameterfPtr;
        private delegate void glTexParameterfvFunc(uint target, uint pname, IntPtr @params);
        private static glTexParameterfvFunc glTexParameterfvPtr;
        private delegate void glTexParameteriFunc(uint target, uint pname, int param);
        private static glTexParameteriFunc glTexParameteriPtr;
        private delegate void glTexParameterivFunc(uint target, uint pname, IntPtr @params);
        private static glTexParameterivFunc glTexParameterivPtr;
        private delegate void glTexImage1DFunc(uint target, int level, int internalformat, int width, int border, uint format, uint type, IntPtr pixels);
        private static glTexImage1DFunc glTexImage1DPtr;
        private delegate void glTexImage2DFunc(uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, IntPtr pixels);
        private static glTexImage2DFunc glTexImage2DPtr;
        private delegate void glDrawBufferFunc(uint mode);
        private static glDrawBufferFunc glDrawBufferPtr;
        private delegate void glClearFunc(uint mask);
        private static glClearFunc glClearPtr;
        private delegate void glClearColorFunc(float red, float green, float blue, float alpha);
        private static glClearColorFunc glClearColorPtr;
        private delegate void glClearStencilFunc(int s);
        private static glClearStencilFunc glClearStencilPtr;
        private delegate void glClearDepthFunc(double depth);
        private static glClearDepthFunc glClearDepthPtr;
        private delegate void glStencilMaskFunc(uint mask);
        private static glStencilMaskFunc glStencilMaskPtr;
        private delegate void glColorMaskFunc(bool red, bool green, bool blue, bool alpha);
        private static glColorMaskFunc glColorMaskPtr;
        private delegate void glDepthMaskFunc(bool flag);
        private static glDepthMaskFunc glDepthMaskPtr;
        private delegate void glDisableFunc(uint cap);
        private static glDisableFunc glDisablePtr;
        private delegate void glEnableFunc(uint cap);
        private static glEnableFunc glEnablePtr;
        private delegate void glFinishFunc();
        private static glFinishFunc glFinishPtr;
        private delegate void glFlushFunc();
        private static glFlushFunc glFlushPtr;
        private delegate void glBlendFuncFunc(uint sfactor, uint dfactor);
        private static glBlendFuncFunc glBlendFuncPtr;
        private delegate void glLogicOpFunc(uint opcode);
        private static glLogicOpFunc glLogicOpPtr;
        private delegate void glStencilFuncFunc(uint func, int @ref, uint mask);
        private static glStencilFuncFunc glStencilFuncPtr;
        private delegate void glStencilOpFunc(uint fail, uint zfail, uint zpass);
        private static glStencilOpFunc glStencilOpPtr;
        private delegate void glDepthFuncFunc(uint func);
        private static glDepthFuncFunc glDepthFuncPtr;
        private delegate void glPixelStorefFunc(uint pname, float param);
        private static glPixelStorefFunc glPixelStorefPtr;
        private delegate void glPixelStoreiFunc(uint pname, int param);
        private static glPixelStoreiFunc glPixelStoreiPtr;
        private delegate void glReadBufferFunc(uint mode);
        private static glReadBufferFunc glReadBufferPtr;
        private delegate void glReadPixelsFunc(int x, int y, int width, int height, uint format, uint type, IntPtr pixels);
        private static glReadPixelsFunc glReadPixelsPtr;
        private delegate void glGetBooleanvFunc(uint pname, IntPtr data);
        private static glGetBooleanvFunc glGetBooleanvPtr;
        private delegate void glGetDoublevFunc(uint pname, IntPtr data);
        private static glGetDoublevFunc glGetDoublevPtr;
        private delegate uint glGetErrorFunc();
        private static glGetErrorFunc glGetErrorPtr;
        private delegate void glGetFloatvFunc(uint pname, IntPtr data);
        private static glGetFloatvFunc glGetFloatvPtr;
        private delegate void glGetIntegervFunc(uint pname, IntPtr data);
        private static glGetIntegervFunc glGetIntegervPtr;
        private delegate IntPtr glGetStringFunc(uint name);
        private static glGetStringFunc glGetStringPtr;
        private delegate void glGetTexImageFunc(uint target, int level, uint format, uint type, IntPtr pixels);
        private static glGetTexImageFunc glGetTexImagePtr;
        private delegate void glGetTexParameterfvFunc(uint target, uint pname, IntPtr @params);
        private static glGetTexParameterfvFunc glGetTexParameterfvPtr;
        private delegate void glGetTexParameterivFunc(uint target, uint pname, IntPtr @params);
        private static glGetTexParameterivFunc glGetTexParameterivPtr;
        private delegate void glGetTexLevelParameterfvFunc(uint target, int level, uint pname, IntPtr @params);
        private static glGetTexLevelParameterfvFunc glGetTexLevelParameterfvPtr;
        private delegate void glGetTexLevelParameterivFunc(uint target, int level, uint pname, IntPtr @params);
        private static glGetTexLevelParameterivFunc glGetTexLevelParameterivPtr;
        private delegate bool glIsEnabledFunc(uint cap);
        private static glIsEnabledFunc glIsEnabledPtr;
        private delegate void glDepthRangeFunc(double near, double far);
        private static glDepthRangeFunc glDepthRangePtr;
        private delegate void glViewportFunc(int x, int y, int width, int height);
        private static glViewportFunc glViewportPtr;
        private delegate void glNewListFunc(uint list, uint mode);
        private static glNewListFunc glNewListPtr;
        private delegate void glEndListFunc();
        private static glEndListFunc glEndListPtr;
        private delegate void glCallListFunc(uint list);
        private static glCallListFunc glCallListPtr;
        private delegate void glCallListsFunc(int n, uint type, IntPtr lists);
        private static glCallListsFunc glCallListsPtr;
        private delegate void glDeleteListsFunc(uint list, int range);
        private static glDeleteListsFunc glDeleteListsPtr;
        private delegate uint glGenListsFunc(int range);
        private static glGenListsFunc glGenListsPtr;
        private delegate void glListBaseFunc(uint @base);
        private static glListBaseFunc glListBasePtr;
        private delegate void glBeginFunc(uint mode);
        private static glBeginFunc glBeginPtr;
        private delegate void glBitmapFunc(int width, int height, float xorig, float yorig, float xmove, float ymove, IntPtr bitmap);
        private static glBitmapFunc glBitmapPtr;
        private delegate void glColor3bFunc(sbyte red, sbyte green, sbyte blue);
        private static glColor3bFunc glColor3bPtr;
        private delegate void glColor3bvFunc(IntPtr v);
        private static glColor3bvFunc glColor3bvPtr;
        private delegate void glColor3dFunc(double red, double green, double blue);
        private static glColor3dFunc glColor3dPtr;
        private delegate void glColor3dvFunc(IntPtr v);
        private static glColor3dvFunc glColor3dvPtr;
        private delegate void glColor3fFunc(float red, float green, float blue);
        private static glColor3fFunc glColor3fPtr;
        private delegate void glColor3fvFunc(IntPtr v);
        private static glColor3fvFunc glColor3fvPtr;
        private delegate void glColor3iFunc(int red, int green, int blue);
        private static glColor3iFunc glColor3iPtr;
        private delegate void glColor3ivFunc(IntPtr v);
        private static glColor3ivFunc glColor3ivPtr;
        private delegate void glColor3sFunc(short red, short green, short blue);
        private static glColor3sFunc glColor3sPtr;
        private delegate void glColor3svFunc(IntPtr v);
        private static glColor3svFunc glColor3svPtr;
        private delegate void glColor3ubFunc(byte red, byte green, byte blue);
        private static glColor3ubFunc glColor3ubPtr;
        private delegate void glColor3ubvFunc(IntPtr v);
        private static glColor3ubvFunc glColor3ubvPtr;
        private delegate void glColor3uiFunc(uint red, uint green, uint blue);
        private static glColor3uiFunc glColor3uiPtr;
        private delegate void glColor3uivFunc(IntPtr v);
        private static glColor3uivFunc glColor3uivPtr;
        private delegate void glColor3usFunc(ushort red, ushort green, ushort blue);
        private static glColor3usFunc glColor3usPtr;
        private delegate void glColor3usvFunc(IntPtr v);
        private static glColor3usvFunc glColor3usvPtr;
        private delegate void glColor4bFunc(sbyte red, sbyte green, sbyte blue, sbyte alpha);
        private static glColor4bFunc glColor4bPtr;
        private delegate void glColor4bvFunc(IntPtr v);
        private static glColor4bvFunc glColor4bvPtr;
        private delegate void glColor4dFunc(double red, double green, double blue, double alpha);
        private static glColor4dFunc glColor4dPtr;
        private delegate void glColor4dvFunc(IntPtr v);
        private static glColor4dvFunc glColor4dvPtr;
        private delegate void glColor4fFunc(float red, float green, float blue, float alpha);
        private static glColor4fFunc glColor4fPtr;
        private delegate void glColor4fvFunc(IntPtr v);
        private static glColor4fvFunc glColor4fvPtr;
        private delegate void glColor4iFunc(int red, int green, int blue, int alpha);
        private static glColor4iFunc glColor4iPtr;
        private delegate void glColor4ivFunc(IntPtr v);
        private static glColor4ivFunc glColor4ivPtr;
        private delegate void glColor4sFunc(short red, short green, short blue, short alpha);
        private static glColor4sFunc glColor4sPtr;
        private delegate void glColor4svFunc(IntPtr v);
        private static glColor4svFunc glColor4svPtr;
        private delegate void glColor4ubFunc(byte red, byte green, byte blue, byte alpha);
        private static glColor4ubFunc glColor4ubPtr;
        private delegate void glColor4ubvFunc(IntPtr v);
        private static glColor4ubvFunc glColor4ubvPtr;
        private delegate void glColor4uiFunc(uint red, uint green, uint blue, uint alpha);
        private static glColor4uiFunc glColor4uiPtr;
        private delegate void glColor4uivFunc(IntPtr v);
        private static glColor4uivFunc glColor4uivPtr;
        private delegate void glColor4usFunc(ushort red, ushort green, ushort blue, ushort alpha);
        private static glColor4usFunc glColor4usPtr;
        private delegate void glColor4usvFunc(IntPtr v);
        private static glColor4usvFunc glColor4usvPtr;
        private delegate void glEdgeFlagFunc(bool flag);
        private static glEdgeFlagFunc glEdgeFlagPtr;
        private delegate void glEdgeFlagvFunc(IntPtr flag);
        private static glEdgeFlagvFunc glEdgeFlagvPtr;
        private delegate void glEndFunc();
        private static glEndFunc glEndPtr;
        private delegate void glIndexdFunc(double c);
        private static glIndexdFunc glIndexdPtr;
        private delegate void glIndexdvFunc(IntPtr c);
        private static glIndexdvFunc glIndexdvPtr;
        private delegate void glIndexfFunc(float c);
        private static glIndexfFunc glIndexfPtr;
        private delegate void glIndexfvFunc(IntPtr c);
        private static glIndexfvFunc glIndexfvPtr;
        private delegate void glIndexiFunc(int c);
        private static glIndexiFunc glIndexiPtr;
        private delegate void glIndexivFunc(IntPtr c);
        private static glIndexivFunc glIndexivPtr;
        private delegate void glIndexsFunc(short c);
        private static glIndexsFunc glIndexsPtr;
        private delegate void glIndexsvFunc(IntPtr c);
        private static glIndexsvFunc glIndexsvPtr;
        private delegate void glNormal3bFunc(sbyte nx, sbyte ny, sbyte nz);
        private static glNormal3bFunc glNormal3bPtr;
        private delegate void glNormal3bvFunc(IntPtr v);
        private static glNormal3bvFunc glNormal3bvPtr;
        private delegate void glNormal3dFunc(double nx, double ny, double nz);
        private static glNormal3dFunc glNormal3dPtr;
        private delegate void glNormal3dvFunc(IntPtr v);
        private static glNormal3dvFunc glNormal3dvPtr;
        private delegate void glNormal3fFunc(float nx, float ny, float nz);
        private static glNormal3fFunc glNormal3fPtr;
        private delegate void glNormal3fvFunc(IntPtr v);
        private static glNormal3fvFunc glNormal3fvPtr;
        private delegate void glNormal3iFunc(int nx, int ny, int nz);
        private static glNormal3iFunc glNormal3iPtr;
        private delegate void glNormal3ivFunc(IntPtr v);
        private static glNormal3ivFunc glNormal3ivPtr;
        private delegate void glNormal3sFunc(short nx, short ny, short nz);
        private static glNormal3sFunc glNormal3sPtr;
        private delegate void glNormal3svFunc(IntPtr v);
        private static glNormal3svFunc glNormal3svPtr;
        private delegate void glRasterPos2dFunc(double x, double y);
        private static glRasterPos2dFunc glRasterPos2dPtr;
        private delegate void glRasterPos2dvFunc(IntPtr v);
        private static glRasterPos2dvFunc glRasterPos2dvPtr;
        private delegate void glRasterPos2fFunc(float x, float y);
        private static glRasterPos2fFunc glRasterPos2fPtr;
        private delegate void glRasterPos2fvFunc(IntPtr v);
        private static glRasterPos2fvFunc glRasterPos2fvPtr;
        private delegate void glRasterPos2iFunc(int x, int y);
        private static glRasterPos2iFunc glRasterPos2iPtr;
        private delegate void glRasterPos2ivFunc(IntPtr v);
        private static glRasterPos2ivFunc glRasterPos2ivPtr;
        private delegate void glRasterPos2sFunc(short x, short y);
        private static glRasterPos2sFunc glRasterPos2sPtr;
        private delegate void glRasterPos2svFunc(IntPtr v);
        private static glRasterPos2svFunc glRasterPos2svPtr;
        private delegate void glRasterPos3dFunc(double x, double y, double z);
        private static glRasterPos3dFunc glRasterPos3dPtr;
        private delegate void glRasterPos3dvFunc(IntPtr v);
        private static glRasterPos3dvFunc glRasterPos3dvPtr;
        private delegate void glRasterPos3fFunc(float x, float y, float z);
        private static glRasterPos3fFunc glRasterPos3fPtr;
        private delegate void glRasterPos3fvFunc(IntPtr v);
        private static glRasterPos3fvFunc glRasterPos3fvPtr;
        private delegate void glRasterPos3iFunc(int x, int y, int z);
        private static glRasterPos3iFunc glRasterPos3iPtr;
        private delegate void glRasterPos3ivFunc(IntPtr v);
        private static glRasterPos3ivFunc glRasterPos3ivPtr;
        private delegate void glRasterPos3sFunc(short x, short y, short z);
        private static glRasterPos3sFunc glRasterPos3sPtr;
        private delegate void glRasterPos3svFunc(IntPtr v);
        private static glRasterPos3svFunc glRasterPos3svPtr;
        private delegate void glRasterPos4dFunc(double x, double y, double z, double w);
        private static glRasterPos4dFunc glRasterPos4dPtr;
        private delegate void glRasterPos4dvFunc(IntPtr v);
        private static glRasterPos4dvFunc glRasterPos4dvPtr;
        private delegate void glRasterPos4fFunc(float x, float y, float z, float w);
        private static glRasterPos4fFunc glRasterPos4fPtr;
        private delegate void glRasterPos4fvFunc(IntPtr v);
        private static glRasterPos4fvFunc glRasterPos4fvPtr;
        private delegate void glRasterPos4iFunc(int x, int y, int z, int w);
        private static glRasterPos4iFunc glRasterPos4iPtr;
        private delegate void glRasterPos4ivFunc(IntPtr v);
        private static glRasterPos4ivFunc glRasterPos4ivPtr;
        private delegate void glRasterPos4sFunc(short x, short y, short z, short w);
        private static glRasterPos4sFunc glRasterPos4sPtr;
        private delegate void glRasterPos4svFunc(IntPtr v);
        private static glRasterPos4svFunc glRasterPos4svPtr;
        private delegate void glRectdFunc(double x1, double y1, double x2, double y2);
        private static glRectdFunc glRectdPtr;
        private delegate void glRectdvFunc(IntPtr v1, IntPtr v2);
        private static glRectdvFunc glRectdvPtr;
        private delegate void glRectfFunc(float x1, float y1, float x2, float y2);
        private static glRectfFunc glRectfPtr;
        private delegate void glRectfvFunc(IntPtr v1, IntPtr v2);
        private static glRectfvFunc glRectfvPtr;
        private delegate void glRectiFunc(int x1, int y1, int x2, int y2);
        private static glRectiFunc glRectiPtr;
        private delegate void glRectivFunc(IntPtr v1, IntPtr v2);
        private static glRectivFunc glRectivPtr;
        private delegate void glRectsFunc(short x1, short y1, short x2, short y2);
        private static glRectsFunc glRectsPtr;
        private delegate void glRectsvFunc(IntPtr v1, IntPtr v2);
        private static glRectsvFunc glRectsvPtr;
        private delegate void glTexCoord1dFunc(double s);
        private static glTexCoord1dFunc glTexCoord1dPtr;
        private delegate void glTexCoord1dvFunc(IntPtr v);
        private static glTexCoord1dvFunc glTexCoord1dvPtr;
        private delegate void glTexCoord1fFunc(float s);
        private static glTexCoord1fFunc glTexCoord1fPtr;
        private delegate void glTexCoord1fvFunc(IntPtr v);
        private static glTexCoord1fvFunc glTexCoord1fvPtr;
        private delegate void glTexCoord1iFunc(int s);
        private static glTexCoord1iFunc glTexCoord1iPtr;
        private delegate void glTexCoord1ivFunc(IntPtr v);
        private static glTexCoord1ivFunc glTexCoord1ivPtr;
        private delegate void glTexCoord1sFunc(short s);
        private static glTexCoord1sFunc glTexCoord1sPtr;
        private delegate void glTexCoord1svFunc(IntPtr v);
        private static glTexCoord1svFunc glTexCoord1svPtr;
        private delegate void glTexCoord2dFunc(double s, double t);
        private static glTexCoord2dFunc glTexCoord2dPtr;
        private delegate void glTexCoord2dvFunc(IntPtr v);
        private static glTexCoord2dvFunc glTexCoord2dvPtr;
        private delegate void glTexCoord2fFunc(float s, float t);
        private static glTexCoord2fFunc glTexCoord2fPtr;
        private delegate void glTexCoord2fvFunc(IntPtr v);
        private static glTexCoord2fvFunc glTexCoord2fvPtr;
        private delegate void glTexCoord2iFunc(int s, int t);
        private static glTexCoord2iFunc glTexCoord2iPtr;
        private delegate void glTexCoord2ivFunc(IntPtr v);
        private static glTexCoord2ivFunc glTexCoord2ivPtr;
        private delegate void glTexCoord2sFunc(short s, short t);
        private static glTexCoord2sFunc glTexCoord2sPtr;
        private delegate void glTexCoord2svFunc(IntPtr v);
        private static glTexCoord2svFunc glTexCoord2svPtr;
        private delegate void glTexCoord3dFunc(double s, double t, double r);
        private static glTexCoord3dFunc glTexCoord3dPtr;
        private delegate void glTexCoord3dvFunc(IntPtr v);
        private static glTexCoord3dvFunc glTexCoord3dvPtr;
        private delegate void glTexCoord3fFunc(float s, float t, float r);
        private static glTexCoord3fFunc glTexCoord3fPtr;
        private delegate void glTexCoord3fvFunc(IntPtr v);
        private static glTexCoord3fvFunc glTexCoord3fvPtr;
        private delegate void glTexCoord3iFunc(int s, int t, int r);
        private static glTexCoord3iFunc glTexCoord3iPtr;
        private delegate void glTexCoord3ivFunc(IntPtr v);
        private static glTexCoord3ivFunc glTexCoord3ivPtr;
        private delegate void glTexCoord3sFunc(short s, short t, short r);
        private static glTexCoord3sFunc glTexCoord3sPtr;
        private delegate void glTexCoord3svFunc(IntPtr v);
        private static glTexCoord3svFunc glTexCoord3svPtr;
        private delegate void glTexCoord4dFunc(double s, double t, double r, double q);
        private static glTexCoord4dFunc glTexCoord4dPtr;
        private delegate void glTexCoord4dvFunc(IntPtr v);
        private static glTexCoord4dvFunc glTexCoord4dvPtr;
        private delegate void glTexCoord4fFunc(float s, float t, float r, float q);
        private static glTexCoord4fFunc glTexCoord4fPtr;
        private delegate void glTexCoord4fvFunc(IntPtr v);
        private static glTexCoord4fvFunc glTexCoord4fvPtr;
        private delegate void glTexCoord4iFunc(int s, int t, int r, int q);
        private static glTexCoord4iFunc glTexCoord4iPtr;
        private delegate void glTexCoord4ivFunc(IntPtr v);
        private static glTexCoord4ivFunc glTexCoord4ivPtr;
        private delegate void glTexCoord4sFunc(short s, short t, short r, short q);
        private static glTexCoord4sFunc glTexCoord4sPtr;
        private delegate void glTexCoord4svFunc(IntPtr v);
        private static glTexCoord4svFunc glTexCoord4svPtr;
        private delegate void glVertex2dFunc(double x, double y);
        private static glVertex2dFunc glVertex2dPtr;
        private delegate void glVertex2dvFunc(IntPtr v);
        private static glVertex2dvFunc glVertex2dvPtr;
        private delegate void glVertex2fFunc(float x, float y);
        private static glVertex2fFunc glVertex2fPtr;
        private delegate void glVertex2fvFunc(IntPtr v);
        private static glVertex2fvFunc glVertex2fvPtr;
        private delegate void glVertex2iFunc(int x, int y);
        private static glVertex2iFunc glVertex2iPtr;
        private delegate void glVertex2ivFunc(IntPtr v);
        private static glVertex2ivFunc glVertex2ivPtr;
        private delegate void glVertex2sFunc(short x, short y);
        private static glVertex2sFunc glVertex2sPtr;
        private delegate void glVertex2svFunc(IntPtr v);
        private static glVertex2svFunc glVertex2svPtr;
        private delegate void glVertex3dFunc(double x, double y, double z);
        private static glVertex3dFunc glVertex3dPtr;
        private delegate void glVertex3dvFunc(IntPtr v);
        private static glVertex3dvFunc glVertex3dvPtr;
        private delegate void glVertex3fFunc(float x, float y, float z);
        private static glVertex3fFunc glVertex3fPtr;
        private delegate void glVertex3fvFunc(IntPtr v);
        private static glVertex3fvFunc glVertex3fvPtr;
        private delegate void glVertex3iFunc(int x, int y, int z);
        private static glVertex3iFunc glVertex3iPtr;
        private delegate void glVertex3ivFunc(IntPtr v);
        private static glVertex3ivFunc glVertex3ivPtr;
        private delegate void glVertex3sFunc(short x, short y, short z);
        private static glVertex3sFunc glVertex3sPtr;
        private delegate void glVertex3svFunc(IntPtr v);
        private static glVertex3svFunc glVertex3svPtr;
        private delegate void glVertex4dFunc(double x, double y, double z, double w);
        private static glVertex4dFunc glVertex4dPtr;
        private delegate void glVertex4dvFunc(IntPtr v);
        private static glVertex4dvFunc glVertex4dvPtr;
        private delegate void glVertex4fFunc(float x, float y, float z, float w);
        private static glVertex4fFunc glVertex4fPtr;
        private delegate void glVertex4fvFunc(IntPtr v);
        private static glVertex4fvFunc glVertex4fvPtr;
        private delegate void glVertex4iFunc(int x, int y, int z, int w);
        private static glVertex4iFunc glVertex4iPtr;
        private delegate void glVertex4ivFunc(IntPtr v);
        private static glVertex4ivFunc glVertex4ivPtr;
        private delegate void glVertex4sFunc(short x, short y, short z, short w);
        private static glVertex4sFunc glVertex4sPtr;
        private delegate void glVertex4svFunc(IntPtr v);
        private static glVertex4svFunc glVertex4svPtr;
        private delegate void glClipPlaneFunc(uint plane, IntPtr equation);
        private static glClipPlaneFunc glClipPlanePtr;
        private delegate void glColorMaterialFunc(uint face, uint mode);
        private static glColorMaterialFunc glColorMaterialPtr;
        private delegate void glFogfFunc(uint pname, float param);
        private static glFogfFunc glFogfPtr;
        private delegate void glFogfvFunc(uint pname, IntPtr @params);
        private static glFogfvFunc glFogfvPtr;
        private delegate void glFogiFunc(uint pname, int param);
        private static glFogiFunc glFogiPtr;
        private delegate void glFogivFunc(uint pname, IntPtr @params);
        private static glFogivFunc glFogivPtr;
        private delegate void glLightfFunc(uint light, uint pname, float param);
        private static glLightfFunc glLightfPtr;
        private delegate void glLightfvFunc(uint light, uint pname, IntPtr @params);
        private static glLightfvFunc glLightfvPtr;
        private delegate void glLightiFunc(uint light, uint pname, int param);
        private static glLightiFunc glLightiPtr;
        private delegate void glLightivFunc(uint light, uint pname, IntPtr @params);
        private static glLightivFunc glLightivPtr;
        private delegate void glLightModelfFunc(uint pname, float param);
        private static glLightModelfFunc glLightModelfPtr;
        private delegate void glLightModelfvFunc(uint pname, IntPtr @params);
        private static glLightModelfvFunc glLightModelfvPtr;
        private delegate void glLightModeliFunc(uint pname, int param);
        private static glLightModeliFunc glLightModeliPtr;
        private delegate void glLightModelivFunc(uint pname, IntPtr @params);
        private static glLightModelivFunc glLightModelivPtr;
        private delegate void glLineStippleFunc(int factor, ushort pattern);
        private static glLineStippleFunc glLineStipplePtr;
        private delegate void glMaterialfFunc(uint face, uint pname, float param);
        private static glMaterialfFunc glMaterialfPtr;
        private delegate void glMaterialfvFunc(uint face, uint pname, IntPtr @params);
        private static glMaterialfvFunc glMaterialfvPtr;
        private delegate void glMaterialiFunc(uint face, uint pname, int param);
        private static glMaterialiFunc glMaterialiPtr;
        private delegate void glMaterialivFunc(uint face, uint pname, IntPtr @params);
        private static glMaterialivFunc glMaterialivPtr;
        private delegate void glPolygonStippleFunc(IntPtr mask);
        private static glPolygonStippleFunc glPolygonStipplePtr;
        private delegate void glShadeModelFunc(uint mode);
        private static glShadeModelFunc glShadeModelPtr;
        private delegate void glTexEnvfFunc(uint target, uint pname, float param);
        private static glTexEnvfFunc glTexEnvfPtr;
        private delegate void glTexEnvfvFunc(uint target, uint pname, IntPtr @params);
        private static glTexEnvfvFunc glTexEnvfvPtr;
        private delegate void glTexEnviFunc(uint target, uint pname, int param);
        private static glTexEnviFunc glTexEnviPtr;
        private delegate void glTexEnvivFunc(uint target, uint pname, IntPtr @params);
        private static glTexEnvivFunc glTexEnvivPtr;
        private delegate void glTexGendFunc(uint coord, uint pname, double param);
        private static glTexGendFunc glTexGendPtr;
        private delegate void glTexGendvFunc(uint coord, uint pname, IntPtr @params);
        private static glTexGendvFunc glTexGendvPtr;
        private delegate void glTexGenfFunc(uint coord, uint pname, float param);
        private static glTexGenfFunc glTexGenfPtr;
        private delegate void glTexGenfvFunc(uint coord, uint pname, IntPtr @params);
        private static glTexGenfvFunc glTexGenfvPtr;
        private delegate void glTexGeniFunc(uint coord, uint pname, int param);
        private static glTexGeniFunc glTexGeniPtr;
        private delegate void glTexGenivFunc(uint coord, uint pname, IntPtr @params);
        private static glTexGenivFunc glTexGenivPtr;
        private delegate void glFeedbackBufferFunc(int size, uint type, IntPtr buffer);
        private static glFeedbackBufferFunc glFeedbackBufferPtr;
        private delegate void glSelectBufferFunc(int size, IntPtr buffer);
        private static glSelectBufferFunc glSelectBufferPtr;
        private delegate int glRenderModeFunc(uint mode);
        private static glRenderModeFunc glRenderModePtr;
        private delegate void glInitNamesFunc();
        private static glInitNamesFunc glInitNamesPtr;
        private delegate void glLoadNameFunc(uint name);
        private static glLoadNameFunc glLoadNamePtr;
        private delegate void glPassThroughFunc(float token);
        private static glPassThroughFunc glPassThroughPtr;
        private delegate void glPopNameFunc();
        private static glPopNameFunc glPopNamePtr;
        private delegate void glPushNameFunc(uint name);
        private static glPushNameFunc glPushNamePtr;
        private delegate void glClearAccumFunc(float red, float green, float blue, float alpha);
        private static glClearAccumFunc glClearAccumPtr;
        private delegate void glClearIndexFunc(float c);
        private static glClearIndexFunc glClearIndexPtr;
        private delegate void glIndexMaskFunc(uint mask);
        private static glIndexMaskFunc glIndexMaskPtr;
        private delegate void glAccumFunc(uint op, float value);
        private static glAccumFunc glAccumPtr;
        private delegate void glPopAttribFunc();
        private static glPopAttribFunc glPopAttribPtr;
        private delegate void glPushAttribFunc(uint mask);
        private static glPushAttribFunc glPushAttribPtr;
        private delegate void glMap1dFunc(uint target, double u1, double u2, int stride, int order, IntPtr points);
        private static glMap1dFunc glMap1dPtr;
        private delegate void glMap1fFunc(uint target, float u1, float u2, int stride, int order, IntPtr points);
        private static glMap1fFunc glMap1fPtr;
        private delegate void glMap2dFunc(uint target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, IntPtr points);
        private static glMap2dFunc glMap2dPtr;
        private delegate void glMap2fFunc(uint target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, IntPtr points);
        private static glMap2fFunc glMap2fPtr;
        private delegate void glMapGrid1dFunc(int un, double u1, double u2);
        private static glMapGrid1dFunc glMapGrid1dPtr;
        private delegate void glMapGrid1fFunc(int un, float u1, float u2);
        private static glMapGrid1fFunc glMapGrid1fPtr;
        private delegate void glMapGrid2dFunc(int un, double u1, double u2, int vn, double v1, double v2);
        private static glMapGrid2dFunc glMapGrid2dPtr;
        private delegate void glMapGrid2fFunc(int un, float u1, float u2, int vn, float v1, float v2);
        private static glMapGrid2fFunc glMapGrid2fPtr;
        private delegate void glEvalCoord1dFunc(double u);
        private static glEvalCoord1dFunc glEvalCoord1dPtr;
        private delegate void glEvalCoord1dvFunc(IntPtr u);
        private static glEvalCoord1dvFunc glEvalCoord1dvPtr;
        private delegate void glEvalCoord1fFunc(float u);
        private static glEvalCoord1fFunc glEvalCoord1fPtr;
        private delegate void glEvalCoord1fvFunc(IntPtr u);
        private static glEvalCoord1fvFunc glEvalCoord1fvPtr;
        private delegate void glEvalCoord2dFunc(double u, double v);
        private static glEvalCoord2dFunc glEvalCoord2dPtr;
        private delegate void glEvalCoord2dvFunc(IntPtr u);
        private static glEvalCoord2dvFunc glEvalCoord2dvPtr;
        private delegate void glEvalCoord2fFunc(float u, float v);
        private static glEvalCoord2fFunc glEvalCoord2fPtr;
        private delegate void glEvalCoord2fvFunc(IntPtr u);
        private static glEvalCoord2fvFunc glEvalCoord2fvPtr;
        private delegate void glEvalMesh1Func(uint mode, int i1, int i2);
        private static glEvalMesh1Func glEvalMesh1Ptr;
        private delegate void glEvalPoint1Func(int i);
        private static glEvalPoint1Func glEvalPoint1Ptr;
        private delegate void glEvalMesh2Func(uint mode, int i1, int i2, int j1, int j2);
        private static glEvalMesh2Func glEvalMesh2Ptr;
        private delegate void glEvalPoint2Func(int i, int j);
        private static glEvalPoint2Func glEvalPoint2Ptr;
        private delegate void glAlphaFuncFunc(uint func, float @ref);
        private static glAlphaFuncFunc glAlphaFuncPtr;
        private delegate void glPixelZoomFunc(float xfactor, float yfactor);
        private static glPixelZoomFunc glPixelZoomPtr;
        private delegate void glPixelTransferfFunc(uint pname, float param);
        private static glPixelTransferfFunc glPixelTransferfPtr;
        private delegate void glPixelTransferiFunc(uint pname, int param);
        private static glPixelTransferiFunc glPixelTransferiPtr;
        private delegate void glPixelMapfvFunc(uint map, int mapsize, IntPtr values);
        private static glPixelMapfvFunc glPixelMapfvPtr;
        private delegate void glPixelMapuivFunc(uint map, int mapsize, IntPtr values);
        private static glPixelMapuivFunc glPixelMapuivPtr;
        private delegate void glPixelMapusvFunc(uint map, int mapsize, IntPtr values);
        private static glPixelMapusvFunc glPixelMapusvPtr;
        private delegate void glCopyPixelsFunc(int x, int y, int width, int height, uint type);
        private static glCopyPixelsFunc glCopyPixelsPtr;
        private delegate void glDrawPixelsFunc(int width, int height, uint format, uint type, IntPtr pixels);
        private static glDrawPixelsFunc glDrawPixelsPtr;
        private delegate void glGetClipPlaneFunc(uint plane, IntPtr equation);
        private static glGetClipPlaneFunc glGetClipPlanePtr;
        private delegate void glGetLightfvFunc(uint light, uint pname, IntPtr @params);
        private static glGetLightfvFunc glGetLightfvPtr;
        private delegate void glGetLightivFunc(uint light, uint pname, IntPtr @params);
        private static glGetLightivFunc glGetLightivPtr;
        private delegate void glGetMapdvFunc(uint target, uint query, IntPtr v);
        private static glGetMapdvFunc glGetMapdvPtr;
        private delegate void glGetMapfvFunc(uint target, uint query, IntPtr v);
        private static glGetMapfvFunc glGetMapfvPtr;
        private delegate void glGetMapivFunc(uint target, uint query, IntPtr v);
        private static glGetMapivFunc glGetMapivPtr;
        private delegate void glGetMaterialfvFunc(uint face, uint pname, IntPtr @params);
        private static glGetMaterialfvFunc glGetMaterialfvPtr;
        private delegate void glGetMaterialivFunc(uint face, uint pname, IntPtr @params);
        private static glGetMaterialivFunc glGetMaterialivPtr;
        private delegate void glGetPixelMapfvFunc(uint map, IntPtr values);
        private static glGetPixelMapfvFunc glGetPixelMapfvPtr;
        private delegate void glGetPixelMapuivFunc(uint map, IntPtr values);
        private static glGetPixelMapuivFunc glGetPixelMapuivPtr;
        private delegate void glGetPixelMapusvFunc(uint map, IntPtr values);
        private static glGetPixelMapusvFunc glGetPixelMapusvPtr;
        private delegate void glGetPolygonStippleFunc(IntPtr mask);
        private static glGetPolygonStippleFunc glGetPolygonStipplePtr;
        private delegate void glGetTexEnvfvFunc(uint target, uint pname, IntPtr @params);
        private static glGetTexEnvfvFunc glGetTexEnvfvPtr;
        private delegate void glGetTexEnvivFunc(uint target, uint pname, IntPtr @params);
        private static glGetTexEnvivFunc glGetTexEnvivPtr;
        private delegate void glGetTexGendvFunc(uint coord, uint pname, IntPtr @params);
        private static glGetTexGendvFunc glGetTexGendvPtr;
        private delegate void glGetTexGenfvFunc(uint coord, uint pname, IntPtr @params);
        private static glGetTexGenfvFunc glGetTexGenfvPtr;
        private delegate void glGetTexGenivFunc(uint coord, uint pname, IntPtr @params);
        private static glGetTexGenivFunc glGetTexGenivPtr;
        private delegate bool glIsListFunc(uint list);
        private static glIsListFunc glIsListPtr;
        private delegate void glFrustumFunc(double left, double right, double bottom, double top, double zNear, double zFar);
        private static glFrustumFunc glFrustumPtr;
        private delegate void glLoadIdentityFunc();
        private static glLoadIdentityFunc glLoadIdentityPtr;
        private delegate void glLoadMatrixfFunc(IntPtr m);
        private static glLoadMatrixfFunc glLoadMatrixfPtr;
        private delegate void glLoadMatrixdFunc(IntPtr m);
        private static glLoadMatrixdFunc glLoadMatrixdPtr;
        private delegate void glMatrixModeFunc(uint mode);
        private static glMatrixModeFunc glMatrixModePtr;
        private delegate void glMultMatrixfFunc(IntPtr m);
        private static glMultMatrixfFunc glMultMatrixfPtr;
        private delegate void glMultMatrixdFunc(IntPtr m);
        private static glMultMatrixdFunc glMultMatrixdPtr;
        private delegate void glOrthoFunc(double left, double right, double bottom, double top, double zNear, double zFar);
        private static glOrthoFunc glOrthoPtr;
        private delegate void glPopMatrixFunc();
        private static glPopMatrixFunc glPopMatrixPtr;
        private delegate void glPushMatrixFunc();
        private static glPushMatrixFunc glPushMatrixPtr;
        private delegate void glRotatedFunc(double angle, double x, double y, double z);
        private static glRotatedFunc glRotatedPtr;
        private delegate void glRotatefFunc(float angle, float x, float y, float z);
        private static glRotatefFunc glRotatefPtr;
        private delegate void glScaledFunc(double x, double y, double z);
        private static glScaledFunc glScaledPtr;
        private delegate void glScalefFunc(float x, float y, float z);
        private static glScalefFunc glScalefPtr;
        private delegate void glTranslatedFunc(double x, double y, double z);
        private static glTranslatedFunc glTranslatedPtr;
        private delegate void glTranslatefFunc(float x, float y, float z);
        private static glTranslatefFunc glTranslatefPtr;
        private delegate void glDrawArraysFunc(uint mode, int first, int count);
        private static glDrawArraysFunc glDrawArraysPtr;
        private delegate void glDrawElementsFunc(uint mode, int count, uint type, IntPtr indices);
        private static glDrawElementsFunc glDrawElementsPtr;
        private delegate void glGetPointervFunc(uint pname, IntPtr @params);
        private static glGetPointervFunc glGetPointervPtr;
        private delegate void glPolygonOffsetFunc(float factor, float units);
        private static glPolygonOffsetFunc glPolygonOffsetPtr;
        private delegate void glCopyTexImage1DFunc(uint target, int level, uint internalformat, int x, int y, int width, int border);
        private static glCopyTexImage1DFunc glCopyTexImage1DPtr;
        private delegate void glCopyTexImage2DFunc(uint target, int level, uint internalformat, int x, int y, int width, int height, int border);
        private static glCopyTexImage2DFunc glCopyTexImage2DPtr;
        private delegate void glCopyTexSubImage1DFunc(uint target, int level, int xoffset, int x, int y, int width);
        private static glCopyTexSubImage1DFunc glCopyTexSubImage1DPtr;
        private delegate void glCopyTexSubImage2DFunc(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
        private static glCopyTexSubImage2DFunc glCopyTexSubImage2DPtr;
        private delegate void glTexSubImage1DFunc(uint target, int level, int xoffset, int width, uint format, uint type, IntPtr pixels);
        private static glTexSubImage1DFunc glTexSubImage1DPtr;
        private delegate void glTexSubImage2DFunc(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, IntPtr pixels);
        private static glTexSubImage2DFunc glTexSubImage2DPtr;
        private delegate void glBindTextureFunc(uint target, uint texture);
        private static glBindTextureFunc glBindTexturePtr;
        private delegate void glDeleteTexturesFunc(int n, IntPtr textures);
        private static glDeleteTexturesFunc glDeleteTexturesPtr;
        private delegate void glGenTexturesFunc(int n, IntPtr textures);
        private static glGenTexturesFunc glGenTexturesPtr;
        private delegate bool glIsTextureFunc(uint texture);
        private static glIsTextureFunc glIsTexturePtr;
        private delegate void glArrayElementFunc(int i);
        private static glArrayElementFunc glArrayElementPtr;
        private delegate void glColorPointerFunc(int size, uint type, int stride, IntPtr pointer);
        private static glColorPointerFunc glColorPointerPtr;
        private delegate void glDisableClientStateFunc(uint array);
        private static glDisableClientStateFunc glDisableClientStatePtr;
        private delegate void glEdgeFlagPointerFunc(int stride, IntPtr pointer);
        private static glEdgeFlagPointerFunc glEdgeFlagPointerPtr;
        private delegate void glEnableClientStateFunc(uint array);
        private static glEnableClientStateFunc glEnableClientStatePtr;
        private delegate void glIndexPointerFunc(uint type, int stride, IntPtr pointer);
        private static glIndexPointerFunc glIndexPointerPtr;
        private delegate void glInterleavedArraysFunc(uint format, int stride, IntPtr pointer);
        private static glInterleavedArraysFunc glInterleavedArraysPtr;
        private delegate void glNormalPointerFunc(uint type, int stride, IntPtr pointer);
        private static glNormalPointerFunc glNormalPointerPtr;
        private delegate void glTexCoordPointerFunc(int size, uint type, int stride, IntPtr pointer);
        private static glTexCoordPointerFunc glTexCoordPointerPtr;
        private delegate void glVertexPointerFunc(int size, uint type, int stride, IntPtr pointer);
        private static glVertexPointerFunc glVertexPointerPtr;
        private delegate bool glAreTexturesResidentFunc(int n, IntPtr textures, IntPtr residences);
        private static glAreTexturesResidentFunc glAreTexturesResidentPtr;
        private delegate void glPrioritizeTexturesFunc(int n, IntPtr textures, IntPtr priorities);
        private static glPrioritizeTexturesFunc glPrioritizeTexturesPtr;
        private delegate void glIndexubFunc(byte c);
        private static glIndexubFunc glIndexubPtr;
        private delegate void glIndexubvFunc(IntPtr c);
        private static glIndexubvFunc glIndexubvPtr;
        private delegate void glPopClientAttribFunc();
        private static glPopClientAttribFunc glPopClientAttribPtr;
        private delegate void glPushClientAttribFunc(uint mask);
        private static glPushClientAttribFunc glPushClientAttribPtr;
        private delegate void glDrawRangeElementsFunc(uint mode, uint start, uint end, int count, uint type, IntPtr indices);
        private static glDrawRangeElementsFunc glDrawRangeElementsPtr;
        private delegate void glTexImage3DFunc(uint target, int level, int internalformat, int width, int height, int depth, int border, uint format, uint type, IntPtr pixels);
        private static glTexImage3DFunc glTexImage3DPtr;
        private delegate void glTexSubImage3DFunc(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, IntPtr pixels);
        private static glTexSubImage3DFunc glTexSubImage3DPtr;
        private delegate void glCopyTexSubImage3DFunc(uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
        private static glCopyTexSubImage3DFunc glCopyTexSubImage3DPtr;
        private delegate void glActiveTextureFunc(uint texture);
        private static glActiveTextureFunc glActiveTexturePtr;
        private delegate void glSampleCoverageFunc(float value, bool invert);
        private static glSampleCoverageFunc glSampleCoveragePtr;
        private delegate void glCompressedTexImage3DFunc(uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data);
        private static glCompressedTexImage3DFunc glCompressedTexImage3DPtr;
        private delegate void glCompressedTexImage2DFunc(uint target, int level, uint internalformat, int width, int height, int border, int imageSize, IntPtr data);
        private static glCompressedTexImage2DFunc glCompressedTexImage2DPtr;
        private delegate void glCompressedTexImage1DFunc(uint target, int level, uint internalformat, int width, int border, int imageSize, IntPtr data);
        private static glCompressedTexImage1DFunc glCompressedTexImage1DPtr;
        private delegate void glCompressedTexSubImage3DFunc(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, IntPtr data);
        private static glCompressedTexSubImage3DFunc glCompressedTexSubImage3DPtr;
        private delegate void glCompressedTexSubImage2DFunc(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, IntPtr data);
        private static glCompressedTexSubImage2DFunc glCompressedTexSubImage2DPtr;
        private delegate void glCompressedTexSubImage1DFunc(uint target, int level, int xoffset, int width, uint format, int imageSize, IntPtr data);
        private static glCompressedTexSubImage1DFunc glCompressedTexSubImage1DPtr;
        private delegate void glGetCompressedTexImageFunc(uint target, int level, IntPtr img);
        private static glGetCompressedTexImageFunc glGetCompressedTexImagePtr;
        private delegate void glClientActiveTextureFunc(uint texture);
        private static glClientActiveTextureFunc glClientActiveTexturePtr;
        private delegate void glMultiTexCoord1dFunc(uint target, double s);
        private static glMultiTexCoord1dFunc glMultiTexCoord1dPtr;
        private delegate void glMultiTexCoord1dvFunc(uint target, IntPtr v);
        private static glMultiTexCoord1dvFunc glMultiTexCoord1dvPtr;
        private delegate void glMultiTexCoord1fFunc(uint target, float s);
        private static glMultiTexCoord1fFunc glMultiTexCoord1fPtr;
        private delegate void glMultiTexCoord1fvFunc(uint target, IntPtr v);
        private static glMultiTexCoord1fvFunc glMultiTexCoord1fvPtr;
        private delegate void glMultiTexCoord1iFunc(uint target, int s);
        private static glMultiTexCoord1iFunc glMultiTexCoord1iPtr;
        private delegate void glMultiTexCoord1ivFunc(uint target, IntPtr v);
        private static glMultiTexCoord1ivFunc glMultiTexCoord1ivPtr;
        private delegate void glMultiTexCoord1sFunc(uint target, short s);
        private static glMultiTexCoord1sFunc glMultiTexCoord1sPtr;
        private delegate void glMultiTexCoord1svFunc(uint target, IntPtr v);
        private static glMultiTexCoord1svFunc glMultiTexCoord1svPtr;
        private delegate void glMultiTexCoord2dFunc(uint target, double s, double t);
        private static glMultiTexCoord2dFunc glMultiTexCoord2dPtr;
        private delegate void glMultiTexCoord2dvFunc(uint target, IntPtr v);
        private static glMultiTexCoord2dvFunc glMultiTexCoord2dvPtr;
        private delegate void glMultiTexCoord2fFunc(uint target, float s, float t);
        private static glMultiTexCoord2fFunc glMultiTexCoord2fPtr;
        private delegate void glMultiTexCoord2fvFunc(uint target, IntPtr v);
        private static glMultiTexCoord2fvFunc glMultiTexCoord2fvPtr;
        private delegate void glMultiTexCoord2iFunc(uint target, int s, int t);
        private static glMultiTexCoord2iFunc glMultiTexCoord2iPtr;
        private delegate void glMultiTexCoord2ivFunc(uint target, IntPtr v);
        private static glMultiTexCoord2ivFunc glMultiTexCoord2ivPtr;
        private delegate void glMultiTexCoord2sFunc(uint target, short s, short t);
        private static glMultiTexCoord2sFunc glMultiTexCoord2sPtr;
        private delegate void glMultiTexCoord2svFunc(uint target, IntPtr v);
        private static glMultiTexCoord2svFunc glMultiTexCoord2svPtr;
        private delegate void glMultiTexCoord3dFunc(uint target, double s, double t, double r);
        private static glMultiTexCoord3dFunc glMultiTexCoord3dPtr;
        private delegate void glMultiTexCoord3dvFunc(uint target, IntPtr v);
        private static glMultiTexCoord3dvFunc glMultiTexCoord3dvPtr;
        private delegate void glMultiTexCoord3fFunc(uint target, float s, float t, float r);
        private static glMultiTexCoord3fFunc glMultiTexCoord3fPtr;
        private delegate void glMultiTexCoord3fvFunc(uint target, IntPtr v);
        private static glMultiTexCoord3fvFunc glMultiTexCoord3fvPtr;
        private delegate void glMultiTexCoord3iFunc(uint target, int s, int t, int r);
        private static glMultiTexCoord3iFunc glMultiTexCoord3iPtr;
        private delegate void glMultiTexCoord3ivFunc(uint target, IntPtr v);
        private static glMultiTexCoord3ivFunc glMultiTexCoord3ivPtr;
        private delegate void glMultiTexCoord3sFunc(uint target, short s, short t, short r);
        private static glMultiTexCoord3sFunc glMultiTexCoord3sPtr;
        private delegate void glMultiTexCoord3svFunc(uint target, IntPtr v);
        private static glMultiTexCoord3svFunc glMultiTexCoord3svPtr;
        private delegate void glMultiTexCoord4dFunc(uint target, double s, double t, double r, double q);
        private static glMultiTexCoord4dFunc glMultiTexCoord4dPtr;
        private delegate void glMultiTexCoord4dvFunc(uint target, IntPtr v);
        private static glMultiTexCoord4dvFunc glMultiTexCoord4dvPtr;
        private delegate void glMultiTexCoord4fFunc(uint target, float s, float t, float r, float q);
        private static glMultiTexCoord4fFunc glMultiTexCoord4fPtr;
        private delegate void glMultiTexCoord4fvFunc(uint target, IntPtr v);
        private static glMultiTexCoord4fvFunc glMultiTexCoord4fvPtr;
        private delegate void glMultiTexCoord4iFunc(uint target, int s, int t, int r, int q);
        private static glMultiTexCoord4iFunc glMultiTexCoord4iPtr;
        private delegate void glMultiTexCoord4ivFunc(uint target, IntPtr v);
        private static glMultiTexCoord4ivFunc glMultiTexCoord4ivPtr;
        private delegate void glMultiTexCoord4sFunc(uint target, short s, short t, short r, short q);
        private static glMultiTexCoord4sFunc glMultiTexCoord4sPtr;
        private delegate void glMultiTexCoord4svFunc(uint target, IntPtr v);
        private static glMultiTexCoord4svFunc glMultiTexCoord4svPtr;
        private delegate void glLoadTransposeMatrixfFunc(IntPtr m);
        private static glLoadTransposeMatrixfFunc glLoadTransposeMatrixfPtr;
        private delegate void glLoadTransposeMatrixdFunc(IntPtr m);
        private static glLoadTransposeMatrixdFunc glLoadTransposeMatrixdPtr;
        private delegate void glMultTransposeMatrixfFunc(IntPtr m);
        private static glMultTransposeMatrixfFunc glMultTransposeMatrixfPtr;
        private delegate void glMultTransposeMatrixdFunc(IntPtr m);
        private static glMultTransposeMatrixdFunc glMultTransposeMatrixdPtr;
        private delegate void glBlendFuncSeparateFunc(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha);
        private static glBlendFuncSeparateFunc glBlendFuncSeparatePtr;
        private delegate void glMultiDrawArraysFunc(uint mode, IntPtr first, IntPtr count, int drawcount);
        private static glMultiDrawArraysFunc glMultiDrawArraysPtr;
        private delegate void glMultiDrawElementsFunc(uint mode, IntPtr count, uint type, IntPtr indices, int drawcount);
        private static glMultiDrawElementsFunc glMultiDrawElementsPtr;
        private delegate void glPointParameterfFunc(uint pname, float param);
        private static glPointParameterfFunc glPointParameterfPtr;
        private delegate void glPointParameterfvFunc(uint pname, IntPtr @params);
        private static glPointParameterfvFunc glPointParameterfvPtr;
        private delegate void glPointParameteriFunc(uint pname, int param);
        private static glPointParameteriFunc glPointParameteriPtr;
        private delegate void glPointParameterivFunc(uint pname, IntPtr @params);
        private static glPointParameterivFunc glPointParameterivPtr;
        private delegate void glFogCoordfFunc(float coord);
        private static glFogCoordfFunc glFogCoordfPtr;
        private delegate void glFogCoordfvFunc(IntPtr coord);
        private static glFogCoordfvFunc glFogCoordfvPtr;
        private delegate void glFogCoorddFunc(double coord);
        private static glFogCoorddFunc glFogCoorddPtr;
        private delegate void glFogCoorddvFunc(IntPtr coord);
        private static glFogCoorddvFunc glFogCoorddvPtr;
        private delegate void glFogCoordPointerFunc(uint type, int stride, IntPtr pointer);
        private static glFogCoordPointerFunc glFogCoordPointerPtr;
        private delegate void glSecondaryColor3bFunc(sbyte red, sbyte green, sbyte blue);
        private static glSecondaryColor3bFunc glSecondaryColor3bPtr;
        private delegate void glSecondaryColor3bvFunc(IntPtr v);
        private static glSecondaryColor3bvFunc glSecondaryColor3bvPtr;
        private delegate void glSecondaryColor3dFunc(double red, double green, double blue);
        private static glSecondaryColor3dFunc glSecondaryColor3dPtr;
        private delegate void glSecondaryColor3dvFunc(IntPtr v);
        private static glSecondaryColor3dvFunc glSecondaryColor3dvPtr;
        private delegate void glSecondaryColor3fFunc(float red, float green, float blue);
        private static glSecondaryColor3fFunc glSecondaryColor3fPtr;
        private delegate void glSecondaryColor3fvFunc(IntPtr v);
        private static glSecondaryColor3fvFunc glSecondaryColor3fvPtr;
        private delegate void glSecondaryColor3iFunc(int red, int green, int blue);
        private static glSecondaryColor3iFunc glSecondaryColor3iPtr;
        private delegate void glSecondaryColor3ivFunc(IntPtr v);
        private static glSecondaryColor3ivFunc glSecondaryColor3ivPtr;
        private delegate void glSecondaryColor3sFunc(short red, short green, short blue);
        private static glSecondaryColor3sFunc glSecondaryColor3sPtr;
        private delegate void glSecondaryColor3svFunc(IntPtr v);
        private static glSecondaryColor3svFunc glSecondaryColor3svPtr;
        private delegate void glSecondaryColor3ubFunc(byte red, byte green, byte blue);
        private static glSecondaryColor3ubFunc glSecondaryColor3ubPtr;
        private delegate void glSecondaryColor3ubvFunc(IntPtr v);
        private static glSecondaryColor3ubvFunc glSecondaryColor3ubvPtr;
        private delegate void glSecondaryColor3uiFunc(uint red, uint green, uint blue);
        private static glSecondaryColor3uiFunc glSecondaryColor3uiPtr;
        private delegate void glSecondaryColor3uivFunc(IntPtr v);
        private static glSecondaryColor3uivFunc glSecondaryColor3uivPtr;
        private delegate void glSecondaryColor3usFunc(ushort red, ushort green, ushort blue);
        private static glSecondaryColor3usFunc glSecondaryColor3usPtr;
        private delegate void glSecondaryColor3usvFunc(IntPtr v);
        private static glSecondaryColor3usvFunc glSecondaryColor3usvPtr;
        private delegate void glSecondaryColorPointerFunc(int size, uint type, int stride, IntPtr pointer);
        private static glSecondaryColorPointerFunc glSecondaryColorPointerPtr;
        private delegate void glWindowPos2dFunc(double x, double y);
        private static glWindowPos2dFunc glWindowPos2dPtr;
        private delegate void glWindowPos2dvFunc(IntPtr v);
        private static glWindowPos2dvFunc glWindowPos2dvPtr;
        private delegate void glWindowPos2fFunc(float x, float y);
        private static glWindowPos2fFunc glWindowPos2fPtr;
        private delegate void glWindowPos2fvFunc(IntPtr v);
        private static glWindowPos2fvFunc glWindowPos2fvPtr;
        private delegate void glWindowPos2iFunc(int x, int y);
        private static glWindowPos2iFunc glWindowPos2iPtr;
        private delegate void glWindowPos2ivFunc(IntPtr v);
        private static glWindowPos2ivFunc glWindowPos2ivPtr;
        private delegate void glWindowPos2sFunc(short x, short y);
        private static glWindowPos2sFunc glWindowPos2sPtr;
        private delegate void glWindowPos2svFunc(IntPtr v);
        private static glWindowPos2svFunc glWindowPos2svPtr;
        private delegate void glWindowPos3dFunc(double x, double y, double z);
        private static glWindowPos3dFunc glWindowPos3dPtr;
        private delegate void glWindowPos3dvFunc(IntPtr v);
        private static glWindowPos3dvFunc glWindowPos3dvPtr;
        private delegate void glWindowPos3fFunc(float x, float y, float z);
        private static glWindowPos3fFunc glWindowPos3fPtr;
        private delegate void glWindowPos3fvFunc(IntPtr v);
        private static glWindowPos3fvFunc glWindowPos3fvPtr;
        private delegate void glWindowPos3iFunc(int x, int y, int z);
        private static glWindowPos3iFunc glWindowPos3iPtr;
        private delegate void glWindowPos3ivFunc(IntPtr v);
        private static glWindowPos3ivFunc glWindowPos3ivPtr;
        private delegate void glWindowPos3sFunc(short x, short y, short z);
        private static glWindowPos3sFunc glWindowPos3sPtr;
        private delegate void glWindowPos3svFunc(IntPtr v);
        private static glWindowPos3svFunc glWindowPos3svPtr;
        private delegate void glBlendColorFunc(float red, float green, float blue, float alpha);
        private static glBlendColorFunc glBlendColorPtr;
        private delegate void glBlendEquationFunc(uint mode);
        private static glBlendEquationFunc glBlendEquationPtr;
        private delegate void glGenQueriesFunc(int n, IntPtr ids);
        private static glGenQueriesFunc glGenQueriesPtr;
        private delegate void glDeleteQueriesFunc(int n, IntPtr ids);
        private static glDeleteQueriesFunc glDeleteQueriesPtr;
        private delegate bool glIsQueryFunc(uint id);
        private static glIsQueryFunc glIsQueryPtr;
        private delegate void glBeginQueryFunc(uint target, uint id);
        private static glBeginQueryFunc glBeginQueryPtr;
        private delegate void glEndQueryFunc(uint target);
        private static glEndQueryFunc glEndQueryPtr;
        private delegate void glGetQueryivFunc(uint target, uint pname, IntPtr @params);
        private static glGetQueryivFunc glGetQueryivPtr;
        private delegate void glGetQueryObjectivFunc(uint id, uint pname, IntPtr @params);
        private static glGetQueryObjectivFunc glGetQueryObjectivPtr;
        private delegate void glGetQueryObjectuivFunc(uint id, uint pname, IntPtr @params);
        private static glGetQueryObjectuivFunc glGetQueryObjectuivPtr;
        private delegate void glBindBufferFunc(uint target, uint buffer);
        private static glBindBufferFunc glBindBufferPtr;
        private delegate void glDeleteBuffersFunc(int n, IntPtr buffers);
        private static glDeleteBuffersFunc glDeleteBuffersPtr;
        private delegate void glGenBuffersFunc(int n, IntPtr buffers);
        private static glGenBuffersFunc glGenBuffersPtr;
        private delegate bool glIsBufferFunc(uint buffer);
        private static glIsBufferFunc glIsBufferPtr;
        private delegate void glBufferDataFunc(uint target, int size, IntPtr data, uint usage);
        private static glBufferDataFunc glBufferDataPtr;
        private delegate void glBufferSubDataFunc(uint target, IntPtr offset, int size, IntPtr data);
        private static glBufferSubDataFunc glBufferSubDataPtr;
        private delegate void glGetBufferSubDataFunc(uint target, IntPtr offset, int size, IntPtr data);
        private static glGetBufferSubDataFunc glGetBufferSubDataPtr;
        private delegate IntPtr glMapBufferFunc(uint target, uint access);
        private static glMapBufferFunc glMapBufferPtr;
        private delegate bool glUnmapBufferFunc(uint target);
        private static glUnmapBufferFunc glUnmapBufferPtr;
        private delegate void glGetBufferParameterivFunc(uint target, uint pname, IntPtr @params);
        private static glGetBufferParameterivFunc glGetBufferParameterivPtr;
        private delegate void glGetBufferPointervFunc(uint target, uint pname, IntPtr @params);
        private static glGetBufferPointervFunc glGetBufferPointervPtr;
        #endregion

        #region Interop
        public static Func<string, IntPtr> GetProcAddress = null;

        public static void LoadAllFunctions()
        {
            glCullFacePtr = (glCullFaceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCullFace"), typeof(glCullFaceFunc));
            glFrontFacePtr = (glFrontFaceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFrontFace"), typeof(glFrontFaceFunc));
            glHintPtr = (glHintFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glHint"), typeof(glHintFunc));
            glLineWidthPtr = (glLineWidthFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLineWidth"), typeof(glLineWidthFunc));
            glPointSizePtr = (glPointSizeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointSize"), typeof(glPointSizeFunc));
            glPolygonModePtr = (glPolygonModeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPolygonMode"), typeof(glPolygonModeFunc));
            glScissorPtr = (glScissorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScissor"), typeof(glScissorFunc));
            glTexParameterfPtr = (glTexParameterfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterf"), typeof(glTexParameterfFunc));
            glTexParameterfvPtr = (glTexParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterfv"), typeof(glTexParameterfvFunc));
            glTexParameteriPtr = (glTexParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameteri"), typeof(glTexParameteriFunc));
            glTexParameterivPtr = (glTexParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameteriv"), typeof(glTexParameterivFunc));
            glTexImage1DPtr = (glTexImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage1D"), typeof(glTexImage1DFunc));
            glTexImage2DPtr = (glTexImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage2D"), typeof(glTexImage2DFunc));
            glDrawBufferPtr = (glDrawBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawBuffer"), typeof(glDrawBufferFunc));
            glClearPtr = (glClearFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClear"), typeof(glClearFunc));
            glClearColorPtr = (glClearColorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearColor"), typeof(glClearColorFunc));
            glClearStencilPtr = (glClearStencilFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearStencil"), typeof(glClearStencilFunc));
            glClearDepthPtr = (glClearDepthFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearDepth"), typeof(glClearDepthFunc));
            glStencilMaskPtr = (glStencilMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilMask"), typeof(glStencilMaskFunc));
            glColorMaskPtr = (glColorMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorMask"), typeof(glColorMaskFunc));
            glDepthMaskPtr = (glDepthMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthMask"), typeof(glDepthMaskFunc));
            glDisablePtr = (glDisableFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDisable"), typeof(glDisableFunc));
            glEnablePtr = (glEnableFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnable"), typeof(glEnableFunc));
            glFinishPtr = (glFinishFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFinish"), typeof(glFinishFunc));
            glFlushPtr = (glFlushFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFlush"), typeof(glFlushFunc));
            glBlendFuncPtr = (glBlendFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendFunc"), typeof(glBlendFuncFunc));
            glLogicOpPtr = (glLogicOpFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLogicOp"), typeof(glLogicOpFunc));
            glStencilFuncPtr = (glStencilFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilFunc"), typeof(glStencilFuncFunc));
            glStencilOpPtr = (glStencilOpFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilOp"), typeof(glStencilOpFunc));
            glDepthFuncPtr = (glDepthFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthFunc"), typeof(glDepthFuncFunc));
            glPixelStorefPtr = (glPixelStorefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelStoref"), typeof(glPixelStorefFunc));
            glPixelStoreiPtr = (glPixelStoreiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelStorei"), typeof(glPixelStoreiFunc));
            glReadBufferPtr = (glReadBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glReadBuffer"), typeof(glReadBufferFunc));
            glReadPixelsPtr = (glReadPixelsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glReadPixels"), typeof(glReadPixelsFunc));
            glGetBooleanvPtr = (glGetBooleanvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBooleanv"), typeof(glGetBooleanvFunc));
            glGetDoublevPtr = (glGetDoublevFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetDoublev"), typeof(glGetDoublevFunc));
            glGetErrorPtr = (glGetErrorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetError"), typeof(glGetErrorFunc));
            glGetFloatvPtr = (glGetFloatvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFloatv"), typeof(glGetFloatvFunc));
            glGetIntegervPtr = (glGetIntegervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetIntegerv"), typeof(glGetIntegervFunc));
            glGetStringPtr = (glGetStringFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetString"), typeof(glGetStringFunc));
            glGetTexImagePtr = (glGetTexImageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexImage"), typeof(glGetTexImageFunc));
            glGetTexParameterfvPtr = (glGetTexParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameterfv"), typeof(glGetTexParameterfvFunc));
            glGetTexParameterivPtr = (glGetTexParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameteriv"), typeof(glGetTexParameterivFunc));
            glGetTexLevelParameterfvPtr = (glGetTexLevelParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexLevelParameterfv"), typeof(glGetTexLevelParameterfvFunc));
            glGetTexLevelParameterivPtr = (glGetTexLevelParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexLevelParameteriv"), typeof(glGetTexLevelParameterivFunc));
            glIsEnabledPtr = (glIsEnabledFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsEnabled"), typeof(glIsEnabledFunc));
            glDepthRangePtr = (glDepthRangeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthRange"), typeof(glDepthRangeFunc));
            glViewportPtr = (glViewportFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glViewport"), typeof(glViewportFunc));
            glNewListPtr = (glNewListFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNewList"), typeof(glNewListFunc));
            glEndListPtr = (glEndListFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEndList"), typeof(glEndListFunc));
            glCallListPtr = (glCallListFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCallList"), typeof(glCallListFunc));
            glCallListsPtr = (glCallListsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCallLists"), typeof(glCallListsFunc));
            glDeleteListsPtr = (glDeleteListsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteLists"), typeof(glDeleteListsFunc));
            glGenListsPtr = (glGenListsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenLists"), typeof(glGenListsFunc));
            glListBasePtr = (glListBaseFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glListBase"), typeof(glListBaseFunc));
            glBeginPtr = (glBeginFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBegin"), typeof(glBeginFunc));
            glBitmapPtr = (glBitmapFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBitmap"), typeof(glBitmapFunc));
            glColor3bPtr = (glColor3bFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3b"), typeof(glColor3bFunc));
            glColor3bvPtr = (glColor3bvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3bv"), typeof(glColor3bvFunc));
            glColor3dPtr = (glColor3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3d"), typeof(glColor3dFunc));
            glColor3dvPtr = (glColor3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3dv"), typeof(glColor3dvFunc));
            glColor3fPtr = (glColor3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3f"), typeof(glColor3fFunc));
            glColor3fvPtr = (glColor3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3fv"), typeof(glColor3fvFunc));
            glColor3iPtr = (glColor3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3i"), typeof(glColor3iFunc));
            glColor3ivPtr = (glColor3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3iv"), typeof(glColor3ivFunc));
            glColor3sPtr = (glColor3sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3s"), typeof(glColor3sFunc));
            glColor3svPtr = (glColor3svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3sv"), typeof(glColor3svFunc));
            glColor3ubPtr = (glColor3ubFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3ub"), typeof(glColor3ubFunc));
            glColor3ubvPtr = (glColor3ubvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3ubv"), typeof(glColor3ubvFunc));
            glColor3uiPtr = (glColor3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3ui"), typeof(glColor3uiFunc));
            glColor3uivPtr = (glColor3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3uiv"), typeof(glColor3uivFunc));
            glColor3usPtr = (glColor3usFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3us"), typeof(glColor3usFunc));
            glColor3usvPtr = (glColor3usvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3usv"), typeof(glColor3usvFunc));
            glColor4bPtr = (glColor4bFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4b"), typeof(glColor4bFunc));
            glColor4bvPtr = (glColor4bvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4bv"), typeof(glColor4bvFunc));
            glColor4dPtr = (glColor4dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4d"), typeof(glColor4dFunc));
            glColor4dvPtr = (glColor4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4dv"), typeof(glColor4dvFunc));
            glColor4fPtr = (glColor4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4f"), typeof(glColor4fFunc));
            glColor4fvPtr = (glColor4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4fv"), typeof(glColor4fvFunc));
            glColor4iPtr = (glColor4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4i"), typeof(glColor4iFunc));
            glColor4ivPtr = (glColor4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4iv"), typeof(glColor4ivFunc));
            glColor4sPtr = (glColor4sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4s"), typeof(glColor4sFunc));
            glColor4svPtr = (glColor4svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4sv"), typeof(glColor4svFunc));
            glColor4ubPtr = (glColor4ubFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4ub"), typeof(glColor4ubFunc));
            glColor4ubvPtr = (glColor4ubvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4ubv"), typeof(glColor4ubvFunc));
            glColor4uiPtr = (glColor4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4ui"), typeof(glColor4uiFunc));
            glColor4uivPtr = (glColor4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4uiv"), typeof(glColor4uivFunc));
            glColor4usPtr = (glColor4usFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4us"), typeof(glColor4usFunc));
            glColor4usvPtr = (glColor4usvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4usv"), typeof(glColor4usvFunc));
            glEdgeFlagPtr = (glEdgeFlagFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEdgeFlag"), typeof(glEdgeFlagFunc));
            glEdgeFlagvPtr = (glEdgeFlagvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEdgeFlagv"), typeof(glEdgeFlagvFunc));
            glEndPtr = (glEndFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnd"), typeof(glEndFunc));
            glIndexdPtr = (glIndexdFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexd"), typeof(glIndexdFunc));
            glIndexdvPtr = (glIndexdvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexdv"), typeof(glIndexdvFunc));
            glIndexfPtr = (glIndexfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexf"), typeof(glIndexfFunc));
            glIndexfvPtr = (glIndexfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexfv"), typeof(glIndexfvFunc));
            glIndexiPtr = (glIndexiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexi"), typeof(glIndexiFunc));
            glIndexivPtr = (glIndexivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexiv"), typeof(glIndexivFunc));
            glIndexsPtr = (glIndexsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexs"), typeof(glIndexsFunc));
            glIndexsvPtr = (glIndexsvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexsv"), typeof(glIndexsvFunc));
            glNormal3bPtr = (glNormal3bFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3b"), typeof(glNormal3bFunc));
            glNormal3bvPtr = (glNormal3bvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3bv"), typeof(glNormal3bvFunc));
            glNormal3dPtr = (glNormal3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3d"), typeof(glNormal3dFunc));
            glNormal3dvPtr = (glNormal3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3dv"), typeof(glNormal3dvFunc));
            glNormal3fPtr = (glNormal3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3f"), typeof(glNormal3fFunc));
            glNormal3fvPtr = (glNormal3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3fv"), typeof(glNormal3fvFunc));
            glNormal3iPtr = (glNormal3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3i"), typeof(glNormal3iFunc));
            glNormal3ivPtr = (glNormal3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3iv"), typeof(glNormal3ivFunc));
            glNormal3sPtr = (glNormal3sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3s"), typeof(glNormal3sFunc));
            glNormal3svPtr = (glNormal3svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3sv"), typeof(glNormal3svFunc));
            glRasterPos2dPtr = (glRasterPos2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos2d"), typeof(glRasterPos2dFunc));
            glRasterPos2dvPtr = (glRasterPos2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos2dv"), typeof(glRasterPos2dvFunc));
            glRasterPos2fPtr = (glRasterPos2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos2f"), typeof(glRasterPos2fFunc));
            glRasterPos2fvPtr = (glRasterPos2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos2fv"), typeof(glRasterPos2fvFunc));
            glRasterPos2iPtr = (glRasterPos2iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos2i"), typeof(glRasterPos2iFunc));
            glRasterPos2ivPtr = (glRasterPos2ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos2iv"), typeof(glRasterPos2ivFunc));
            glRasterPos2sPtr = (glRasterPos2sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos2s"), typeof(glRasterPos2sFunc));
            glRasterPos2svPtr = (glRasterPos2svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos2sv"), typeof(glRasterPos2svFunc));
            glRasterPos3dPtr = (glRasterPos3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos3d"), typeof(glRasterPos3dFunc));
            glRasterPos3dvPtr = (glRasterPos3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos3dv"), typeof(glRasterPos3dvFunc));
            glRasterPos3fPtr = (glRasterPos3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos3f"), typeof(glRasterPos3fFunc));
            glRasterPos3fvPtr = (glRasterPos3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos3fv"), typeof(glRasterPos3fvFunc));
            glRasterPos3iPtr = (glRasterPos3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos3i"), typeof(glRasterPos3iFunc));
            glRasterPos3ivPtr = (glRasterPos3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos3iv"), typeof(glRasterPos3ivFunc));
            glRasterPos3sPtr = (glRasterPos3sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos3s"), typeof(glRasterPos3sFunc));
            glRasterPos3svPtr = (glRasterPos3svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos3sv"), typeof(glRasterPos3svFunc));
            glRasterPos4dPtr = (glRasterPos4dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos4d"), typeof(glRasterPos4dFunc));
            glRasterPos4dvPtr = (glRasterPos4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos4dv"), typeof(glRasterPos4dvFunc));
            glRasterPos4fPtr = (glRasterPos4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos4f"), typeof(glRasterPos4fFunc));
            glRasterPos4fvPtr = (glRasterPos4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos4fv"), typeof(glRasterPos4fvFunc));
            glRasterPos4iPtr = (glRasterPos4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos4i"), typeof(glRasterPos4iFunc));
            glRasterPos4ivPtr = (glRasterPos4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos4iv"), typeof(glRasterPos4ivFunc));
            glRasterPos4sPtr = (glRasterPos4sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos4s"), typeof(glRasterPos4sFunc));
            glRasterPos4svPtr = (glRasterPos4svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos4sv"), typeof(glRasterPos4svFunc));
            glRectdPtr = (glRectdFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRectd"), typeof(glRectdFunc));
            glRectdvPtr = (glRectdvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRectdv"), typeof(glRectdvFunc));
            glRectfPtr = (glRectfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRectf"), typeof(glRectfFunc));
            glRectfvPtr = (glRectfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRectfv"), typeof(glRectfvFunc));
            glRectiPtr = (glRectiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRecti"), typeof(glRectiFunc));
            glRectivPtr = (glRectivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRectiv"), typeof(glRectivFunc));
            glRectsPtr = (glRectsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRects"), typeof(glRectsFunc));
            glRectsvPtr = (glRectsvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRectsv"), typeof(glRectsvFunc));
            glTexCoord1dPtr = (glTexCoord1dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord1d"), typeof(glTexCoord1dFunc));
            glTexCoord1dvPtr = (glTexCoord1dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord1dv"), typeof(glTexCoord1dvFunc));
            glTexCoord1fPtr = (glTexCoord1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord1f"), typeof(glTexCoord1fFunc));
            glTexCoord1fvPtr = (glTexCoord1fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord1fv"), typeof(glTexCoord1fvFunc));
            glTexCoord1iPtr = (glTexCoord1iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord1i"), typeof(glTexCoord1iFunc));
            glTexCoord1ivPtr = (glTexCoord1ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord1iv"), typeof(glTexCoord1ivFunc));
            glTexCoord1sPtr = (glTexCoord1sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord1s"), typeof(glTexCoord1sFunc));
            glTexCoord1svPtr = (glTexCoord1svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord1sv"), typeof(glTexCoord1svFunc));
            glTexCoord2dPtr = (glTexCoord2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord2d"), typeof(glTexCoord2dFunc));
            glTexCoord2dvPtr = (glTexCoord2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord2dv"), typeof(glTexCoord2dvFunc));
            glTexCoord2fPtr = (glTexCoord2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord2f"), typeof(glTexCoord2fFunc));
            glTexCoord2fvPtr = (glTexCoord2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord2fv"), typeof(glTexCoord2fvFunc));
            glTexCoord2iPtr = (glTexCoord2iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord2i"), typeof(glTexCoord2iFunc));
            glTexCoord2ivPtr = (glTexCoord2ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord2iv"), typeof(glTexCoord2ivFunc));
            glTexCoord2sPtr = (glTexCoord2sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord2s"), typeof(glTexCoord2sFunc));
            glTexCoord2svPtr = (glTexCoord2svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord2sv"), typeof(glTexCoord2svFunc));
            glTexCoord3dPtr = (glTexCoord3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord3d"), typeof(glTexCoord3dFunc));
            glTexCoord3dvPtr = (glTexCoord3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord3dv"), typeof(glTexCoord3dvFunc));
            glTexCoord3fPtr = (glTexCoord3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord3f"), typeof(glTexCoord3fFunc));
            glTexCoord3fvPtr = (glTexCoord3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord3fv"), typeof(glTexCoord3fvFunc));
            glTexCoord3iPtr = (glTexCoord3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord3i"), typeof(glTexCoord3iFunc));
            glTexCoord3ivPtr = (glTexCoord3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord3iv"), typeof(glTexCoord3ivFunc));
            glTexCoord3sPtr = (glTexCoord3sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord3s"), typeof(glTexCoord3sFunc));
            glTexCoord3svPtr = (glTexCoord3svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord3sv"), typeof(glTexCoord3svFunc));
            glTexCoord4dPtr = (glTexCoord4dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord4d"), typeof(glTexCoord4dFunc));
            glTexCoord4dvPtr = (glTexCoord4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord4dv"), typeof(glTexCoord4dvFunc));
            glTexCoord4fPtr = (glTexCoord4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord4f"), typeof(glTexCoord4fFunc));
            glTexCoord4fvPtr = (glTexCoord4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord4fv"), typeof(glTexCoord4fvFunc));
            glTexCoord4iPtr = (glTexCoord4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord4i"), typeof(glTexCoord4iFunc));
            glTexCoord4ivPtr = (glTexCoord4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord4iv"), typeof(glTexCoord4ivFunc));
            glTexCoord4sPtr = (glTexCoord4sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord4s"), typeof(glTexCoord4sFunc));
            glTexCoord4svPtr = (glTexCoord4svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord4sv"), typeof(glTexCoord4svFunc));
            glVertex2dPtr = (glVertex2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex2d"), typeof(glVertex2dFunc));
            glVertex2dvPtr = (glVertex2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex2dv"), typeof(glVertex2dvFunc));
            glVertex2fPtr = (glVertex2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex2f"), typeof(glVertex2fFunc));
            glVertex2fvPtr = (glVertex2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex2fv"), typeof(glVertex2fvFunc));
            glVertex2iPtr = (glVertex2iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex2i"), typeof(glVertex2iFunc));
            glVertex2ivPtr = (glVertex2ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex2iv"), typeof(glVertex2ivFunc));
            glVertex2sPtr = (glVertex2sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex2s"), typeof(glVertex2sFunc));
            glVertex2svPtr = (glVertex2svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex2sv"), typeof(glVertex2svFunc));
            glVertex3dPtr = (glVertex3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex3d"), typeof(glVertex3dFunc));
            glVertex3dvPtr = (glVertex3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex3dv"), typeof(glVertex3dvFunc));
            glVertex3fPtr = (glVertex3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex3f"), typeof(glVertex3fFunc));
            glVertex3fvPtr = (glVertex3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex3fv"), typeof(glVertex3fvFunc));
            glVertex3iPtr = (glVertex3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex3i"), typeof(glVertex3iFunc));
            glVertex3ivPtr = (glVertex3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex3iv"), typeof(glVertex3ivFunc));
            glVertex3sPtr = (glVertex3sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex3s"), typeof(glVertex3sFunc));
            glVertex3svPtr = (glVertex3svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex3sv"), typeof(glVertex3svFunc));
            glVertex4dPtr = (glVertex4dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex4d"), typeof(glVertex4dFunc));
            glVertex4dvPtr = (glVertex4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex4dv"), typeof(glVertex4dvFunc));
            glVertex4fPtr = (glVertex4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex4f"), typeof(glVertex4fFunc));
            glVertex4fvPtr = (glVertex4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex4fv"), typeof(glVertex4fvFunc));
            glVertex4iPtr = (glVertex4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex4i"), typeof(glVertex4iFunc));
            glVertex4ivPtr = (glVertex4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex4iv"), typeof(glVertex4ivFunc));
            glVertex4sPtr = (glVertex4sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex4s"), typeof(glVertex4sFunc));
            glVertex4svPtr = (glVertex4svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex4sv"), typeof(glVertex4svFunc));
            glClipPlanePtr = (glClipPlaneFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClipPlane"), typeof(glClipPlaneFunc));
            glColorMaterialPtr = (glColorMaterialFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorMaterial"), typeof(glColorMaterialFunc));
            glFogfPtr = (glFogfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogf"), typeof(glFogfFunc));
            glFogfvPtr = (glFogfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogfv"), typeof(glFogfvFunc));
            glFogiPtr = (glFogiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogi"), typeof(glFogiFunc));
            glFogivPtr = (glFogivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogiv"), typeof(glFogivFunc));
            glLightfPtr = (glLightfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightf"), typeof(glLightfFunc));
            glLightfvPtr = (glLightfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightfv"), typeof(glLightfvFunc));
            glLightiPtr = (glLightiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLighti"), typeof(glLightiFunc));
            glLightivPtr = (glLightivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightiv"), typeof(glLightivFunc));
            glLightModelfPtr = (glLightModelfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightModelf"), typeof(glLightModelfFunc));
            glLightModelfvPtr = (glLightModelfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightModelfv"), typeof(glLightModelfvFunc));
            glLightModeliPtr = (glLightModeliFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightModeli"), typeof(glLightModeliFunc));
            glLightModelivPtr = (glLightModelivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightModeliv"), typeof(glLightModelivFunc));
            glLineStipplePtr = (glLineStippleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLineStipple"), typeof(glLineStippleFunc));
            glMaterialfPtr = (glMaterialfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMaterialf"), typeof(glMaterialfFunc));
            glMaterialfvPtr = (glMaterialfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMaterialfv"), typeof(glMaterialfvFunc));
            glMaterialiPtr = (glMaterialiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMateriali"), typeof(glMaterialiFunc));
            glMaterialivPtr = (glMaterialivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMaterialiv"), typeof(glMaterialivFunc));
            glPolygonStipplePtr = (glPolygonStippleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPolygonStipple"), typeof(glPolygonStippleFunc));
            glShadeModelPtr = (glShadeModelFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glShadeModel"), typeof(glShadeModelFunc));
            glTexEnvfPtr = (glTexEnvfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnvf"), typeof(glTexEnvfFunc));
            glTexEnvfvPtr = (glTexEnvfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnvfv"), typeof(glTexEnvfvFunc));
            glTexEnviPtr = (glTexEnviFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnvi"), typeof(glTexEnviFunc));
            glTexEnvivPtr = (glTexEnvivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnviv"), typeof(glTexEnvivFunc));
            glTexGendPtr = (glTexGendFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexGend"), typeof(glTexGendFunc));
            glTexGendvPtr = (glTexGendvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexGendv"), typeof(glTexGendvFunc));
            glTexGenfPtr = (glTexGenfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexGenf"), typeof(glTexGenfFunc));
            glTexGenfvPtr = (glTexGenfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexGenfv"), typeof(glTexGenfvFunc));
            glTexGeniPtr = (glTexGeniFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexGeni"), typeof(glTexGeniFunc));
            glTexGenivPtr = (glTexGenivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexGeniv"), typeof(glTexGenivFunc));
            glFeedbackBufferPtr = (glFeedbackBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFeedbackBuffer"), typeof(glFeedbackBufferFunc));
            glSelectBufferPtr = (glSelectBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSelectBuffer"), typeof(glSelectBufferFunc));
            glRenderModePtr = (glRenderModeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRenderMode"), typeof(glRenderModeFunc));
            glInitNamesPtr = (glInitNamesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glInitNames"), typeof(glInitNamesFunc));
            glLoadNamePtr = (glLoadNameFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLoadName"), typeof(glLoadNameFunc));
            glPassThroughPtr = (glPassThroughFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPassThrough"), typeof(glPassThroughFunc));
            glPopNamePtr = (glPopNameFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPopName"), typeof(glPopNameFunc));
            glPushNamePtr = (glPushNameFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPushName"), typeof(glPushNameFunc));
            glClearAccumPtr = (glClearAccumFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearAccum"), typeof(glClearAccumFunc));
            glClearIndexPtr = (glClearIndexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearIndex"), typeof(glClearIndexFunc));
            glIndexMaskPtr = (glIndexMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexMask"), typeof(glIndexMaskFunc));
            glAccumPtr = (glAccumFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glAccum"), typeof(glAccumFunc));
            glPopAttribPtr = (glPopAttribFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPopAttrib"), typeof(glPopAttribFunc));
            glPushAttribPtr = (glPushAttribFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPushAttrib"), typeof(glPushAttribFunc));
            glMap1dPtr = (glMap1dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMap1d"), typeof(glMap1dFunc));
            glMap1fPtr = (glMap1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMap1f"), typeof(glMap1fFunc));
            glMap2dPtr = (glMap2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMap2d"), typeof(glMap2dFunc));
            glMap2fPtr = (glMap2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMap2f"), typeof(glMap2fFunc));
            glMapGrid1dPtr = (glMapGrid1dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMapGrid1d"), typeof(glMapGrid1dFunc));
            glMapGrid1fPtr = (glMapGrid1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMapGrid1f"), typeof(glMapGrid1fFunc));
            glMapGrid2dPtr = (glMapGrid2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMapGrid2d"), typeof(glMapGrid2dFunc));
            glMapGrid2fPtr = (glMapGrid2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMapGrid2f"), typeof(glMapGrid2fFunc));
            glEvalCoord1dPtr = (glEvalCoord1dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalCoord1d"), typeof(glEvalCoord1dFunc));
            glEvalCoord1dvPtr = (glEvalCoord1dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalCoord1dv"), typeof(glEvalCoord1dvFunc));
            glEvalCoord1fPtr = (glEvalCoord1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalCoord1f"), typeof(glEvalCoord1fFunc));
            glEvalCoord1fvPtr = (glEvalCoord1fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalCoord1fv"), typeof(glEvalCoord1fvFunc));
            glEvalCoord2dPtr = (glEvalCoord2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalCoord2d"), typeof(glEvalCoord2dFunc));
            glEvalCoord2dvPtr = (glEvalCoord2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalCoord2dv"), typeof(glEvalCoord2dvFunc));
            glEvalCoord2fPtr = (glEvalCoord2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalCoord2f"), typeof(glEvalCoord2fFunc));
            glEvalCoord2fvPtr = (glEvalCoord2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalCoord2fv"), typeof(glEvalCoord2fvFunc));
            glEvalMesh1Ptr = (glEvalMesh1Func)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalMesh1"), typeof(glEvalMesh1Func));
            glEvalPoint1Ptr = (glEvalPoint1Func)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalPoint1"), typeof(glEvalPoint1Func));
            glEvalMesh2Ptr = (glEvalMesh2Func)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalMesh2"), typeof(glEvalMesh2Func));
            glEvalPoint2Ptr = (glEvalPoint2Func)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalPoint2"), typeof(glEvalPoint2Func));
            glAlphaFuncPtr = (glAlphaFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glAlphaFunc"), typeof(glAlphaFuncFunc));
            glPixelZoomPtr = (glPixelZoomFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelZoom"), typeof(glPixelZoomFunc));
            glPixelTransferfPtr = (glPixelTransferfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelTransferf"), typeof(glPixelTransferfFunc));
            glPixelTransferiPtr = (glPixelTransferiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelTransferi"), typeof(glPixelTransferiFunc));
            glPixelMapfvPtr = (glPixelMapfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelMapfv"), typeof(glPixelMapfvFunc));
            glPixelMapuivPtr = (glPixelMapuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelMapuiv"), typeof(glPixelMapuivFunc));
            glPixelMapusvPtr = (glPixelMapusvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelMapusv"), typeof(glPixelMapusvFunc));
            glCopyPixelsPtr = (glCopyPixelsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyPixels"), typeof(glCopyPixelsFunc));
            glDrawPixelsPtr = (glDrawPixelsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawPixels"), typeof(glDrawPixelsFunc));
            glGetClipPlanePtr = (glGetClipPlaneFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetClipPlane"), typeof(glGetClipPlaneFunc));
            glGetLightfvPtr = (glGetLightfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetLightfv"), typeof(glGetLightfvFunc));
            glGetLightivPtr = (glGetLightivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetLightiv"), typeof(glGetLightivFunc));
            glGetMapdvPtr = (glGetMapdvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetMapdv"), typeof(glGetMapdvFunc));
            glGetMapfvPtr = (glGetMapfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetMapfv"), typeof(glGetMapfvFunc));
            glGetMapivPtr = (glGetMapivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetMapiv"), typeof(glGetMapivFunc));
            glGetMaterialfvPtr = (glGetMaterialfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetMaterialfv"), typeof(glGetMaterialfvFunc));
            glGetMaterialivPtr = (glGetMaterialivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetMaterialiv"), typeof(glGetMaterialivFunc));
            glGetPixelMapfvPtr = (glGetPixelMapfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetPixelMapfv"), typeof(glGetPixelMapfvFunc));
            glGetPixelMapuivPtr = (glGetPixelMapuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetPixelMapuiv"), typeof(glGetPixelMapuivFunc));
            glGetPixelMapusvPtr = (glGetPixelMapusvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetPixelMapusv"), typeof(glGetPixelMapusvFunc));
            glGetPolygonStipplePtr = (glGetPolygonStippleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetPolygonStipple"), typeof(glGetPolygonStippleFunc));
            glGetTexEnvfvPtr = (glGetTexEnvfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexEnvfv"), typeof(glGetTexEnvfvFunc));
            glGetTexEnvivPtr = (glGetTexEnvivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexEnviv"), typeof(glGetTexEnvivFunc));
            glGetTexGendvPtr = (glGetTexGendvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexGendv"), typeof(glGetTexGendvFunc));
            glGetTexGenfvPtr = (glGetTexGenfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexGenfv"), typeof(glGetTexGenfvFunc));
            glGetTexGenivPtr = (glGetTexGenivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexGeniv"), typeof(glGetTexGenivFunc));
            glIsListPtr = (glIsListFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsList"), typeof(glIsListFunc));
            glFrustumPtr = (glFrustumFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFrustum"), typeof(glFrustumFunc));
            glLoadIdentityPtr = (glLoadIdentityFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLoadIdentity"), typeof(glLoadIdentityFunc));
            glLoadMatrixfPtr = (glLoadMatrixfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLoadMatrixf"), typeof(glLoadMatrixfFunc));
            glLoadMatrixdPtr = (glLoadMatrixdFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLoadMatrixd"), typeof(glLoadMatrixdFunc));
            glMatrixModePtr = (glMatrixModeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMatrixMode"), typeof(glMatrixModeFunc));
            glMultMatrixfPtr = (glMultMatrixfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultMatrixf"), typeof(glMultMatrixfFunc));
            glMultMatrixdPtr = (glMultMatrixdFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultMatrixd"), typeof(glMultMatrixdFunc));
            glOrthoPtr = (glOrthoFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glOrtho"), typeof(glOrthoFunc));
            glPopMatrixPtr = (glPopMatrixFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPopMatrix"), typeof(glPopMatrixFunc));
            glPushMatrixPtr = (glPushMatrixFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPushMatrix"), typeof(glPushMatrixFunc));
            glRotatedPtr = (glRotatedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRotated"), typeof(glRotatedFunc));
            glRotatefPtr = (glRotatefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRotatef"), typeof(glRotatefFunc));
            glScaledPtr = (glScaledFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScaled"), typeof(glScaledFunc));
            glScalefPtr = (glScalefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScalef"), typeof(glScalefFunc));
            glTranslatedPtr = (glTranslatedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTranslated"), typeof(glTranslatedFunc));
            glTranslatefPtr = (glTranslatefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTranslatef"), typeof(glTranslatefFunc));
            glDrawArraysPtr = (glDrawArraysFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawArrays"), typeof(glDrawArraysFunc));
            glDrawElementsPtr = (glDrawElementsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElements"), typeof(glDrawElementsFunc));
            glGetPointervPtr = (glGetPointervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetPointerv"), typeof(glGetPointervFunc));
            glPolygonOffsetPtr = (glPolygonOffsetFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPolygonOffset"), typeof(glPolygonOffsetFunc));
            glCopyTexImage1DPtr = (glCopyTexImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexImage1D"), typeof(glCopyTexImage1DFunc));
            glCopyTexImage2DPtr = (glCopyTexImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexImage2D"), typeof(glCopyTexImage2DFunc));
            glCopyTexSubImage1DPtr = (glCopyTexSubImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexSubImage1D"), typeof(glCopyTexSubImage1DFunc));
            glCopyTexSubImage2DPtr = (glCopyTexSubImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexSubImage2D"), typeof(glCopyTexSubImage2DFunc));
            glTexSubImage1DPtr = (glTexSubImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexSubImage1D"), typeof(glTexSubImage1DFunc));
            glTexSubImage2DPtr = (glTexSubImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexSubImage2D"), typeof(glTexSubImage2DFunc));
            glBindTexturePtr = (glBindTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindTexture"), typeof(glBindTextureFunc));
            glDeleteTexturesPtr = (glDeleteTexturesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteTextures"), typeof(glDeleteTexturesFunc));
            glGenTexturesPtr = (glGenTexturesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenTextures"), typeof(glGenTexturesFunc));
            glIsTexturePtr = (glIsTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsTexture"), typeof(glIsTextureFunc));
            glArrayElementPtr = (glArrayElementFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glArrayElement"), typeof(glArrayElementFunc));
            glColorPointerPtr = (glColorPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorPointer"), typeof(glColorPointerFunc));
            glDisableClientStatePtr = (glDisableClientStateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDisableClientState"), typeof(glDisableClientStateFunc));
            glEdgeFlagPointerPtr = (glEdgeFlagPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEdgeFlagPointer"), typeof(glEdgeFlagPointerFunc));
            glEnableClientStatePtr = (glEnableClientStateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnableClientState"), typeof(glEnableClientStateFunc));
            glIndexPointerPtr = (glIndexPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexPointer"), typeof(glIndexPointerFunc));
            glInterleavedArraysPtr = (glInterleavedArraysFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glInterleavedArrays"), typeof(glInterleavedArraysFunc));
            glNormalPointerPtr = (glNormalPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormalPointer"), typeof(glNormalPointerFunc));
            glTexCoordPointerPtr = (glTexCoordPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordPointer"), typeof(glTexCoordPointerFunc));
            glVertexPointerPtr = (glVertexPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexPointer"), typeof(glVertexPointerFunc));
            glAreTexturesResidentPtr = (glAreTexturesResidentFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glAreTexturesResident"), typeof(glAreTexturesResidentFunc));
            glPrioritizeTexturesPtr = (glPrioritizeTexturesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPrioritizeTextures"), typeof(glPrioritizeTexturesFunc));
            glIndexubPtr = (glIndexubFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexub"), typeof(glIndexubFunc));
            glIndexubvPtr = (glIndexubvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexubv"), typeof(glIndexubvFunc));
            glPopClientAttribPtr = (glPopClientAttribFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPopClientAttrib"), typeof(glPopClientAttribFunc));
            glPushClientAttribPtr = (glPushClientAttribFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPushClientAttrib"), typeof(glPushClientAttribFunc));
            glDrawRangeElementsPtr = (glDrawRangeElementsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawRangeElements"), typeof(glDrawRangeElementsFunc));
            glTexImage3DPtr = (glTexImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage3D"), typeof(glTexImage3DFunc));
            glTexSubImage3DPtr = (glTexSubImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexSubImage3D"), typeof(glTexSubImage3DFunc));
            glCopyTexSubImage3DPtr = (glCopyTexSubImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexSubImage3D"), typeof(glCopyTexSubImage3DFunc));
            glActiveTexturePtr = (glActiveTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glActiveTexture"), typeof(glActiveTextureFunc));
            glSampleCoveragePtr = (glSampleCoverageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSampleCoverage"), typeof(glSampleCoverageFunc));
            glCompressedTexImage3DPtr = (glCompressedTexImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexImage3D"), typeof(glCompressedTexImage3DFunc));
            glCompressedTexImage2DPtr = (glCompressedTexImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexImage2D"), typeof(glCompressedTexImage2DFunc));
            glCompressedTexImage1DPtr = (glCompressedTexImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexImage1D"), typeof(glCompressedTexImage1DFunc));
            glCompressedTexSubImage3DPtr = (glCompressedTexSubImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexSubImage3D"), typeof(glCompressedTexSubImage3DFunc));
            glCompressedTexSubImage2DPtr = (glCompressedTexSubImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexSubImage2D"), typeof(glCompressedTexSubImage2DFunc));
            glCompressedTexSubImage1DPtr = (glCompressedTexSubImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexSubImage1D"), typeof(glCompressedTexSubImage1DFunc));
            glGetCompressedTexImagePtr = (glGetCompressedTexImageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetCompressedTexImage"), typeof(glGetCompressedTexImageFunc));
            glClientActiveTexturePtr = (glClientActiveTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClientActiveTexture"), typeof(glClientActiveTextureFunc));
            glMultiTexCoord1dPtr = (glMultiTexCoord1dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord1d"), typeof(glMultiTexCoord1dFunc));
            glMultiTexCoord1dvPtr = (glMultiTexCoord1dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord1dv"), typeof(glMultiTexCoord1dvFunc));
            glMultiTexCoord1fPtr = (glMultiTexCoord1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord1f"), typeof(glMultiTexCoord1fFunc));
            glMultiTexCoord1fvPtr = (glMultiTexCoord1fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord1fv"), typeof(glMultiTexCoord1fvFunc));
            glMultiTexCoord1iPtr = (glMultiTexCoord1iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord1i"), typeof(glMultiTexCoord1iFunc));
            glMultiTexCoord1ivPtr = (glMultiTexCoord1ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord1iv"), typeof(glMultiTexCoord1ivFunc));
            glMultiTexCoord1sPtr = (glMultiTexCoord1sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord1s"), typeof(glMultiTexCoord1sFunc));
            glMultiTexCoord1svPtr = (glMultiTexCoord1svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord1sv"), typeof(glMultiTexCoord1svFunc));
            glMultiTexCoord2dPtr = (glMultiTexCoord2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord2d"), typeof(glMultiTexCoord2dFunc));
            glMultiTexCoord2dvPtr = (glMultiTexCoord2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord2dv"), typeof(glMultiTexCoord2dvFunc));
            glMultiTexCoord2fPtr = (glMultiTexCoord2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord2f"), typeof(glMultiTexCoord2fFunc));
            glMultiTexCoord2fvPtr = (glMultiTexCoord2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord2fv"), typeof(glMultiTexCoord2fvFunc));
            glMultiTexCoord2iPtr = (glMultiTexCoord2iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord2i"), typeof(glMultiTexCoord2iFunc));
            glMultiTexCoord2ivPtr = (glMultiTexCoord2ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord2iv"), typeof(glMultiTexCoord2ivFunc));
            glMultiTexCoord2sPtr = (glMultiTexCoord2sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord2s"), typeof(glMultiTexCoord2sFunc));
            glMultiTexCoord2svPtr = (glMultiTexCoord2svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord2sv"), typeof(glMultiTexCoord2svFunc));
            glMultiTexCoord3dPtr = (glMultiTexCoord3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord3d"), typeof(glMultiTexCoord3dFunc));
            glMultiTexCoord3dvPtr = (glMultiTexCoord3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord3dv"), typeof(glMultiTexCoord3dvFunc));
            glMultiTexCoord3fPtr = (glMultiTexCoord3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord3f"), typeof(glMultiTexCoord3fFunc));
            glMultiTexCoord3fvPtr = (glMultiTexCoord3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord3fv"), typeof(glMultiTexCoord3fvFunc));
            glMultiTexCoord3iPtr = (glMultiTexCoord3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord3i"), typeof(glMultiTexCoord3iFunc));
            glMultiTexCoord3ivPtr = (glMultiTexCoord3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord3iv"), typeof(glMultiTexCoord3ivFunc));
            glMultiTexCoord3sPtr = (glMultiTexCoord3sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord3s"), typeof(glMultiTexCoord3sFunc));
            glMultiTexCoord3svPtr = (glMultiTexCoord3svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord3sv"), typeof(glMultiTexCoord3svFunc));
            glMultiTexCoord4dPtr = (glMultiTexCoord4dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord4d"), typeof(glMultiTexCoord4dFunc));
            glMultiTexCoord4dvPtr = (glMultiTexCoord4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord4dv"), typeof(glMultiTexCoord4dvFunc));
            glMultiTexCoord4fPtr = (glMultiTexCoord4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord4f"), typeof(glMultiTexCoord4fFunc));
            glMultiTexCoord4fvPtr = (glMultiTexCoord4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord4fv"), typeof(glMultiTexCoord4fvFunc));
            glMultiTexCoord4iPtr = (glMultiTexCoord4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord4i"), typeof(glMultiTexCoord4iFunc));
            glMultiTexCoord4ivPtr = (glMultiTexCoord4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord4iv"), typeof(glMultiTexCoord4ivFunc));
            glMultiTexCoord4sPtr = (glMultiTexCoord4sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord4s"), typeof(glMultiTexCoord4sFunc));
            glMultiTexCoord4svPtr = (glMultiTexCoord4svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord4sv"), typeof(glMultiTexCoord4svFunc));
            glLoadTransposeMatrixfPtr = (glLoadTransposeMatrixfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLoadTransposeMatrixf"), typeof(glLoadTransposeMatrixfFunc));
            glLoadTransposeMatrixdPtr = (glLoadTransposeMatrixdFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLoadTransposeMatrixd"), typeof(glLoadTransposeMatrixdFunc));
            glMultTransposeMatrixfPtr = (glMultTransposeMatrixfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultTransposeMatrixf"), typeof(glMultTransposeMatrixfFunc));
            glMultTransposeMatrixdPtr = (glMultTransposeMatrixdFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultTransposeMatrixd"), typeof(glMultTransposeMatrixdFunc));
            glBlendFuncSeparatePtr = (glBlendFuncSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendFuncSeparate"), typeof(glBlendFuncSeparateFunc));
            glMultiDrawArraysPtr = (glMultiDrawArraysFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiDrawArrays"), typeof(glMultiDrawArraysFunc));
            glMultiDrawElementsPtr = (glMultiDrawElementsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiDrawElements"), typeof(glMultiDrawElementsFunc));
            glPointParameterfPtr = (glPointParameterfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameterf"), typeof(glPointParameterfFunc));
            glPointParameterfvPtr = (glPointParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameterfv"), typeof(glPointParameterfvFunc));
            glPointParameteriPtr = (glPointParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameteri"), typeof(glPointParameteriFunc));
            glPointParameterivPtr = (glPointParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameteriv"), typeof(glPointParameterivFunc));
            glFogCoordfPtr = (glFogCoordfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogCoordf"), typeof(glFogCoordfFunc));
            glFogCoordfvPtr = (glFogCoordfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogCoordfv"), typeof(glFogCoordfvFunc));
            glFogCoorddPtr = (glFogCoorddFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogCoordd"), typeof(glFogCoorddFunc));
            glFogCoorddvPtr = (glFogCoorddvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogCoorddv"), typeof(glFogCoorddvFunc));
            glFogCoordPointerPtr = (glFogCoordPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogCoordPointer"), typeof(glFogCoordPointerFunc));
            glSecondaryColor3bPtr = (glSecondaryColor3bFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3b"), typeof(glSecondaryColor3bFunc));
            glSecondaryColor3bvPtr = (glSecondaryColor3bvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3bv"), typeof(glSecondaryColor3bvFunc));
            glSecondaryColor3dPtr = (glSecondaryColor3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3d"), typeof(glSecondaryColor3dFunc));
            glSecondaryColor3dvPtr = (glSecondaryColor3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3dv"), typeof(glSecondaryColor3dvFunc));
            glSecondaryColor3fPtr = (glSecondaryColor3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3f"), typeof(glSecondaryColor3fFunc));
            glSecondaryColor3fvPtr = (glSecondaryColor3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3fv"), typeof(glSecondaryColor3fvFunc));
            glSecondaryColor3iPtr = (glSecondaryColor3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3i"), typeof(glSecondaryColor3iFunc));
            glSecondaryColor3ivPtr = (glSecondaryColor3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3iv"), typeof(glSecondaryColor3ivFunc));
            glSecondaryColor3sPtr = (glSecondaryColor3sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3s"), typeof(glSecondaryColor3sFunc));
            glSecondaryColor3svPtr = (glSecondaryColor3svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3sv"), typeof(glSecondaryColor3svFunc));
            glSecondaryColor3ubPtr = (glSecondaryColor3ubFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3ub"), typeof(glSecondaryColor3ubFunc));
            glSecondaryColor3ubvPtr = (glSecondaryColor3ubvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3ubv"), typeof(glSecondaryColor3ubvFunc));
            glSecondaryColor3uiPtr = (glSecondaryColor3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3ui"), typeof(glSecondaryColor3uiFunc));
            glSecondaryColor3uivPtr = (glSecondaryColor3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3uiv"), typeof(glSecondaryColor3uivFunc));
            glSecondaryColor3usPtr = (glSecondaryColor3usFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3us"), typeof(glSecondaryColor3usFunc));
            glSecondaryColor3usvPtr = (glSecondaryColor3usvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3usv"), typeof(glSecondaryColor3usvFunc));
            glSecondaryColorPointerPtr = (glSecondaryColorPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColorPointer"), typeof(glSecondaryColorPointerFunc));
            glWindowPos2dPtr = (glWindowPos2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos2d"), typeof(glWindowPos2dFunc));
            glWindowPos2dvPtr = (glWindowPos2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos2dv"), typeof(glWindowPos2dvFunc));
            glWindowPos2fPtr = (glWindowPos2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos2f"), typeof(glWindowPos2fFunc));
            glWindowPos2fvPtr = (glWindowPos2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos2fv"), typeof(glWindowPos2fvFunc));
            glWindowPos2iPtr = (glWindowPos2iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos2i"), typeof(glWindowPos2iFunc));
            glWindowPos2ivPtr = (glWindowPos2ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos2iv"), typeof(glWindowPos2ivFunc));
            glWindowPos2sPtr = (glWindowPos2sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos2s"), typeof(glWindowPos2sFunc));
            glWindowPos2svPtr = (glWindowPos2svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos2sv"), typeof(glWindowPos2svFunc));
            glWindowPos3dPtr = (glWindowPos3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos3d"), typeof(glWindowPos3dFunc));
            glWindowPos3dvPtr = (glWindowPos3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos3dv"), typeof(glWindowPos3dvFunc));
            glWindowPos3fPtr = (glWindowPos3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos3f"), typeof(glWindowPos3fFunc));
            glWindowPos3fvPtr = (glWindowPos3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos3fv"), typeof(glWindowPos3fvFunc));
            glWindowPos3iPtr = (glWindowPos3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos3i"), typeof(glWindowPos3iFunc));
            glWindowPos3ivPtr = (glWindowPos3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos3iv"), typeof(glWindowPos3ivFunc));
            glWindowPos3sPtr = (glWindowPos3sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos3s"), typeof(glWindowPos3sFunc));
            glWindowPos3svPtr = (glWindowPos3svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos3sv"), typeof(glWindowPos3svFunc));
            glBlendColorPtr = (glBlendColorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendColor"), typeof(glBlendColorFunc));
            glBlendEquationPtr = (glBlendEquationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendEquation"), typeof(glBlendEquationFunc));
            glGenQueriesPtr = (glGenQueriesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenQueries"), typeof(glGenQueriesFunc));
            glDeleteQueriesPtr = (glDeleteQueriesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteQueries"), typeof(glDeleteQueriesFunc));
            glIsQueryPtr = (glIsQueryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsQuery"), typeof(glIsQueryFunc));
            glBeginQueryPtr = (glBeginQueryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBeginQuery"), typeof(glBeginQueryFunc));
            glEndQueryPtr = (glEndQueryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEndQuery"), typeof(glEndQueryFunc));
            glGetQueryivPtr = (glGetQueryivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetQueryiv"), typeof(glGetQueryivFunc));
            glGetQueryObjectivPtr = (glGetQueryObjectivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetQueryObjectiv"), typeof(glGetQueryObjectivFunc));
            glGetQueryObjectuivPtr = (glGetQueryObjectuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetQueryObjectuiv"), typeof(glGetQueryObjectuivFunc));
            glBindBufferPtr = (glBindBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindBuffer"), typeof(glBindBufferFunc));
            glDeleteBuffersPtr = (glDeleteBuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteBuffers"), typeof(glDeleteBuffersFunc));
            glGenBuffersPtr = (glGenBuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenBuffers"), typeof(glGenBuffersFunc));
            glIsBufferPtr = (glIsBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsBuffer"), typeof(glIsBufferFunc));
            glBufferDataPtr = (glBufferDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBufferData"), typeof(glBufferDataFunc));
            glBufferSubDataPtr = (glBufferSubDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBufferSubData"), typeof(glBufferSubDataFunc));
            glGetBufferSubDataPtr = (glGetBufferSubDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBufferSubData"), typeof(glGetBufferSubDataFunc));
            glMapBufferPtr = (glMapBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMapBuffer"), typeof(glMapBufferFunc));
            glUnmapBufferPtr = (glUnmapBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUnmapBuffer"), typeof(glUnmapBufferFunc));
            glGetBufferParameterivPtr = (glGetBufferParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBufferParameteriv"), typeof(glGetBufferParameterivFunc));
            glGetBufferPointervPtr = (glGetBufferPointervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBufferPointerv"), typeof(glGetBufferPointervFunc));
        }

        public static void LoadFunction(string name)
        {
            var memberInfo = typeof(GL15).GetField(name + "Ptr", BindingFlags.NonPublic | BindingFlags.Static);
            memberInfo.SetValue(null, Marshal.GetDelegateForFunctionPointer(GetProcAddress(name), memberInfo.FieldType));
        }
        #endregion
    }
}
