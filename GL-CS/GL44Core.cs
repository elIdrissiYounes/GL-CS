// This file was autogenerated by GLCSGen on 11/4/2013 7:43:37 AM
// Original copyright from gl.xml:
// 
// Copyright (c) 2013 The Khronos Group Inc.
// 
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
// 
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
// 
// ------------------------------------------------------------------------
// 
// This file, gl.xml, is the OpenGL and OpenGL API Registry. The older
// ".spec" file format has been retired and will no longer be updated with
// new extensions and API versions. The canonical version of the registry,
// together with documentation, schema, and Python generator scripts used
// to generate C header files for OpenGL and OpenGL ES, can always be found
// in the Khronos Registry at
//         http://www.opengl.org/registry/
//     

using System;
using System.Reflection;
using System.Runtime.InteropServices;

namespace OpenGL
{
    public static class GL44Core
    {
        #region Enums
        public static uint GL_BACK = 0x0405;
        public static uint GL_FRONT = 0x0404;
        public static uint GL_FRONT_AND_BACK = 0x0408;
        public static uint GL_CCW = 0x0901;
        public static uint GL_CW = 0x0900;
        public static uint GL_ALLOW_DRAW_FRG_HINT_PGI = 0x1A210;
        public static uint GL_ALLOW_DRAW_MEM_HINT_PGI = 0x1A211;
        public static uint GL_ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E;
        public static uint GL_ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F;
        public static uint GL_ALWAYS_FAST_HINT_PGI = 0x1A20C;
        public static uint GL_ALWAYS_SOFT_HINT_PGI = 0x1A20D;
        public static uint GL_BACK_NORMALS_HINT_PGI = 0x1A223;
        public static uint GL_BINNING_CONTROL_HINT_QCOM = 0x8FB0;
        public static uint GL_CLIP_FAR_HINT_PGI = 0x1A221;
        public static uint GL_CLIP_NEAR_HINT_PGI = 0x1A220;
        public static uint GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0;
        public static uint GL_CONSERVE_MEMORY_HINT_PGI = 0x1A1FD;
        public static uint GL_CONVOLUTION_HINT_SGIX = 0x8316;
        public static uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
        public static uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B;
        public static uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES = 0x8B8B;
        public static uint GL_FULL_STIPPLE_HINT_PGI = 0x1A219;
        public static uint GL_GENERATE_MIPMAP_HINT_SGIS = 0x8192;
        public static uint GL_LINE_QUALITY_HINT_SGIX = 0x835B;
        public static uint GL_LINE_SMOOTH_HINT = 0x0C52;
        public static uint GL_MATERIAL_SIDE_HINT_PGI = 0x1A22C;
        public static uint GL_MAX_VERTEX_HINT_PGI = 0x1A22D;
        public static uint GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534;
        public static uint GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203;
        public static uint GL_NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204;
        public static uint GL_PACK_CMYK_HINT_EXT = 0x800E;
        public static uint GL_PHONG_HINT_WIN = 0x80EB;
        public static uint GL_POLYGON_SMOOTH_HINT = 0x0C53;
        public static uint GL_PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8;
        public static uint GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
        public static uint GL_RECLAIM_MEMORY_HINT_PGI = 0x1A1FE;
        public static uint GL_SCALEBIAS_HINT_SGIX = 0x8322;
        public static uint GL_STRICT_DEPTHFUNC_HINT_PGI = 0x1A216;
        public static uint GL_STRICT_LIGHTING_HINT_PGI = 0x1A217;
        public static uint GL_STRICT_SCISSOR_HINT_PGI = 0x1A218;
        public static uint GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
        public static uint GL_TEXTURE_COMPRESSION_HINT_ARB = 0x84EF;
        public static uint GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E;
        public static uint GL_TEXTURE_STORAGE_HINT_APPLE = 0x85BC;
        public static uint GL_TRANSFORM_HINT_APPLE = 0x85B1;
        public static uint GL_UNPACK_CMYK_HINT_EXT = 0x800F;
        public static uint GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F;
        public static uint GL_VERTEX_CONSISTENT_HINT_PGI = 0x1A22B;
        public static uint GL_VERTEX_DATA_HINT_PGI = 0x1A22A;
        public static uint GL_VERTEX_PRECLIP_HINT_SGIX = 0x83EF;
        public static uint GL_VERTEX_PRECLIP_SGIX = 0x83EE;
        public static uint GL_WIDE_LINE_HINT_PGI = 0x1A222;
        public static uint GL_DONT_CARE = 0x1100;
        public static uint GL_FASTEST = 0x1101;
        public static uint GL_NICEST = 0x1102;
        public static uint GL_FILL = 0x1B02;
        public static uint GL_LINE = 0x1B01;
        public static uint GL_POINT = 0x1B00;
        public static uint GL_DETAIL_TEXTURE_2D_SGIS = 0x8095;
        public static uint GL_PROXY_TEXTURE_1D = 0x8063;
        public static uint GL_PROXY_TEXTURE_1D_EXT = 0x8063;
        public static uint GL_PROXY_TEXTURE_2D = 0x8064;
        public static uint GL_PROXY_TEXTURE_2D_EXT = 0x8064;
        public static uint GL_PROXY_TEXTURE_3D = 0x8070;
        public static uint GL_PROXY_TEXTURE_3D_EXT = 0x8070;
        public static uint GL_PROXY_TEXTURE_4D_SGIS = 0x8135;
        public static uint GL_TEXTURE_1D = 0x0DE0;
        public static uint GL_TEXTURE_2D = 0x0DE1;
        public static uint GL_TEXTURE_3D = 0x806F;
        public static uint GL_TEXTURE_3D_EXT = 0x806F;
        public static uint GL_TEXTURE_3D_OES = 0x806F;
        public static uint GL_TEXTURE_4D_SGIS = 0x8134;
        public static uint GL_TEXTURE_BASE_LEVEL = 0x813C;
        public static uint GL_TEXTURE_BASE_LEVEL_SGIS = 0x813C;
        public static uint GL_TEXTURE_MAX_LEVEL = 0x813D;
        public static uint GL_TEXTURE_MAX_LEVEL_SGIS = 0x813D;
        public static uint GL_TEXTURE_MAX_LOD = 0x813B;
        public static uint GL_TEXTURE_MAX_LOD_SGIS = 0x813B;
        public static uint GL_TEXTURE_MIN_LOD = 0x813A;
        public static uint GL_TEXTURE_MIN_LOD_SGIS = 0x813A;
        public static uint GL_DETAIL_TEXTURE_LEVEL_SGIS = 0x809A;
        public static uint GL_DETAIL_TEXTURE_MODE_SGIS = 0x809B;
        public static uint GL_DUAL_TEXTURE_SELECT_SGIS = 0x8124;
        public static uint GL_GENERATE_MIPMAP_SGIS = 0x8191;
        public static uint GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179;
        public static uint GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A;
        public static uint GL_QUAD_TEXTURE_SELECT_SGIS = 0x8125;
        public static uint GL_SHADOW_AMBIENT_SGIX = 0x80BF;
        public static uint GL_TEXTURE_BORDER_COLOR = 0x1004;
        public static uint GL_TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171;
        public static uint GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176;
        public static uint GL_TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172;
        public static uint GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175;
        public static uint GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173;
        public static uint GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174;
        public static uint GL_TEXTURE_COMPARE_SGIX = 0x819A;
        public static uint GL_TEXTURE_LOD_BIAS_R_SGIX = 0x8190;
        public static uint GL_TEXTURE_LOD_BIAS_S_SGIX = 0x818E;
        public static uint GL_TEXTURE_LOD_BIAS_T_SGIX = 0x818F;
        public static uint GL_TEXTURE_MAG_FILTER = 0x2800;
        public static uint GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x836B;
        public static uint GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x8369;
        public static uint GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x836A;
        public static uint GL_TEXTURE_MIN_FILTER = 0x2801;
        public static uint GL_TEXTURE_PRIORITY_EXT = 0x8066;
        public static uint GL_TEXTURE_WRAP_Q_SGIS = 0x8137;
        public static uint GL_TEXTURE_WRAP_R = 0x8072;
        public static uint GL_TEXTURE_WRAP_R_EXT = 0x8072;
        public static uint GL_TEXTURE_WRAP_R_OES = 0x8072;
        public static uint GL_TEXTURE_WRAP_S = 0x2802;
        public static uint GL_TEXTURE_WRAP_T = 0x2803;
        public static uint GL_ABGR_EXT = 0x8000;
        public static uint GL_ALPHA = 0x1906;
        public static uint GL_BLUE = 0x1905;
        public static uint GL_CMYKA_EXT = 0x800D;
        public static uint GL_CMYK_EXT = 0x800C;
        public static uint GL_DEPTH_COMPONENT = 0x1902;
        public static uint GL_GREEN = 0x1904;
        public static uint GL_RED = 0x1903;
        public static uint GL_RED_EXT = 0x1903;
        public static uint GL_RGB = 0x1907;
        public static uint GL_RGBA = 0x1908;
        public static uint GL_STENCIL_INDEX = 0x1901;
        public static uint GL_UNSIGNED_INT = 0x1405;
        public static uint GL_UNSIGNED_SHORT = 0x1403;
        public static uint GL_YCRCB_422_SGIX = 0x81BB;
        public static uint GL_YCRCB_444_SGIX = 0x81BC;
        public static uint GL_BYTE = 0x1400;
        public static uint GL_FLOAT = 0x1406;
        public static uint GL_INT = 0x1404;
        public static uint GL_SHORT = 0x1402;
        public static uint GL_UNSIGNED_BYTE = 0x1401;
        public static uint GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
        public static uint GL_UNSIGNED_BYTE_3_3_2_EXT = 0x8032;
        public static uint GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
        public static uint GL_UNSIGNED_INT_10_10_10_2_EXT = 0x8036;
        public static uint GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
        public static uint GL_UNSIGNED_INT_8_8_8_8_EXT = 0x8035;
        public static uint GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
        public static uint GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033;
        public static uint GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
        public static uint GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034;
        public static uint GL_BACK_LEFT = 0x0402;
        public static uint GL_BACK_RIGHT = 0x0403;
        public static uint GL_FRONT_LEFT = 0x0400;
        public static uint GL_FRONT_RIGHT = 0x0401;
        public static uint GL_LEFT = 0x0406;
        public static uint GL_NONE = 0;
        public static uint GL_NONE_OES = 0;
        public static uint GL_RIGHT = 0x0407;
        public static uint GL_COLOR_BUFFER_BIT = 0x00004000;
        public static uint GL_COVERAGE_BUFFER_BIT_NV = 0x00008000;
        public static uint GL_DEPTH_BUFFER_BIT = 0x00000100;
        public static uint GL_STENCIL_BUFFER_BIT = 0x00000400;
        public static uint GL_FALSE = 0;
        public static uint GL_TRUE = 1;
        public static uint GL_ASYNC_DRAW_PIXELS_SGIX = 0x835D;
        public static uint GL_ASYNC_HISTOGRAM_SGIX = 0x832C;
        public static uint GL_ASYNC_READ_PIXELS_SGIX = 0x835E;
        public static uint GL_ASYNC_TEX_IMAGE_SGIX = 0x835C;
        public static uint GL_BLEND = 0x0BE2;
        public static uint GL_CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183;
        public static uint GL_COLOR_LOGIC_OP = 0x0BF2;
        public static uint GL_COLOR_TABLE_SGI = 0x80D0;
        public static uint GL_CONVOLUTION_1D_EXT = 0x8010;
        public static uint GL_CONVOLUTION_2D_EXT = 0x8011;
        public static uint GL_CULL_FACE = 0x0B44;
        public static uint GL_DEPTH_TEST = 0x0B71;
        public static uint GL_DITHER = 0x0BD0;
        public static uint GL_FOG_OFFSET_SGIX = 0x8198;
        public static uint GL_FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401;
        public static uint GL_FRAGMENT_LIGHT0_SGIX = 0x840C;
        public static uint GL_FRAGMENT_LIGHT1_SGIX = 0x840D;
        public static uint GL_FRAGMENT_LIGHT2_SGIX = 0x840E;
        public static uint GL_FRAGMENT_LIGHT3_SGIX = 0x840F;
        public static uint GL_FRAGMENT_LIGHT4_SGIX = 0x8410;
        public static uint GL_FRAGMENT_LIGHT5_SGIX = 0x8411;
        public static uint GL_FRAGMENT_LIGHT6_SGIX = 0x8412;
        public static uint GL_FRAGMENT_LIGHT7_SGIX = 0x8413;
        public static uint GL_FRAGMENT_LIGHTING_SGIX = 0x8400;
        public static uint GL_FRAMEZOOM_SGIX = 0x818B;
        public static uint GL_HISTOGRAM_EXT = 0x8024;
        public static uint GL_INTERLACE_SGIX = 0x8094;
        public static uint GL_IR_INSTRUMENT1_SGIX = 0x817F;
        public static uint GL_LINE_SMOOTH = 0x0B20;
        public static uint GL_MINMAX_EXT = 0x802E;
        public static uint GL_MULTISAMPLE_SGIS = 0x809D;
        public static uint GL_PIXEL_TEXTURE_SGIS = 0x8353;
        public static uint GL_PIXEL_TEX_GEN_SGIX = 0x8139;
        public static uint GL_POLYGON_OFFSET_FILL = 0x8037;
        public static uint GL_POLYGON_OFFSET_LINE = 0x2A02;
        public static uint GL_POLYGON_OFFSET_POINT = 0x2A01;
        public static uint GL_POLYGON_SMOOTH = 0x0B41;
        public static uint GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2;
        public static uint GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1;
        public static uint GL_REFERENCE_PLANE_SGIX = 0x817D;
        public static uint GL_RESCALE_NORMAL_EXT = 0x803A;
        public static uint GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E;
        public static uint GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F;
        public static uint GL_SAMPLE_MASK_SGIS = 0x80A0;
        public static uint GL_SCISSOR_TEST = 0x0C11;
        public static uint GL_SEPARABLE_2D_EXT = 0x8012;
        public static uint GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB;
        public static uint GL_SPRITE_SGIX = 0x8148;
        public static uint GL_STENCIL_TEST = 0x0B90;
        public static uint GL_TEXTURE_COLOR_TABLE_SGI = 0x80BC;
        public static uint GL_CONSTANT_ALPHA_EXT = 0x8003;
        public static uint GL_CONSTANT_COLOR_EXT = 0x8001;
        public static uint GL_DST_ALPHA = 0x0304;
        public static uint GL_DST_COLOR = 0x0306;
        public static uint GL_ONE = 1;
        public static uint GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004;
        public static uint GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002;
        public static uint GL_ONE_MINUS_DST_ALPHA = 0x0305;
        public static uint GL_ONE_MINUS_DST_COLOR = 0x0307;
        public static uint GL_ONE_MINUS_SRC_ALPHA = 0x0303;
        public static uint GL_SRC_ALPHA = 0x0302;
        public static uint GL_SRC_ALPHA_SATURATE = 0x0308;
        public static uint GL_ZERO = 0;
        public static uint GL_ONE_MINUS_SRC_COLOR = 0x0301;
        public static uint GL_SRC_COLOR = 0x0300;
        public static uint GL_AND = 0x1501;
        public static uint GL_AND_INVERTED = 0x1504;
        public static uint GL_AND_REVERSE = 0x1502;
        public static uint GL_CLEAR = 0x1500;
        public static uint GL_COPY = 0x1503;
        public static uint GL_COPY_INVERTED = 0x150C;
        public static uint GL_EQUIV = 0x1509;
        public static uint GL_INVERT = 0x150A;
        public static uint GL_NAND = 0x150E;
        public static uint GL_NOOP = 0x1505;
        public static uint GL_NOR = 0x1508;
        public static uint GL_OR = 0x1507;
        public static uint GL_OR_INVERTED = 0x150D;
        public static uint GL_OR_REVERSE = 0x150B;
        public static uint GL_SET = 0x150F;
        public static uint GL_XOR = 0x1506;
        public static uint GL_ALWAYS = 0x0207;
        public static uint GL_EQUAL = 0x0202;
        public static uint GL_GEQUAL = 0x0206;
        public static uint GL_GREATER = 0x0204;
        public static uint GL_LEQUAL = 0x0203;
        public static uint GL_LESS = 0x0201;
        public static uint GL_NEVER = 0x0200;
        public static uint GL_NOTEQUAL = 0x0205;
        public static uint GL_DECR = 0x1E03;
        public static uint GL_INCR = 0x1E02;
        public static uint GL_KEEP = 0x1E00;
        public static uint GL_REPLACE = 0x1E01;
        public static uint GL_PACK_ALIGNMENT = 0x0D05;
        public static uint GL_PACK_IMAGE_DEPTH_SGIS = 0x8131;
        public static uint GL_PACK_IMAGE_HEIGHT = 0x806C;
        public static uint GL_PACK_IMAGE_HEIGHT_EXT = 0x806C;
        public static uint GL_PACK_LSB_FIRST = 0x0D01;
        public static uint GL_PACK_RESAMPLE_OML = 0x8984;
        public static uint GL_PACK_RESAMPLE_SGIX = 0x842C;
        public static uint GL_PACK_ROW_LENGTH = 0x0D02;
        public static uint GL_PACK_SKIP_IMAGES = 0x806B;
        public static uint GL_PACK_SKIP_IMAGES_EXT = 0x806B;
        public static uint GL_PACK_SKIP_PIXELS = 0x0D04;
        public static uint GL_PACK_SKIP_ROWS = 0x0D03;
        public static uint GL_PACK_SKIP_VOLUMES_SGIS = 0x8130;
        public static uint GL_PACK_SUBSAMPLE_RATE_SGIX = 0x85A0;
        public static uint GL_PACK_SWAP_BYTES = 0x0D00;
        public static uint GL_PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145;
        public static uint GL_PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144;
        public static uint GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143;
        public static uint GL_PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142;
        public static uint GL_PIXEL_TILE_HEIGHT_SGIX = 0x8141;
        public static uint GL_PIXEL_TILE_WIDTH_SGIX = 0x8140;
        public static uint GL_UNPACK_ALIGNMENT = 0x0CF5;
        public static uint GL_UNPACK_IMAGE_DEPTH_SGIS = 0x8133;
        public static uint GL_UNPACK_IMAGE_HEIGHT = 0x806E;
        public static uint GL_UNPACK_IMAGE_HEIGHT_EXT = 0x806E;
        public static uint GL_UNPACK_LSB_FIRST = 0x0CF1;
        public static uint GL_UNPACK_RESAMPLE_OML = 0x8985;
        public static uint GL_UNPACK_RESAMPLE_SGIX = 0x842D;
        public static uint GL_UNPACK_ROW_LENGTH = 0x0CF2;
        public static uint GL_UNPACK_ROW_LENGTH_EXT = 0x0CF2;
        public static uint GL_UNPACK_SKIP_IMAGES = 0x806D;
        public static uint GL_UNPACK_SKIP_IMAGES_EXT = 0x806D;
        public static uint GL_UNPACK_SKIP_PIXELS = 0x0CF4;
        public static uint GL_UNPACK_SKIP_PIXELS_EXT = 0x0CF4;
        public static uint GL_UNPACK_SKIP_ROWS = 0x0CF3;
        public static uint GL_UNPACK_SKIP_ROWS_EXT = 0x0CF3;
        public static uint GL_UNPACK_SKIP_VOLUMES_SGIS = 0x8132;
        public static uint GL_UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1;
        public static uint GL_UNPACK_SWAP_BYTES = 0x0CF0;
        public static uint GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
        public static uint GL_ALPHA_TEST_FUNC_QCOM = 0x0BC1;
        public static uint GL_ALPHA_TEST_QCOM = 0x0BC0;
        public static uint GL_ALPHA_TEST_REF_QCOM = 0x0BC2;
        public static uint GL_ASYNC_MARKER_SGIX = 0x8329;
        public static uint GL_BLEND_COLOR_EXT = 0x8005;
        public static uint GL_BLEND_DST = 0x0BE0;
        public static uint GL_BLEND_EQUATION_EXT = 0x8009;
        public static uint GL_BLEND_SRC = 0x0BE1;
        public static uint GL_COLOR_ARRAY_COUNT_EXT = 0x8084;
        public static uint GL_COLOR_CLEAR_VALUE = 0x0C22;
        public static uint GL_COLOR_MATRIX_SGI = 0x80B1;
        public static uint GL_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2;
        public static uint GL_COLOR_WRITEMASK = 0x0C23;
        public static uint GL_CULL_FACE_MODE = 0x0B45;
        public static uint GL_DEFORMATIONS_MASK_SGIX = 0x8196;
        public static uint GL_DEPTH_CLEAR_VALUE = 0x0B73;
        public static uint GL_DEPTH_FUNC = 0x0B74;
        public static uint GL_DEPTH_RANGE = 0x0B70;
        public static uint GL_DEPTH_WRITEMASK = 0x0B72;
        public static uint GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096;
        public static uint GL_DISTANCE_ATTENUATION_SGIS = 0x8129;
        public static uint GL_DOUBLEBUFFER = 0x0C32;
        public static uint GL_DRAW_BUFFER = 0x0C01;
        public static uint GL_DRAW_BUFFER_EXT = 0x0C01;
        public static uint GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D;
        public static uint GL_FOG_FUNC_POINTS_SGIS = 0x812B;
        public static uint GL_FOG_OFFSET_VALUE_SGIX = 0x8199;
        public static uint GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402;
        public static uint GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403;
        public static uint GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A;
        public static uint GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408;
        public static uint GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B;
        public static uint GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409;
        public static uint GL_FRAMEZOOM_FACTOR_SGIX = 0x818C;
        public static uint GL_FRONT_FACE = 0x0B46;
        public static uint GL_INDEX_ARRAY_COUNT_EXT = 0x8087;
        public static uint GL_INSTRUMENT_MEASUREMENTS_SGIX = 0x8181;
        public static uint GL_LIGHT_ENV_MODE_SGIX = 0x8407;
        public static uint GL_LINE_WIDTH = 0x0B21;
        public static uint GL_LINE_WIDTH_GRANULARITY = 0x0B23;
        public static uint GL_LINE_WIDTH_RANGE = 0x0B22;
        public static uint GL_LOGIC_OP_MODE = 0x0BF0;
        public static uint GL_MAX_3D_TEXTURE_SIZE_EXT = 0x8073;
        public static uint GL_MAX_4D_TEXTURE_SIZE_SGIS = 0x8138;
        public static uint GL_MAX_ACTIVE_LIGHTS_SGIX = 0x8405;
        public static uint GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360;
        public static uint GL_MAX_ASYNC_HISTOGRAM_SGIX = 0x832D;
        public static uint GL_MAX_ASYNC_READ_PIXELS_SGIX = 0x8361;
        public static uint GL_MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F;
        public static uint GL_MAX_CLIPMAP_DEPTH_SGIX = 0x8177;
        public static uint GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178;
        public static uint GL_MAX_CLIP_DISTANCES = 0x0D32;
        public static uint GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3;
        public static uint GL_MAX_FOG_FUNC_POINTS_SGIS = 0x812C;
        public static uint GL_MAX_FRAGMENT_LIGHTS_SGIX = 0x8404;
        public static uint GL_MAX_FRAMEZOOM_FACTOR_SGIX = 0x818D;
        public static uint GL_MAX_TEXTURE_SIZE = 0x0D33;
        public static uint GL_MAX_VIEWPORT_DIMS = 0x0D3A;
        public static uint GL_MODELVIEW0_MATRIX_EXT = 0x0BA6;
        public static uint GL_MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3;
        public static uint GL_NORMAL_ARRAY_COUNT_EXT = 0x8080;
        public static uint GL_PIXEL_TEX_GEN_MODE_SGIX = 0x832B;
        public static uint GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E;
        public static uint GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F;
        public static uint GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128;
        public static uint GL_POINT_SIZE = 0x0B11;
        public static uint GL_POINT_SIZE_GRANULARITY = 0x0B13;
        public static uint GL_POINT_SIZE_MAX_SGIS = 0x8127;
        public static uint GL_POINT_SIZE_MIN_SGIS = 0x8126;
        public static uint GL_POINT_SIZE_RANGE = 0x0B12;
        public static uint GL_POLYGON_MODE = 0x0B40;
        public static uint GL_POLYGON_OFFSET_BIAS_EXT = 0x8039;
        public static uint GL_POLYGON_OFFSET_FACTOR = 0x8038;
        public static uint GL_POLYGON_OFFSET_UNITS = 0x2A00;
        public static uint GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB;
        public static uint GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7;
        public static uint GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA;
        public static uint GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6;
        public static uint GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9;
        public static uint GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5;
        public static uint GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8;
        public static uint GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4;
        public static uint GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023;
        public static uint GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F;
        public static uint GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022;
        public static uint GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E;
        public static uint GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021;
        public static uint GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D;
        public static uint GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x8020;
        public static uint GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x801C;
        public static uint GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B;
        public static uint GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C;
        public static uint GL_READ_BUFFER = 0x0C02;
        public static uint GL_READ_BUFFER_EXT = 0x0C02;
        public static uint GL_READ_BUFFER_NV = 0x0C02;
        public static uint GL_REFERENCE_PLANE_EQUATION_SGIX = 0x817E;
        public static uint GL_SAMPLES_SGIS = 0x80A9;
        public static uint GL_SAMPLE_BUFFERS_SGIS = 0x80A8;
        public static uint GL_SAMPLE_MASK_INVERT_SGIS = 0x80AB;
        public static uint GL_SAMPLE_MASK_VALUE_SGIS = 0x80AA;
        public static uint GL_SAMPLE_PATTERN_SGIS = 0x80AC;
        public static uint GL_SCISSOR_BOX = 0x0C10;
        public static uint GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
        public static uint GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
        public static uint GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
        public static uint GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
        public static uint GL_SPRITE_AXIS_SGIX = 0x814A;
        public static uint GL_SPRITE_MODE_SGIX = 0x8149;
        public static uint GL_SPRITE_TRANSLATION_SGIX = 0x814B;
        public static uint GL_STENCIL_CLEAR_VALUE = 0x0B91;
        public static uint GL_STENCIL_FAIL = 0x0B94;
        public static uint GL_STENCIL_FUNC = 0x0B92;
        public static uint GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
        public static uint GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
        public static uint GL_STENCIL_REF = 0x0B97;
        public static uint GL_STENCIL_VALUE_MASK = 0x0B93;
        public static uint GL_STENCIL_WRITEMASK = 0x0B98;
        public static uint GL_STEREO = 0x0C33;
        public static uint GL_SUBPIXEL_BITS = 0x0D50;
        public static uint GL_TEXTURE_3D_BINDING_EXT = 0x806A;
        public static uint GL_TEXTURE_4D_BINDING_SGIS = 0x814F;
        public static uint GL_TEXTURE_BINDING_1D = 0x8068;
        public static uint GL_TEXTURE_BINDING_2D = 0x8069;
        public static uint GL_TEXTURE_BINDING_3D = 0x806A;
        public static uint GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B;
        public static uint GL_VERTEX_ARRAY_COUNT_EXT = 0x807D;
        public static uint GL_VIEWPORT = 0x0BA2;
        public static uint GL_EXTENSIONS = 0x1F03;
        public static uint GL_RENDERER = 0x1F01;
        public static uint GL_VENDOR = 0x1F00;
        public static uint GL_VERSION = 0x1F02;
        public static uint GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C;
        public static uint GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0;
        public static uint GL_TEXTURE_4DSIZE_SGIS = 0x8136;
        public static uint GL_TEXTURE_ALPHA_SIZE = 0x805F;
        public static uint GL_TEXTURE_BLUE_SIZE = 0x805E;
        public static uint GL_TEXTURE_BORDER_COLOR_NV = 0x1004;
        public static uint GL_TEXTURE_COMPARE_OPERATOR_SGIX = 0x819B;
        public static uint GL_TEXTURE_DEPTH_EXT = 0x8071;
        public static uint GL_TEXTURE_FILTER4_SIZE_SGIS = 0x8147;
        public static uint GL_TEXTURE_GEQUAL_R_SGIX = 0x819D;
        public static uint GL_TEXTURE_GREEN_SIZE = 0x805D;
        public static uint GL_TEXTURE_HEIGHT = 0x1001;
        public static uint GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
        public static uint GL_TEXTURE_LEQUAL_R_SGIX = 0x819C;
        public static uint GL_TEXTURE_RED_SIZE = 0x805C;
        public static uint GL_TEXTURE_WIDTH = 0x1000;
        public static uint GL_LINES = 0x0001;
        public static uint GL_LINES_ADJACENCY = 0x000A;
        public static uint GL_LINES_ADJACENCY_ARB = 0x000A;
        public static uint GL_LINES_ADJACENCY_EXT = 0x000A;
        public static uint GL_LINE_LOOP = 0x0002;
        public static uint GL_LINE_STRIP = 0x0003;
        public static uint GL_LINE_STRIP_ADJACENCY = 0x000B;
        public static uint GL_LINE_STRIP_ADJACENCY_ARB = 0x000B;
        public static uint GL_LINE_STRIP_ADJACENCY_EXT = 0x000B;
        public static uint GL_PATCHES = 0x000E;
        public static uint GL_POINTS = 0x0000;
        public static uint GL_TRIANGLES = 0x0004;
        public static uint GL_TRIANGLES_ADJACENCY = 0x000C;
        public static uint GL_TRIANGLES_ADJACENCY_ARB = 0x000C;
        public static uint GL_TRIANGLES_ADJACENCY_EXT = 0x000C;
        public static uint GL_TRIANGLE_FAN = 0x0006;
        public static uint GL_TRIANGLE_STRIP = 0x0005;
        public static uint GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
        public static uint GL_TRIANGLE_STRIP_ADJACENCY_ARB = 0x000D;
        public static uint GL_TRIANGLE_STRIP_ADJACENCY_EXT = 0x000D;
        public static uint GL_CLIP_DISTANCE0 = 0x3000;
        public static uint GL_CLIP_DISTANCE1 = 0x3001;
        public static uint GL_CLIP_DISTANCE2 = 0x3002;
        public static uint GL_CLIP_DISTANCE3 = 0x3003;
        public static uint GL_CLIP_DISTANCE4 = 0x3004;
        public static uint GL_CLIP_DISTANCE5 = 0x3005;
        public static uint GL_CLIP_DISTANCE6 = 0x3006;
        public static uint GL_CLIP_DISTANCE7 = 0x3007;
        public static uint GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8;
        public static uint GL_EYE_LINE_SGIS = 0x81F6;
        public static uint GL_EYE_POINT_SGIS = 0x81F4;
        public static uint GL_OBJECT_LINE_SGIS = 0x81F7;
        public static uint GL_OBJECT_POINT_SGIS = 0x81F5;
        public static uint GL_MULTISAMPLE_BIT_3DFX = 0x20000000;
        public static uint GL_MULTISAMPLE_BIT_ARB = 0x20000000;
        public static uint GL_MULTISAMPLE_BIT_EXT = 0x20000000;
        public static uint GL_GEOMETRY_DEFORMATION_SGIX = 0x8194;
        public static uint GL_TEXTURE_DEFORMATION_SGIX = 0x8195;
        public static uint GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB;
        public static uint GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7;
        public static uint GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA;
        public static uint GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6;
        public static uint GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9;
        public static uint GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5;
        public static uint GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8;
        public static uint GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4;
        public static uint GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023;
        public static uint GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F;
        public static uint GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022;
        public static uint GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E;
        public static uint GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021;
        public static uint GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D;
        public static uint GL_POST_CONVOLUTION_RED_BIAS = 0x8020;
        public static uint GL_POST_CONVOLUTION_RED_SCALE = 0x801C;
        public static uint GL_COLOR = 0x1800;
        public static uint GL_COLOR_EXT = 0x1800;
        public static uint GL_DEPTH = 0x1801;
        public static uint GL_DEPTH_EXT = 0x1801;
        public static uint GL_STENCIL = 0x1802;
        public static uint GL_STENCIL_EXT = 0x1802;
        public static uint GL_MODELVIEW0_EXT = 0x1700;
        public static uint GL_TEXTURE = 0x1702;
        public static uint GL_NO_ERROR = 0;
        public static uint GL_INVALID_ENUM = 0x0500;
        public static uint GL_INVALID_VALUE = 0x0501;
        public static uint GL_INVALID_OPERATION = 0x0502;
        public static uint GL_OUT_OF_MEMORY = 0x0505;
        public static uint GL_DOUBLE = 0x140A;
        public static uint GL_NEAREST = 0x2600;
        public static uint GL_LINEAR = 0x2601;
        public static uint GL_NEAREST_MIPMAP_NEAREST = 0x2700;
        public static uint GL_LINEAR_MIPMAP_NEAREST = 0x2701;
        public static uint GL_NEAREST_MIPMAP_LINEAR = 0x2702;
        public static uint GL_LINEAR_MIPMAP_LINEAR = 0x2703;
        public static uint GL_REPEAT = 0x2901;
        public static uint GL_R3_G3_B2 = 0x2A10;
        public static uint GL_RGB4 = 0x804F;
        public static uint GL_RGB5 = 0x8050;
        public static uint GL_RGB8 = 0x8051;
        public static uint GL_RGB10 = 0x8052;
        public static uint GL_RGB12 = 0x8053;
        public static uint GL_RGB16 = 0x8054;
        public static uint GL_RGBA2 = 0x8055;
        public static uint GL_RGBA4 = 0x8056;
        public static uint GL_RGB5_A1 = 0x8057;
        public static uint GL_RGBA8 = 0x8058;
        public static uint GL_RGB10_A2 = 0x8059;
        public static uint GL_RGBA12 = 0x805A;
        public static uint GL_RGBA16 = 0x805B;
        public static uint GL_TEXTURE_DEPTH = 0x8071;
        public static uint GL_MAX_3D_TEXTURE_SIZE = 0x8073;
        public static uint GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
        public static uint GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
        public static uint GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
        public static uint GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
        public static uint GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
        public static uint GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
        public static uint GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
        public static uint GL_BGR = 0x80E0;
        public static uint GL_BGRA = 0x80E1;
        public static uint GL_MAX_ELEMENTS_VERTICES = 0x80E8;
        public static uint GL_MAX_ELEMENTS_INDICES = 0x80E9;
        public static uint GL_CLAMP_TO_EDGE = 0x812F;
        public static uint GL_TEXTURE0 = 0x84C0;
        public static uint GL_TEXTURE1 = 0x84C1;
        public static uint GL_TEXTURE2 = 0x84C2;
        public static uint GL_TEXTURE3 = 0x84C3;
        public static uint GL_TEXTURE4 = 0x84C4;
        public static uint GL_TEXTURE5 = 0x84C5;
        public static uint GL_TEXTURE6 = 0x84C6;
        public static uint GL_TEXTURE7 = 0x84C7;
        public static uint GL_TEXTURE8 = 0x84C8;
        public static uint GL_TEXTURE9 = 0x84C9;
        public static uint GL_TEXTURE10 = 0x84CA;
        public static uint GL_TEXTURE11 = 0x84CB;
        public static uint GL_TEXTURE12 = 0x84CC;
        public static uint GL_TEXTURE13 = 0x84CD;
        public static uint GL_TEXTURE14 = 0x84CE;
        public static uint GL_TEXTURE15 = 0x84CF;
        public static uint GL_TEXTURE16 = 0x84D0;
        public static uint GL_TEXTURE17 = 0x84D1;
        public static uint GL_TEXTURE18 = 0x84D2;
        public static uint GL_TEXTURE19 = 0x84D3;
        public static uint GL_TEXTURE20 = 0x84D4;
        public static uint GL_TEXTURE21 = 0x84D5;
        public static uint GL_TEXTURE22 = 0x84D6;
        public static uint GL_TEXTURE23 = 0x84D7;
        public static uint GL_TEXTURE24 = 0x84D8;
        public static uint GL_TEXTURE25 = 0x84D9;
        public static uint GL_TEXTURE26 = 0x84DA;
        public static uint GL_TEXTURE27 = 0x84DB;
        public static uint GL_TEXTURE28 = 0x84DC;
        public static uint GL_TEXTURE29 = 0x84DD;
        public static uint GL_TEXTURE30 = 0x84DE;
        public static uint GL_TEXTURE31 = 0x84DF;
        public static uint GL_ACTIVE_TEXTURE = 0x84E0;
        public static uint GL_MULTISAMPLE = 0x809D;
        public static uint GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
        public static uint GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
        public static uint GL_SAMPLE_COVERAGE = 0x80A0;
        public static uint GL_SAMPLE_BUFFERS = 0x80A8;
        public static uint GL_SAMPLES = 0x80A9;
        public static uint GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
        public static uint GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
        public static uint GL_TEXTURE_CUBE_MAP = 0x8513;
        public static uint GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
        public static uint GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
        public static uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
        public static uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
        public static uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
        public static uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
        public static uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
        public static uint GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
        public static uint GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
        public static uint GL_COMPRESSED_RGB = 0x84ED;
        public static uint GL_COMPRESSED_RGBA = 0x84EE;
        public static uint GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
        public static uint GL_TEXTURE_COMPRESSED = 0x86A1;
        public static uint GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
        public static uint GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
        public static uint GL_CLAMP_TO_BORDER = 0x812D;
        public static uint GL_BLEND_DST_RGB = 0x80C8;
        public static uint GL_BLEND_SRC_RGB = 0x80C9;
        public static uint GL_BLEND_DST_ALPHA = 0x80CA;
        public static uint GL_BLEND_SRC_ALPHA = 0x80CB;
        public static uint GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
        public static uint GL_DEPTH_COMPONENT16 = 0x81A5;
        public static uint GL_DEPTH_COMPONENT24 = 0x81A6;
        public static uint GL_DEPTH_COMPONENT32 = 0x81A7;
        public static uint GL_MIRRORED_REPEAT = 0x8370;
        public static uint GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
        public static uint GL_TEXTURE_LOD_BIAS = 0x8501;
        public static uint GL_INCR_WRAP = 0x8507;
        public static uint GL_DECR_WRAP = 0x8508;
        public static uint GL_TEXTURE_DEPTH_SIZE = 0x884A;
        public static uint GL_TEXTURE_COMPARE_MODE = 0x884C;
        public static uint GL_TEXTURE_COMPARE_FUNC = 0x884D;
        public static uint GL_FUNC_ADD = 0x8006;
        public static uint GL_FUNC_SUBTRACT = 0x800A;
        public static uint GL_FUNC_REVERSE_SUBTRACT = 0x800B;
        public static uint GL_MIN = 0x8007;
        public static uint GL_MAX = 0x8008;
        public static uint GL_CONSTANT_COLOR = 0x8001;
        public static uint GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
        public static uint GL_CONSTANT_ALPHA = 0x8003;
        public static uint GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
        public static uint GL_BUFFER_SIZE = 0x8764;
        public static uint GL_BUFFER_USAGE = 0x8765;
        public static uint GL_QUERY_COUNTER_BITS = 0x8864;
        public static uint GL_CURRENT_QUERY = 0x8865;
        public static uint GL_QUERY_RESULT = 0x8866;
        public static uint GL_QUERY_RESULT_AVAILABLE = 0x8867;
        public static uint GL_ARRAY_BUFFER = 0x8892;
        public static uint GL_ELEMENT_ARRAY_BUFFER = 0x8893;
        public static uint GL_ARRAY_BUFFER_BINDING = 0x8894;
        public static uint GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
        public static uint GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
        public static uint GL_READ_ONLY = 0x88B8;
        public static uint GL_WRITE_ONLY = 0x88B9;
        public static uint GL_READ_WRITE = 0x88BA;
        public static uint GL_BUFFER_ACCESS = 0x88BB;
        public static uint GL_BUFFER_MAPPED = 0x88BC;
        public static uint GL_BUFFER_MAP_POINTER = 0x88BD;
        public static uint GL_STREAM_DRAW = 0x88E0;
        public static uint GL_STREAM_READ = 0x88E1;
        public static uint GL_STREAM_COPY = 0x88E2;
        public static uint GL_STATIC_DRAW = 0x88E4;
        public static uint GL_STATIC_READ = 0x88E5;
        public static uint GL_STATIC_COPY = 0x88E6;
        public static uint GL_DYNAMIC_DRAW = 0x88E8;
        public static uint GL_DYNAMIC_READ = 0x88E9;
        public static uint GL_DYNAMIC_COPY = 0x88EA;
        public static uint GL_SAMPLES_PASSED = 0x8914;
        public static uint GL_SRC1_ALPHA = 0x8589;
        public static uint GL_BLEND_EQUATION_RGB = 0x8009;
        public static uint GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
        public static uint GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
        public static uint GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
        public static uint GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
        public static uint GL_CURRENT_VERTEX_ATTRIB = 0x8626;
        public static uint GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
        public static uint GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
        public static uint GL_STENCIL_BACK_FUNC = 0x8800;
        public static uint GL_STENCIL_BACK_FAIL = 0x8801;
        public static uint GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
        public static uint GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
        public static uint GL_MAX_DRAW_BUFFERS = 0x8824;
        public static uint GL_DRAW_BUFFER0 = 0x8825;
        public static uint GL_DRAW_BUFFER1 = 0x8826;
        public static uint GL_DRAW_BUFFER2 = 0x8827;
        public static uint GL_DRAW_BUFFER3 = 0x8828;
        public static uint GL_DRAW_BUFFER4 = 0x8829;
        public static uint GL_DRAW_BUFFER5 = 0x882A;
        public static uint GL_DRAW_BUFFER6 = 0x882B;
        public static uint GL_DRAW_BUFFER7 = 0x882C;
        public static uint GL_DRAW_BUFFER8 = 0x882D;
        public static uint GL_DRAW_BUFFER9 = 0x882E;
        public static uint GL_DRAW_BUFFER10 = 0x882F;
        public static uint GL_DRAW_BUFFER11 = 0x8830;
        public static uint GL_DRAW_BUFFER12 = 0x8831;
        public static uint GL_DRAW_BUFFER13 = 0x8832;
        public static uint GL_DRAW_BUFFER14 = 0x8833;
        public static uint GL_DRAW_BUFFER15 = 0x8834;
        public static uint GL_BLEND_EQUATION_ALPHA = 0x883D;
        public static uint GL_MAX_VERTEX_ATTRIBS = 0x8869;
        public static uint GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
        public static uint GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
        public static uint GL_FRAGMENT_SHADER = 0x8B30;
        public static uint GL_VERTEX_SHADER = 0x8B31;
        public static uint GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
        public static uint GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
        public static uint GL_MAX_VARYING_FLOATS = 0x8B4B;
        public static uint GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
        public static uint GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
        public static uint GL_SHADER_TYPE = 0x8B4F;
        public static uint GL_FLOAT_VEC2 = 0x8B50;
        public static uint GL_FLOAT_VEC3 = 0x8B51;
        public static uint GL_FLOAT_VEC4 = 0x8B52;
        public static uint GL_INT_VEC2 = 0x8B53;
        public static uint GL_INT_VEC3 = 0x8B54;
        public static uint GL_INT_VEC4 = 0x8B55;
        public static uint GL_BOOL = 0x8B56;
        public static uint GL_BOOL_VEC2 = 0x8B57;
        public static uint GL_BOOL_VEC3 = 0x8B58;
        public static uint GL_BOOL_VEC4 = 0x8B59;
        public static uint GL_FLOAT_MAT2 = 0x8B5A;
        public static uint GL_FLOAT_MAT3 = 0x8B5B;
        public static uint GL_FLOAT_MAT4 = 0x8B5C;
        public static uint GL_SAMPLER_1D = 0x8B5D;
        public static uint GL_SAMPLER_2D = 0x8B5E;
        public static uint GL_SAMPLER_3D = 0x8B5F;
        public static uint GL_SAMPLER_CUBE = 0x8B60;
        public static uint GL_SAMPLER_1D_SHADOW = 0x8B61;
        public static uint GL_SAMPLER_2D_SHADOW = 0x8B62;
        public static uint GL_DELETE_STATUS = 0x8B80;
        public static uint GL_COMPILE_STATUS = 0x8B81;
        public static uint GL_LINK_STATUS = 0x8B82;
        public static uint GL_VALIDATE_STATUS = 0x8B83;
        public static uint GL_INFO_LOG_LENGTH = 0x8B84;
        public static uint GL_ATTACHED_SHADERS = 0x8B85;
        public static uint GL_ACTIVE_UNIFORMS = 0x8B86;
        public static uint GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
        public static uint GL_SHADER_SOURCE_LENGTH = 0x8B88;
        public static uint GL_ACTIVE_ATTRIBUTES = 0x8B89;
        public static uint GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
        public static uint GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
        public static uint GL_CURRENT_PROGRAM = 0x8B8D;
        public static uint GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
        public static uint GL_LOWER_LEFT = 0x8CA1;
        public static uint GL_UPPER_LEFT = 0x8CA2;
        public static uint GL_STENCIL_BACK_REF = 0x8CA3;
        public static uint GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
        public static uint GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
        public static uint GL_PIXEL_PACK_BUFFER = 0x88EB;
        public static uint GL_PIXEL_UNPACK_BUFFER = 0x88EC;
        public static uint GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
        public static uint GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
        public static uint GL_FLOAT_MAT2x3 = 0x8B65;
        public static uint GL_FLOAT_MAT2x4 = 0x8B66;
        public static uint GL_FLOAT_MAT3x2 = 0x8B67;
        public static uint GL_FLOAT_MAT3x4 = 0x8B68;
        public static uint GL_FLOAT_MAT4x2 = 0x8B69;
        public static uint GL_FLOAT_MAT4x3 = 0x8B6A;
        public static uint GL_SRGB = 0x8C40;
        public static uint GL_SRGB8 = 0x8C41;
        public static uint GL_SRGB_ALPHA = 0x8C42;
        public static uint GL_SRGB8_ALPHA8 = 0x8C43;
        public static uint GL_COMPRESSED_SRGB = 0x8C48;
        public static uint GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
        public static uint GL_COMPARE_REF_TO_TEXTURE = 0x884E;
        public static uint GL_MAJOR_VERSION = 0x821B;
        public static uint GL_MINOR_VERSION = 0x821C;
        public static uint GL_NUM_EXTENSIONS = 0x821D;
        public static uint GL_CONTEXT_FLAGS = 0x821E;
        public static uint GL_COMPRESSED_RED = 0x8225;
        public static uint GL_COMPRESSED_RG = 0x8226;
        public static uint GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
        public static uint GL_RGBA32F = 0x8814;
        public static uint GL_RGB32F = 0x8815;
        public static uint GL_RGBA16F = 0x881A;
        public static uint GL_RGB16F = 0x881B;
        public static uint GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
        public static uint GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
        public static uint GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
        public static uint GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
        public static uint GL_CLAMP_READ_COLOR = 0x891C;
        public static uint GL_FIXED_ONLY = 0x891D;
        public static uint GL_MAX_VARYING_COMPONENTS = 0x8B4B;
        public static uint GL_TEXTURE_1D_ARRAY = 0x8C18;
        public static uint GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
        public static uint GL_TEXTURE_2D_ARRAY = 0x8C1A;
        public static uint GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
        public static uint GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
        public static uint GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
        public static uint GL_R11F_G11F_B10F = 0x8C3A;
        public static uint GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
        public static uint GL_RGB9_E5 = 0x8C3D;
        public static uint GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
        public static uint GL_TEXTURE_SHARED_SIZE = 0x8C3F;
        public static uint GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
        public static uint GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
        public static uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
        public static uint GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
        public static uint GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
        public static uint GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
        public static uint GL_PRIMITIVES_GENERATED = 0x8C87;
        public static uint GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
        public static uint GL_RASTERIZER_DISCARD = 0x8C89;
        public static uint GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
        public static uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
        public static uint GL_INTERLEAVED_ATTRIBS = 0x8C8C;
        public static uint GL_SEPARATE_ATTRIBS = 0x8C8D;
        public static uint GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
        public static uint GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
        public static uint GL_RGBA32UI = 0x8D70;
        public static uint GL_RGB32UI = 0x8D71;
        public static uint GL_RGBA16UI = 0x8D76;
        public static uint GL_RGB16UI = 0x8D77;
        public static uint GL_RGBA8UI = 0x8D7C;
        public static uint GL_RGB8UI = 0x8D7D;
        public static uint GL_RGBA32I = 0x8D82;
        public static uint GL_RGB32I = 0x8D83;
        public static uint GL_RGBA16I = 0x8D88;
        public static uint GL_RGB16I = 0x8D89;
        public static uint GL_RGBA8I = 0x8D8E;
        public static uint GL_RGB8I = 0x8D8F;
        public static uint GL_RED_INTEGER = 0x8D94;
        public static uint GL_GREEN_INTEGER = 0x8D95;
        public static uint GL_BLUE_INTEGER = 0x8D96;
        public static uint GL_RGB_INTEGER = 0x8D98;
        public static uint GL_RGBA_INTEGER = 0x8D99;
        public static uint GL_BGR_INTEGER = 0x8D9A;
        public static uint GL_BGRA_INTEGER = 0x8D9B;
        public static uint GL_SAMPLER_1D_ARRAY = 0x8DC0;
        public static uint GL_SAMPLER_2D_ARRAY = 0x8DC1;
        public static uint GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
        public static uint GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
        public static uint GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
        public static uint GL_UNSIGNED_INT_VEC2 = 0x8DC6;
        public static uint GL_UNSIGNED_INT_VEC3 = 0x8DC7;
        public static uint GL_UNSIGNED_INT_VEC4 = 0x8DC8;
        public static uint GL_INT_SAMPLER_1D = 0x8DC9;
        public static uint GL_INT_SAMPLER_2D = 0x8DCA;
        public static uint GL_INT_SAMPLER_3D = 0x8DCB;
        public static uint GL_INT_SAMPLER_CUBE = 0x8DCC;
        public static uint GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
        public static uint GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
        public static uint GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
        public static uint GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
        public static uint GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
        public static uint GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
        public static uint GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
        public static uint GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
        public static uint GL_QUERY_WAIT = 0x8E13;
        public static uint GL_QUERY_NO_WAIT = 0x8E14;
        public static uint GL_QUERY_BY_REGION_WAIT = 0x8E15;
        public static uint GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
        public static uint GL_BUFFER_ACCESS_FLAGS = 0x911F;
        public static uint GL_BUFFER_MAP_LENGTH = 0x9120;
        public static uint GL_BUFFER_MAP_OFFSET = 0x9121;
        public static uint GL_DEPTH_COMPONENT32F = 0x8CAC;
        public static uint GL_DEPTH32F_STENCIL8 = 0x8CAD;
        public static uint GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
        public static uint GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
        public static uint GL_FRAMEBUFFER_DEFAULT = 0x8218;
        public static uint GL_FRAMEBUFFER_UNDEFINED = 0x8219;
        public static uint GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
        public static uint GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
        public static uint GL_DEPTH_STENCIL = 0x84F9;
        public static uint GL_UNSIGNED_INT_24_8 = 0x84FA;
        public static uint GL_DEPTH24_STENCIL8 = 0x88F0;
        public static uint GL_TEXTURE_STENCIL_SIZE = 0x88F1;
        public static uint GL_TEXTURE_RED_TYPE = 0x8C10;
        public static uint GL_TEXTURE_GREEN_TYPE = 0x8C11;
        public static uint GL_TEXTURE_BLUE_TYPE = 0x8C12;
        public static uint GL_TEXTURE_ALPHA_TYPE = 0x8C13;
        public static uint GL_TEXTURE_DEPTH_TYPE = 0x8C16;
        public static uint GL_UNSIGNED_NORMALIZED = 0x8C17;
        public static uint GL_FRAMEBUFFER_BINDING = 0x8CA6;
        public static uint GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
        public static uint GL_RENDERBUFFER_BINDING = 0x8CA7;
        public static uint GL_READ_FRAMEBUFFER = 0x8CA8;
        public static uint GL_DRAW_FRAMEBUFFER = 0x8CA9;
        public static uint GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
        public static uint GL_RENDERBUFFER_SAMPLES = 0x8CAB;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
        public static uint GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
        public static uint GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
        public static uint GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
        public static uint GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
        public static uint GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
        public static uint GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
        public static uint GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
        public static uint GL_COLOR_ATTACHMENT0 = 0x8CE0;
        public static uint GL_COLOR_ATTACHMENT1 = 0x8CE1;
        public static uint GL_COLOR_ATTACHMENT2 = 0x8CE2;
        public static uint GL_COLOR_ATTACHMENT3 = 0x8CE3;
        public static uint GL_COLOR_ATTACHMENT4 = 0x8CE4;
        public static uint GL_COLOR_ATTACHMENT5 = 0x8CE5;
        public static uint GL_COLOR_ATTACHMENT6 = 0x8CE6;
        public static uint GL_COLOR_ATTACHMENT7 = 0x8CE7;
        public static uint GL_COLOR_ATTACHMENT8 = 0x8CE8;
        public static uint GL_COLOR_ATTACHMENT9 = 0x8CE9;
        public static uint GL_COLOR_ATTACHMENT10 = 0x8CEA;
        public static uint GL_COLOR_ATTACHMENT11 = 0x8CEB;
        public static uint GL_COLOR_ATTACHMENT12 = 0x8CEC;
        public static uint GL_COLOR_ATTACHMENT13 = 0x8CED;
        public static uint GL_COLOR_ATTACHMENT14 = 0x8CEE;
        public static uint GL_COLOR_ATTACHMENT15 = 0x8CEF;
        public static uint GL_DEPTH_ATTACHMENT = 0x8D00;
        public static uint GL_STENCIL_ATTACHMENT = 0x8D20;
        public static uint GL_FRAMEBUFFER = 0x8D40;
        public static uint GL_RENDERBUFFER = 0x8D41;
        public static uint GL_RENDERBUFFER_WIDTH = 0x8D42;
        public static uint GL_RENDERBUFFER_HEIGHT = 0x8D43;
        public static uint GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
        public static uint GL_STENCIL_INDEX1 = 0x8D46;
        public static uint GL_STENCIL_INDEX4 = 0x8D47;
        public static uint GL_STENCIL_INDEX8 = 0x8D48;
        public static uint GL_STENCIL_INDEX16 = 0x8D49;
        public static uint GL_RENDERBUFFER_RED_SIZE = 0x8D50;
        public static uint GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
        public static uint GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
        public static uint GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
        public static uint GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
        public static uint GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
        public static uint GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
        public static uint GL_MAX_SAMPLES = 0x8D57;
        public static uint GL_INDEX = 0x8222;
        public static uint GL_FRAMEBUFFER_SRGB = 0x8DB9;
        public static uint GL_HALF_FLOAT = 0x140B;
        public static uint GL_MAP_READ_BIT = 0x0001;
        public static uint GL_MAP_WRITE_BIT = 0x0002;
        public static uint GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
        public static uint GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
        public static uint GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
        public static uint GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
        public static uint GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
        public static uint GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
        public static uint GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
        public static uint GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
        public static uint GL_RG = 0x8227;
        public static uint GL_RG_INTEGER = 0x8228;
        public static uint GL_R8 = 0x8229;
        public static uint GL_R16 = 0x822A;
        public static uint GL_RG8 = 0x822B;
        public static uint GL_RG16 = 0x822C;
        public static uint GL_R16F = 0x822D;
        public static uint GL_R32F = 0x822E;
        public static uint GL_RG16F = 0x822F;
        public static uint GL_RG32F = 0x8230;
        public static uint GL_R8I = 0x8231;
        public static uint GL_R8UI = 0x8232;
        public static uint GL_R16I = 0x8233;
        public static uint GL_R16UI = 0x8234;
        public static uint GL_R32I = 0x8235;
        public static uint GL_R32UI = 0x8236;
        public static uint GL_RG8I = 0x8237;
        public static uint GL_RG8UI = 0x8238;
        public static uint GL_RG16I = 0x8239;
        public static uint GL_RG16UI = 0x823A;
        public static uint GL_RG32I = 0x823B;
        public static uint GL_RG32UI = 0x823C;
        public static uint GL_VERTEX_ARRAY_BINDING = 0x85B5;
        public static uint GL_SAMPLER_2D_RECT = 0x8B63;
        public static uint GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
        public static uint GL_SAMPLER_BUFFER = 0x8DC2;
        public static uint GL_INT_SAMPLER_2D_RECT = 0x8DCD;
        public static uint GL_INT_SAMPLER_BUFFER = 0x8DD0;
        public static uint GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
        public static uint GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
        public static uint GL_TEXTURE_BUFFER = 0x8C2A;
        public static uint GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
        public static uint GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
        public static uint GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
        public static uint GL_TEXTURE_RECTANGLE = 0x84F5;
        public static uint GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
        public static uint GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
        public static uint GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
        public static uint GL_R8_SNORM = 0x8F94;
        public static uint GL_RG8_SNORM = 0x8F95;
        public static uint GL_RGB8_SNORM = 0x8F96;
        public static uint GL_RGBA8_SNORM = 0x8F97;
        public static uint GL_R16_SNORM = 0x8F98;
        public static uint GL_RG16_SNORM = 0x8F99;
        public static uint GL_RGB16_SNORM = 0x8F9A;
        public static uint GL_RGBA16_SNORM = 0x8F9B;
        public static uint GL_SIGNED_NORMALIZED = 0x8F9C;
        public static uint GL_PRIMITIVE_RESTART = 0x8F9D;
        public static uint GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
        public static uint GL_COPY_READ_BUFFER = 0x8F36;
        public static uint GL_COPY_WRITE_BUFFER = 0x8F37;
        public static uint GL_UNIFORM_BUFFER = 0x8A11;
        public static uint GL_UNIFORM_BUFFER_BINDING = 0x8A28;
        public static uint GL_UNIFORM_BUFFER_START = 0x8A29;
        public static uint GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
        public static uint GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
        public static uint GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
        public static uint GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
        public static uint GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
        public static uint GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
        public static uint GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
        public static uint GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
        public static uint GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
        public static uint GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
        public static uint GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
        public static uint GL_UNIFORM_TYPE = 0x8A37;
        public static uint GL_UNIFORM_SIZE = 0x8A38;
        public static uint GL_UNIFORM_NAME_LENGTH = 0x8A39;
        public static uint GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
        public static uint GL_UNIFORM_OFFSET = 0x8A3B;
        public static uint GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
        public static uint GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
        public static uint GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
        public static uint GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
        public static uint GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
        public static uint GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
        public static uint GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
        public static uint GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
        public static uint GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
        public static uint GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
        public static uint GL_INVALID_INDEX = 0xFFFFFFFF;
        public static uint GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
        public static uint GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
        public static uint GL_PROGRAM_POINT_SIZE = 0x8642;
        public static uint GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
        public static uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
        public static uint GL_GEOMETRY_SHADER = 0x8DD9;
        public static uint GL_GEOMETRY_VERTICES_OUT = 0x8916;
        public static uint GL_GEOMETRY_INPUT_TYPE = 0x8917;
        public static uint GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
        public static uint GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
        public static uint GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
        public static uint GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
        public static uint GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
        public static uint GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
        public static uint GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
        public static uint GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
        public static uint GL_CONTEXT_PROFILE_MASK = 0x9126;
        public static uint GL_DEPTH_CLAMP = 0x864F;
        public static uint GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
        public static uint GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
        public static uint GL_LAST_VERTEX_CONVENTION = 0x8E4E;
        public static uint GL_PROVOKING_VERTEX = 0x8E4F;
        public static uint GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
        public static uint GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
        public static uint GL_OBJECT_TYPE = 0x9112;
        public static uint GL_SYNC_CONDITION = 0x9113;
        public static uint GL_SYNC_STATUS = 0x9114;
        public static uint GL_SYNC_FLAGS = 0x9115;
        public static uint GL_SYNC_FENCE = 0x9116;
        public static uint GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
        public static uint GL_UNSIGNALED = 0x9118;
        public static uint GL_SIGNALED = 0x9119;
        public static uint GL_ALREADY_SIGNALED = 0x911A;
        public static uint GL_TIMEOUT_EXPIRED = 0x911B;
        public static uint GL_CONDITION_SATISFIED = 0x911C;
        public static uint GL_WAIT_FAILED = 0x911D;
        public static ulong GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;
        public static uint GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
        public static uint GL_SAMPLE_POSITION = 0x8E50;
        public static uint GL_SAMPLE_MASK = 0x8E51;
        public static uint GL_SAMPLE_MASK_VALUE = 0x8E52;
        public static uint GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
        public static uint GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
        public static uint GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
        public static uint GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
        public static uint GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
        public static uint GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
        public static uint GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
        public static uint GL_TEXTURE_SAMPLES = 0x9106;
        public static uint GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
        public static uint GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
        public static uint GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
        public static uint GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
        public static uint GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
        public static uint GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
        public static uint GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
        public static uint GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
        public static uint GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
        public static uint GL_MAX_INTEGER_SAMPLES = 0x9110;
        public static uint GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
        public static uint GL_SRC1_COLOR = 0x88F9;
        public static uint GL_ONE_MINUS_SRC1_COLOR = 0x88FA;
        public static uint GL_ONE_MINUS_SRC1_ALPHA = 0x88FB;
        public static uint GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
        public static uint GL_ANY_SAMPLES_PASSED = 0x8C2F;
        public static uint GL_SAMPLER_BINDING = 0x8919;
        public static uint GL_RGB10_A2UI = 0x906F;
        public static uint GL_TEXTURE_SWIZZLE_R = 0x8E42;
        public static uint GL_TEXTURE_SWIZZLE_G = 0x8E43;
        public static uint GL_TEXTURE_SWIZZLE_B = 0x8E44;
        public static uint GL_TEXTURE_SWIZZLE_A = 0x8E45;
        public static uint GL_TEXTURE_SWIZZLE_RGBA = 0x8E46;
        public static uint GL_TIME_ELAPSED = 0x88BF;
        public static uint GL_TIMESTAMP = 0x8E28;
        public static uint GL_INT_2_10_10_10_REV = 0x8D9F;
        public static uint GL_SAMPLE_SHADING = 0x8C36;
        public static uint GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37;
        public static uint GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
        public static uint GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
        public static uint GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009;
        public static uint GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
        public static uint GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
        public static uint GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C;
        public static uint GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
        public static uint GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
        public static uint GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
        public static uint GL_DRAW_INDIRECT_BUFFER = 0x8F3F;
        public static uint GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
        public static uint GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
        public static uint GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
        public static uint GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
        public static uint GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
        public static uint GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
        public static uint GL_MAX_VERTEX_STREAMS = 0x8E71;
        public static uint GL_DOUBLE_VEC2 = 0x8FFC;
        public static uint GL_DOUBLE_VEC3 = 0x8FFD;
        public static uint GL_DOUBLE_VEC4 = 0x8FFE;
        public static uint GL_DOUBLE_MAT2 = 0x8F46;
        public static uint GL_DOUBLE_MAT3 = 0x8F47;
        public static uint GL_DOUBLE_MAT4 = 0x8F48;
        public static uint GL_DOUBLE_MAT2x3 = 0x8F49;
        public static uint GL_DOUBLE_MAT2x4 = 0x8F4A;
        public static uint GL_DOUBLE_MAT3x2 = 0x8F4B;
        public static uint GL_DOUBLE_MAT3x4 = 0x8F4C;
        public static uint GL_DOUBLE_MAT4x2 = 0x8F4D;
        public static uint GL_DOUBLE_MAT4x3 = 0x8F4E;
        public static uint GL_ACTIVE_SUBROUTINES = 0x8DE5;
        public static uint GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
        public static uint GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
        public static uint GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
        public static uint GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
        public static uint GL_MAX_SUBROUTINES = 0x8DE7;
        public static uint GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
        public static uint GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
        public static uint GL_COMPATIBLE_SUBROUTINES = 0x8E4B;
        public static uint GL_PATCH_VERTICES = 0x8E72;
        public static uint GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
        public static uint GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
        public static uint GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
        public static uint GL_TESS_GEN_MODE = 0x8E76;
        public static uint GL_TESS_GEN_SPACING = 0x8E77;
        public static uint GL_TESS_GEN_VERTEX_ORDER = 0x8E78;
        public static uint GL_TESS_GEN_POINT_MODE = 0x8E79;
        public static uint GL_ISOLINES = 0x8E7A;
        public static uint GL_QUADS = 0x0007;
        public static uint GL_FRACTIONAL_ODD = 0x8E7B;
        public static uint GL_FRACTIONAL_EVEN = 0x8E7C;
        public static uint GL_MAX_PATCH_VERTICES = 0x8E7D;
        public static uint GL_MAX_TESS_GEN_LEVEL = 0x8E7E;
        public static uint GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
        public static uint GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
        public static uint GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
        public static uint GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
        public static uint GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
        public static uint GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84;
        public static uint GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
        public static uint GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
        public static uint GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
        public static uint GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
        public static uint GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
        public static uint GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
        public static uint GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
        public static uint GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
        public static uint GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
        public static uint GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
        public static uint GL_TESS_EVALUATION_SHADER = 0x8E87;
        public static uint GL_TESS_CONTROL_SHADER = 0x8E88;
        public static uint GL_TRANSFORM_FEEDBACK = 0x8E22;
        public static uint GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
        public static uint GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
        public static uint GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
        public static uint GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
        public static uint GL_FIXED = 0x140C;
        public static uint GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
        public static uint GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
        public static uint GL_LOW_FLOAT = 0x8DF0;
        public static uint GL_MEDIUM_FLOAT = 0x8DF1;
        public static uint GL_HIGH_FLOAT = 0x8DF2;
        public static uint GL_LOW_INT = 0x8DF3;
        public static uint GL_MEDIUM_INT = 0x8DF4;
        public static uint GL_HIGH_INT = 0x8DF5;
        public static uint GL_SHADER_COMPILER = 0x8DFA;
        public static uint GL_SHADER_BINARY_FORMATS = 0x8DF8;
        public static uint GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
        public static uint GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
        public static uint GL_MAX_VARYING_VECTORS = 0x8DFC;
        public static uint GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
        public static uint GL_RGB565 = 0x8D62;
        public static uint GL_PROGRAM_BINARY_LENGTH = 0x8741;
        public static uint GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
        public static uint GL_PROGRAM_BINARY_FORMATS = 0x87FF;
        public static uint GL_VERTEX_SHADER_BIT = 0x00000001;
        public static uint GL_FRAGMENT_SHADER_BIT = 0x00000002;
        public static uint GL_GEOMETRY_SHADER_BIT = 0x00000004;
        public static uint GL_TESS_CONTROL_SHADER_BIT = 0x00000008;
        public static uint GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;
        public static uint GL_ALL_SHADER_BITS = 0xFFFFFFFF;
        public static uint GL_PROGRAM_SEPARABLE = 0x8258;
        public static uint GL_ACTIVE_PROGRAM = 0x8259;
        public static uint GL_PROGRAM_PIPELINE_BINDING = 0x825A;
        public static uint GL_MAX_VIEWPORTS = 0x825B;
        public static uint GL_VIEWPORT_SUBPIXEL_BITS = 0x825C;
        public static uint GL_VIEWPORT_BOUNDS_RANGE = 0x825D;
        public static uint GL_LAYER_PROVOKING_VERTEX = 0x825E;
        public static uint GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
        public static uint GL_UNDEFINED_VERTEX = 0x8260;
        public static uint GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
        public static uint GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
        public static uint GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
        public static uint GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
        public static uint GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
        public static uint GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
        public static uint GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
        public static uint GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E;
        public static uint GL_NUM_SAMPLE_COUNTS = 0x9380;
        public static uint GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;
        public static uint GL_ATOMIC_COUNTER_BUFFER = 0x92C0;
        public static uint GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
        public static uint GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2;
        public static uint GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
        public static uint GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
        public static uint GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
        public static uint GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
        public static uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
        public static uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
        public static uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
        public static uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
        public static uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
        public static uint GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
        public static uint GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
        public static uint GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
        public static uint GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
        public static uint GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
        public static uint GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
        public static uint GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
        public static uint GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
        public static uint GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
        public static uint GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
        public static uint GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
        public static uint GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
        public static uint GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
        public static uint GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
        public static uint GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
        public static uint GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
        public static uint GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
        public static uint GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
        public static uint GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
        public static uint GL_UNIFORM_BARRIER_BIT = 0x00000004;
        public static uint GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
        public static uint GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
        public static uint GL_COMMAND_BARRIER_BIT = 0x00000040;
        public static uint GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
        public static uint GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
        public static uint GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
        public static uint GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400;
        public static uint GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
        public static uint GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
        public static uint GL_ALL_BARRIER_BITS = 0xFFFFFFFF;
        public static uint GL_MAX_IMAGE_UNITS = 0x8F38;
        public static uint GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
        public static uint GL_IMAGE_BINDING_NAME = 0x8F3A;
        public static uint GL_IMAGE_BINDING_LEVEL = 0x8F3B;
        public static uint GL_IMAGE_BINDING_LAYERED = 0x8F3C;
        public static uint GL_IMAGE_BINDING_LAYER = 0x8F3D;
        public static uint GL_IMAGE_BINDING_ACCESS = 0x8F3E;
        public static uint GL_IMAGE_1D = 0x904C;
        public static uint GL_IMAGE_2D = 0x904D;
        public static uint GL_IMAGE_3D = 0x904E;
        public static uint GL_IMAGE_2D_RECT = 0x904F;
        public static uint GL_IMAGE_CUBE = 0x9050;
        public static uint GL_IMAGE_BUFFER = 0x9051;
        public static uint GL_IMAGE_1D_ARRAY = 0x9052;
        public static uint GL_IMAGE_2D_ARRAY = 0x9053;
        public static uint GL_IMAGE_CUBE_MAP_ARRAY = 0x9054;
        public static uint GL_IMAGE_2D_MULTISAMPLE = 0x9055;
        public static uint GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
        public static uint GL_INT_IMAGE_1D = 0x9057;
        public static uint GL_INT_IMAGE_2D = 0x9058;
        public static uint GL_INT_IMAGE_3D = 0x9059;
        public static uint GL_INT_IMAGE_2D_RECT = 0x905A;
        public static uint GL_INT_IMAGE_CUBE = 0x905B;
        public static uint GL_INT_IMAGE_BUFFER = 0x905C;
        public static uint GL_INT_IMAGE_1D_ARRAY = 0x905D;
        public static uint GL_INT_IMAGE_2D_ARRAY = 0x905E;
        public static uint GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
        public static uint GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060;
        public static uint GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
        public static uint GL_UNSIGNED_INT_IMAGE_1D = 0x9062;
        public static uint GL_UNSIGNED_INT_IMAGE_2D = 0x9063;
        public static uint GL_UNSIGNED_INT_IMAGE_3D = 0x9064;
        public static uint GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
        public static uint GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066;
        public static uint GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
        public static uint GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
        public static uint GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
        public static uint GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
        public static uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
        public static uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
        public static uint GL_MAX_IMAGE_SAMPLES = 0x906D;
        public static uint GL_IMAGE_BINDING_FORMAT = 0x906E;
        public static uint GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
        public static uint GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
        public static uint GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
        public static uint GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
        public static uint GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
        public static uint GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
        public static uint GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
        public static uint GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
        public static uint GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
        public static uint GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F;
        public static uint GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;
        public static uint GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E;
        public static uint GL_COMPRESSED_RGB8_ETC2 = 0x9274;
        public static uint GL_COMPRESSED_SRGB8_ETC2 = 0x9275;
        public static uint GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
        public static uint GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
        public static uint GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
        public static uint GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
        public static uint GL_COMPRESSED_R11_EAC = 0x9270;
        public static uint GL_COMPRESSED_SIGNED_R11_EAC = 0x9271;
        public static uint GL_COMPRESSED_RG11_EAC = 0x9272;
        public static uint GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273;
        public static uint GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
        public static uint GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
        public static uint GL_MAX_ELEMENT_INDEX = 0x8D6B;
        public static uint GL_COMPUTE_SHADER = 0x91B9;
        public static uint GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
        public static uint GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
        public static uint GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
        public static uint GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
        public static uint GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
        public static uint GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
        public static uint GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
        public static uint GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
        public static uint GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
        public static uint GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
        public static uint GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
        public static uint GL_COMPUTE_WORK_GROUP_SIZE = 0x8267;
        public static uint GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
        public static uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
        public static uint GL_DISPATCH_INDIRECT_BUFFER = 0x90EE;
        public static uint GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
        public static uint GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
        public static uint GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
        public static uint GL_DEBUG_CALLBACK_FUNCTION = 0x8244;
        public static uint GL_DEBUG_CALLBACK_USER_PARAM = 0x8245;
        public static uint GL_DEBUG_SOURCE_API = 0x8246;
        public static uint GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;
        public static uint GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
        public static uint GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249;
        public static uint GL_DEBUG_SOURCE_APPLICATION = 0x824A;
        public static uint GL_DEBUG_SOURCE_OTHER = 0x824B;
        public static uint GL_DEBUG_TYPE_ERROR = 0x824C;
        public static uint GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
        public static uint GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;
        public static uint GL_DEBUG_TYPE_PORTABILITY = 0x824F;
        public static uint GL_DEBUG_TYPE_PERFORMANCE = 0x8250;
        public static uint GL_DEBUG_TYPE_OTHER = 0x8251;
        public static uint GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
        public static uint GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
        public static uint GL_DEBUG_LOGGED_MESSAGES = 0x9145;
        public static uint GL_DEBUG_SEVERITY_HIGH = 0x9146;
        public static uint GL_DEBUG_SEVERITY_MEDIUM = 0x9147;
        public static uint GL_DEBUG_SEVERITY_LOW = 0x9148;
        public static uint GL_DEBUG_TYPE_MARKER = 0x8268;
        public static uint GL_DEBUG_TYPE_PUSH_GROUP = 0x8269;
        public static uint GL_DEBUG_TYPE_POP_GROUP = 0x826A;
        public static uint GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B;
        public static uint GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;
        public static uint GL_DEBUG_GROUP_STACK_DEPTH = 0x826D;
        public static uint GL_BUFFER = 0x82E0;
        public static uint GL_SHADER = 0x82E1;
        public static uint GL_PROGRAM = 0x82E2;
        public static uint GL_VERTEX_ARRAY = 0x8074;
        public static uint GL_QUERY = 0x82E3;
        public static uint GL_PROGRAM_PIPELINE = 0x82E4;
        public static uint GL_SAMPLER = 0x82E6;
        public static uint GL_MAX_LABEL_LENGTH = 0x82E8;
        public static uint GL_DEBUG_OUTPUT = 0x92E0;
        public static uint GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002;
        public static uint GL_MAX_UNIFORM_LOCATIONS = 0x826E;
        public static uint GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
        public static uint GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
        public static uint GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
        public static uint GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
        public static uint GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
        public static uint GL_MAX_FRAMEBUFFER_WIDTH = 0x9315;
        public static uint GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316;
        public static uint GL_MAX_FRAMEBUFFER_LAYERS = 0x9317;
        public static uint GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318;
        public static uint GL_INTERNALFORMAT_SUPPORTED = 0x826F;
        public static uint GL_INTERNALFORMAT_PREFERRED = 0x8270;
        public static uint GL_INTERNALFORMAT_RED_SIZE = 0x8271;
        public static uint GL_INTERNALFORMAT_GREEN_SIZE = 0x8272;
        public static uint GL_INTERNALFORMAT_BLUE_SIZE = 0x8273;
        public static uint GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274;
        public static uint GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275;
        public static uint GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276;
        public static uint GL_INTERNALFORMAT_SHARED_SIZE = 0x8277;
        public static uint GL_INTERNALFORMAT_RED_TYPE = 0x8278;
        public static uint GL_INTERNALFORMAT_GREEN_TYPE = 0x8279;
        public static uint GL_INTERNALFORMAT_BLUE_TYPE = 0x827A;
        public static uint GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B;
        public static uint GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C;
        public static uint GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D;
        public static uint GL_MAX_WIDTH = 0x827E;
        public static uint GL_MAX_HEIGHT = 0x827F;
        public static uint GL_MAX_DEPTH = 0x8280;
        public static uint GL_MAX_LAYERS = 0x8281;
        public static uint GL_MAX_COMBINED_DIMENSIONS = 0x8282;
        public static uint GL_COLOR_COMPONENTS = 0x8283;
        public static uint GL_DEPTH_COMPONENTS = 0x8284;
        public static uint GL_STENCIL_COMPONENTS = 0x8285;
        public static uint GL_COLOR_RENDERABLE = 0x8286;
        public static uint GL_DEPTH_RENDERABLE = 0x8287;
        public static uint GL_STENCIL_RENDERABLE = 0x8288;
        public static uint GL_FRAMEBUFFER_RENDERABLE = 0x8289;
        public static uint GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
        public static uint GL_FRAMEBUFFER_BLEND = 0x828B;
        public static uint GL_READ_PIXELS = 0x828C;
        public static uint GL_READ_PIXELS_FORMAT = 0x828D;
        public static uint GL_READ_PIXELS_TYPE = 0x828E;
        public static uint GL_TEXTURE_IMAGE_FORMAT = 0x828F;
        public static uint GL_TEXTURE_IMAGE_TYPE = 0x8290;
        public static uint GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291;
        public static uint GL_GET_TEXTURE_IMAGE_TYPE = 0x8292;
        public static uint GL_MIPMAP = 0x8293;
        public static uint GL_MANUAL_GENERATE_MIPMAP = 0x8294;
        public static uint GL_AUTO_GENERATE_MIPMAP = 0x8295;
        public static uint GL_COLOR_ENCODING = 0x8296;
        public static uint GL_SRGB_READ = 0x8297;
        public static uint GL_SRGB_WRITE = 0x8298;
        public static uint GL_FILTER = 0x829A;
        public static uint GL_VERTEX_TEXTURE = 0x829B;
        public static uint GL_TESS_CONTROL_TEXTURE = 0x829C;
        public static uint GL_TESS_EVALUATION_TEXTURE = 0x829D;
        public static uint GL_GEOMETRY_TEXTURE = 0x829E;
        public static uint GL_FRAGMENT_TEXTURE = 0x829F;
        public static uint GL_COMPUTE_TEXTURE = 0x82A0;
        public static uint GL_TEXTURE_SHADOW = 0x82A1;
        public static uint GL_TEXTURE_GATHER = 0x82A2;
        public static uint GL_TEXTURE_GATHER_SHADOW = 0x82A3;
        public static uint GL_SHADER_IMAGE_LOAD = 0x82A4;
        public static uint GL_SHADER_IMAGE_STORE = 0x82A5;
        public static uint GL_SHADER_IMAGE_ATOMIC = 0x82A6;
        public static uint GL_IMAGE_TEXEL_SIZE = 0x82A7;
        public static uint GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8;
        public static uint GL_IMAGE_PIXEL_FORMAT = 0x82A9;
        public static uint GL_IMAGE_PIXEL_TYPE = 0x82AA;
        public static uint GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
        public static uint GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
        public static uint GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
        public static uint GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
        public static uint GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
        public static uint GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
        public static uint GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3;
        public static uint GL_CLEAR_BUFFER = 0x82B4;
        public static uint GL_TEXTURE_VIEW = 0x82B5;
        public static uint GL_VIEW_COMPATIBILITY_CLASS = 0x82B6;
        public static uint GL_FULL_SUPPORT = 0x82B7;
        public static uint GL_CAVEAT_SUPPORT = 0x82B8;
        public static uint GL_IMAGE_CLASS_4_X_32 = 0x82B9;
        public static uint GL_IMAGE_CLASS_2_X_32 = 0x82BA;
        public static uint GL_IMAGE_CLASS_1_X_32 = 0x82BB;
        public static uint GL_IMAGE_CLASS_4_X_16 = 0x82BC;
        public static uint GL_IMAGE_CLASS_2_X_16 = 0x82BD;
        public static uint GL_IMAGE_CLASS_1_X_16 = 0x82BE;
        public static uint GL_IMAGE_CLASS_4_X_8 = 0x82BF;
        public static uint GL_IMAGE_CLASS_2_X_8 = 0x82C0;
        public static uint GL_IMAGE_CLASS_1_X_8 = 0x82C1;
        public static uint GL_IMAGE_CLASS_11_11_10 = 0x82C2;
        public static uint GL_IMAGE_CLASS_10_10_10_2 = 0x82C3;
        public static uint GL_VIEW_CLASS_128_BITS = 0x82C4;
        public static uint GL_VIEW_CLASS_96_BITS = 0x82C5;
        public static uint GL_VIEW_CLASS_64_BITS = 0x82C6;
        public static uint GL_VIEW_CLASS_48_BITS = 0x82C7;
        public static uint GL_VIEW_CLASS_32_BITS = 0x82C8;
        public static uint GL_VIEW_CLASS_24_BITS = 0x82C9;
        public static uint GL_VIEW_CLASS_16_BITS = 0x82CA;
        public static uint GL_VIEW_CLASS_8_BITS = 0x82CB;
        public static uint GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC;
        public static uint GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD;
        public static uint GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE;
        public static uint GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF;
        public static uint GL_VIEW_CLASS_RGTC1_RED = 0x82D0;
        public static uint GL_VIEW_CLASS_RGTC2_RG = 0x82D1;
        public static uint GL_VIEW_CLASS_BPTC_UNORM = 0x82D2;
        public static uint GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3;
        public static uint GL_UNIFORM = 0x92E1;
        public static uint GL_UNIFORM_BLOCK = 0x92E2;
        public static uint GL_PROGRAM_INPUT = 0x92E3;
        public static uint GL_PROGRAM_OUTPUT = 0x92E4;
        public static uint GL_BUFFER_VARIABLE = 0x92E5;
        public static uint GL_SHADER_STORAGE_BLOCK = 0x92E6;
        public static uint GL_VERTEX_SUBROUTINE = 0x92E8;
        public static uint GL_TESS_CONTROL_SUBROUTINE = 0x92E9;
        public static uint GL_TESS_EVALUATION_SUBROUTINE = 0x92EA;
        public static uint GL_GEOMETRY_SUBROUTINE = 0x92EB;
        public static uint GL_FRAGMENT_SUBROUTINE = 0x92EC;
        public static uint GL_COMPUTE_SUBROUTINE = 0x92ED;
        public static uint GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE;
        public static uint GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
        public static uint GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
        public static uint GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1;
        public static uint GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2;
        public static uint GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3;
        public static uint GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4;
        public static uint GL_ACTIVE_RESOURCES = 0x92F5;
        public static uint GL_MAX_NAME_LENGTH = 0x92F6;
        public static uint GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
        public static uint GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
        public static uint GL_NAME_LENGTH = 0x92F9;
        public static uint GL_TYPE = 0x92FA;
        public static uint GL_ARRAY_SIZE = 0x92FB;
        public static uint GL_OFFSET = 0x92FC;
        public static uint GL_BLOCK_INDEX = 0x92FD;
        public static uint GL_ARRAY_STRIDE = 0x92FE;
        public static uint GL_MATRIX_STRIDE = 0x92FF;
        public static uint GL_IS_ROW_MAJOR = 0x9300;
        public static uint GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
        public static uint GL_BUFFER_BINDING = 0x9302;
        public static uint GL_BUFFER_DATA_SIZE = 0x9303;
        public static uint GL_NUM_ACTIVE_VARIABLES = 0x9304;
        public static uint GL_ACTIVE_VARIABLES = 0x9305;
        public static uint GL_REFERENCED_BY_VERTEX_SHADER = 0x9306;
        public static uint GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
        public static uint GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
        public static uint GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
        public static uint GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
        public static uint GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B;
        public static uint GL_TOP_LEVEL_ARRAY_SIZE = 0x930C;
        public static uint GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D;
        public static uint GL_LOCATION = 0x930E;
        public static uint GL_LOCATION_INDEX = 0x930F;
        public static uint GL_IS_PER_PATCH = 0x92E7;
        public static uint GL_SHADER_STORAGE_BUFFER = 0x90D2;
        public static uint GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
        public static uint GL_SHADER_STORAGE_BUFFER_START = 0x90D4;
        public static uint GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
        public static uint GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
        public static uint GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
        public static uint GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
        public static uint GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
        public static uint GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
        public static uint GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
        public static uint GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
        public static uint GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
        public static uint GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
        public static uint GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
        public static uint GL_SHADER_STORAGE_BARRIER_BIT = 0x00002000;
        public static uint GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
        public static uint GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
        public static uint GL_TEXTURE_BUFFER_OFFSET = 0x919D;
        public static uint GL_TEXTURE_BUFFER_SIZE = 0x919E;
        public static uint GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
        public static uint GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB;
        public static uint GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC;
        public static uint GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD;
        public static uint GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE;
        public static uint GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
        public static uint GL_VERTEX_ATTRIB_BINDING = 0x82D4;
        public static uint GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
        public static uint GL_VERTEX_BINDING_DIVISOR = 0x82D6;
        public static uint GL_VERTEX_BINDING_OFFSET = 0x82D7;
        public static uint GL_VERTEX_BINDING_STRIDE = 0x82D8;
        public static uint GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
        public static uint GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;
        public static uint GL_DISPLAY_LIST = 0x82E7;
        public static uint GL_STACK_UNDERFLOW = 0x0504;
        public static uint GL_STACK_OVERFLOW = 0x0503;
        public static uint GL_MAX_VERTEX_ATTRIB_STRIDE = 0x82E5;
        public static uint GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221;
        public static uint GL_TEXTURE_BUFFER_BINDING = 0x8C2A;
        public static uint GL_MAP_PERSISTENT_BIT = 0x0040;
        public static uint GL_MAP_COHERENT_BIT = 0x0080;
        public static uint GL_DYNAMIC_STORAGE_BIT = 0x0100;
        public static uint GL_CLIENT_STORAGE_BIT = 0x0200;
        public static uint GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000;
        public static uint GL_BUFFER_IMMUTABLE_STORAGE = 0x821F;
        public static uint GL_BUFFER_STORAGE_FLAGS = 0x8220;
        public static uint GL_CLEAR_TEXTURE = 0x9365;
        public static uint GL_LOCATION_COMPONENT = 0x934A;
        public static uint GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B;
        public static uint GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C;
        public static uint GL_QUERY_BUFFER = 0x9192;
        public static uint GL_QUERY_BUFFER_BARRIER_BIT = 0x00008000;
        public static uint GL_QUERY_BUFFER_BINDING = 0x9193;
        public static uint GL_QUERY_RESULT_NO_WAIT = 0x9194;
        public static uint GL_MIRROR_CLAMP_TO_EDGE = 0x8743;
        #endregion

        #region Commands
        public static void glCullFace(uint mode)
        {
            if (glCullFacePtr == null)
            {
                glCullFacePtr = (glCullFaceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCullFace"), typeof(glCullFaceFunc));
            }
            glCullFacePtr(mode);
        }
        public static void glFrontFace(uint mode)
        {
            if (glFrontFacePtr == null)
            {
                glFrontFacePtr = (glFrontFaceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFrontFace"), typeof(glFrontFaceFunc));
            }
            glFrontFacePtr(mode);
        }
        public static void glHint(uint target, uint mode)
        {
            if (glHintPtr == null)
            {
                glHintPtr = (glHintFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glHint"), typeof(glHintFunc));
            }
            glHintPtr(target, mode);
        }
        public static void glLineWidth(float width)
        {
            if (glLineWidthPtr == null)
            {
                glLineWidthPtr = (glLineWidthFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLineWidth"), typeof(glLineWidthFunc));
            }
            glLineWidthPtr(width);
        }
        public static void glPointSize(float size)
        {
            if (glPointSizePtr == null)
            {
                glPointSizePtr = (glPointSizeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointSize"), typeof(glPointSizeFunc));
            }
            glPointSizePtr(size);
        }
        public static void glPolygonMode(uint face, uint mode)
        {
            if (glPolygonModePtr == null)
            {
                glPolygonModePtr = (glPolygonModeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPolygonMode"), typeof(glPolygonModeFunc));
            }
            glPolygonModePtr(face, mode);
        }
        public static void glScissor(int x, int y, int width, int height)
        {
            if (glScissorPtr == null)
            {
                glScissorPtr = (glScissorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScissor"), typeof(glScissorFunc));
            }
            glScissorPtr(x, y, width, height);
        }
        public static void glTexParameterf(uint target, uint pname, float param)
        {
            if (glTexParameterfPtr == null)
            {
                glTexParameterfPtr = (glTexParameterfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterf"), typeof(glTexParameterfFunc));
            }
            glTexParameterfPtr(target, pname, param);
        }
        public static void glTexParameterfv(uint target, uint pname, IntPtr @params)
        {
            if (glTexParameterfvPtr == null)
            {
                glTexParameterfvPtr = (glTexParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterfv"), typeof(glTexParameterfvFunc));
            }
            glTexParameterfvPtr(target, pname, @params);
        }
        public static void glTexParameteri(uint target, uint pname, int param)
        {
            if (glTexParameteriPtr == null)
            {
                glTexParameteriPtr = (glTexParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameteri"), typeof(glTexParameteriFunc));
            }
            glTexParameteriPtr(target, pname, param);
        }
        public static void glTexParameteriv(uint target, uint pname, IntPtr @params)
        {
            if (glTexParameterivPtr == null)
            {
                glTexParameterivPtr = (glTexParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameteriv"), typeof(glTexParameterivFunc));
            }
            glTexParameterivPtr(target, pname, @params);
        }
        public static void glTexImage1D(uint target, int level, int internalformat, int width, int border, uint format, uint type, IntPtr pixels)
        {
            if (glTexImage1DPtr == null)
            {
                glTexImage1DPtr = (glTexImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage1D"), typeof(glTexImage1DFunc));
            }
            glTexImage1DPtr(target, level, internalformat, width, border, format, type, pixels);
        }
        public static void glTexImage2D(uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, IntPtr pixels)
        {
            if (glTexImage2DPtr == null)
            {
                glTexImage2DPtr = (glTexImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage2D"), typeof(glTexImage2DFunc));
            }
            glTexImage2DPtr(target, level, internalformat, width, height, border, format, type, pixels);
        }
        public static void glDrawBuffer(uint mode)
        {
            if (glDrawBufferPtr == null)
            {
                glDrawBufferPtr = (glDrawBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawBuffer"), typeof(glDrawBufferFunc));
            }
            glDrawBufferPtr(mode);
        }
        public static void glClear(uint mask)
        {
            if (glClearPtr == null)
            {
                glClearPtr = (glClearFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClear"), typeof(glClearFunc));
            }
            glClearPtr(mask);
        }
        public static void glClearColor(float red, float green, float blue, float alpha)
        {
            if (glClearColorPtr == null)
            {
                glClearColorPtr = (glClearColorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearColor"), typeof(glClearColorFunc));
            }
            glClearColorPtr(red, green, blue, alpha);
        }
        public static void glClearStencil(int s)
        {
            if (glClearStencilPtr == null)
            {
                glClearStencilPtr = (glClearStencilFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearStencil"), typeof(glClearStencilFunc));
            }
            glClearStencilPtr(s);
        }
        public static void glClearDepth(double depth)
        {
            if (glClearDepthPtr == null)
            {
                glClearDepthPtr = (glClearDepthFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearDepth"), typeof(glClearDepthFunc));
            }
            glClearDepthPtr(depth);
        }
        public static void glStencilMask(uint mask)
        {
            if (glStencilMaskPtr == null)
            {
                glStencilMaskPtr = (glStencilMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilMask"), typeof(glStencilMaskFunc));
            }
            glStencilMaskPtr(mask);
        }
        public static void glColorMask(bool red, bool green, bool blue, bool alpha)
        {
            if (glColorMaskPtr == null)
            {
                glColorMaskPtr = (glColorMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorMask"), typeof(glColorMaskFunc));
            }
            glColorMaskPtr(red, green, blue, alpha);
        }
        public static void glDepthMask(bool flag)
        {
            if (glDepthMaskPtr == null)
            {
                glDepthMaskPtr = (glDepthMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthMask"), typeof(glDepthMaskFunc));
            }
            glDepthMaskPtr(flag);
        }
        public static void glDisable(uint cap)
        {
            if (glDisablePtr == null)
            {
                glDisablePtr = (glDisableFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDisable"), typeof(glDisableFunc));
            }
            glDisablePtr(cap);
        }
        public static void glEnable(uint cap)
        {
            if (glEnablePtr == null)
            {
                glEnablePtr = (glEnableFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnable"), typeof(glEnableFunc));
            }
            glEnablePtr(cap);
        }
        public static void glFinish()
        {
            if (glFinishPtr == null)
            {
                glFinishPtr = (glFinishFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFinish"), typeof(glFinishFunc));
            }
            glFinishPtr();
        }
        public static void glFlush()
        {
            if (glFlushPtr == null)
            {
                glFlushPtr = (glFlushFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFlush"), typeof(glFlushFunc));
            }
            glFlushPtr();
        }
        public static void glBlendFunc(uint sfactor, uint dfactor)
        {
            if (glBlendFuncPtr == null)
            {
                glBlendFuncPtr = (glBlendFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendFunc"), typeof(glBlendFuncFunc));
            }
            glBlendFuncPtr(sfactor, dfactor);
        }
        public static void glLogicOp(uint opcode)
        {
            if (glLogicOpPtr == null)
            {
                glLogicOpPtr = (glLogicOpFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLogicOp"), typeof(glLogicOpFunc));
            }
            glLogicOpPtr(opcode);
        }
        public static void glStencilFunc(uint func, int @ref, uint mask)
        {
            if (glStencilFuncPtr == null)
            {
                glStencilFuncPtr = (glStencilFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilFunc"), typeof(glStencilFuncFunc));
            }
            glStencilFuncPtr(func, @ref, mask);
        }
        public static void glStencilOp(uint fail, uint zfail, uint zpass)
        {
            if (glStencilOpPtr == null)
            {
                glStencilOpPtr = (glStencilOpFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilOp"), typeof(glStencilOpFunc));
            }
            glStencilOpPtr(fail, zfail, zpass);
        }
        public static void glDepthFunc(uint func)
        {
            if (glDepthFuncPtr == null)
            {
                glDepthFuncPtr = (glDepthFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthFunc"), typeof(glDepthFuncFunc));
            }
            glDepthFuncPtr(func);
        }
        public static void glPixelStoref(uint pname, float param)
        {
            if (glPixelStorefPtr == null)
            {
                glPixelStorefPtr = (glPixelStorefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelStoref"), typeof(glPixelStorefFunc));
            }
            glPixelStorefPtr(pname, param);
        }
        public static void glPixelStorei(uint pname, int param)
        {
            if (glPixelStoreiPtr == null)
            {
                glPixelStoreiPtr = (glPixelStoreiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelStorei"), typeof(glPixelStoreiFunc));
            }
            glPixelStoreiPtr(pname, param);
        }
        public static void glReadBuffer(uint mode)
        {
            if (glReadBufferPtr == null)
            {
                glReadBufferPtr = (glReadBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glReadBuffer"), typeof(glReadBufferFunc));
            }
            glReadBufferPtr(mode);
        }
        public static void glReadPixels(int x, int y, int width, int height, uint format, uint type, IntPtr pixels)
        {
            if (glReadPixelsPtr == null)
            {
                glReadPixelsPtr = (glReadPixelsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glReadPixels"), typeof(glReadPixelsFunc));
            }
            glReadPixelsPtr(x, y, width, height, format, type, pixels);
        }
        public static void glGetBooleanv(uint pname, IntPtr data)
        {
            if (glGetBooleanvPtr == null)
            {
                glGetBooleanvPtr = (glGetBooleanvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBooleanv"), typeof(glGetBooleanvFunc));
            }
            glGetBooleanvPtr(pname, data);
        }
        public static void glGetDoublev(uint pname, IntPtr data)
        {
            if (glGetDoublevPtr == null)
            {
                glGetDoublevPtr = (glGetDoublevFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetDoublev"), typeof(glGetDoublevFunc));
            }
            glGetDoublevPtr(pname, data);
        }
        public static uint glGetError()
        {
            if (glGetErrorPtr == null)
            {
                glGetErrorPtr = (glGetErrorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetError"), typeof(glGetErrorFunc));
            }
            return glGetErrorPtr();
        }
        public static void glGetFloatv(uint pname, IntPtr data)
        {
            if (glGetFloatvPtr == null)
            {
                glGetFloatvPtr = (glGetFloatvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFloatv"), typeof(glGetFloatvFunc));
            }
            glGetFloatvPtr(pname, data);
        }
        public static void glGetIntegerv(uint pname, IntPtr data)
        {
            if (glGetIntegervPtr == null)
            {
                glGetIntegervPtr = (glGetIntegervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetIntegerv"), typeof(glGetIntegervFunc));
            }
            glGetIntegervPtr(pname, data);
        }
        public static IntPtr glGetString(uint name)
        {
            if (glGetStringPtr == null)
            {
                glGetStringPtr = (glGetStringFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetString"), typeof(glGetStringFunc));
            }
            return glGetStringPtr(name);
        }
        public static void glGetTexImage(uint target, int level, uint format, uint type, IntPtr pixels)
        {
            if (glGetTexImagePtr == null)
            {
                glGetTexImagePtr = (glGetTexImageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexImage"), typeof(glGetTexImageFunc));
            }
            glGetTexImagePtr(target, level, format, type, pixels);
        }
        public static void glGetTexParameterfv(uint target, uint pname, IntPtr @params)
        {
            if (glGetTexParameterfvPtr == null)
            {
                glGetTexParameterfvPtr = (glGetTexParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameterfv"), typeof(glGetTexParameterfvFunc));
            }
            glGetTexParameterfvPtr(target, pname, @params);
        }
        public static void glGetTexParameteriv(uint target, uint pname, IntPtr @params)
        {
            if (glGetTexParameterivPtr == null)
            {
                glGetTexParameterivPtr = (glGetTexParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameteriv"), typeof(glGetTexParameterivFunc));
            }
            glGetTexParameterivPtr(target, pname, @params);
        }
        public static void glGetTexLevelParameterfv(uint target, int level, uint pname, IntPtr @params)
        {
            if (glGetTexLevelParameterfvPtr == null)
            {
                glGetTexLevelParameterfvPtr = (glGetTexLevelParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexLevelParameterfv"), typeof(glGetTexLevelParameterfvFunc));
            }
            glGetTexLevelParameterfvPtr(target, level, pname, @params);
        }
        public static void glGetTexLevelParameteriv(uint target, int level, uint pname, IntPtr @params)
        {
            if (glGetTexLevelParameterivPtr == null)
            {
                glGetTexLevelParameterivPtr = (glGetTexLevelParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexLevelParameteriv"), typeof(glGetTexLevelParameterivFunc));
            }
            glGetTexLevelParameterivPtr(target, level, pname, @params);
        }
        public static bool glIsEnabled(uint cap)
        {
            if (glIsEnabledPtr == null)
            {
                glIsEnabledPtr = (glIsEnabledFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsEnabled"), typeof(glIsEnabledFunc));
            }
            return glIsEnabledPtr(cap);
        }
        public static void glDepthRange(double near, double far)
        {
            if (glDepthRangePtr == null)
            {
                glDepthRangePtr = (glDepthRangeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthRange"), typeof(glDepthRangeFunc));
            }
            glDepthRangePtr(near, far);
        }
        public static void glViewport(int x, int y, int width, int height)
        {
            if (glViewportPtr == null)
            {
                glViewportPtr = (glViewportFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glViewport"), typeof(glViewportFunc));
            }
            glViewportPtr(x, y, width, height);
        }
        public static void glDrawArrays(uint mode, int first, int count)
        {
            if (glDrawArraysPtr == null)
            {
                glDrawArraysPtr = (glDrawArraysFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawArrays"), typeof(glDrawArraysFunc));
            }
            glDrawArraysPtr(mode, first, count);
        }
        public static void glDrawElements(uint mode, int count, uint type, IntPtr indices)
        {
            if (glDrawElementsPtr == null)
            {
                glDrawElementsPtr = (glDrawElementsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElements"), typeof(glDrawElementsFunc));
            }
            glDrawElementsPtr(mode, count, type, indices);
        }
        public static void glPolygonOffset(float factor, float units)
        {
            if (glPolygonOffsetPtr == null)
            {
                glPolygonOffsetPtr = (glPolygonOffsetFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPolygonOffset"), typeof(glPolygonOffsetFunc));
            }
            glPolygonOffsetPtr(factor, units);
        }
        public static void glCopyTexImage1D(uint target, int level, uint internalformat, int x, int y, int width, int border)
        {
            if (glCopyTexImage1DPtr == null)
            {
                glCopyTexImage1DPtr = (glCopyTexImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexImage1D"), typeof(glCopyTexImage1DFunc));
            }
            glCopyTexImage1DPtr(target, level, internalformat, x, y, width, border);
        }
        public static void glCopyTexImage2D(uint target, int level, uint internalformat, int x, int y, int width, int height, int border)
        {
            if (glCopyTexImage2DPtr == null)
            {
                glCopyTexImage2DPtr = (glCopyTexImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexImage2D"), typeof(glCopyTexImage2DFunc));
            }
            glCopyTexImage2DPtr(target, level, internalformat, x, y, width, height, border);
        }
        public static void glCopyTexSubImage1D(uint target, int level, int xoffset, int x, int y, int width)
        {
            if (glCopyTexSubImage1DPtr == null)
            {
                glCopyTexSubImage1DPtr = (glCopyTexSubImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexSubImage1D"), typeof(glCopyTexSubImage1DFunc));
            }
            glCopyTexSubImage1DPtr(target, level, xoffset, x, y, width);
        }
        public static void glCopyTexSubImage2D(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            if (glCopyTexSubImage2DPtr == null)
            {
                glCopyTexSubImage2DPtr = (glCopyTexSubImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexSubImage2D"), typeof(glCopyTexSubImage2DFunc));
            }
            glCopyTexSubImage2DPtr(target, level, xoffset, yoffset, x, y, width, height);
        }
        public static void glTexSubImage1D(uint target, int level, int xoffset, int width, uint format, uint type, IntPtr pixels)
        {
            if (glTexSubImage1DPtr == null)
            {
                glTexSubImage1DPtr = (glTexSubImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexSubImage1D"), typeof(glTexSubImage1DFunc));
            }
            glTexSubImage1DPtr(target, level, xoffset, width, format, type, pixels);
        }
        public static void glTexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, IntPtr pixels)
        {
            if (glTexSubImage2DPtr == null)
            {
                glTexSubImage2DPtr = (glTexSubImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexSubImage2D"), typeof(glTexSubImage2DFunc));
            }
            glTexSubImage2DPtr(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }
        public static void glBindTexture(uint target, uint texture)
        {
            if (glBindTexturePtr == null)
            {
                glBindTexturePtr = (glBindTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindTexture"), typeof(glBindTextureFunc));
            }
            glBindTexturePtr(target, texture);
        }
        public static void glDeleteTextures(int n, IntPtr textures)
        {
            if (glDeleteTexturesPtr == null)
            {
                glDeleteTexturesPtr = (glDeleteTexturesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteTextures"), typeof(glDeleteTexturesFunc));
            }
            glDeleteTexturesPtr(n, textures);
        }
        public static void glGenTextures(int n, IntPtr textures)
        {
            if (glGenTexturesPtr == null)
            {
                glGenTexturesPtr = (glGenTexturesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenTextures"), typeof(glGenTexturesFunc));
            }
            glGenTexturesPtr(n, textures);
        }
        public static bool glIsTexture(uint texture)
        {
            if (glIsTexturePtr == null)
            {
                glIsTexturePtr = (glIsTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsTexture"), typeof(glIsTextureFunc));
            }
            return glIsTexturePtr(texture);
        }
        public static void glDrawRangeElements(uint mode, uint start, uint end, int count, uint type, IntPtr indices)
        {
            if (glDrawRangeElementsPtr == null)
            {
                glDrawRangeElementsPtr = (glDrawRangeElementsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawRangeElements"), typeof(glDrawRangeElementsFunc));
            }
            glDrawRangeElementsPtr(mode, start, end, count, type, indices);
        }
        public static void glTexImage3D(uint target, int level, int internalformat, int width, int height, int depth, int border, uint format, uint type, IntPtr pixels)
        {
            if (glTexImage3DPtr == null)
            {
                glTexImage3DPtr = (glTexImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage3D"), typeof(glTexImage3DFunc));
            }
            glTexImage3DPtr(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }
        public static void glTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, IntPtr pixels)
        {
            if (glTexSubImage3DPtr == null)
            {
                glTexSubImage3DPtr = (glTexSubImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexSubImage3D"), typeof(glTexSubImage3DFunc));
            }
            glTexSubImage3DPtr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        public static void glCopyTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            if (glCopyTexSubImage3DPtr == null)
            {
                glCopyTexSubImage3DPtr = (glCopyTexSubImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexSubImage3D"), typeof(glCopyTexSubImage3DFunc));
            }
            glCopyTexSubImage3DPtr(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        public static void glActiveTexture(uint texture)
        {
            if (glActiveTexturePtr == null)
            {
                glActiveTexturePtr = (glActiveTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glActiveTexture"), typeof(glActiveTextureFunc));
            }
            glActiveTexturePtr(texture);
        }
        public static void glSampleCoverage(float value, bool invert)
        {
            if (glSampleCoveragePtr == null)
            {
                glSampleCoveragePtr = (glSampleCoverageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSampleCoverage"), typeof(glSampleCoverageFunc));
            }
            glSampleCoveragePtr(value, invert);
        }
        public static void glCompressedTexImage3D(uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
        {
            if (glCompressedTexImage3DPtr == null)
            {
                glCompressedTexImage3DPtr = (glCompressedTexImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexImage3D"), typeof(glCompressedTexImage3DFunc));
            }
            glCompressedTexImage3DPtr(target, level, internalformat, width, height, depth, border, imageSize, data);
        }
        public static void glCompressedTexImage2D(uint target, int level, uint internalformat, int width, int height, int border, int imageSize, IntPtr data)
        {
            if (glCompressedTexImage2DPtr == null)
            {
                glCompressedTexImage2DPtr = (glCompressedTexImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexImage2D"), typeof(glCompressedTexImage2DFunc));
            }
            glCompressedTexImage2DPtr(target, level, internalformat, width, height, border, imageSize, data);
        }
        public static void glCompressedTexImage1D(uint target, int level, uint internalformat, int width, int border, int imageSize, IntPtr data)
        {
            if (glCompressedTexImage1DPtr == null)
            {
                glCompressedTexImage1DPtr = (glCompressedTexImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexImage1D"), typeof(glCompressedTexImage1DFunc));
            }
            glCompressedTexImage1DPtr(target, level, internalformat, width, border, imageSize, data);
        }
        public static void glCompressedTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, IntPtr data)
        {
            if (glCompressedTexSubImage3DPtr == null)
            {
                glCompressedTexSubImage3DPtr = (glCompressedTexSubImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexSubImage3D"), typeof(glCompressedTexSubImage3DFunc));
            }
            glCompressedTexSubImage3DPtr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }
        public static void glCompressedTexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, IntPtr data)
        {
            if (glCompressedTexSubImage2DPtr == null)
            {
                glCompressedTexSubImage2DPtr = (glCompressedTexSubImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexSubImage2D"), typeof(glCompressedTexSubImage2DFunc));
            }
            glCompressedTexSubImage2DPtr(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }
        public static void glCompressedTexSubImage1D(uint target, int level, int xoffset, int width, uint format, int imageSize, IntPtr data)
        {
            if (glCompressedTexSubImage1DPtr == null)
            {
                glCompressedTexSubImage1DPtr = (glCompressedTexSubImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexSubImage1D"), typeof(glCompressedTexSubImage1DFunc));
            }
            glCompressedTexSubImage1DPtr(target, level, xoffset, width, format, imageSize, data);
        }
        public static void glGetCompressedTexImage(uint target, int level, IntPtr img)
        {
            if (glGetCompressedTexImagePtr == null)
            {
                glGetCompressedTexImagePtr = (glGetCompressedTexImageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetCompressedTexImage"), typeof(glGetCompressedTexImageFunc));
            }
            glGetCompressedTexImagePtr(target, level, img);
        }
        public static void glBlendFuncSeparate(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha)
        {
            if (glBlendFuncSeparatePtr == null)
            {
                glBlendFuncSeparatePtr = (glBlendFuncSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendFuncSeparate"), typeof(glBlendFuncSeparateFunc));
            }
            glBlendFuncSeparatePtr(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }
        public static void glMultiDrawArrays(uint mode, IntPtr first, IntPtr count, int drawcount)
        {
            if (glMultiDrawArraysPtr == null)
            {
                glMultiDrawArraysPtr = (glMultiDrawArraysFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiDrawArrays"), typeof(glMultiDrawArraysFunc));
            }
            glMultiDrawArraysPtr(mode, first, count, drawcount);
        }
        public static void glMultiDrawElements(uint mode, IntPtr count, uint type, IntPtr indices, int drawcount)
        {
            if (glMultiDrawElementsPtr == null)
            {
                glMultiDrawElementsPtr = (glMultiDrawElementsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiDrawElements"), typeof(glMultiDrawElementsFunc));
            }
            glMultiDrawElementsPtr(mode, count, type, indices, drawcount);
        }
        public static void glPointParameterf(uint pname, float param)
        {
            if (glPointParameterfPtr == null)
            {
                glPointParameterfPtr = (glPointParameterfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameterf"), typeof(glPointParameterfFunc));
            }
            glPointParameterfPtr(pname, param);
        }
        public static void glPointParameterfv(uint pname, IntPtr @params)
        {
            if (glPointParameterfvPtr == null)
            {
                glPointParameterfvPtr = (glPointParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameterfv"), typeof(glPointParameterfvFunc));
            }
            glPointParameterfvPtr(pname, @params);
        }
        public static void glPointParameteri(uint pname, int param)
        {
            if (glPointParameteriPtr == null)
            {
                glPointParameteriPtr = (glPointParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameteri"), typeof(glPointParameteriFunc));
            }
            glPointParameteriPtr(pname, param);
        }
        public static void glPointParameteriv(uint pname, IntPtr @params)
        {
            if (glPointParameterivPtr == null)
            {
                glPointParameterivPtr = (glPointParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameteriv"), typeof(glPointParameterivFunc));
            }
            glPointParameterivPtr(pname, @params);
        }
        public static void glBlendColor(float red, float green, float blue, float alpha)
        {
            if (glBlendColorPtr == null)
            {
                glBlendColorPtr = (glBlendColorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendColor"), typeof(glBlendColorFunc));
            }
            glBlendColorPtr(red, green, blue, alpha);
        }
        public static void glBlendEquation(uint mode)
        {
            if (glBlendEquationPtr == null)
            {
                glBlendEquationPtr = (glBlendEquationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendEquation"), typeof(glBlendEquationFunc));
            }
            glBlendEquationPtr(mode);
        }
        public static void glGenQueries(int n, IntPtr ids)
        {
            if (glGenQueriesPtr == null)
            {
                glGenQueriesPtr = (glGenQueriesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenQueries"), typeof(glGenQueriesFunc));
            }
            glGenQueriesPtr(n, ids);
        }
        public static void glDeleteQueries(int n, IntPtr ids)
        {
            if (glDeleteQueriesPtr == null)
            {
                glDeleteQueriesPtr = (glDeleteQueriesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteQueries"), typeof(glDeleteQueriesFunc));
            }
            glDeleteQueriesPtr(n, ids);
        }
        public static bool glIsQuery(uint id)
        {
            if (glIsQueryPtr == null)
            {
                glIsQueryPtr = (glIsQueryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsQuery"), typeof(glIsQueryFunc));
            }
            return glIsQueryPtr(id);
        }
        public static void glBeginQuery(uint target, uint id)
        {
            if (glBeginQueryPtr == null)
            {
                glBeginQueryPtr = (glBeginQueryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBeginQuery"), typeof(glBeginQueryFunc));
            }
            glBeginQueryPtr(target, id);
        }
        public static void glEndQuery(uint target)
        {
            if (glEndQueryPtr == null)
            {
                glEndQueryPtr = (glEndQueryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEndQuery"), typeof(glEndQueryFunc));
            }
            glEndQueryPtr(target);
        }
        public static void glGetQueryiv(uint target, uint pname, IntPtr @params)
        {
            if (glGetQueryivPtr == null)
            {
                glGetQueryivPtr = (glGetQueryivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetQueryiv"), typeof(glGetQueryivFunc));
            }
            glGetQueryivPtr(target, pname, @params);
        }
        public static void glGetQueryObjectiv(uint id, uint pname, IntPtr @params)
        {
            if (glGetQueryObjectivPtr == null)
            {
                glGetQueryObjectivPtr = (glGetQueryObjectivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetQueryObjectiv"), typeof(glGetQueryObjectivFunc));
            }
            glGetQueryObjectivPtr(id, pname, @params);
        }
        public static void glGetQueryObjectuiv(uint id, uint pname, IntPtr @params)
        {
            if (glGetQueryObjectuivPtr == null)
            {
                glGetQueryObjectuivPtr = (glGetQueryObjectuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetQueryObjectuiv"), typeof(glGetQueryObjectuivFunc));
            }
            glGetQueryObjectuivPtr(id, pname, @params);
        }
        public static void glBindBuffer(uint target, uint buffer)
        {
            if (glBindBufferPtr == null)
            {
                glBindBufferPtr = (glBindBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindBuffer"), typeof(glBindBufferFunc));
            }
            glBindBufferPtr(target, buffer);
        }
        public static void glDeleteBuffers(int n, IntPtr buffers)
        {
            if (glDeleteBuffersPtr == null)
            {
                glDeleteBuffersPtr = (glDeleteBuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteBuffers"), typeof(glDeleteBuffersFunc));
            }
            glDeleteBuffersPtr(n, buffers);
        }
        public static void glGenBuffers(int n, IntPtr buffers)
        {
            if (glGenBuffersPtr == null)
            {
                glGenBuffersPtr = (glGenBuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenBuffers"), typeof(glGenBuffersFunc));
            }
            glGenBuffersPtr(n, buffers);
        }
        public static bool glIsBuffer(uint buffer)
        {
            if (glIsBufferPtr == null)
            {
                glIsBufferPtr = (glIsBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsBuffer"), typeof(glIsBufferFunc));
            }
            return glIsBufferPtr(buffer);
        }
        public static void glBufferData(uint target, int size, IntPtr data, uint usage)
        {
            if (glBufferDataPtr == null)
            {
                glBufferDataPtr = (glBufferDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBufferData"), typeof(glBufferDataFunc));
            }
            glBufferDataPtr(target, size, data, usage);
        }
        public static void glBufferSubData(uint target, IntPtr offset, int size, IntPtr data)
        {
            if (glBufferSubDataPtr == null)
            {
                glBufferSubDataPtr = (glBufferSubDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBufferSubData"), typeof(glBufferSubDataFunc));
            }
            glBufferSubDataPtr(target, offset, size, data);
        }
        public static void glGetBufferSubData(uint target, IntPtr offset, int size, IntPtr data)
        {
            if (glGetBufferSubDataPtr == null)
            {
                glGetBufferSubDataPtr = (glGetBufferSubDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBufferSubData"), typeof(glGetBufferSubDataFunc));
            }
            glGetBufferSubDataPtr(target, offset, size, data);
        }
        public static IntPtr glMapBuffer(uint target, uint access)
        {
            if (glMapBufferPtr == null)
            {
                glMapBufferPtr = (glMapBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMapBuffer"), typeof(glMapBufferFunc));
            }
            return glMapBufferPtr(target, access);
        }
        public static bool glUnmapBuffer(uint target)
        {
            if (glUnmapBufferPtr == null)
            {
                glUnmapBufferPtr = (glUnmapBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUnmapBuffer"), typeof(glUnmapBufferFunc));
            }
            return glUnmapBufferPtr(target);
        }
        public static void glGetBufferParameteriv(uint target, uint pname, IntPtr @params)
        {
            if (glGetBufferParameterivPtr == null)
            {
                glGetBufferParameterivPtr = (glGetBufferParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBufferParameteriv"), typeof(glGetBufferParameterivFunc));
            }
            glGetBufferParameterivPtr(target, pname, @params);
        }
        public static void glGetBufferPointerv(uint target, uint pname, IntPtr @params)
        {
            if (glGetBufferPointervPtr == null)
            {
                glGetBufferPointervPtr = (glGetBufferPointervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBufferPointerv"), typeof(glGetBufferPointervFunc));
            }
            glGetBufferPointervPtr(target, pname, @params);
        }
        public static void glBlendEquationSeparate(uint modeRGB, uint modeAlpha)
        {
            if (glBlendEquationSeparatePtr == null)
            {
                glBlendEquationSeparatePtr = (glBlendEquationSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendEquationSeparate"), typeof(glBlendEquationSeparateFunc));
            }
            glBlendEquationSeparatePtr(modeRGB, modeAlpha);
        }
        public static void glDrawBuffers(int n, IntPtr bufs)
        {
            if (glDrawBuffersPtr == null)
            {
                glDrawBuffersPtr = (glDrawBuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawBuffers"), typeof(glDrawBuffersFunc));
            }
            glDrawBuffersPtr(n, bufs);
        }
        public static void glStencilOpSeparate(uint face, uint sfail, uint dpfail, uint dppass)
        {
            if (glStencilOpSeparatePtr == null)
            {
                glStencilOpSeparatePtr = (glStencilOpSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilOpSeparate"), typeof(glStencilOpSeparateFunc));
            }
            glStencilOpSeparatePtr(face, sfail, dpfail, dppass);
        }
        public static void glStencilFuncSeparate(uint face, uint func, int @ref, uint mask)
        {
            if (glStencilFuncSeparatePtr == null)
            {
                glStencilFuncSeparatePtr = (glStencilFuncSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilFuncSeparate"), typeof(glStencilFuncSeparateFunc));
            }
            glStencilFuncSeparatePtr(face, func, @ref, mask);
        }
        public static void glStencilMaskSeparate(uint face, uint mask)
        {
            if (glStencilMaskSeparatePtr == null)
            {
                glStencilMaskSeparatePtr = (glStencilMaskSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilMaskSeparate"), typeof(glStencilMaskSeparateFunc));
            }
            glStencilMaskSeparatePtr(face, mask);
        }
        public static void glAttachShader(uint program, uint shader)
        {
            if (glAttachShaderPtr == null)
            {
                glAttachShaderPtr = (glAttachShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glAttachShader"), typeof(glAttachShaderFunc));
            }
            glAttachShaderPtr(program, shader);
        }
        public static void glBindAttribLocation(uint program, uint index, IntPtr name)
        {
            if (glBindAttribLocationPtr == null)
            {
                glBindAttribLocationPtr = (glBindAttribLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindAttribLocation"), typeof(glBindAttribLocationFunc));
            }
            glBindAttribLocationPtr(program, index, name);
        }
        public static void glCompileShader(uint shader)
        {
            if (glCompileShaderPtr == null)
            {
                glCompileShaderPtr = (glCompileShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompileShader"), typeof(glCompileShaderFunc));
            }
            glCompileShaderPtr(shader);
        }
        public static uint glCreateProgram()
        {
            if (glCreateProgramPtr == null)
            {
                glCreateProgramPtr = (glCreateProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCreateProgram"), typeof(glCreateProgramFunc));
            }
            return glCreateProgramPtr();
        }
        public static uint glCreateShader(uint type)
        {
            if (glCreateShaderPtr == null)
            {
                glCreateShaderPtr = (glCreateShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCreateShader"), typeof(glCreateShaderFunc));
            }
            return glCreateShaderPtr(type);
        }
        public static void glDeleteProgram(uint program)
        {
            if (glDeleteProgramPtr == null)
            {
                glDeleteProgramPtr = (glDeleteProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteProgram"), typeof(glDeleteProgramFunc));
            }
            glDeleteProgramPtr(program);
        }
        public static void glDeleteShader(uint shader)
        {
            if (glDeleteShaderPtr == null)
            {
                glDeleteShaderPtr = (glDeleteShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteShader"), typeof(glDeleteShaderFunc));
            }
            glDeleteShaderPtr(shader);
        }
        public static void glDetachShader(uint program, uint shader)
        {
            if (glDetachShaderPtr == null)
            {
                glDetachShaderPtr = (glDetachShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDetachShader"), typeof(glDetachShaderFunc));
            }
            glDetachShaderPtr(program, shader);
        }
        public static void glDisableVertexAttribArray(uint index)
        {
            if (glDisableVertexAttribArrayPtr == null)
            {
                glDisableVertexAttribArrayPtr = (glDisableVertexAttribArrayFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDisableVertexAttribArray"), typeof(glDisableVertexAttribArrayFunc));
            }
            glDisableVertexAttribArrayPtr(index);
        }
        public static void glEnableVertexAttribArray(uint index)
        {
            if (glEnableVertexAttribArrayPtr == null)
            {
                glEnableVertexAttribArrayPtr = (glEnableVertexAttribArrayFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnableVertexAttribArray"), typeof(glEnableVertexAttribArrayFunc));
            }
            glEnableVertexAttribArrayPtr(index);
        }
        public static void glGetActiveAttrib(uint program, uint index, int bufSize, IntPtr length, IntPtr size, IntPtr type, IntPtr name)
        {
            if (glGetActiveAttribPtr == null)
            {
                glGetActiveAttribPtr = (glGetActiveAttribFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveAttrib"), typeof(glGetActiveAttribFunc));
            }
            glGetActiveAttribPtr(program, index, bufSize, length, size, type, name);
        }
        public static void glGetActiveUniform(uint program, uint index, int bufSize, IntPtr length, IntPtr size, IntPtr type, IntPtr name)
        {
            if (glGetActiveUniformPtr == null)
            {
                glGetActiveUniformPtr = (glGetActiveUniformFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveUniform"), typeof(glGetActiveUniformFunc));
            }
            glGetActiveUniformPtr(program, index, bufSize, length, size, type, name);
        }
        public static void glGetAttachedShaders(uint program, int maxCount, IntPtr count, IntPtr shaders)
        {
            if (glGetAttachedShadersPtr == null)
            {
                glGetAttachedShadersPtr = (glGetAttachedShadersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetAttachedShaders"), typeof(glGetAttachedShadersFunc));
            }
            glGetAttachedShadersPtr(program, maxCount, count, shaders);
        }
        public static int glGetAttribLocation(uint program, IntPtr name)
        {
            if (glGetAttribLocationPtr == null)
            {
                glGetAttribLocationPtr = (glGetAttribLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetAttribLocation"), typeof(glGetAttribLocationFunc));
            }
            return glGetAttribLocationPtr(program, name);
        }
        public static void glGetProgramiv(uint program, uint pname, IntPtr @params)
        {
            if (glGetProgramivPtr == null)
            {
                glGetProgramivPtr = (glGetProgramivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramiv"), typeof(glGetProgramivFunc));
            }
            glGetProgramivPtr(program, pname, @params);
        }
        public static void glGetProgramInfoLog(uint program, int bufSize, IntPtr length, IntPtr infoLog)
        {
            if (glGetProgramInfoLogPtr == null)
            {
                glGetProgramInfoLogPtr = (glGetProgramInfoLogFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramInfoLog"), typeof(glGetProgramInfoLogFunc));
            }
            glGetProgramInfoLogPtr(program, bufSize, length, infoLog);
        }
        public static void glGetShaderiv(uint shader, uint pname, IntPtr @params)
        {
            if (glGetShaderivPtr == null)
            {
                glGetShaderivPtr = (glGetShaderivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetShaderiv"), typeof(glGetShaderivFunc));
            }
            glGetShaderivPtr(shader, pname, @params);
        }
        public static void glGetShaderInfoLog(uint shader, int bufSize, IntPtr length, IntPtr infoLog)
        {
            if (glGetShaderInfoLogPtr == null)
            {
                glGetShaderInfoLogPtr = (glGetShaderInfoLogFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetShaderInfoLog"), typeof(glGetShaderInfoLogFunc));
            }
            glGetShaderInfoLogPtr(shader, bufSize, length, infoLog);
        }
        public static void glGetShaderSource(uint shader, int bufSize, IntPtr length, IntPtr source)
        {
            if (glGetShaderSourcePtr == null)
            {
                glGetShaderSourcePtr = (glGetShaderSourceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetShaderSource"), typeof(glGetShaderSourceFunc));
            }
            glGetShaderSourcePtr(shader, bufSize, length, source);
        }
        public static int glGetUniformLocation(uint program, IntPtr name)
        {
            if (glGetUniformLocationPtr == null)
            {
                glGetUniformLocationPtr = (glGetUniformLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformLocation"), typeof(glGetUniformLocationFunc));
            }
            return glGetUniformLocationPtr(program, name);
        }
        public static void glGetUniformfv(uint program, int location, IntPtr @params)
        {
            if (glGetUniformfvPtr == null)
            {
                glGetUniformfvPtr = (glGetUniformfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformfv"), typeof(glGetUniformfvFunc));
            }
            glGetUniformfvPtr(program, location, @params);
        }
        public static void glGetUniformiv(uint program, int location, IntPtr @params)
        {
            if (glGetUniformivPtr == null)
            {
                glGetUniformivPtr = (glGetUniformivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformiv"), typeof(glGetUniformivFunc));
            }
            glGetUniformivPtr(program, location, @params);
        }
        public static void glGetVertexAttribdv(uint index, uint pname, IntPtr @params)
        {
            if (glGetVertexAttribdvPtr == null)
            {
                glGetVertexAttribdvPtr = (glGetVertexAttribdvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribdv"), typeof(glGetVertexAttribdvFunc));
            }
            glGetVertexAttribdvPtr(index, pname, @params);
        }
        public static void glGetVertexAttribfv(uint index, uint pname, IntPtr @params)
        {
            if (glGetVertexAttribfvPtr == null)
            {
                glGetVertexAttribfvPtr = (glGetVertexAttribfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribfv"), typeof(glGetVertexAttribfvFunc));
            }
            glGetVertexAttribfvPtr(index, pname, @params);
        }
        public static void glGetVertexAttribiv(uint index, uint pname, IntPtr @params)
        {
            if (glGetVertexAttribivPtr == null)
            {
                glGetVertexAttribivPtr = (glGetVertexAttribivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribiv"), typeof(glGetVertexAttribivFunc));
            }
            glGetVertexAttribivPtr(index, pname, @params);
        }
        public static void glGetVertexAttribPointerv(uint index, uint pname, IntPtr pointer)
        {
            if (glGetVertexAttribPointervPtr == null)
            {
                glGetVertexAttribPointervPtr = (glGetVertexAttribPointervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribPointerv"), typeof(glGetVertexAttribPointervFunc));
            }
            glGetVertexAttribPointervPtr(index, pname, pointer);
        }
        public static bool glIsProgram(uint program)
        {
            if (glIsProgramPtr == null)
            {
                glIsProgramPtr = (glIsProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsProgram"), typeof(glIsProgramFunc));
            }
            return glIsProgramPtr(program);
        }
        public static bool glIsShader(uint shader)
        {
            if (glIsShaderPtr == null)
            {
                glIsShaderPtr = (glIsShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsShader"), typeof(glIsShaderFunc));
            }
            return glIsShaderPtr(shader);
        }
        public static void glLinkProgram(uint program)
        {
            if (glLinkProgramPtr == null)
            {
                glLinkProgramPtr = (glLinkProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLinkProgram"), typeof(glLinkProgramFunc));
            }
            glLinkProgramPtr(program);
        }
        public static void glShaderSource(uint shader, int count, IntPtr @string, IntPtr length)
        {
            if (glShaderSourcePtr == null)
            {
                glShaderSourcePtr = (glShaderSourceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glShaderSource"), typeof(glShaderSourceFunc));
            }
            glShaderSourcePtr(shader, count, @string, length);
        }
        public static void glUseProgram(uint program)
        {
            if (glUseProgramPtr == null)
            {
                glUseProgramPtr = (glUseProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUseProgram"), typeof(glUseProgramFunc));
            }
            glUseProgramPtr(program);
        }
        public static void glUniform1f(int location, float v0)
        {
            if (glUniform1fPtr == null)
            {
                glUniform1fPtr = (glUniform1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1f"), typeof(glUniform1fFunc));
            }
            glUniform1fPtr(location, v0);
        }
        public static void glUniform2f(int location, float v0, float v1)
        {
            if (glUniform2fPtr == null)
            {
                glUniform2fPtr = (glUniform2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2f"), typeof(glUniform2fFunc));
            }
            glUniform2fPtr(location, v0, v1);
        }
        public static void glUniform3f(int location, float v0, float v1, float v2)
        {
            if (glUniform3fPtr == null)
            {
                glUniform3fPtr = (glUniform3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3f"), typeof(glUniform3fFunc));
            }
            glUniform3fPtr(location, v0, v1, v2);
        }
        public static void glUniform4f(int location, float v0, float v1, float v2, float v3)
        {
            if (glUniform4fPtr == null)
            {
                glUniform4fPtr = (glUniform4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4f"), typeof(glUniform4fFunc));
            }
            glUniform4fPtr(location, v0, v1, v2, v3);
        }
        public static void glUniform1i(int location, int v0)
        {
            if (glUniform1iPtr == null)
            {
                glUniform1iPtr = (glUniform1iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1i"), typeof(glUniform1iFunc));
            }
            glUniform1iPtr(location, v0);
        }
        public static void glUniform2i(int location, int v0, int v1)
        {
            if (glUniform2iPtr == null)
            {
                glUniform2iPtr = (glUniform2iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2i"), typeof(glUniform2iFunc));
            }
            glUniform2iPtr(location, v0, v1);
        }
        public static void glUniform3i(int location, int v0, int v1, int v2)
        {
            if (glUniform3iPtr == null)
            {
                glUniform3iPtr = (glUniform3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3i"), typeof(glUniform3iFunc));
            }
            glUniform3iPtr(location, v0, v1, v2);
        }
        public static void glUniform4i(int location, int v0, int v1, int v2, int v3)
        {
            if (glUniform4iPtr == null)
            {
                glUniform4iPtr = (glUniform4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4i"), typeof(glUniform4iFunc));
            }
            glUniform4iPtr(location, v0, v1, v2, v3);
        }
        public static void glUniform1fv(int location, int count, IntPtr value)
        {
            if (glUniform1fvPtr == null)
            {
                glUniform1fvPtr = (glUniform1fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1fv"), typeof(glUniform1fvFunc));
            }
            glUniform1fvPtr(location, count, value);
        }
        public static void glUniform2fv(int location, int count, IntPtr value)
        {
            if (glUniform2fvPtr == null)
            {
                glUniform2fvPtr = (glUniform2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2fv"), typeof(glUniform2fvFunc));
            }
            glUniform2fvPtr(location, count, value);
        }
        public static void glUniform3fv(int location, int count, IntPtr value)
        {
            if (glUniform3fvPtr == null)
            {
                glUniform3fvPtr = (glUniform3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3fv"), typeof(glUniform3fvFunc));
            }
            glUniform3fvPtr(location, count, value);
        }
        public static void glUniform4fv(int location, int count, IntPtr value)
        {
            if (glUniform4fvPtr == null)
            {
                glUniform4fvPtr = (glUniform4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4fv"), typeof(glUniform4fvFunc));
            }
            glUniform4fvPtr(location, count, value);
        }
        public static void glUniform1iv(int location, int count, IntPtr value)
        {
            if (glUniform1ivPtr == null)
            {
                glUniform1ivPtr = (glUniform1ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1iv"), typeof(glUniform1ivFunc));
            }
            glUniform1ivPtr(location, count, value);
        }
        public static void glUniform2iv(int location, int count, IntPtr value)
        {
            if (glUniform2ivPtr == null)
            {
                glUniform2ivPtr = (glUniform2ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2iv"), typeof(glUniform2ivFunc));
            }
            glUniform2ivPtr(location, count, value);
        }
        public static void glUniform3iv(int location, int count, IntPtr value)
        {
            if (glUniform3ivPtr == null)
            {
                glUniform3ivPtr = (glUniform3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3iv"), typeof(glUniform3ivFunc));
            }
            glUniform3ivPtr(location, count, value);
        }
        public static void glUniform4iv(int location, int count, IntPtr value)
        {
            if (glUniform4ivPtr == null)
            {
                glUniform4ivPtr = (glUniform4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4iv"), typeof(glUniform4ivFunc));
            }
            glUniform4ivPtr(location, count, value);
        }
        public static void glUniformMatrix2fv(int location, int count, bool transpose, IntPtr value)
        {
            if (glUniformMatrix2fvPtr == null)
            {
                glUniformMatrix2fvPtr = (glUniformMatrix2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix2fv"), typeof(glUniformMatrix2fvFunc));
            }
            glUniformMatrix2fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix3fv(int location, int count, bool transpose, IntPtr value)
        {
            if (glUniformMatrix3fvPtr == null)
            {
                glUniformMatrix3fvPtr = (glUniformMatrix3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix3fv"), typeof(glUniformMatrix3fvFunc));
            }
            glUniformMatrix3fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix4fv(int location, int count, bool transpose, IntPtr value)
        {
            if (glUniformMatrix4fvPtr == null)
            {
                glUniformMatrix4fvPtr = (glUniformMatrix4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix4fv"), typeof(glUniformMatrix4fvFunc));
            }
            glUniformMatrix4fvPtr(location, count, transpose, value);
        }
        public static void glValidateProgram(uint program)
        {
            if (glValidateProgramPtr == null)
            {
                glValidateProgramPtr = (glValidateProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glValidateProgram"), typeof(glValidateProgramFunc));
            }
            glValidateProgramPtr(program);
        }
        public static void glVertexAttrib1d(uint index, double x)
        {
            if (glVertexAttrib1dPtr == null)
            {
                glVertexAttrib1dPtr = (glVertexAttrib1dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1d"), typeof(glVertexAttrib1dFunc));
            }
            glVertexAttrib1dPtr(index, x);
        }
        public static void glVertexAttrib1dv(uint index, IntPtr v)
        {
            if (glVertexAttrib1dvPtr == null)
            {
                glVertexAttrib1dvPtr = (glVertexAttrib1dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1dv"), typeof(glVertexAttrib1dvFunc));
            }
            glVertexAttrib1dvPtr(index, v);
        }
        public static void glVertexAttrib1f(uint index, float x)
        {
            if (glVertexAttrib1fPtr == null)
            {
                glVertexAttrib1fPtr = (glVertexAttrib1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1f"), typeof(glVertexAttrib1fFunc));
            }
            glVertexAttrib1fPtr(index, x);
        }
        public static void glVertexAttrib1fv(uint index, IntPtr v)
        {
            if (glVertexAttrib1fvPtr == null)
            {
                glVertexAttrib1fvPtr = (glVertexAttrib1fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1fv"), typeof(glVertexAttrib1fvFunc));
            }
            glVertexAttrib1fvPtr(index, v);
        }
        public static void glVertexAttrib1s(uint index, short x)
        {
            if (glVertexAttrib1sPtr == null)
            {
                glVertexAttrib1sPtr = (glVertexAttrib1sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1s"), typeof(glVertexAttrib1sFunc));
            }
            glVertexAttrib1sPtr(index, x);
        }
        public static void glVertexAttrib1sv(uint index, IntPtr v)
        {
            if (glVertexAttrib1svPtr == null)
            {
                glVertexAttrib1svPtr = (glVertexAttrib1svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1sv"), typeof(glVertexAttrib1svFunc));
            }
            glVertexAttrib1svPtr(index, v);
        }
        public static void glVertexAttrib2d(uint index, double x, double y)
        {
            if (glVertexAttrib2dPtr == null)
            {
                glVertexAttrib2dPtr = (glVertexAttrib2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2d"), typeof(glVertexAttrib2dFunc));
            }
            glVertexAttrib2dPtr(index, x, y);
        }
        public static void glVertexAttrib2dv(uint index, IntPtr v)
        {
            if (glVertexAttrib2dvPtr == null)
            {
                glVertexAttrib2dvPtr = (glVertexAttrib2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2dv"), typeof(glVertexAttrib2dvFunc));
            }
            glVertexAttrib2dvPtr(index, v);
        }
        public static void glVertexAttrib2f(uint index, float x, float y)
        {
            if (glVertexAttrib2fPtr == null)
            {
                glVertexAttrib2fPtr = (glVertexAttrib2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2f"), typeof(glVertexAttrib2fFunc));
            }
            glVertexAttrib2fPtr(index, x, y);
        }
        public static void glVertexAttrib2fv(uint index, IntPtr v)
        {
            if (glVertexAttrib2fvPtr == null)
            {
                glVertexAttrib2fvPtr = (glVertexAttrib2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2fv"), typeof(glVertexAttrib2fvFunc));
            }
            glVertexAttrib2fvPtr(index, v);
        }
        public static void glVertexAttrib2s(uint index, short x, short y)
        {
            if (glVertexAttrib2sPtr == null)
            {
                glVertexAttrib2sPtr = (glVertexAttrib2sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2s"), typeof(glVertexAttrib2sFunc));
            }
            glVertexAttrib2sPtr(index, x, y);
        }
        public static void glVertexAttrib2sv(uint index, IntPtr v)
        {
            if (glVertexAttrib2svPtr == null)
            {
                glVertexAttrib2svPtr = (glVertexAttrib2svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2sv"), typeof(glVertexAttrib2svFunc));
            }
            glVertexAttrib2svPtr(index, v);
        }
        public static void glVertexAttrib3d(uint index, double x, double y, double z)
        {
            if (glVertexAttrib3dPtr == null)
            {
                glVertexAttrib3dPtr = (glVertexAttrib3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3d"), typeof(glVertexAttrib3dFunc));
            }
            glVertexAttrib3dPtr(index, x, y, z);
        }
        public static void glVertexAttrib3dv(uint index, IntPtr v)
        {
            if (glVertexAttrib3dvPtr == null)
            {
                glVertexAttrib3dvPtr = (glVertexAttrib3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3dv"), typeof(glVertexAttrib3dvFunc));
            }
            glVertexAttrib3dvPtr(index, v);
        }
        public static void glVertexAttrib3f(uint index, float x, float y, float z)
        {
            if (glVertexAttrib3fPtr == null)
            {
                glVertexAttrib3fPtr = (glVertexAttrib3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3f"), typeof(glVertexAttrib3fFunc));
            }
            glVertexAttrib3fPtr(index, x, y, z);
        }
        public static void glVertexAttrib3fv(uint index, IntPtr v)
        {
            if (glVertexAttrib3fvPtr == null)
            {
                glVertexAttrib3fvPtr = (glVertexAttrib3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3fv"), typeof(glVertexAttrib3fvFunc));
            }
            glVertexAttrib3fvPtr(index, v);
        }
        public static void glVertexAttrib3s(uint index, short x, short y, short z)
        {
            if (glVertexAttrib3sPtr == null)
            {
                glVertexAttrib3sPtr = (glVertexAttrib3sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3s"), typeof(glVertexAttrib3sFunc));
            }
            glVertexAttrib3sPtr(index, x, y, z);
        }
        public static void glVertexAttrib3sv(uint index, IntPtr v)
        {
            if (glVertexAttrib3svPtr == null)
            {
                glVertexAttrib3svPtr = (glVertexAttrib3svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3sv"), typeof(glVertexAttrib3svFunc));
            }
            glVertexAttrib3svPtr(index, v);
        }
        public static void glVertexAttrib4Nbv(uint index, IntPtr v)
        {
            if (glVertexAttrib4NbvPtr == null)
            {
                glVertexAttrib4NbvPtr = (glVertexAttrib4NbvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Nbv"), typeof(glVertexAttrib4NbvFunc));
            }
            glVertexAttrib4NbvPtr(index, v);
        }
        public static void glVertexAttrib4Niv(uint index, IntPtr v)
        {
            if (glVertexAttrib4NivPtr == null)
            {
                glVertexAttrib4NivPtr = (glVertexAttrib4NivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Niv"), typeof(glVertexAttrib4NivFunc));
            }
            glVertexAttrib4NivPtr(index, v);
        }
        public static void glVertexAttrib4Nsv(uint index, IntPtr v)
        {
            if (glVertexAttrib4NsvPtr == null)
            {
                glVertexAttrib4NsvPtr = (glVertexAttrib4NsvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Nsv"), typeof(glVertexAttrib4NsvFunc));
            }
            glVertexAttrib4NsvPtr(index, v);
        }
        public static void glVertexAttrib4Nub(uint index, byte x, byte y, byte z, byte w)
        {
            if (glVertexAttrib4NubPtr == null)
            {
                glVertexAttrib4NubPtr = (glVertexAttrib4NubFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Nub"), typeof(glVertexAttrib4NubFunc));
            }
            glVertexAttrib4NubPtr(index, x, y, z, w);
        }
        public static void glVertexAttrib4Nubv(uint index, IntPtr v)
        {
            if (glVertexAttrib4NubvPtr == null)
            {
                glVertexAttrib4NubvPtr = (glVertexAttrib4NubvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Nubv"), typeof(glVertexAttrib4NubvFunc));
            }
            glVertexAttrib4NubvPtr(index, v);
        }
        public static void glVertexAttrib4Nuiv(uint index, IntPtr v)
        {
            if (glVertexAttrib4NuivPtr == null)
            {
                glVertexAttrib4NuivPtr = (glVertexAttrib4NuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Nuiv"), typeof(glVertexAttrib4NuivFunc));
            }
            glVertexAttrib4NuivPtr(index, v);
        }
        public static void glVertexAttrib4Nusv(uint index, IntPtr v)
        {
            if (glVertexAttrib4NusvPtr == null)
            {
                glVertexAttrib4NusvPtr = (glVertexAttrib4NusvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Nusv"), typeof(glVertexAttrib4NusvFunc));
            }
            glVertexAttrib4NusvPtr(index, v);
        }
        public static void glVertexAttrib4bv(uint index, IntPtr v)
        {
            if (glVertexAttrib4bvPtr == null)
            {
                glVertexAttrib4bvPtr = (glVertexAttrib4bvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4bv"), typeof(glVertexAttrib4bvFunc));
            }
            glVertexAttrib4bvPtr(index, v);
        }
        public static void glVertexAttrib4d(uint index, double x, double y, double z, double w)
        {
            if (glVertexAttrib4dPtr == null)
            {
                glVertexAttrib4dPtr = (glVertexAttrib4dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4d"), typeof(glVertexAttrib4dFunc));
            }
            glVertexAttrib4dPtr(index, x, y, z, w);
        }
        public static void glVertexAttrib4dv(uint index, IntPtr v)
        {
            if (glVertexAttrib4dvPtr == null)
            {
                glVertexAttrib4dvPtr = (glVertexAttrib4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4dv"), typeof(glVertexAttrib4dvFunc));
            }
            glVertexAttrib4dvPtr(index, v);
        }
        public static void glVertexAttrib4f(uint index, float x, float y, float z, float w)
        {
            if (glVertexAttrib4fPtr == null)
            {
                glVertexAttrib4fPtr = (glVertexAttrib4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4f"), typeof(glVertexAttrib4fFunc));
            }
            glVertexAttrib4fPtr(index, x, y, z, w);
        }
        public static void glVertexAttrib4fv(uint index, IntPtr v)
        {
            if (glVertexAttrib4fvPtr == null)
            {
                glVertexAttrib4fvPtr = (glVertexAttrib4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4fv"), typeof(glVertexAttrib4fvFunc));
            }
            glVertexAttrib4fvPtr(index, v);
        }
        public static void glVertexAttrib4iv(uint index, IntPtr v)
        {
            if (glVertexAttrib4ivPtr == null)
            {
                glVertexAttrib4ivPtr = (glVertexAttrib4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4iv"), typeof(glVertexAttrib4ivFunc));
            }
            glVertexAttrib4ivPtr(index, v);
        }
        public static void glVertexAttrib4s(uint index, short x, short y, short z, short w)
        {
            if (glVertexAttrib4sPtr == null)
            {
                glVertexAttrib4sPtr = (glVertexAttrib4sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4s"), typeof(glVertexAttrib4sFunc));
            }
            glVertexAttrib4sPtr(index, x, y, z, w);
        }
        public static void glVertexAttrib4sv(uint index, IntPtr v)
        {
            if (glVertexAttrib4svPtr == null)
            {
                glVertexAttrib4svPtr = (glVertexAttrib4svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4sv"), typeof(glVertexAttrib4svFunc));
            }
            glVertexAttrib4svPtr(index, v);
        }
        public static void glVertexAttrib4ubv(uint index, IntPtr v)
        {
            if (glVertexAttrib4ubvPtr == null)
            {
                glVertexAttrib4ubvPtr = (glVertexAttrib4ubvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4ubv"), typeof(glVertexAttrib4ubvFunc));
            }
            glVertexAttrib4ubvPtr(index, v);
        }
        public static void glVertexAttrib4uiv(uint index, IntPtr v)
        {
            if (glVertexAttrib4uivPtr == null)
            {
                glVertexAttrib4uivPtr = (glVertexAttrib4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4uiv"), typeof(glVertexAttrib4uivFunc));
            }
            glVertexAttrib4uivPtr(index, v);
        }
        public static void glVertexAttrib4usv(uint index, IntPtr v)
        {
            if (glVertexAttrib4usvPtr == null)
            {
                glVertexAttrib4usvPtr = (glVertexAttrib4usvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4usv"), typeof(glVertexAttrib4usvFunc));
            }
            glVertexAttrib4usvPtr(index, v);
        }
        public static void glVertexAttribPointer(uint index, int size, uint type, bool normalized, int stride, IntPtr pointer)
        {
            if (glVertexAttribPointerPtr == null)
            {
                glVertexAttribPointerPtr = (glVertexAttribPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribPointer"), typeof(glVertexAttribPointerFunc));
            }
            glVertexAttribPointerPtr(index, size, type, normalized, stride, pointer);
        }
        public static void glUniformMatrix2x3fv(int location, int count, bool transpose, IntPtr value)
        {
            if (glUniformMatrix2x3fvPtr == null)
            {
                glUniformMatrix2x3fvPtr = (glUniformMatrix2x3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix2x3fv"), typeof(glUniformMatrix2x3fvFunc));
            }
            glUniformMatrix2x3fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix3x2fv(int location, int count, bool transpose, IntPtr value)
        {
            if (glUniformMatrix3x2fvPtr == null)
            {
                glUniformMatrix3x2fvPtr = (glUniformMatrix3x2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix3x2fv"), typeof(glUniformMatrix3x2fvFunc));
            }
            glUniformMatrix3x2fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix2x4fv(int location, int count, bool transpose, IntPtr value)
        {
            if (glUniformMatrix2x4fvPtr == null)
            {
                glUniformMatrix2x4fvPtr = (glUniformMatrix2x4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix2x4fv"), typeof(glUniformMatrix2x4fvFunc));
            }
            glUniformMatrix2x4fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix4x2fv(int location, int count, bool transpose, IntPtr value)
        {
            if (glUniformMatrix4x2fvPtr == null)
            {
                glUniformMatrix4x2fvPtr = (glUniformMatrix4x2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix4x2fv"), typeof(glUniformMatrix4x2fvFunc));
            }
            glUniformMatrix4x2fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix3x4fv(int location, int count, bool transpose, IntPtr value)
        {
            if (glUniformMatrix3x4fvPtr == null)
            {
                glUniformMatrix3x4fvPtr = (glUniformMatrix3x4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix3x4fv"), typeof(glUniformMatrix3x4fvFunc));
            }
            glUniformMatrix3x4fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix4x3fv(int location, int count, bool transpose, IntPtr value)
        {
            if (glUniformMatrix4x3fvPtr == null)
            {
                glUniformMatrix4x3fvPtr = (glUniformMatrix4x3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix4x3fv"), typeof(glUniformMatrix4x3fvFunc));
            }
            glUniformMatrix4x3fvPtr(location, count, transpose, value);
        }
        public static void glColorMaski(uint index, bool r, bool g, bool b, bool a)
        {
            if (glColorMaskiPtr == null)
            {
                glColorMaskiPtr = (glColorMaskiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorMaski"), typeof(glColorMaskiFunc));
            }
            glColorMaskiPtr(index, r, g, b, a);
        }
        public static void glGetBooleani_v(uint target, uint index, IntPtr data)
        {
            if (glGetBooleani_vPtr == null)
            {
                glGetBooleani_vPtr = (glGetBooleani_vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBooleani_v"), typeof(glGetBooleani_vFunc));
            }
            glGetBooleani_vPtr(target, index, data);
        }
        public static void glGetIntegeri_v(uint target, uint index, IntPtr data)
        {
            if (glGetIntegeri_vPtr == null)
            {
                glGetIntegeri_vPtr = (glGetIntegeri_vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetIntegeri_v"), typeof(glGetIntegeri_vFunc));
            }
            glGetIntegeri_vPtr(target, index, data);
        }
        public static void glEnablei(uint target, uint index)
        {
            if (glEnableiPtr == null)
            {
                glEnableiPtr = (glEnableiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnablei"), typeof(glEnableiFunc));
            }
            glEnableiPtr(target, index);
        }
        public static void glDisablei(uint target, uint index)
        {
            if (glDisableiPtr == null)
            {
                glDisableiPtr = (glDisableiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDisablei"), typeof(glDisableiFunc));
            }
            glDisableiPtr(target, index);
        }
        public static bool glIsEnabledi(uint target, uint index)
        {
            if (glIsEnablediPtr == null)
            {
                glIsEnablediPtr = (glIsEnablediFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsEnabledi"), typeof(glIsEnablediFunc));
            }
            return glIsEnablediPtr(target, index);
        }
        public static void glBeginTransformFeedback(uint primitiveMode)
        {
            if (glBeginTransformFeedbackPtr == null)
            {
                glBeginTransformFeedbackPtr = (glBeginTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBeginTransformFeedback"), typeof(glBeginTransformFeedbackFunc));
            }
            glBeginTransformFeedbackPtr(primitiveMode);
        }
        public static void glEndTransformFeedback()
        {
            if (glEndTransformFeedbackPtr == null)
            {
                glEndTransformFeedbackPtr = (glEndTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEndTransformFeedback"), typeof(glEndTransformFeedbackFunc));
            }
            glEndTransformFeedbackPtr();
        }
        public static void glBindBufferRange(uint target, uint index, uint buffer, IntPtr offset, int size)
        {
            if (glBindBufferRangePtr == null)
            {
                glBindBufferRangePtr = (glBindBufferRangeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindBufferRange"), typeof(glBindBufferRangeFunc));
            }
            glBindBufferRangePtr(target, index, buffer, offset, size);
        }
        public static void glBindBufferBase(uint target, uint index, uint buffer)
        {
            if (glBindBufferBasePtr == null)
            {
                glBindBufferBasePtr = (glBindBufferBaseFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindBufferBase"), typeof(glBindBufferBaseFunc));
            }
            glBindBufferBasePtr(target, index, buffer);
        }
        public static void glTransformFeedbackVaryings(uint program, int count, IntPtr varyings, uint bufferMode)
        {
            if (glTransformFeedbackVaryingsPtr == null)
            {
                glTransformFeedbackVaryingsPtr = (glTransformFeedbackVaryingsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTransformFeedbackVaryings"), typeof(glTransformFeedbackVaryingsFunc));
            }
            glTransformFeedbackVaryingsPtr(program, count, varyings, bufferMode);
        }
        public static void glGetTransformFeedbackVarying(uint program, uint index, int bufSize, IntPtr length, IntPtr size, IntPtr type, IntPtr name)
        {
            if (glGetTransformFeedbackVaryingPtr == null)
            {
                glGetTransformFeedbackVaryingPtr = (glGetTransformFeedbackVaryingFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTransformFeedbackVarying"), typeof(glGetTransformFeedbackVaryingFunc));
            }
            glGetTransformFeedbackVaryingPtr(program, index, bufSize, length, size, type, name);
        }
        public static void glClampColor(uint target, uint clamp)
        {
            if (glClampColorPtr == null)
            {
                glClampColorPtr = (glClampColorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClampColor"), typeof(glClampColorFunc));
            }
            glClampColorPtr(target, clamp);
        }
        public static void glBeginConditionalRender(uint id, uint mode)
        {
            if (glBeginConditionalRenderPtr == null)
            {
                glBeginConditionalRenderPtr = (glBeginConditionalRenderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBeginConditionalRender"), typeof(glBeginConditionalRenderFunc));
            }
            glBeginConditionalRenderPtr(id, mode);
        }
        public static void glEndConditionalRender()
        {
            if (glEndConditionalRenderPtr == null)
            {
                glEndConditionalRenderPtr = (glEndConditionalRenderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEndConditionalRender"), typeof(glEndConditionalRenderFunc));
            }
            glEndConditionalRenderPtr();
        }
        public static void glVertexAttribIPointer(uint index, int size, uint type, int stride, IntPtr pointer)
        {
            if (glVertexAttribIPointerPtr == null)
            {
                glVertexAttribIPointerPtr = (glVertexAttribIPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribIPointer"), typeof(glVertexAttribIPointerFunc));
            }
            glVertexAttribIPointerPtr(index, size, type, stride, pointer);
        }
        public static void glGetVertexAttribIiv(uint index, uint pname, IntPtr @params)
        {
            if (glGetVertexAttribIivPtr == null)
            {
                glGetVertexAttribIivPtr = (glGetVertexAttribIivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribIiv"), typeof(glGetVertexAttribIivFunc));
            }
            glGetVertexAttribIivPtr(index, pname, @params);
        }
        public static void glGetVertexAttribIuiv(uint index, uint pname, IntPtr @params)
        {
            if (glGetVertexAttribIuivPtr == null)
            {
                glGetVertexAttribIuivPtr = (glGetVertexAttribIuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribIuiv"), typeof(glGetVertexAttribIuivFunc));
            }
            glGetVertexAttribIuivPtr(index, pname, @params);
        }
        public static void glVertexAttribI1i(uint index, int x)
        {
            if (glVertexAttribI1iPtr == null)
            {
                glVertexAttribI1iPtr = (glVertexAttribI1iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI1i"), typeof(glVertexAttribI1iFunc));
            }
            glVertexAttribI1iPtr(index, x);
        }
        public static void glVertexAttribI2i(uint index, int x, int y)
        {
            if (glVertexAttribI2iPtr == null)
            {
                glVertexAttribI2iPtr = (glVertexAttribI2iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI2i"), typeof(glVertexAttribI2iFunc));
            }
            glVertexAttribI2iPtr(index, x, y);
        }
        public static void glVertexAttribI3i(uint index, int x, int y, int z)
        {
            if (glVertexAttribI3iPtr == null)
            {
                glVertexAttribI3iPtr = (glVertexAttribI3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI3i"), typeof(glVertexAttribI3iFunc));
            }
            glVertexAttribI3iPtr(index, x, y, z);
        }
        public static void glVertexAttribI4i(uint index, int x, int y, int z, int w)
        {
            if (glVertexAttribI4iPtr == null)
            {
                glVertexAttribI4iPtr = (glVertexAttribI4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4i"), typeof(glVertexAttribI4iFunc));
            }
            glVertexAttribI4iPtr(index, x, y, z, w);
        }
        public static void glVertexAttribI1ui(uint index, uint x)
        {
            if (glVertexAttribI1uiPtr == null)
            {
                glVertexAttribI1uiPtr = (glVertexAttribI1uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI1ui"), typeof(glVertexAttribI1uiFunc));
            }
            glVertexAttribI1uiPtr(index, x);
        }
        public static void glVertexAttribI2ui(uint index, uint x, uint y)
        {
            if (glVertexAttribI2uiPtr == null)
            {
                glVertexAttribI2uiPtr = (glVertexAttribI2uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI2ui"), typeof(glVertexAttribI2uiFunc));
            }
            glVertexAttribI2uiPtr(index, x, y);
        }
        public static void glVertexAttribI3ui(uint index, uint x, uint y, uint z)
        {
            if (glVertexAttribI3uiPtr == null)
            {
                glVertexAttribI3uiPtr = (glVertexAttribI3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI3ui"), typeof(glVertexAttribI3uiFunc));
            }
            glVertexAttribI3uiPtr(index, x, y, z);
        }
        public static void glVertexAttribI4ui(uint index, uint x, uint y, uint z, uint w)
        {
            if (glVertexAttribI4uiPtr == null)
            {
                glVertexAttribI4uiPtr = (glVertexAttribI4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4ui"), typeof(glVertexAttribI4uiFunc));
            }
            glVertexAttribI4uiPtr(index, x, y, z, w);
        }
        public static void glVertexAttribI1iv(uint index, IntPtr v)
        {
            if (glVertexAttribI1ivPtr == null)
            {
                glVertexAttribI1ivPtr = (glVertexAttribI1ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI1iv"), typeof(glVertexAttribI1ivFunc));
            }
            glVertexAttribI1ivPtr(index, v);
        }
        public static void glVertexAttribI2iv(uint index, IntPtr v)
        {
            if (glVertexAttribI2ivPtr == null)
            {
                glVertexAttribI2ivPtr = (glVertexAttribI2ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI2iv"), typeof(glVertexAttribI2ivFunc));
            }
            glVertexAttribI2ivPtr(index, v);
        }
        public static void glVertexAttribI3iv(uint index, IntPtr v)
        {
            if (glVertexAttribI3ivPtr == null)
            {
                glVertexAttribI3ivPtr = (glVertexAttribI3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI3iv"), typeof(glVertexAttribI3ivFunc));
            }
            glVertexAttribI3ivPtr(index, v);
        }
        public static void glVertexAttribI4iv(uint index, IntPtr v)
        {
            if (glVertexAttribI4ivPtr == null)
            {
                glVertexAttribI4ivPtr = (glVertexAttribI4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4iv"), typeof(glVertexAttribI4ivFunc));
            }
            glVertexAttribI4ivPtr(index, v);
        }
        public static void glVertexAttribI1uiv(uint index, IntPtr v)
        {
            if (glVertexAttribI1uivPtr == null)
            {
                glVertexAttribI1uivPtr = (glVertexAttribI1uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI1uiv"), typeof(glVertexAttribI1uivFunc));
            }
            glVertexAttribI1uivPtr(index, v);
        }
        public static void glVertexAttribI2uiv(uint index, IntPtr v)
        {
            if (glVertexAttribI2uivPtr == null)
            {
                glVertexAttribI2uivPtr = (glVertexAttribI2uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI2uiv"), typeof(glVertexAttribI2uivFunc));
            }
            glVertexAttribI2uivPtr(index, v);
        }
        public static void glVertexAttribI3uiv(uint index, IntPtr v)
        {
            if (glVertexAttribI3uivPtr == null)
            {
                glVertexAttribI3uivPtr = (glVertexAttribI3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI3uiv"), typeof(glVertexAttribI3uivFunc));
            }
            glVertexAttribI3uivPtr(index, v);
        }
        public static void glVertexAttribI4uiv(uint index, IntPtr v)
        {
            if (glVertexAttribI4uivPtr == null)
            {
                glVertexAttribI4uivPtr = (glVertexAttribI4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4uiv"), typeof(glVertexAttribI4uivFunc));
            }
            glVertexAttribI4uivPtr(index, v);
        }
        public static void glVertexAttribI4bv(uint index, IntPtr v)
        {
            if (glVertexAttribI4bvPtr == null)
            {
                glVertexAttribI4bvPtr = (glVertexAttribI4bvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4bv"), typeof(glVertexAttribI4bvFunc));
            }
            glVertexAttribI4bvPtr(index, v);
        }
        public static void glVertexAttribI4sv(uint index, IntPtr v)
        {
            if (glVertexAttribI4svPtr == null)
            {
                glVertexAttribI4svPtr = (glVertexAttribI4svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4sv"), typeof(glVertexAttribI4svFunc));
            }
            glVertexAttribI4svPtr(index, v);
        }
        public static void glVertexAttribI4ubv(uint index, IntPtr v)
        {
            if (glVertexAttribI4ubvPtr == null)
            {
                glVertexAttribI4ubvPtr = (glVertexAttribI4ubvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4ubv"), typeof(glVertexAttribI4ubvFunc));
            }
            glVertexAttribI4ubvPtr(index, v);
        }
        public static void glVertexAttribI4usv(uint index, IntPtr v)
        {
            if (glVertexAttribI4usvPtr == null)
            {
                glVertexAttribI4usvPtr = (glVertexAttribI4usvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4usv"), typeof(glVertexAttribI4usvFunc));
            }
            glVertexAttribI4usvPtr(index, v);
        }
        public static void glGetUniformuiv(uint program, int location, IntPtr @params)
        {
            if (glGetUniformuivPtr == null)
            {
                glGetUniformuivPtr = (glGetUniformuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformuiv"), typeof(glGetUniformuivFunc));
            }
            glGetUniformuivPtr(program, location, @params);
        }
        public static void glBindFragDataLocation(uint program, uint color, IntPtr name)
        {
            if (glBindFragDataLocationPtr == null)
            {
                glBindFragDataLocationPtr = (glBindFragDataLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindFragDataLocation"), typeof(glBindFragDataLocationFunc));
            }
            glBindFragDataLocationPtr(program, color, name);
        }
        public static int glGetFragDataLocation(uint program, IntPtr name)
        {
            if (glGetFragDataLocationPtr == null)
            {
                glGetFragDataLocationPtr = (glGetFragDataLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFragDataLocation"), typeof(glGetFragDataLocationFunc));
            }
            return glGetFragDataLocationPtr(program, name);
        }
        public static void glUniform1ui(int location, uint v0)
        {
            if (glUniform1uiPtr == null)
            {
                glUniform1uiPtr = (glUniform1uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1ui"), typeof(glUniform1uiFunc));
            }
            glUniform1uiPtr(location, v0);
        }
        public static void glUniform2ui(int location, uint v0, uint v1)
        {
            if (glUniform2uiPtr == null)
            {
                glUniform2uiPtr = (glUniform2uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2ui"), typeof(glUniform2uiFunc));
            }
            glUniform2uiPtr(location, v0, v1);
        }
        public static void glUniform3ui(int location, uint v0, uint v1, uint v2)
        {
            if (glUniform3uiPtr == null)
            {
                glUniform3uiPtr = (glUniform3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3ui"), typeof(glUniform3uiFunc));
            }
            glUniform3uiPtr(location, v0, v1, v2);
        }
        public static void glUniform4ui(int location, uint v0, uint v1, uint v2, uint v3)
        {
            if (glUniform4uiPtr == null)
            {
                glUniform4uiPtr = (glUniform4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4ui"), typeof(glUniform4uiFunc));
            }
            glUniform4uiPtr(location, v0, v1, v2, v3);
        }
        public static void glUniform1uiv(int location, int count, IntPtr value)
        {
            if (glUniform1uivPtr == null)
            {
                glUniform1uivPtr = (glUniform1uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1uiv"), typeof(glUniform1uivFunc));
            }
            glUniform1uivPtr(location, count, value);
        }
        public static void glUniform2uiv(int location, int count, IntPtr value)
        {
            if (glUniform2uivPtr == null)
            {
                glUniform2uivPtr = (glUniform2uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2uiv"), typeof(glUniform2uivFunc));
            }
            glUniform2uivPtr(location, count, value);
        }
        public static void glUniform3uiv(int location, int count, IntPtr value)
        {
            if (glUniform3uivPtr == null)
            {
                glUniform3uivPtr = (glUniform3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3uiv"), typeof(glUniform3uivFunc));
            }
            glUniform3uivPtr(location, count, value);
        }
        public static void glUniform4uiv(int location, int count, IntPtr value)
        {
            if (glUniform4uivPtr == null)
            {
                glUniform4uivPtr = (glUniform4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4uiv"), typeof(glUniform4uivFunc));
            }
            glUniform4uivPtr(location, count, value);
        }
        public static void glTexParameterIiv(uint target, uint pname, IntPtr @params)
        {
            if (glTexParameterIivPtr == null)
            {
                glTexParameterIivPtr = (glTexParameterIivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterIiv"), typeof(glTexParameterIivFunc));
            }
            glTexParameterIivPtr(target, pname, @params);
        }
        public static void glTexParameterIuiv(uint target, uint pname, IntPtr @params)
        {
            if (glTexParameterIuivPtr == null)
            {
                glTexParameterIuivPtr = (glTexParameterIuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterIuiv"), typeof(glTexParameterIuivFunc));
            }
            glTexParameterIuivPtr(target, pname, @params);
        }
        public static void glGetTexParameterIiv(uint target, uint pname, IntPtr @params)
        {
            if (glGetTexParameterIivPtr == null)
            {
                glGetTexParameterIivPtr = (glGetTexParameterIivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameterIiv"), typeof(glGetTexParameterIivFunc));
            }
            glGetTexParameterIivPtr(target, pname, @params);
        }
        public static void glGetTexParameterIuiv(uint target, uint pname, IntPtr @params)
        {
            if (glGetTexParameterIuivPtr == null)
            {
                glGetTexParameterIuivPtr = (glGetTexParameterIuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameterIuiv"), typeof(glGetTexParameterIuivFunc));
            }
            glGetTexParameterIuivPtr(target, pname, @params);
        }
        public static void glClearBufferiv(uint buffer, int drawbuffer, IntPtr value)
        {
            if (glClearBufferivPtr == null)
            {
                glClearBufferivPtr = (glClearBufferivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearBufferiv"), typeof(glClearBufferivFunc));
            }
            glClearBufferivPtr(buffer, drawbuffer, value);
        }
        public static void glClearBufferuiv(uint buffer, int drawbuffer, IntPtr value)
        {
            if (glClearBufferuivPtr == null)
            {
                glClearBufferuivPtr = (glClearBufferuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearBufferuiv"), typeof(glClearBufferuivFunc));
            }
            glClearBufferuivPtr(buffer, drawbuffer, value);
        }
        public static void glClearBufferfv(uint buffer, int drawbuffer, IntPtr value)
        {
            if (glClearBufferfvPtr == null)
            {
                glClearBufferfvPtr = (glClearBufferfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearBufferfv"), typeof(glClearBufferfvFunc));
            }
            glClearBufferfvPtr(buffer, drawbuffer, value);
        }
        public static void glClearBufferfi(uint buffer, int drawbuffer, float depth, int stencil)
        {
            if (glClearBufferfiPtr == null)
            {
                glClearBufferfiPtr = (glClearBufferfiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearBufferfi"), typeof(glClearBufferfiFunc));
            }
            glClearBufferfiPtr(buffer, drawbuffer, depth, stencil);
        }
        public static IntPtr glGetStringi(uint name, uint index)
        {
            if (glGetStringiPtr == null)
            {
                glGetStringiPtr = (glGetStringiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetStringi"), typeof(glGetStringiFunc));
            }
            return glGetStringiPtr(name, index);
        }
        public static bool glIsRenderbuffer(uint renderbuffer)
        {
            if (glIsRenderbufferPtr == null)
            {
                glIsRenderbufferPtr = (glIsRenderbufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsRenderbuffer"), typeof(glIsRenderbufferFunc));
            }
            return glIsRenderbufferPtr(renderbuffer);
        }
        public static void glBindRenderbuffer(uint target, uint renderbuffer)
        {
            if (glBindRenderbufferPtr == null)
            {
                glBindRenderbufferPtr = (glBindRenderbufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindRenderbuffer"), typeof(glBindRenderbufferFunc));
            }
            glBindRenderbufferPtr(target, renderbuffer);
        }
        public static void glDeleteRenderbuffers(int n, IntPtr renderbuffers)
        {
            if (glDeleteRenderbuffersPtr == null)
            {
                glDeleteRenderbuffersPtr = (glDeleteRenderbuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteRenderbuffers"), typeof(glDeleteRenderbuffersFunc));
            }
            glDeleteRenderbuffersPtr(n, renderbuffers);
        }
        public static void glGenRenderbuffers(int n, IntPtr renderbuffers)
        {
            if (glGenRenderbuffersPtr == null)
            {
                glGenRenderbuffersPtr = (glGenRenderbuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenRenderbuffers"), typeof(glGenRenderbuffersFunc));
            }
            glGenRenderbuffersPtr(n, renderbuffers);
        }
        public static void glRenderbufferStorage(uint target, uint internalformat, int width, int height)
        {
            if (glRenderbufferStoragePtr == null)
            {
                glRenderbufferStoragePtr = (glRenderbufferStorageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRenderbufferStorage"), typeof(glRenderbufferStorageFunc));
            }
            glRenderbufferStoragePtr(target, internalformat, width, height);
        }
        public static void glGetRenderbufferParameteriv(uint target, uint pname, IntPtr @params)
        {
            if (glGetRenderbufferParameterivPtr == null)
            {
                glGetRenderbufferParameterivPtr = (glGetRenderbufferParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetRenderbufferParameteriv"), typeof(glGetRenderbufferParameterivFunc));
            }
            glGetRenderbufferParameterivPtr(target, pname, @params);
        }
        public static bool glIsFramebuffer(uint framebuffer)
        {
            if (glIsFramebufferPtr == null)
            {
                glIsFramebufferPtr = (glIsFramebufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsFramebuffer"), typeof(glIsFramebufferFunc));
            }
            return glIsFramebufferPtr(framebuffer);
        }
        public static void glBindFramebuffer(uint target, uint framebuffer)
        {
            if (glBindFramebufferPtr == null)
            {
                glBindFramebufferPtr = (glBindFramebufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindFramebuffer"), typeof(glBindFramebufferFunc));
            }
            glBindFramebufferPtr(target, framebuffer);
        }
        public static void glDeleteFramebuffers(int n, IntPtr framebuffers)
        {
            if (glDeleteFramebuffersPtr == null)
            {
                glDeleteFramebuffersPtr = (glDeleteFramebuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteFramebuffers"), typeof(glDeleteFramebuffersFunc));
            }
            glDeleteFramebuffersPtr(n, framebuffers);
        }
        public static void glGenFramebuffers(int n, IntPtr framebuffers)
        {
            if (glGenFramebuffersPtr == null)
            {
                glGenFramebuffersPtr = (glGenFramebuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenFramebuffers"), typeof(glGenFramebuffersFunc));
            }
            glGenFramebuffersPtr(n, framebuffers);
        }
        public static uint glCheckFramebufferStatus(uint target)
        {
            if (glCheckFramebufferStatusPtr == null)
            {
                glCheckFramebufferStatusPtr = (glCheckFramebufferStatusFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCheckFramebufferStatus"), typeof(glCheckFramebufferStatusFunc));
            }
            return glCheckFramebufferStatusPtr(target);
        }
        public static void glFramebufferTexture1D(uint target, uint attachment, uint textarget, uint texture, int level)
        {
            if (glFramebufferTexture1DPtr == null)
            {
                glFramebufferTexture1DPtr = (glFramebufferTexture1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferTexture1D"), typeof(glFramebufferTexture1DFunc));
            }
            glFramebufferTexture1DPtr(target, attachment, textarget, texture, level);
        }
        public static void glFramebufferTexture2D(uint target, uint attachment, uint textarget, uint texture, int level)
        {
            if (glFramebufferTexture2DPtr == null)
            {
                glFramebufferTexture2DPtr = (glFramebufferTexture2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferTexture2D"), typeof(glFramebufferTexture2DFunc));
            }
            glFramebufferTexture2DPtr(target, attachment, textarget, texture, level);
        }
        public static void glFramebufferTexture3D(uint target, uint attachment, uint textarget, uint texture, int level, int zoffset)
        {
            if (glFramebufferTexture3DPtr == null)
            {
                glFramebufferTexture3DPtr = (glFramebufferTexture3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferTexture3D"), typeof(glFramebufferTexture3DFunc));
            }
            glFramebufferTexture3DPtr(target, attachment, textarget, texture, level, zoffset);
        }
        public static void glFramebufferRenderbuffer(uint target, uint attachment, uint renderbuffertarget, uint renderbuffer)
        {
            if (glFramebufferRenderbufferPtr == null)
            {
                glFramebufferRenderbufferPtr = (glFramebufferRenderbufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferRenderbuffer"), typeof(glFramebufferRenderbufferFunc));
            }
            glFramebufferRenderbufferPtr(target, attachment, renderbuffertarget, renderbuffer);
        }
        public static void glGetFramebufferAttachmentParameteriv(uint target, uint attachment, uint pname, IntPtr @params)
        {
            if (glGetFramebufferAttachmentParameterivPtr == null)
            {
                glGetFramebufferAttachmentParameterivPtr = (glGetFramebufferAttachmentParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFramebufferAttachmentParameteriv"), typeof(glGetFramebufferAttachmentParameterivFunc));
            }
            glGetFramebufferAttachmentParameterivPtr(target, attachment, pname, @params);
        }
        public static void glGenerateMipmap(uint target)
        {
            if (glGenerateMipmapPtr == null)
            {
                glGenerateMipmapPtr = (glGenerateMipmapFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenerateMipmap"), typeof(glGenerateMipmapFunc));
            }
            glGenerateMipmapPtr(target);
        }
        public static void glBlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter)
        {
            if (glBlitFramebufferPtr == null)
            {
                glBlitFramebufferPtr = (glBlitFramebufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlitFramebuffer"), typeof(glBlitFramebufferFunc));
            }
            glBlitFramebufferPtr(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        public static void glRenderbufferStorageMultisample(uint target, int samples, uint internalformat, int width, int height)
        {
            if (glRenderbufferStorageMultisamplePtr == null)
            {
                glRenderbufferStorageMultisamplePtr = (glRenderbufferStorageMultisampleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRenderbufferStorageMultisample"), typeof(glRenderbufferStorageMultisampleFunc));
            }
            glRenderbufferStorageMultisamplePtr(target, samples, internalformat, width, height);
        }
        public static void glFramebufferTextureLayer(uint target, uint attachment, uint texture, int level, int layer)
        {
            if (glFramebufferTextureLayerPtr == null)
            {
                glFramebufferTextureLayerPtr = (glFramebufferTextureLayerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferTextureLayer"), typeof(glFramebufferTextureLayerFunc));
            }
            glFramebufferTextureLayerPtr(target, attachment, texture, level, layer);
        }
        public static IntPtr glMapBufferRange(uint target, IntPtr offset, int length, uint access)
        {
            if (glMapBufferRangePtr == null)
            {
                glMapBufferRangePtr = (glMapBufferRangeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMapBufferRange"), typeof(glMapBufferRangeFunc));
            }
            return glMapBufferRangePtr(target, offset, length, access);
        }
        public static void glFlushMappedBufferRange(uint target, IntPtr offset, int length)
        {
            if (glFlushMappedBufferRangePtr == null)
            {
                glFlushMappedBufferRangePtr = (glFlushMappedBufferRangeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFlushMappedBufferRange"), typeof(glFlushMappedBufferRangeFunc));
            }
            glFlushMappedBufferRangePtr(target, offset, length);
        }
        public static void glBindVertexArray(uint array)
        {
            if (glBindVertexArrayPtr == null)
            {
                glBindVertexArrayPtr = (glBindVertexArrayFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindVertexArray"), typeof(glBindVertexArrayFunc));
            }
            glBindVertexArrayPtr(array);
        }
        public static void glDeleteVertexArrays(int n, IntPtr arrays)
        {
            if (glDeleteVertexArraysPtr == null)
            {
                glDeleteVertexArraysPtr = (glDeleteVertexArraysFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteVertexArrays"), typeof(glDeleteVertexArraysFunc));
            }
            glDeleteVertexArraysPtr(n, arrays);
        }
        public static void glGenVertexArrays(int n, IntPtr arrays)
        {
            if (glGenVertexArraysPtr == null)
            {
                glGenVertexArraysPtr = (glGenVertexArraysFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenVertexArrays"), typeof(glGenVertexArraysFunc));
            }
            glGenVertexArraysPtr(n, arrays);
        }
        public static bool glIsVertexArray(uint array)
        {
            if (glIsVertexArrayPtr == null)
            {
                glIsVertexArrayPtr = (glIsVertexArrayFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsVertexArray"), typeof(glIsVertexArrayFunc));
            }
            return glIsVertexArrayPtr(array);
        }
        public static void glDrawArraysInstanced(uint mode, int first, int count, int instancecount)
        {
            if (glDrawArraysInstancedPtr == null)
            {
                glDrawArraysInstancedPtr = (glDrawArraysInstancedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawArraysInstanced"), typeof(glDrawArraysInstancedFunc));
            }
            glDrawArraysInstancedPtr(mode, first, count, instancecount);
        }
        public static void glDrawElementsInstanced(uint mode, int count, uint type, IntPtr indices, int instancecount)
        {
            if (glDrawElementsInstancedPtr == null)
            {
                glDrawElementsInstancedPtr = (glDrawElementsInstancedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElementsInstanced"), typeof(glDrawElementsInstancedFunc));
            }
            glDrawElementsInstancedPtr(mode, count, type, indices, instancecount);
        }
        public static void glTexBuffer(uint target, uint internalformat, uint buffer)
        {
            if (glTexBufferPtr == null)
            {
                glTexBufferPtr = (glTexBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexBuffer"), typeof(glTexBufferFunc));
            }
            glTexBufferPtr(target, internalformat, buffer);
        }
        public static void glPrimitiveRestartIndex(uint index)
        {
            if (glPrimitiveRestartIndexPtr == null)
            {
                glPrimitiveRestartIndexPtr = (glPrimitiveRestartIndexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPrimitiveRestartIndex"), typeof(glPrimitiveRestartIndexFunc));
            }
            glPrimitiveRestartIndexPtr(index);
        }
        public static void glCopyBufferSubData(uint readTarget, uint writeTarget, IntPtr readOffset, IntPtr writeOffset, int size)
        {
            if (glCopyBufferSubDataPtr == null)
            {
                glCopyBufferSubDataPtr = (glCopyBufferSubDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyBufferSubData"), typeof(glCopyBufferSubDataFunc));
            }
            glCopyBufferSubDataPtr(readTarget, writeTarget, readOffset, writeOffset, size);
        }
        public static void glGetUniformIndices(uint program, int uniformCount, IntPtr uniformNames, IntPtr uniformIndices)
        {
            if (glGetUniformIndicesPtr == null)
            {
                glGetUniformIndicesPtr = (glGetUniformIndicesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformIndices"), typeof(glGetUniformIndicesFunc));
            }
            glGetUniformIndicesPtr(program, uniformCount, uniformNames, uniformIndices);
        }
        public static void glGetActiveUniformsiv(uint program, int uniformCount, IntPtr uniformIndices, uint pname, IntPtr @params)
        {
            if (glGetActiveUniformsivPtr == null)
            {
                glGetActiveUniformsivPtr = (glGetActiveUniformsivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveUniformsiv"), typeof(glGetActiveUniformsivFunc));
            }
            glGetActiveUniformsivPtr(program, uniformCount, uniformIndices, pname, @params);
        }
        public static void glGetActiveUniformName(uint program, uint uniformIndex, int bufSize, IntPtr length, IntPtr uniformName)
        {
            if (glGetActiveUniformNamePtr == null)
            {
                glGetActiveUniformNamePtr = (glGetActiveUniformNameFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveUniformName"), typeof(glGetActiveUniformNameFunc));
            }
            glGetActiveUniformNamePtr(program, uniformIndex, bufSize, length, uniformName);
        }
        public static uint glGetUniformBlockIndex(uint program, IntPtr uniformBlockName)
        {
            if (glGetUniformBlockIndexPtr == null)
            {
                glGetUniformBlockIndexPtr = (glGetUniformBlockIndexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformBlockIndex"), typeof(glGetUniformBlockIndexFunc));
            }
            return glGetUniformBlockIndexPtr(program, uniformBlockName);
        }
        public static void glGetActiveUniformBlockiv(uint program, uint uniformBlockIndex, uint pname, IntPtr @params)
        {
            if (glGetActiveUniformBlockivPtr == null)
            {
                glGetActiveUniformBlockivPtr = (glGetActiveUniformBlockivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveUniformBlockiv"), typeof(glGetActiveUniformBlockivFunc));
            }
            glGetActiveUniformBlockivPtr(program, uniformBlockIndex, pname, @params);
        }
        public static void glGetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, IntPtr length, IntPtr uniformBlockName)
        {
            if (glGetActiveUniformBlockNamePtr == null)
            {
                glGetActiveUniformBlockNamePtr = (glGetActiveUniformBlockNameFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveUniformBlockName"), typeof(glGetActiveUniformBlockNameFunc));
            }
            glGetActiveUniformBlockNamePtr(program, uniformBlockIndex, bufSize, length, uniformBlockName);
        }
        public static void glUniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding)
        {
            if (glUniformBlockBindingPtr == null)
            {
                glUniformBlockBindingPtr = (glUniformBlockBindingFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformBlockBinding"), typeof(glUniformBlockBindingFunc));
            }
            glUniformBlockBindingPtr(program, uniformBlockIndex, uniformBlockBinding);
        }
        public static void glDrawElementsBaseVertex(uint mode, int count, uint type, IntPtr indices, int basevertex)
        {
            if (glDrawElementsBaseVertexPtr == null)
            {
                glDrawElementsBaseVertexPtr = (glDrawElementsBaseVertexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElementsBaseVertex"), typeof(glDrawElementsBaseVertexFunc));
            }
            glDrawElementsBaseVertexPtr(mode, count, type, indices, basevertex);
        }
        public static void glDrawRangeElementsBaseVertex(uint mode, uint start, uint end, int count, uint type, IntPtr indices, int basevertex)
        {
            if (glDrawRangeElementsBaseVertexPtr == null)
            {
                glDrawRangeElementsBaseVertexPtr = (glDrawRangeElementsBaseVertexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawRangeElementsBaseVertex"), typeof(glDrawRangeElementsBaseVertexFunc));
            }
            glDrawRangeElementsBaseVertexPtr(mode, start, end, count, type, indices, basevertex);
        }
        public static void glDrawElementsInstancedBaseVertex(uint mode, int count, uint type, IntPtr indices, int instancecount, int basevertex)
        {
            if (glDrawElementsInstancedBaseVertexPtr == null)
            {
                glDrawElementsInstancedBaseVertexPtr = (glDrawElementsInstancedBaseVertexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElementsInstancedBaseVertex"), typeof(glDrawElementsInstancedBaseVertexFunc));
            }
            glDrawElementsInstancedBaseVertexPtr(mode, count, type, indices, instancecount, basevertex);
        }
        public static void glMultiDrawElementsBaseVertex(uint mode, IntPtr count, uint type, IntPtr indices, int drawcount, IntPtr basevertex)
        {
            if (glMultiDrawElementsBaseVertexPtr == null)
            {
                glMultiDrawElementsBaseVertexPtr = (glMultiDrawElementsBaseVertexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiDrawElementsBaseVertex"), typeof(glMultiDrawElementsBaseVertexFunc));
            }
            glMultiDrawElementsBaseVertexPtr(mode, count, type, indices, drawcount, basevertex);
        }
        public static void glProvokingVertex(uint mode)
        {
            if (glProvokingVertexPtr == null)
            {
                glProvokingVertexPtr = (glProvokingVertexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProvokingVertex"), typeof(glProvokingVertexFunc));
            }
            glProvokingVertexPtr(mode);
        }
        public static IntPtr glFenceSync(uint condition, uint flags)
        {
            if (glFenceSyncPtr == null)
            {
                glFenceSyncPtr = (glFenceSyncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFenceSync"), typeof(glFenceSyncFunc));
            }
            return glFenceSyncPtr(condition, flags);
        }
        public static bool glIsSync(IntPtr sync)
        {
            if (glIsSyncPtr == null)
            {
                glIsSyncPtr = (glIsSyncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsSync"), typeof(glIsSyncFunc));
            }
            return glIsSyncPtr(sync);
        }
        public static void glDeleteSync(IntPtr sync)
        {
            if (glDeleteSyncPtr == null)
            {
                glDeleteSyncPtr = (glDeleteSyncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteSync"), typeof(glDeleteSyncFunc));
            }
            glDeleteSyncPtr(sync);
        }
        public static uint glClientWaitSync(IntPtr sync, uint flags, ulong timeout)
        {
            if (glClientWaitSyncPtr == null)
            {
                glClientWaitSyncPtr = (glClientWaitSyncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClientWaitSync"), typeof(glClientWaitSyncFunc));
            }
            return glClientWaitSyncPtr(sync, flags, timeout);
        }
        public static void glWaitSync(IntPtr sync, uint flags, ulong timeout)
        {
            if (glWaitSyncPtr == null)
            {
                glWaitSyncPtr = (glWaitSyncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWaitSync"), typeof(glWaitSyncFunc));
            }
            glWaitSyncPtr(sync, flags, timeout);
        }
        public static void glGetInteger64v(uint pname, IntPtr data)
        {
            if (glGetInteger64vPtr == null)
            {
                glGetInteger64vPtr = (glGetInteger64vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetInteger64v"), typeof(glGetInteger64vFunc));
            }
            glGetInteger64vPtr(pname, data);
        }
        public static void glGetSynciv(IntPtr sync, uint pname, int bufSize, IntPtr length, IntPtr values)
        {
            if (glGetSyncivPtr == null)
            {
                glGetSyncivPtr = (glGetSyncivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetSynciv"), typeof(glGetSyncivFunc));
            }
            glGetSyncivPtr(sync, pname, bufSize, length, values);
        }
        public static void glGetInteger64i_v(uint target, uint index, IntPtr data)
        {
            if (glGetInteger64i_vPtr == null)
            {
                glGetInteger64i_vPtr = (glGetInteger64i_vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetInteger64i_v"), typeof(glGetInteger64i_vFunc));
            }
            glGetInteger64i_vPtr(target, index, data);
        }
        public static void glGetBufferParameteri64v(uint target, uint pname, IntPtr @params)
        {
            if (glGetBufferParameteri64vPtr == null)
            {
                glGetBufferParameteri64vPtr = (glGetBufferParameteri64vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBufferParameteri64v"), typeof(glGetBufferParameteri64vFunc));
            }
            glGetBufferParameteri64vPtr(target, pname, @params);
        }
        public static void glFramebufferTexture(uint target, uint attachment, uint texture, int level)
        {
            if (glFramebufferTexturePtr == null)
            {
                glFramebufferTexturePtr = (glFramebufferTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferTexture"), typeof(glFramebufferTextureFunc));
            }
            glFramebufferTexturePtr(target, attachment, texture, level);
        }
        public static void glTexImage2DMultisample(uint target, int samples, uint internalformat, int width, int height, bool fixedsamplelocations)
        {
            if (glTexImage2DMultisamplePtr == null)
            {
                glTexImage2DMultisamplePtr = (glTexImage2DMultisampleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage2DMultisample"), typeof(glTexImage2DMultisampleFunc));
            }
            glTexImage2DMultisamplePtr(target, samples, internalformat, width, height, fixedsamplelocations);
        }
        public static void glTexImage3DMultisample(uint target, int samples, uint internalformat, int width, int height, int depth, bool fixedsamplelocations)
        {
            if (glTexImage3DMultisamplePtr == null)
            {
                glTexImage3DMultisamplePtr = (glTexImage3DMultisampleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage3DMultisample"), typeof(glTexImage3DMultisampleFunc));
            }
            glTexImage3DMultisamplePtr(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        public static void glGetMultisamplefv(uint pname, uint index, IntPtr val)
        {
            if (glGetMultisamplefvPtr == null)
            {
                glGetMultisamplefvPtr = (glGetMultisamplefvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetMultisamplefv"), typeof(glGetMultisamplefvFunc));
            }
            glGetMultisamplefvPtr(pname, index, val);
        }
        public static void glSampleMaski(uint index, uint mask)
        {
            if (glSampleMaskiPtr == null)
            {
                glSampleMaskiPtr = (glSampleMaskiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSampleMaski"), typeof(glSampleMaskiFunc));
            }
            glSampleMaskiPtr(index, mask);
        }
        public static void glBindFragDataLocationIndexed(uint program, uint colorNumber, uint index, IntPtr name)
        {
            if (glBindFragDataLocationIndexedPtr == null)
            {
                glBindFragDataLocationIndexedPtr = (glBindFragDataLocationIndexedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindFragDataLocationIndexed"), typeof(glBindFragDataLocationIndexedFunc));
            }
            glBindFragDataLocationIndexedPtr(program, colorNumber, index, name);
        }
        public static int glGetFragDataIndex(uint program, IntPtr name)
        {
            if (glGetFragDataIndexPtr == null)
            {
                glGetFragDataIndexPtr = (glGetFragDataIndexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFragDataIndex"), typeof(glGetFragDataIndexFunc));
            }
            return glGetFragDataIndexPtr(program, name);
        }
        public static void glGenSamplers(int count, IntPtr samplers)
        {
            if (glGenSamplersPtr == null)
            {
                glGenSamplersPtr = (glGenSamplersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenSamplers"), typeof(glGenSamplersFunc));
            }
            glGenSamplersPtr(count, samplers);
        }
        public static void glDeleteSamplers(int count, IntPtr samplers)
        {
            if (glDeleteSamplersPtr == null)
            {
                glDeleteSamplersPtr = (glDeleteSamplersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteSamplers"), typeof(glDeleteSamplersFunc));
            }
            glDeleteSamplersPtr(count, samplers);
        }
        public static bool glIsSampler(uint sampler)
        {
            if (glIsSamplerPtr == null)
            {
                glIsSamplerPtr = (glIsSamplerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsSampler"), typeof(glIsSamplerFunc));
            }
            return glIsSamplerPtr(sampler);
        }
        public static void glBindSampler(uint unit, uint sampler)
        {
            if (glBindSamplerPtr == null)
            {
                glBindSamplerPtr = (glBindSamplerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindSampler"), typeof(glBindSamplerFunc));
            }
            glBindSamplerPtr(unit, sampler);
        }
        public static void glSamplerParameteri(uint sampler, uint pname, int param)
        {
            if (glSamplerParameteriPtr == null)
            {
                glSamplerParameteriPtr = (glSamplerParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSamplerParameteri"), typeof(glSamplerParameteriFunc));
            }
            glSamplerParameteriPtr(sampler, pname, param);
        }
        public static void glSamplerParameteriv(uint sampler, uint pname, IntPtr param)
        {
            if (glSamplerParameterivPtr == null)
            {
                glSamplerParameterivPtr = (glSamplerParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSamplerParameteriv"), typeof(glSamplerParameterivFunc));
            }
            glSamplerParameterivPtr(sampler, pname, param);
        }
        public static void glSamplerParameterf(uint sampler, uint pname, float param)
        {
            if (glSamplerParameterfPtr == null)
            {
                glSamplerParameterfPtr = (glSamplerParameterfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSamplerParameterf"), typeof(glSamplerParameterfFunc));
            }
            glSamplerParameterfPtr(sampler, pname, param);
        }
        public static void glSamplerParameterfv(uint sampler, uint pname, IntPtr param)
        {
            if (glSamplerParameterfvPtr == null)
            {
                glSamplerParameterfvPtr = (glSamplerParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSamplerParameterfv"), typeof(glSamplerParameterfvFunc));
            }
            glSamplerParameterfvPtr(sampler, pname, param);
        }
        public static void glSamplerParameterIiv(uint sampler, uint pname, IntPtr param)
        {
            if (glSamplerParameterIivPtr == null)
            {
                glSamplerParameterIivPtr = (glSamplerParameterIivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSamplerParameterIiv"), typeof(glSamplerParameterIivFunc));
            }
            glSamplerParameterIivPtr(sampler, pname, param);
        }
        public static void glSamplerParameterIuiv(uint sampler, uint pname, IntPtr param)
        {
            if (glSamplerParameterIuivPtr == null)
            {
                glSamplerParameterIuivPtr = (glSamplerParameterIuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSamplerParameterIuiv"), typeof(glSamplerParameterIuivFunc));
            }
            glSamplerParameterIuivPtr(sampler, pname, param);
        }
        public static void glGetSamplerParameteriv(uint sampler, uint pname, IntPtr @params)
        {
            if (glGetSamplerParameterivPtr == null)
            {
                glGetSamplerParameterivPtr = (glGetSamplerParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetSamplerParameteriv"), typeof(glGetSamplerParameterivFunc));
            }
            glGetSamplerParameterivPtr(sampler, pname, @params);
        }
        public static void glGetSamplerParameterIiv(uint sampler, uint pname, IntPtr @params)
        {
            if (glGetSamplerParameterIivPtr == null)
            {
                glGetSamplerParameterIivPtr = (glGetSamplerParameterIivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetSamplerParameterIiv"), typeof(glGetSamplerParameterIivFunc));
            }
            glGetSamplerParameterIivPtr(sampler, pname, @params);
        }
        public static void glGetSamplerParameterfv(uint sampler, uint pname, IntPtr @params)
        {
            if (glGetSamplerParameterfvPtr == null)
            {
                glGetSamplerParameterfvPtr = (glGetSamplerParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetSamplerParameterfv"), typeof(glGetSamplerParameterfvFunc));
            }
            glGetSamplerParameterfvPtr(sampler, pname, @params);
        }
        public static void glGetSamplerParameterIuiv(uint sampler, uint pname, IntPtr @params)
        {
            if (glGetSamplerParameterIuivPtr == null)
            {
                glGetSamplerParameterIuivPtr = (glGetSamplerParameterIuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetSamplerParameterIuiv"), typeof(glGetSamplerParameterIuivFunc));
            }
            glGetSamplerParameterIuivPtr(sampler, pname, @params);
        }
        public static void glQueryCounter(uint id, uint target)
        {
            if (glQueryCounterPtr == null)
            {
                glQueryCounterPtr = (glQueryCounterFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glQueryCounter"), typeof(glQueryCounterFunc));
            }
            glQueryCounterPtr(id, target);
        }
        public static void glGetQueryObjecti64v(uint id, uint pname, IntPtr @params)
        {
            if (glGetQueryObjecti64vPtr == null)
            {
                glGetQueryObjecti64vPtr = (glGetQueryObjecti64vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetQueryObjecti64v"), typeof(glGetQueryObjecti64vFunc));
            }
            glGetQueryObjecti64vPtr(id, pname, @params);
        }
        public static void glGetQueryObjectui64v(uint id, uint pname, IntPtr @params)
        {
            if (glGetQueryObjectui64vPtr == null)
            {
                glGetQueryObjectui64vPtr = (glGetQueryObjectui64vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetQueryObjectui64v"), typeof(glGetQueryObjectui64vFunc));
            }
            glGetQueryObjectui64vPtr(id, pname, @params);
        }
        public static void glVertexAttribDivisor(uint index, uint divisor)
        {
            if (glVertexAttribDivisorPtr == null)
            {
                glVertexAttribDivisorPtr = (glVertexAttribDivisorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribDivisor"), typeof(glVertexAttribDivisorFunc));
            }
            glVertexAttribDivisorPtr(index, divisor);
        }
        public static void glVertexAttribP1ui(uint index, uint type, bool normalized, uint value)
        {
            if (glVertexAttribP1uiPtr == null)
            {
                glVertexAttribP1uiPtr = (glVertexAttribP1uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribP1ui"), typeof(glVertexAttribP1uiFunc));
            }
            glVertexAttribP1uiPtr(index, type, normalized, value);
        }
        public static void glVertexAttribP1uiv(uint index, uint type, bool normalized, IntPtr value)
        {
            if (glVertexAttribP1uivPtr == null)
            {
                glVertexAttribP1uivPtr = (glVertexAttribP1uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribP1uiv"), typeof(glVertexAttribP1uivFunc));
            }
            glVertexAttribP1uivPtr(index, type, normalized, value);
        }
        public static void glVertexAttribP2ui(uint index, uint type, bool normalized, uint value)
        {
            if (glVertexAttribP2uiPtr == null)
            {
                glVertexAttribP2uiPtr = (glVertexAttribP2uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribP2ui"), typeof(glVertexAttribP2uiFunc));
            }
            glVertexAttribP2uiPtr(index, type, normalized, value);
        }
        public static void glVertexAttribP2uiv(uint index, uint type, bool normalized, IntPtr value)
        {
            if (glVertexAttribP2uivPtr == null)
            {
                glVertexAttribP2uivPtr = (glVertexAttribP2uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribP2uiv"), typeof(glVertexAttribP2uivFunc));
            }
            glVertexAttribP2uivPtr(index, type, normalized, value);
        }
        public static void glVertexAttribP3ui(uint index, uint type, bool normalized, uint value)
        {
            if (glVertexAttribP3uiPtr == null)
            {
                glVertexAttribP3uiPtr = (glVertexAttribP3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribP3ui"), typeof(glVertexAttribP3uiFunc));
            }
            glVertexAttribP3uiPtr(index, type, normalized, value);
        }
        public static void glVertexAttribP3uiv(uint index, uint type, bool normalized, IntPtr value)
        {
            if (glVertexAttribP3uivPtr == null)
            {
                glVertexAttribP3uivPtr = (glVertexAttribP3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribP3uiv"), typeof(glVertexAttribP3uivFunc));
            }
            glVertexAttribP3uivPtr(index, type, normalized, value);
        }
        public static void glVertexAttribP4ui(uint index, uint type, bool normalized, uint value)
        {
            if (glVertexAttribP4uiPtr == null)
            {
                glVertexAttribP4uiPtr = (glVertexAttribP4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribP4ui"), typeof(glVertexAttribP4uiFunc));
            }
            glVertexAttribP4uiPtr(index, type, normalized, value);
        }
        public static void glVertexAttribP4uiv(uint index, uint type, bool normalized, IntPtr value)
        {
            if (glVertexAttribP4uivPtr == null)
            {
                glVertexAttribP4uivPtr = (glVertexAttribP4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribP4uiv"), typeof(glVertexAttribP4uivFunc));
            }
            glVertexAttribP4uivPtr(index, type, normalized, value);
        }
        public static void glVertexP2ui(uint type, uint value)
        {
            if (glVertexP2uiPtr == null)
            {
                glVertexP2uiPtr = (glVertexP2uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexP2ui"), typeof(glVertexP2uiFunc));
            }
            glVertexP2uiPtr(type, value);
        }
        public static void glVertexP2uiv(uint type, IntPtr value)
        {
            if (glVertexP2uivPtr == null)
            {
                glVertexP2uivPtr = (glVertexP2uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexP2uiv"), typeof(glVertexP2uivFunc));
            }
            glVertexP2uivPtr(type, value);
        }
        public static void glVertexP3ui(uint type, uint value)
        {
            if (glVertexP3uiPtr == null)
            {
                glVertexP3uiPtr = (glVertexP3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexP3ui"), typeof(glVertexP3uiFunc));
            }
            glVertexP3uiPtr(type, value);
        }
        public static void glVertexP3uiv(uint type, IntPtr value)
        {
            if (glVertexP3uivPtr == null)
            {
                glVertexP3uivPtr = (glVertexP3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexP3uiv"), typeof(glVertexP3uivFunc));
            }
            glVertexP3uivPtr(type, value);
        }
        public static void glVertexP4ui(uint type, uint value)
        {
            if (glVertexP4uiPtr == null)
            {
                glVertexP4uiPtr = (glVertexP4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexP4ui"), typeof(glVertexP4uiFunc));
            }
            glVertexP4uiPtr(type, value);
        }
        public static void glVertexP4uiv(uint type, IntPtr value)
        {
            if (glVertexP4uivPtr == null)
            {
                glVertexP4uivPtr = (glVertexP4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexP4uiv"), typeof(glVertexP4uivFunc));
            }
            glVertexP4uivPtr(type, value);
        }
        public static void glTexCoordP1ui(uint type, uint coords)
        {
            if (glTexCoordP1uiPtr == null)
            {
                glTexCoordP1uiPtr = (glTexCoordP1uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordP1ui"), typeof(glTexCoordP1uiFunc));
            }
            glTexCoordP1uiPtr(type, coords);
        }
        public static void glTexCoordP1uiv(uint type, IntPtr coords)
        {
            if (glTexCoordP1uivPtr == null)
            {
                glTexCoordP1uivPtr = (glTexCoordP1uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordP1uiv"), typeof(glTexCoordP1uivFunc));
            }
            glTexCoordP1uivPtr(type, coords);
        }
        public static void glTexCoordP2ui(uint type, uint coords)
        {
            if (glTexCoordP2uiPtr == null)
            {
                glTexCoordP2uiPtr = (glTexCoordP2uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordP2ui"), typeof(glTexCoordP2uiFunc));
            }
            glTexCoordP2uiPtr(type, coords);
        }
        public static void glTexCoordP2uiv(uint type, IntPtr coords)
        {
            if (glTexCoordP2uivPtr == null)
            {
                glTexCoordP2uivPtr = (glTexCoordP2uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordP2uiv"), typeof(glTexCoordP2uivFunc));
            }
            glTexCoordP2uivPtr(type, coords);
        }
        public static void glTexCoordP3ui(uint type, uint coords)
        {
            if (glTexCoordP3uiPtr == null)
            {
                glTexCoordP3uiPtr = (glTexCoordP3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordP3ui"), typeof(glTexCoordP3uiFunc));
            }
            glTexCoordP3uiPtr(type, coords);
        }
        public static void glTexCoordP3uiv(uint type, IntPtr coords)
        {
            if (glTexCoordP3uivPtr == null)
            {
                glTexCoordP3uivPtr = (glTexCoordP3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordP3uiv"), typeof(glTexCoordP3uivFunc));
            }
            glTexCoordP3uivPtr(type, coords);
        }
        public static void glTexCoordP4ui(uint type, uint coords)
        {
            if (glTexCoordP4uiPtr == null)
            {
                glTexCoordP4uiPtr = (glTexCoordP4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordP4ui"), typeof(glTexCoordP4uiFunc));
            }
            glTexCoordP4uiPtr(type, coords);
        }
        public static void glTexCoordP4uiv(uint type, IntPtr coords)
        {
            if (glTexCoordP4uivPtr == null)
            {
                glTexCoordP4uivPtr = (glTexCoordP4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordP4uiv"), typeof(glTexCoordP4uivFunc));
            }
            glTexCoordP4uivPtr(type, coords);
        }
        public static void glMultiTexCoordP1ui(uint texture, uint type, uint coords)
        {
            if (glMultiTexCoordP1uiPtr == null)
            {
                glMultiTexCoordP1uiPtr = (glMultiTexCoordP1uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoordP1ui"), typeof(glMultiTexCoordP1uiFunc));
            }
            glMultiTexCoordP1uiPtr(texture, type, coords);
        }
        public static void glMultiTexCoordP1uiv(uint texture, uint type, IntPtr coords)
        {
            if (glMultiTexCoordP1uivPtr == null)
            {
                glMultiTexCoordP1uivPtr = (glMultiTexCoordP1uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoordP1uiv"), typeof(glMultiTexCoordP1uivFunc));
            }
            glMultiTexCoordP1uivPtr(texture, type, coords);
        }
        public static void glMultiTexCoordP2ui(uint texture, uint type, uint coords)
        {
            if (glMultiTexCoordP2uiPtr == null)
            {
                glMultiTexCoordP2uiPtr = (glMultiTexCoordP2uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoordP2ui"), typeof(glMultiTexCoordP2uiFunc));
            }
            glMultiTexCoordP2uiPtr(texture, type, coords);
        }
        public static void glMultiTexCoordP2uiv(uint texture, uint type, IntPtr coords)
        {
            if (glMultiTexCoordP2uivPtr == null)
            {
                glMultiTexCoordP2uivPtr = (glMultiTexCoordP2uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoordP2uiv"), typeof(glMultiTexCoordP2uivFunc));
            }
            glMultiTexCoordP2uivPtr(texture, type, coords);
        }
        public static void glMultiTexCoordP3ui(uint texture, uint type, uint coords)
        {
            if (glMultiTexCoordP3uiPtr == null)
            {
                glMultiTexCoordP3uiPtr = (glMultiTexCoordP3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoordP3ui"), typeof(glMultiTexCoordP3uiFunc));
            }
            glMultiTexCoordP3uiPtr(texture, type, coords);
        }
        public static void glMultiTexCoordP3uiv(uint texture, uint type, IntPtr coords)
        {
            if (glMultiTexCoordP3uivPtr == null)
            {
                glMultiTexCoordP3uivPtr = (glMultiTexCoordP3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoordP3uiv"), typeof(glMultiTexCoordP3uivFunc));
            }
            glMultiTexCoordP3uivPtr(texture, type, coords);
        }
        public static void glMultiTexCoordP4ui(uint texture, uint type, uint coords)
        {
            if (glMultiTexCoordP4uiPtr == null)
            {
                glMultiTexCoordP4uiPtr = (glMultiTexCoordP4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoordP4ui"), typeof(glMultiTexCoordP4uiFunc));
            }
            glMultiTexCoordP4uiPtr(texture, type, coords);
        }
        public static void glMultiTexCoordP4uiv(uint texture, uint type, IntPtr coords)
        {
            if (glMultiTexCoordP4uivPtr == null)
            {
                glMultiTexCoordP4uivPtr = (glMultiTexCoordP4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoordP4uiv"), typeof(glMultiTexCoordP4uivFunc));
            }
            glMultiTexCoordP4uivPtr(texture, type, coords);
        }
        public static void glNormalP3ui(uint type, uint coords)
        {
            if (glNormalP3uiPtr == null)
            {
                glNormalP3uiPtr = (glNormalP3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormalP3ui"), typeof(glNormalP3uiFunc));
            }
            glNormalP3uiPtr(type, coords);
        }
        public static void glNormalP3uiv(uint type, IntPtr coords)
        {
            if (glNormalP3uivPtr == null)
            {
                glNormalP3uivPtr = (glNormalP3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormalP3uiv"), typeof(glNormalP3uivFunc));
            }
            glNormalP3uivPtr(type, coords);
        }
        public static void glColorP3ui(uint type, uint color)
        {
            if (glColorP3uiPtr == null)
            {
                glColorP3uiPtr = (glColorP3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorP3ui"), typeof(glColorP3uiFunc));
            }
            glColorP3uiPtr(type, color);
        }
        public static void glColorP3uiv(uint type, IntPtr color)
        {
            if (glColorP3uivPtr == null)
            {
                glColorP3uivPtr = (glColorP3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorP3uiv"), typeof(glColorP3uivFunc));
            }
            glColorP3uivPtr(type, color);
        }
        public static void glColorP4ui(uint type, uint color)
        {
            if (glColorP4uiPtr == null)
            {
                glColorP4uiPtr = (glColorP4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorP4ui"), typeof(glColorP4uiFunc));
            }
            glColorP4uiPtr(type, color);
        }
        public static void glColorP4uiv(uint type, IntPtr color)
        {
            if (glColorP4uivPtr == null)
            {
                glColorP4uivPtr = (glColorP4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorP4uiv"), typeof(glColorP4uivFunc));
            }
            glColorP4uivPtr(type, color);
        }
        public static void glSecondaryColorP3ui(uint type, uint color)
        {
            if (glSecondaryColorP3uiPtr == null)
            {
                glSecondaryColorP3uiPtr = (glSecondaryColorP3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColorP3ui"), typeof(glSecondaryColorP3uiFunc));
            }
            glSecondaryColorP3uiPtr(type, color);
        }
        public static void glSecondaryColorP3uiv(uint type, IntPtr color)
        {
            if (glSecondaryColorP3uivPtr == null)
            {
                glSecondaryColorP3uivPtr = (glSecondaryColorP3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColorP3uiv"), typeof(glSecondaryColorP3uivFunc));
            }
            glSecondaryColorP3uivPtr(type, color);
        }
        public static void glMinSampleShading(float value)
        {
            if (glMinSampleShadingPtr == null)
            {
                glMinSampleShadingPtr = (glMinSampleShadingFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMinSampleShading"), typeof(glMinSampleShadingFunc));
            }
            glMinSampleShadingPtr(value);
        }
        public static void glBlendEquationi(uint buf, uint mode)
        {
            if (glBlendEquationiPtr == null)
            {
                glBlendEquationiPtr = (glBlendEquationiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendEquationi"), typeof(glBlendEquationiFunc));
            }
            glBlendEquationiPtr(buf, mode);
        }
        public static void glBlendEquationSeparatei(uint buf, uint modeRGB, uint modeAlpha)
        {
            if (glBlendEquationSeparateiPtr == null)
            {
                glBlendEquationSeparateiPtr = (glBlendEquationSeparateiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendEquationSeparatei"), typeof(glBlendEquationSeparateiFunc));
            }
            glBlendEquationSeparateiPtr(buf, modeRGB, modeAlpha);
        }
        public static void glBlendFunci(uint buf, uint src, uint dst)
        {
            if (glBlendFunciPtr == null)
            {
                glBlendFunciPtr = (glBlendFunciFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendFunci"), typeof(glBlendFunciFunc));
            }
            glBlendFunciPtr(buf, src, dst);
        }
        public static void glBlendFuncSeparatei(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha)
        {
            if (glBlendFuncSeparateiPtr == null)
            {
                glBlendFuncSeparateiPtr = (glBlendFuncSeparateiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendFuncSeparatei"), typeof(glBlendFuncSeparateiFunc));
            }
            glBlendFuncSeparateiPtr(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        }
        public static void glDrawArraysIndirect(uint mode, IntPtr indirect)
        {
            if (glDrawArraysIndirectPtr == null)
            {
                glDrawArraysIndirectPtr = (glDrawArraysIndirectFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawArraysIndirect"), typeof(glDrawArraysIndirectFunc));
            }
            glDrawArraysIndirectPtr(mode, indirect);
        }
        public static void glDrawElementsIndirect(uint mode, uint type, IntPtr indirect)
        {
            if (glDrawElementsIndirectPtr == null)
            {
                glDrawElementsIndirectPtr = (glDrawElementsIndirectFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElementsIndirect"), typeof(glDrawElementsIndirectFunc));
            }
            glDrawElementsIndirectPtr(mode, type, indirect);
        }
        public static void glUniform1d(int location, double x)
        {
            if (glUniform1dPtr == null)
            {
                glUniform1dPtr = (glUniform1dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1d"), typeof(glUniform1dFunc));
            }
            glUniform1dPtr(location, x);
        }
        public static void glUniform2d(int location, double x, double y)
        {
            if (glUniform2dPtr == null)
            {
                glUniform2dPtr = (glUniform2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2d"), typeof(glUniform2dFunc));
            }
            glUniform2dPtr(location, x, y);
        }
        public static void glUniform3d(int location, double x, double y, double z)
        {
            if (glUniform3dPtr == null)
            {
                glUniform3dPtr = (glUniform3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3d"), typeof(glUniform3dFunc));
            }
            glUniform3dPtr(location, x, y, z);
        }
        public static void glUniform4d(int location, double x, double y, double z, double w)
        {
            if (glUniform4dPtr == null)
            {
                glUniform4dPtr = (glUniform4dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4d"), typeof(glUniform4dFunc));
            }
            glUniform4dPtr(location, x, y, z, w);
        }
        public static void glUniform1dv(int location, int count, IntPtr value)
        {
            if (glUniform1dvPtr == null)
            {
                glUniform1dvPtr = (glUniform1dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1dv"), typeof(glUniform1dvFunc));
            }
            glUniform1dvPtr(location, count, value);
        }
        public static void glUniform2dv(int location, int count, IntPtr value)
        {
            if (glUniform2dvPtr == null)
            {
                glUniform2dvPtr = (glUniform2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2dv"), typeof(glUniform2dvFunc));
            }
            glUniform2dvPtr(location, count, value);
        }
        public static void glUniform3dv(int location, int count, IntPtr value)
        {
            if (glUniform3dvPtr == null)
            {
                glUniform3dvPtr = (glUniform3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3dv"), typeof(glUniform3dvFunc));
            }
            glUniform3dvPtr(location, count, value);
        }
        public static void glUniform4dv(int location, int count, IntPtr value)
        {
            if (glUniform4dvPtr == null)
            {
                glUniform4dvPtr = (glUniform4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4dv"), typeof(glUniform4dvFunc));
            }
            glUniform4dvPtr(location, count, value);
        }
        public static void glUniformMatrix2dv(int location, int count, bool transpose, IntPtr value)
        {
            if (glUniformMatrix2dvPtr == null)
            {
                glUniformMatrix2dvPtr = (glUniformMatrix2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix2dv"), typeof(glUniformMatrix2dvFunc));
            }
            glUniformMatrix2dvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix3dv(int location, int count, bool transpose, IntPtr value)
        {
            if (glUniformMatrix3dvPtr == null)
            {
                glUniformMatrix3dvPtr = (glUniformMatrix3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix3dv"), typeof(glUniformMatrix3dvFunc));
            }
            glUniformMatrix3dvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix4dv(int location, int count, bool transpose, IntPtr value)
        {
            if (glUniformMatrix4dvPtr == null)
            {
                glUniformMatrix4dvPtr = (glUniformMatrix4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix4dv"), typeof(glUniformMatrix4dvFunc));
            }
            glUniformMatrix4dvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix2x3dv(int location, int count, bool transpose, IntPtr value)
        {
            if (glUniformMatrix2x3dvPtr == null)
            {
                glUniformMatrix2x3dvPtr = (glUniformMatrix2x3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix2x3dv"), typeof(glUniformMatrix2x3dvFunc));
            }
            glUniformMatrix2x3dvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix2x4dv(int location, int count, bool transpose, IntPtr value)
        {
            if (glUniformMatrix2x4dvPtr == null)
            {
                glUniformMatrix2x4dvPtr = (glUniformMatrix2x4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix2x4dv"), typeof(glUniformMatrix2x4dvFunc));
            }
            glUniformMatrix2x4dvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix3x2dv(int location, int count, bool transpose, IntPtr value)
        {
            if (glUniformMatrix3x2dvPtr == null)
            {
                glUniformMatrix3x2dvPtr = (glUniformMatrix3x2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix3x2dv"), typeof(glUniformMatrix3x2dvFunc));
            }
            glUniformMatrix3x2dvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix3x4dv(int location, int count, bool transpose, IntPtr value)
        {
            if (glUniformMatrix3x4dvPtr == null)
            {
                glUniformMatrix3x4dvPtr = (glUniformMatrix3x4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix3x4dv"), typeof(glUniformMatrix3x4dvFunc));
            }
            glUniformMatrix3x4dvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix4x2dv(int location, int count, bool transpose, IntPtr value)
        {
            if (glUniformMatrix4x2dvPtr == null)
            {
                glUniformMatrix4x2dvPtr = (glUniformMatrix4x2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix4x2dv"), typeof(glUniformMatrix4x2dvFunc));
            }
            glUniformMatrix4x2dvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix4x3dv(int location, int count, bool transpose, IntPtr value)
        {
            if (glUniformMatrix4x3dvPtr == null)
            {
                glUniformMatrix4x3dvPtr = (glUniformMatrix4x3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix4x3dv"), typeof(glUniformMatrix4x3dvFunc));
            }
            glUniformMatrix4x3dvPtr(location, count, transpose, value);
        }
        public static void glGetUniformdv(uint program, int location, IntPtr @params)
        {
            if (glGetUniformdvPtr == null)
            {
                glGetUniformdvPtr = (glGetUniformdvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformdv"), typeof(glGetUniformdvFunc));
            }
            glGetUniformdvPtr(program, location, @params);
        }
        public static int glGetSubroutineUniformLocation(uint program, uint shadertype, IntPtr name)
        {
            if (glGetSubroutineUniformLocationPtr == null)
            {
                glGetSubroutineUniformLocationPtr = (glGetSubroutineUniformLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetSubroutineUniformLocation"), typeof(glGetSubroutineUniformLocationFunc));
            }
            return glGetSubroutineUniformLocationPtr(program, shadertype, name);
        }
        public static uint glGetSubroutineIndex(uint program, uint shadertype, IntPtr name)
        {
            if (glGetSubroutineIndexPtr == null)
            {
                glGetSubroutineIndexPtr = (glGetSubroutineIndexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetSubroutineIndex"), typeof(glGetSubroutineIndexFunc));
            }
            return glGetSubroutineIndexPtr(program, shadertype, name);
        }
        public static void glGetActiveSubroutineUniformiv(uint program, uint shadertype, uint index, uint pname, IntPtr values)
        {
            if (glGetActiveSubroutineUniformivPtr == null)
            {
                glGetActiveSubroutineUniformivPtr = (glGetActiveSubroutineUniformivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveSubroutineUniformiv"), typeof(glGetActiveSubroutineUniformivFunc));
            }
            glGetActiveSubroutineUniformivPtr(program, shadertype, index, pname, values);
        }
        public static void glGetActiveSubroutineUniformName(uint program, uint shadertype, uint index, int bufsize, IntPtr length, IntPtr name)
        {
            if (glGetActiveSubroutineUniformNamePtr == null)
            {
                glGetActiveSubroutineUniformNamePtr = (glGetActiveSubroutineUniformNameFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveSubroutineUniformName"), typeof(glGetActiveSubroutineUniformNameFunc));
            }
            glGetActiveSubroutineUniformNamePtr(program, shadertype, index, bufsize, length, name);
        }
        public static void glGetActiveSubroutineName(uint program, uint shadertype, uint index, int bufsize, IntPtr length, IntPtr name)
        {
            if (glGetActiveSubroutineNamePtr == null)
            {
                glGetActiveSubroutineNamePtr = (glGetActiveSubroutineNameFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveSubroutineName"), typeof(glGetActiveSubroutineNameFunc));
            }
            glGetActiveSubroutineNamePtr(program, shadertype, index, bufsize, length, name);
        }
        public static void glUniformSubroutinesuiv(uint shadertype, int count, IntPtr indices)
        {
            if (glUniformSubroutinesuivPtr == null)
            {
                glUniformSubroutinesuivPtr = (glUniformSubroutinesuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformSubroutinesuiv"), typeof(glUniformSubroutinesuivFunc));
            }
            glUniformSubroutinesuivPtr(shadertype, count, indices);
        }
        public static void glGetUniformSubroutineuiv(uint shadertype, int location, IntPtr @params)
        {
            if (glGetUniformSubroutineuivPtr == null)
            {
                glGetUniformSubroutineuivPtr = (glGetUniformSubroutineuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformSubroutineuiv"), typeof(glGetUniformSubroutineuivFunc));
            }
            glGetUniformSubroutineuivPtr(shadertype, location, @params);
        }
        public static void glGetProgramStageiv(uint program, uint shadertype, uint pname, IntPtr values)
        {
            if (glGetProgramStageivPtr == null)
            {
                glGetProgramStageivPtr = (glGetProgramStageivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramStageiv"), typeof(glGetProgramStageivFunc));
            }
            glGetProgramStageivPtr(program, shadertype, pname, values);
        }
        public static void glPatchParameteri(uint pname, int value)
        {
            if (glPatchParameteriPtr == null)
            {
                glPatchParameteriPtr = (glPatchParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPatchParameteri"), typeof(glPatchParameteriFunc));
            }
            glPatchParameteriPtr(pname, value);
        }
        public static void glPatchParameterfv(uint pname, IntPtr values)
        {
            if (glPatchParameterfvPtr == null)
            {
                glPatchParameterfvPtr = (glPatchParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPatchParameterfv"), typeof(glPatchParameterfvFunc));
            }
            glPatchParameterfvPtr(pname, values);
        }
        public static void glBindTransformFeedback(uint target, uint id)
        {
            if (glBindTransformFeedbackPtr == null)
            {
                glBindTransformFeedbackPtr = (glBindTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindTransformFeedback"), typeof(glBindTransformFeedbackFunc));
            }
            glBindTransformFeedbackPtr(target, id);
        }
        public static void glDeleteTransformFeedbacks(int n, IntPtr ids)
        {
            if (glDeleteTransformFeedbacksPtr == null)
            {
                glDeleteTransformFeedbacksPtr = (glDeleteTransformFeedbacksFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteTransformFeedbacks"), typeof(glDeleteTransformFeedbacksFunc));
            }
            glDeleteTransformFeedbacksPtr(n, ids);
        }
        public static void glGenTransformFeedbacks(int n, IntPtr ids)
        {
            if (glGenTransformFeedbacksPtr == null)
            {
                glGenTransformFeedbacksPtr = (glGenTransformFeedbacksFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenTransformFeedbacks"), typeof(glGenTransformFeedbacksFunc));
            }
            glGenTransformFeedbacksPtr(n, ids);
        }
        public static bool glIsTransformFeedback(uint id)
        {
            if (glIsTransformFeedbackPtr == null)
            {
                glIsTransformFeedbackPtr = (glIsTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsTransformFeedback"), typeof(glIsTransformFeedbackFunc));
            }
            return glIsTransformFeedbackPtr(id);
        }
        public static void glPauseTransformFeedback()
        {
            if (glPauseTransformFeedbackPtr == null)
            {
                glPauseTransformFeedbackPtr = (glPauseTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPauseTransformFeedback"), typeof(glPauseTransformFeedbackFunc));
            }
            glPauseTransformFeedbackPtr();
        }
        public static void glResumeTransformFeedback()
        {
            if (glResumeTransformFeedbackPtr == null)
            {
                glResumeTransformFeedbackPtr = (glResumeTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glResumeTransformFeedback"), typeof(glResumeTransformFeedbackFunc));
            }
            glResumeTransformFeedbackPtr();
        }
        public static void glDrawTransformFeedback(uint mode, uint id)
        {
            if (glDrawTransformFeedbackPtr == null)
            {
                glDrawTransformFeedbackPtr = (glDrawTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawTransformFeedback"), typeof(glDrawTransformFeedbackFunc));
            }
            glDrawTransformFeedbackPtr(mode, id);
        }
        public static void glDrawTransformFeedbackStream(uint mode, uint id, uint stream)
        {
            if (glDrawTransformFeedbackStreamPtr == null)
            {
                glDrawTransformFeedbackStreamPtr = (glDrawTransformFeedbackStreamFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawTransformFeedbackStream"), typeof(glDrawTransformFeedbackStreamFunc));
            }
            glDrawTransformFeedbackStreamPtr(mode, id, stream);
        }
        public static void glBeginQueryIndexed(uint target, uint index, uint id)
        {
            if (glBeginQueryIndexedPtr == null)
            {
                glBeginQueryIndexedPtr = (glBeginQueryIndexedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBeginQueryIndexed"), typeof(glBeginQueryIndexedFunc));
            }
            glBeginQueryIndexedPtr(target, index, id);
        }
        public static void glEndQueryIndexed(uint target, uint index)
        {
            if (glEndQueryIndexedPtr == null)
            {
                glEndQueryIndexedPtr = (glEndQueryIndexedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEndQueryIndexed"), typeof(glEndQueryIndexedFunc));
            }
            glEndQueryIndexedPtr(target, index);
        }
        public static void glGetQueryIndexediv(uint target, uint index, uint pname, IntPtr @params)
        {
            if (glGetQueryIndexedivPtr == null)
            {
                glGetQueryIndexedivPtr = (glGetQueryIndexedivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetQueryIndexediv"), typeof(glGetQueryIndexedivFunc));
            }
            glGetQueryIndexedivPtr(target, index, pname, @params);
        }
        public static void glReleaseShaderCompiler()
        {
            if (glReleaseShaderCompilerPtr == null)
            {
                glReleaseShaderCompilerPtr = (glReleaseShaderCompilerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glReleaseShaderCompiler"), typeof(glReleaseShaderCompilerFunc));
            }
            glReleaseShaderCompilerPtr();
        }
        public static void glShaderBinary(int count, IntPtr shaders, uint binaryformat, IntPtr binary, int length)
        {
            if (glShaderBinaryPtr == null)
            {
                glShaderBinaryPtr = (glShaderBinaryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glShaderBinary"), typeof(glShaderBinaryFunc));
            }
            glShaderBinaryPtr(count, shaders, binaryformat, binary, length);
        }
        public static void glGetShaderPrecisionFormat(uint shadertype, uint precisiontype, IntPtr range, IntPtr precision)
        {
            if (glGetShaderPrecisionFormatPtr == null)
            {
                glGetShaderPrecisionFormatPtr = (glGetShaderPrecisionFormatFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetShaderPrecisionFormat"), typeof(glGetShaderPrecisionFormatFunc));
            }
            glGetShaderPrecisionFormatPtr(shadertype, precisiontype, range, precision);
        }
        public static void glDepthRangef(float n, float f)
        {
            if (glDepthRangefPtr == null)
            {
                glDepthRangefPtr = (glDepthRangefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthRangef"), typeof(glDepthRangefFunc));
            }
            glDepthRangefPtr(n, f);
        }
        public static void glClearDepthf(float d)
        {
            if (glClearDepthfPtr == null)
            {
                glClearDepthfPtr = (glClearDepthfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearDepthf"), typeof(glClearDepthfFunc));
            }
            glClearDepthfPtr(d);
        }
        public static void glGetProgramBinary(uint program, int bufSize, IntPtr length, IntPtr binaryFormat, IntPtr binary)
        {
            if (glGetProgramBinaryPtr == null)
            {
                glGetProgramBinaryPtr = (glGetProgramBinaryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramBinary"), typeof(glGetProgramBinaryFunc));
            }
            glGetProgramBinaryPtr(program, bufSize, length, binaryFormat, binary);
        }
        public static void glProgramBinary(uint program, uint binaryFormat, IntPtr binary, int length)
        {
            if (glProgramBinaryPtr == null)
            {
                glProgramBinaryPtr = (glProgramBinaryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramBinary"), typeof(glProgramBinaryFunc));
            }
            glProgramBinaryPtr(program, binaryFormat, binary, length);
        }
        public static void glProgramParameteri(uint program, uint pname, int value)
        {
            if (glProgramParameteriPtr == null)
            {
                glProgramParameteriPtr = (glProgramParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramParameteri"), typeof(glProgramParameteriFunc));
            }
            glProgramParameteriPtr(program, pname, value);
        }
        public static void glUseProgramStages(uint pipeline, uint stages, uint program)
        {
            if (glUseProgramStagesPtr == null)
            {
                glUseProgramStagesPtr = (glUseProgramStagesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUseProgramStages"), typeof(glUseProgramStagesFunc));
            }
            glUseProgramStagesPtr(pipeline, stages, program);
        }
        public static void glActiveShaderProgram(uint pipeline, uint program)
        {
            if (glActiveShaderProgramPtr == null)
            {
                glActiveShaderProgramPtr = (glActiveShaderProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glActiveShaderProgram"), typeof(glActiveShaderProgramFunc));
            }
            glActiveShaderProgramPtr(pipeline, program);
        }
        public static uint glCreateShaderProgramv(uint type, int count, IntPtr strings)
        {
            if (glCreateShaderProgramvPtr == null)
            {
                glCreateShaderProgramvPtr = (glCreateShaderProgramvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCreateShaderProgramv"), typeof(glCreateShaderProgramvFunc));
            }
            return glCreateShaderProgramvPtr(type, count, strings);
        }
        public static void glBindProgramPipeline(uint pipeline)
        {
            if (glBindProgramPipelinePtr == null)
            {
                glBindProgramPipelinePtr = (glBindProgramPipelineFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindProgramPipeline"), typeof(glBindProgramPipelineFunc));
            }
            glBindProgramPipelinePtr(pipeline);
        }
        public static void glDeleteProgramPipelines(int n, IntPtr pipelines)
        {
            if (glDeleteProgramPipelinesPtr == null)
            {
                glDeleteProgramPipelinesPtr = (glDeleteProgramPipelinesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteProgramPipelines"), typeof(glDeleteProgramPipelinesFunc));
            }
            glDeleteProgramPipelinesPtr(n, pipelines);
        }
        public static void glGenProgramPipelines(int n, IntPtr pipelines)
        {
            if (glGenProgramPipelinesPtr == null)
            {
                glGenProgramPipelinesPtr = (glGenProgramPipelinesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenProgramPipelines"), typeof(glGenProgramPipelinesFunc));
            }
            glGenProgramPipelinesPtr(n, pipelines);
        }
        public static bool glIsProgramPipeline(uint pipeline)
        {
            if (glIsProgramPipelinePtr == null)
            {
                glIsProgramPipelinePtr = (glIsProgramPipelineFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsProgramPipeline"), typeof(glIsProgramPipelineFunc));
            }
            return glIsProgramPipelinePtr(pipeline);
        }
        public static void glGetProgramPipelineiv(uint pipeline, uint pname, IntPtr @params)
        {
            if (glGetProgramPipelineivPtr == null)
            {
                glGetProgramPipelineivPtr = (glGetProgramPipelineivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramPipelineiv"), typeof(glGetProgramPipelineivFunc));
            }
            glGetProgramPipelineivPtr(pipeline, pname, @params);
        }
        public static void glProgramUniform1i(uint program, int location, int v0)
        {
            if (glProgramUniform1iPtr == null)
            {
                glProgramUniform1iPtr = (glProgramUniform1iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform1i"), typeof(glProgramUniform1iFunc));
            }
            glProgramUniform1iPtr(program, location, v0);
        }
        public static void glProgramUniform1iv(uint program, int location, int count, IntPtr value)
        {
            if (glProgramUniform1ivPtr == null)
            {
                glProgramUniform1ivPtr = (glProgramUniform1ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform1iv"), typeof(glProgramUniform1ivFunc));
            }
            glProgramUniform1ivPtr(program, location, count, value);
        }
        public static void glProgramUniform1f(uint program, int location, float v0)
        {
            if (glProgramUniform1fPtr == null)
            {
                glProgramUniform1fPtr = (glProgramUniform1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform1f"), typeof(glProgramUniform1fFunc));
            }
            glProgramUniform1fPtr(program, location, v0);
        }
        public static void glProgramUniform1fv(uint program, int location, int count, IntPtr value)
        {
            if (glProgramUniform1fvPtr == null)
            {
                glProgramUniform1fvPtr = (glProgramUniform1fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform1fv"), typeof(glProgramUniform1fvFunc));
            }
            glProgramUniform1fvPtr(program, location, count, value);
        }
        public static void glProgramUniform1d(uint program, int location, double v0)
        {
            if (glProgramUniform1dPtr == null)
            {
                glProgramUniform1dPtr = (glProgramUniform1dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform1d"), typeof(glProgramUniform1dFunc));
            }
            glProgramUniform1dPtr(program, location, v0);
        }
        public static void glProgramUniform1dv(uint program, int location, int count, IntPtr value)
        {
            if (glProgramUniform1dvPtr == null)
            {
                glProgramUniform1dvPtr = (glProgramUniform1dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform1dv"), typeof(glProgramUniform1dvFunc));
            }
            glProgramUniform1dvPtr(program, location, count, value);
        }
        public static void glProgramUniform1ui(uint program, int location, uint v0)
        {
            if (glProgramUniform1uiPtr == null)
            {
                glProgramUniform1uiPtr = (glProgramUniform1uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform1ui"), typeof(glProgramUniform1uiFunc));
            }
            glProgramUniform1uiPtr(program, location, v0);
        }
        public static void glProgramUniform1uiv(uint program, int location, int count, IntPtr value)
        {
            if (glProgramUniform1uivPtr == null)
            {
                glProgramUniform1uivPtr = (glProgramUniform1uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform1uiv"), typeof(glProgramUniform1uivFunc));
            }
            glProgramUniform1uivPtr(program, location, count, value);
        }
        public static void glProgramUniform2i(uint program, int location, int v0, int v1)
        {
            if (glProgramUniform2iPtr == null)
            {
                glProgramUniform2iPtr = (glProgramUniform2iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform2i"), typeof(glProgramUniform2iFunc));
            }
            glProgramUniform2iPtr(program, location, v0, v1);
        }
        public static void glProgramUniform2iv(uint program, int location, int count, IntPtr value)
        {
            if (glProgramUniform2ivPtr == null)
            {
                glProgramUniform2ivPtr = (glProgramUniform2ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform2iv"), typeof(glProgramUniform2ivFunc));
            }
            glProgramUniform2ivPtr(program, location, count, value);
        }
        public static void glProgramUniform2f(uint program, int location, float v0, float v1)
        {
            if (glProgramUniform2fPtr == null)
            {
                glProgramUniform2fPtr = (glProgramUniform2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform2f"), typeof(glProgramUniform2fFunc));
            }
            glProgramUniform2fPtr(program, location, v0, v1);
        }
        public static void glProgramUniform2fv(uint program, int location, int count, IntPtr value)
        {
            if (glProgramUniform2fvPtr == null)
            {
                glProgramUniform2fvPtr = (glProgramUniform2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform2fv"), typeof(glProgramUniform2fvFunc));
            }
            glProgramUniform2fvPtr(program, location, count, value);
        }
        public static void glProgramUniform2d(uint program, int location, double v0, double v1)
        {
            if (glProgramUniform2dPtr == null)
            {
                glProgramUniform2dPtr = (glProgramUniform2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform2d"), typeof(glProgramUniform2dFunc));
            }
            glProgramUniform2dPtr(program, location, v0, v1);
        }
        public static void glProgramUniform2dv(uint program, int location, int count, IntPtr value)
        {
            if (glProgramUniform2dvPtr == null)
            {
                glProgramUniform2dvPtr = (glProgramUniform2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform2dv"), typeof(glProgramUniform2dvFunc));
            }
            glProgramUniform2dvPtr(program, location, count, value);
        }
        public static void glProgramUniform2ui(uint program, int location, uint v0, uint v1)
        {
            if (glProgramUniform2uiPtr == null)
            {
                glProgramUniform2uiPtr = (glProgramUniform2uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform2ui"), typeof(glProgramUniform2uiFunc));
            }
            glProgramUniform2uiPtr(program, location, v0, v1);
        }
        public static void glProgramUniform2uiv(uint program, int location, int count, IntPtr value)
        {
            if (glProgramUniform2uivPtr == null)
            {
                glProgramUniform2uivPtr = (glProgramUniform2uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform2uiv"), typeof(glProgramUniform2uivFunc));
            }
            glProgramUniform2uivPtr(program, location, count, value);
        }
        public static void glProgramUniform3i(uint program, int location, int v0, int v1, int v2)
        {
            if (glProgramUniform3iPtr == null)
            {
                glProgramUniform3iPtr = (glProgramUniform3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform3i"), typeof(glProgramUniform3iFunc));
            }
            glProgramUniform3iPtr(program, location, v0, v1, v2);
        }
        public static void glProgramUniform3iv(uint program, int location, int count, IntPtr value)
        {
            if (glProgramUniform3ivPtr == null)
            {
                glProgramUniform3ivPtr = (glProgramUniform3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform3iv"), typeof(glProgramUniform3ivFunc));
            }
            glProgramUniform3ivPtr(program, location, count, value);
        }
        public static void glProgramUniform3f(uint program, int location, float v0, float v1, float v2)
        {
            if (glProgramUniform3fPtr == null)
            {
                glProgramUniform3fPtr = (glProgramUniform3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform3f"), typeof(glProgramUniform3fFunc));
            }
            glProgramUniform3fPtr(program, location, v0, v1, v2);
        }
        public static void glProgramUniform3fv(uint program, int location, int count, IntPtr value)
        {
            if (glProgramUniform3fvPtr == null)
            {
                glProgramUniform3fvPtr = (glProgramUniform3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform3fv"), typeof(glProgramUniform3fvFunc));
            }
            glProgramUniform3fvPtr(program, location, count, value);
        }
        public static void glProgramUniform3d(uint program, int location, double v0, double v1, double v2)
        {
            if (glProgramUniform3dPtr == null)
            {
                glProgramUniform3dPtr = (glProgramUniform3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform3d"), typeof(glProgramUniform3dFunc));
            }
            glProgramUniform3dPtr(program, location, v0, v1, v2);
        }
        public static void glProgramUniform3dv(uint program, int location, int count, IntPtr value)
        {
            if (glProgramUniform3dvPtr == null)
            {
                glProgramUniform3dvPtr = (glProgramUniform3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform3dv"), typeof(glProgramUniform3dvFunc));
            }
            glProgramUniform3dvPtr(program, location, count, value);
        }
        public static void glProgramUniform3ui(uint program, int location, uint v0, uint v1, uint v2)
        {
            if (glProgramUniform3uiPtr == null)
            {
                glProgramUniform3uiPtr = (glProgramUniform3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform3ui"), typeof(glProgramUniform3uiFunc));
            }
            glProgramUniform3uiPtr(program, location, v0, v1, v2);
        }
        public static void glProgramUniform3uiv(uint program, int location, int count, IntPtr value)
        {
            if (glProgramUniform3uivPtr == null)
            {
                glProgramUniform3uivPtr = (glProgramUniform3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform3uiv"), typeof(glProgramUniform3uivFunc));
            }
            glProgramUniform3uivPtr(program, location, count, value);
        }
        public static void glProgramUniform4i(uint program, int location, int v0, int v1, int v2, int v3)
        {
            if (glProgramUniform4iPtr == null)
            {
                glProgramUniform4iPtr = (glProgramUniform4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform4i"), typeof(glProgramUniform4iFunc));
            }
            glProgramUniform4iPtr(program, location, v0, v1, v2, v3);
        }
        public static void glProgramUniform4iv(uint program, int location, int count, IntPtr value)
        {
            if (glProgramUniform4ivPtr == null)
            {
                glProgramUniform4ivPtr = (glProgramUniform4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform4iv"), typeof(glProgramUniform4ivFunc));
            }
            glProgramUniform4ivPtr(program, location, count, value);
        }
        public static void glProgramUniform4f(uint program, int location, float v0, float v1, float v2, float v3)
        {
            if (glProgramUniform4fPtr == null)
            {
                glProgramUniform4fPtr = (glProgramUniform4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform4f"), typeof(glProgramUniform4fFunc));
            }
            glProgramUniform4fPtr(program, location, v0, v1, v2, v3);
        }
        public static void glProgramUniform4fv(uint program, int location, int count, IntPtr value)
        {
            if (glProgramUniform4fvPtr == null)
            {
                glProgramUniform4fvPtr = (glProgramUniform4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform4fv"), typeof(glProgramUniform4fvFunc));
            }
            glProgramUniform4fvPtr(program, location, count, value);
        }
        public static void glProgramUniform4d(uint program, int location, double v0, double v1, double v2, double v3)
        {
            if (glProgramUniform4dPtr == null)
            {
                glProgramUniform4dPtr = (glProgramUniform4dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform4d"), typeof(glProgramUniform4dFunc));
            }
            glProgramUniform4dPtr(program, location, v0, v1, v2, v3);
        }
        public static void glProgramUniform4dv(uint program, int location, int count, IntPtr value)
        {
            if (glProgramUniform4dvPtr == null)
            {
                glProgramUniform4dvPtr = (glProgramUniform4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform4dv"), typeof(glProgramUniform4dvFunc));
            }
            glProgramUniform4dvPtr(program, location, count, value);
        }
        public static void glProgramUniform4ui(uint program, int location, uint v0, uint v1, uint v2, uint v3)
        {
            if (glProgramUniform4uiPtr == null)
            {
                glProgramUniform4uiPtr = (glProgramUniform4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform4ui"), typeof(glProgramUniform4uiFunc));
            }
            glProgramUniform4uiPtr(program, location, v0, v1, v2, v3);
        }
        public static void glProgramUniform4uiv(uint program, int location, int count, IntPtr value)
        {
            if (glProgramUniform4uivPtr == null)
            {
                glProgramUniform4uivPtr = (glProgramUniform4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform4uiv"), typeof(glProgramUniform4uivFunc));
            }
            glProgramUniform4uivPtr(program, location, count, value);
        }
        public static void glProgramUniformMatrix2fv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            if (glProgramUniformMatrix2fvPtr == null)
            {
                glProgramUniformMatrix2fvPtr = (glProgramUniformMatrix2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix2fv"), typeof(glProgramUniformMatrix2fvFunc));
            }
            glProgramUniformMatrix2fvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix3fv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            if (glProgramUniformMatrix3fvPtr == null)
            {
                glProgramUniformMatrix3fvPtr = (glProgramUniformMatrix3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix3fv"), typeof(glProgramUniformMatrix3fvFunc));
            }
            glProgramUniformMatrix3fvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix4fv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            if (glProgramUniformMatrix4fvPtr == null)
            {
                glProgramUniformMatrix4fvPtr = (glProgramUniformMatrix4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix4fv"), typeof(glProgramUniformMatrix4fvFunc));
            }
            glProgramUniformMatrix4fvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix2dv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            if (glProgramUniformMatrix2dvPtr == null)
            {
                glProgramUniformMatrix2dvPtr = (glProgramUniformMatrix2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix2dv"), typeof(glProgramUniformMatrix2dvFunc));
            }
            glProgramUniformMatrix2dvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix3dv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            if (glProgramUniformMatrix3dvPtr == null)
            {
                glProgramUniformMatrix3dvPtr = (glProgramUniformMatrix3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix3dv"), typeof(glProgramUniformMatrix3dvFunc));
            }
            glProgramUniformMatrix3dvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix4dv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            if (glProgramUniformMatrix4dvPtr == null)
            {
                glProgramUniformMatrix4dvPtr = (glProgramUniformMatrix4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix4dv"), typeof(glProgramUniformMatrix4dvFunc));
            }
            glProgramUniformMatrix4dvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix2x3fv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            if (glProgramUniformMatrix2x3fvPtr == null)
            {
                glProgramUniformMatrix2x3fvPtr = (glProgramUniformMatrix2x3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix2x3fv"), typeof(glProgramUniformMatrix2x3fvFunc));
            }
            glProgramUniformMatrix2x3fvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix3x2fv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            if (glProgramUniformMatrix3x2fvPtr == null)
            {
                glProgramUniformMatrix3x2fvPtr = (glProgramUniformMatrix3x2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix3x2fv"), typeof(glProgramUniformMatrix3x2fvFunc));
            }
            glProgramUniformMatrix3x2fvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix2x4fv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            if (glProgramUniformMatrix2x4fvPtr == null)
            {
                glProgramUniformMatrix2x4fvPtr = (glProgramUniformMatrix2x4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix2x4fv"), typeof(glProgramUniformMatrix2x4fvFunc));
            }
            glProgramUniformMatrix2x4fvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix4x2fv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            if (glProgramUniformMatrix4x2fvPtr == null)
            {
                glProgramUniformMatrix4x2fvPtr = (glProgramUniformMatrix4x2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix4x2fv"), typeof(glProgramUniformMatrix4x2fvFunc));
            }
            glProgramUniformMatrix4x2fvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix3x4fv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            if (glProgramUniformMatrix3x4fvPtr == null)
            {
                glProgramUniformMatrix3x4fvPtr = (glProgramUniformMatrix3x4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix3x4fv"), typeof(glProgramUniformMatrix3x4fvFunc));
            }
            glProgramUniformMatrix3x4fvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix4x3fv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            if (glProgramUniformMatrix4x3fvPtr == null)
            {
                glProgramUniformMatrix4x3fvPtr = (glProgramUniformMatrix4x3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix4x3fv"), typeof(glProgramUniformMatrix4x3fvFunc));
            }
            glProgramUniformMatrix4x3fvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix2x3dv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            if (glProgramUniformMatrix2x3dvPtr == null)
            {
                glProgramUniformMatrix2x3dvPtr = (glProgramUniformMatrix2x3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix2x3dv"), typeof(glProgramUniformMatrix2x3dvFunc));
            }
            glProgramUniformMatrix2x3dvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix3x2dv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            if (glProgramUniformMatrix3x2dvPtr == null)
            {
                glProgramUniformMatrix3x2dvPtr = (glProgramUniformMatrix3x2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix3x2dv"), typeof(glProgramUniformMatrix3x2dvFunc));
            }
            glProgramUniformMatrix3x2dvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix2x4dv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            if (glProgramUniformMatrix2x4dvPtr == null)
            {
                glProgramUniformMatrix2x4dvPtr = (glProgramUniformMatrix2x4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix2x4dv"), typeof(glProgramUniformMatrix2x4dvFunc));
            }
            glProgramUniformMatrix2x4dvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix4x2dv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            if (glProgramUniformMatrix4x2dvPtr == null)
            {
                glProgramUniformMatrix4x2dvPtr = (glProgramUniformMatrix4x2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix4x2dv"), typeof(glProgramUniformMatrix4x2dvFunc));
            }
            glProgramUniformMatrix4x2dvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix3x4dv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            if (glProgramUniformMatrix3x4dvPtr == null)
            {
                glProgramUniformMatrix3x4dvPtr = (glProgramUniformMatrix3x4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix3x4dv"), typeof(glProgramUniformMatrix3x4dvFunc));
            }
            glProgramUniformMatrix3x4dvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix4x3dv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            if (glProgramUniformMatrix4x3dvPtr == null)
            {
                glProgramUniformMatrix4x3dvPtr = (glProgramUniformMatrix4x3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix4x3dv"), typeof(glProgramUniformMatrix4x3dvFunc));
            }
            glProgramUniformMatrix4x3dvPtr(program, location, count, transpose, value);
        }
        public static void glValidateProgramPipeline(uint pipeline)
        {
            if (glValidateProgramPipelinePtr == null)
            {
                glValidateProgramPipelinePtr = (glValidateProgramPipelineFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glValidateProgramPipeline"), typeof(glValidateProgramPipelineFunc));
            }
            glValidateProgramPipelinePtr(pipeline);
        }
        public static void glGetProgramPipelineInfoLog(uint pipeline, int bufSize, IntPtr length, IntPtr infoLog)
        {
            if (glGetProgramPipelineInfoLogPtr == null)
            {
                glGetProgramPipelineInfoLogPtr = (glGetProgramPipelineInfoLogFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramPipelineInfoLog"), typeof(glGetProgramPipelineInfoLogFunc));
            }
            glGetProgramPipelineInfoLogPtr(pipeline, bufSize, length, infoLog);
        }
        public static void glVertexAttribL1d(uint index, double x)
        {
            if (glVertexAttribL1dPtr == null)
            {
                glVertexAttribL1dPtr = (glVertexAttribL1dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribL1d"), typeof(glVertexAttribL1dFunc));
            }
            glVertexAttribL1dPtr(index, x);
        }
        public static void glVertexAttribL2d(uint index, double x, double y)
        {
            if (glVertexAttribL2dPtr == null)
            {
                glVertexAttribL2dPtr = (glVertexAttribL2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribL2d"), typeof(glVertexAttribL2dFunc));
            }
            glVertexAttribL2dPtr(index, x, y);
        }
        public static void glVertexAttribL3d(uint index, double x, double y, double z)
        {
            if (glVertexAttribL3dPtr == null)
            {
                glVertexAttribL3dPtr = (glVertexAttribL3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribL3d"), typeof(glVertexAttribL3dFunc));
            }
            glVertexAttribL3dPtr(index, x, y, z);
        }
        public static void glVertexAttribL4d(uint index, double x, double y, double z, double w)
        {
            if (glVertexAttribL4dPtr == null)
            {
                glVertexAttribL4dPtr = (glVertexAttribL4dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribL4d"), typeof(glVertexAttribL4dFunc));
            }
            glVertexAttribL4dPtr(index, x, y, z, w);
        }
        public static void glVertexAttribL1dv(uint index, IntPtr v)
        {
            if (glVertexAttribL1dvPtr == null)
            {
                glVertexAttribL1dvPtr = (glVertexAttribL1dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribL1dv"), typeof(glVertexAttribL1dvFunc));
            }
            glVertexAttribL1dvPtr(index, v);
        }
        public static void glVertexAttribL2dv(uint index, IntPtr v)
        {
            if (glVertexAttribL2dvPtr == null)
            {
                glVertexAttribL2dvPtr = (glVertexAttribL2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribL2dv"), typeof(glVertexAttribL2dvFunc));
            }
            glVertexAttribL2dvPtr(index, v);
        }
        public static void glVertexAttribL3dv(uint index, IntPtr v)
        {
            if (glVertexAttribL3dvPtr == null)
            {
                glVertexAttribL3dvPtr = (glVertexAttribL3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribL3dv"), typeof(glVertexAttribL3dvFunc));
            }
            glVertexAttribL3dvPtr(index, v);
        }
        public static void glVertexAttribL4dv(uint index, IntPtr v)
        {
            if (glVertexAttribL4dvPtr == null)
            {
                glVertexAttribL4dvPtr = (glVertexAttribL4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribL4dv"), typeof(glVertexAttribL4dvFunc));
            }
            glVertexAttribL4dvPtr(index, v);
        }
        public static void glVertexAttribLPointer(uint index, int size, uint type, int stride, IntPtr pointer)
        {
            if (glVertexAttribLPointerPtr == null)
            {
                glVertexAttribLPointerPtr = (glVertexAttribLPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribLPointer"), typeof(glVertexAttribLPointerFunc));
            }
            glVertexAttribLPointerPtr(index, size, type, stride, pointer);
        }
        public static void glGetVertexAttribLdv(uint index, uint pname, IntPtr @params)
        {
            if (glGetVertexAttribLdvPtr == null)
            {
                glGetVertexAttribLdvPtr = (glGetVertexAttribLdvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribLdv"), typeof(glGetVertexAttribLdvFunc));
            }
            glGetVertexAttribLdvPtr(index, pname, @params);
        }
        public static void glViewportArrayv(uint first, int count, IntPtr v)
        {
            if (glViewportArrayvPtr == null)
            {
                glViewportArrayvPtr = (glViewportArrayvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glViewportArrayv"), typeof(glViewportArrayvFunc));
            }
            glViewportArrayvPtr(first, count, v);
        }
        public static void glViewportIndexedf(uint index, float x, float y, float w, float h)
        {
            if (glViewportIndexedfPtr == null)
            {
                glViewportIndexedfPtr = (glViewportIndexedfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glViewportIndexedf"), typeof(glViewportIndexedfFunc));
            }
            glViewportIndexedfPtr(index, x, y, w, h);
        }
        public static void glViewportIndexedfv(uint index, IntPtr v)
        {
            if (glViewportIndexedfvPtr == null)
            {
                glViewportIndexedfvPtr = (glViewportIndexedfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glViewportIndexedfv"), typeof(glViewportIndexedfvFunc));
            }
            glViewportIndexedfvPtr(index, v);
        }
        public static void glScissorArrayv(uint first, int count, IntPtr v)
        {
            if (glScissorArrayvPtr == null)
            {
                glScissorArrayvPtr = (glScissorArrayvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScissorArrayv"), typeof(glScissorArrayvFunc));
            }
            glScissorArrayvPtr(first, count, v);
        }
        public static void glScissorIndexed(uint index, int left, int bottom, int width, int height)
        {
            if (glScissorIndexedPtr == null)
            {
                glScissorIndexedPtr = (glScissorIndexedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScissorIndexed"), typeof(glScissorIndexedFunc));
            }
            glScissorIndexedPtr(index, left, bottom, width, height);
        }
        public static void glScissorIndexedv(uint index, IntPtr v)
        {
            if (glScissorIndexedvPtr == null)
            {
                glScissorIndexedvPtr = (glScissorIndexedvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScissorIndexedv"), typeof(glScissorIndexedvFunc));
            }
            glScissorIndexedvPtr(index, v);
        }
        public static void glDepthRangeArrayv(uint first, int count, IntPtr v)
        {
            if (glDepthRangeArrayvPtr == null)
            {
                glDepthRangeArrayvPtr = (glDepthRangeArrayvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthRangeArrayv"), typeof(glDepthRangeArrayvFunc));
            }
            glDepthRangeArrayvPtr(first, count, v);
        }
        public static void glDepthRangeIndexed(uint index, double n, double f)
        {
            if (glDepthRangeIndexedPtr == null)
            {
                glDepthRangeIndexedPtr = (glDepthRangeIndexedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthRangeIndexed"), typeof(glDepthRangeIndexedFunc));
            }
            glDepthRangeIndexedPtr(index, n, f);
        }
        public static void glGetFloati_v(uint target, uint index, IntPtr data)
        {
            if (glGetFloati_vPtr == null)
            {
                glGetFloati_vPtr = (glGetFloati_vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFloati_v"), typeof(glGetFloati_vFunc));
            }
            glGetFloati_vPtr(target, index, data);
        }
        public static void glGetDoublei_v(uint target, uint index, IntPtr data)
        {
            if (glGetDoublei_vPtr == null)
            {
                glGetDoublei_vPtr = (glGetDoublei_vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetDoublei_v"), typeof(glGetDoublei_vFunc));
            }
            glGetDoublei_vPtr(target, index, data);
        }
        public static void glDrawArraysInstancedBaseInstance(uint mode, int first, int count, int instancecount, uint baseinstance)
        {
            if (glDrawArraysInstancedBaseInstancePtr == null)
            {
                glDrawArraysInstancedBaseInstancePtr = (glDrawArraysInstancedBaseInstanceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawArraysInstancedBaseInstance"), typeof(glDrawArraysInstancedBaseInstanceFunc));
            }
            glDrawArraysInstancedBaseInstancePtr(mode, first, count, instancecount, baseinstance);
        }
        public static void glDrawElementsInstancedBaseInstance(uint mode, int count, uint type, IntPtr indices, int instancecount, uint baseinstance)
        {
            if (glDrawElementsInstancedBaseInstancePtr == null)
            {
                glDrawElementsInstancedBaseInstancePtr = (glDrawElementsInstancedBaseInstanceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElementsInstancedBaseInstance"), typeof(glDrawElementsInstancedBaseInstanceFunc));
            }
            glDrawElementsInstancedBaseInstancePtr(mode, count, type, indices, instancecount, baseinstance);
        }
        public static void glDrawElementsInstancedBaseVertexBaseInstance(uint mode, int count, uint type, IntPtr indices, int instancecount, int basevertex, uint baseinstance)
        {
            if (glDrawElementsInstancedBaseVertexBaseInstancePtr == null)
            {
                glDrawElementsInstancedBaseVertexBaseInstancePtr = (glDrawElementsInstancedBaseVertexBaseInstanceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElementsInstancedBaseVertexBaseInstance"), typeof(glDrawElementsInstancedBaseVertexBaseInstanceFunc));
            }
            glDrawElementsInstancedBaseVertexBaseInstancePtr(mode, count, type, indices, instancecount, basevertex, baseinstance);
        }
        public static void glGetInternalformativ(uint target, uint internalformat, uint pname, int bufSize, IntPtr @params)
        {
            if (glGetInternalformativPtr == null)
            {
                glGetInternalformativPtr = (glGetInternalformativFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetInternalformativ"), typeof(glGetInternalformativFunc));
            }
            glGetInternalformativPtr(target, internalformat, pname, bufSize, @params);
        }
        public static void glGetActiveAtomicCounterBufferiv(uint program, uint bufferIndex, uint pname, IntPtr @params)
        {
            if (glGetActiveAtomicCounterBufferivPtr == null)
            {
                glGetActiveAtomicCounterBufferivPtr = (glGetActiveAtomicCounterBufferivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveAtomicCounterBufferiv"), typeof(glGetActiveAtomicCounterBufferivFunc));
            }
            glGetActiveAtomicCounterBufferivPtr(program, bufferIndex, pname, @params);
        }
        public static void glBindImageTexture(uint unit, uint texture, int level, bool layered, int layer, uint access, uint format)
        {
            if (glBindImageTexturePtr == null)
            {
                glBindImageTexturePtr = (glBindImageTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindImageTexture"), typeof(glBindImageTextureFunc));
            }
            glBindImageTexturePtr(unit, texture, level, layered, layer, access, format);
        }
        public static void glMemoryBarrier(uint barriers)
        {
            if (glMemoryBarrierPtr == null)
            {
                glMemoryBarrierPtr = (glMemoryBarrierFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMemoryBarrier"), typeof(glMemoryBarrierFunc));
            }
            glMemoryBarrierPtr(barriers);
        }
        public static void glTexStorage1D(uint target, int levels, uint internalformat, int width)
        {
            if (glTexStorage1DPtr == null)
            {
                glTexStorage1DPtr = (glTexStorage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexStorage1D"), typeof(glTexStorage1DFunc));
            }
            glTexStorage1DPtr(target, levels, internalformat, width);
        }
        public static void glTexStorage2D(uint target, int levels, uint internalformat, int width, int height)
        {
            if (glTexStorage2DPtr == null)
            {
                glTexStorage2DPtr = (glTexStorage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexStorage2D"), typeof(glTexStorage2DFunc));
            }
            glTexStorage2DPtr(target, levels, internalformat, width, height);
        }
        public static void glTexStorage3D(uint target, int levels, uint internalformat, int width, int height, int depth)
        {
            if (glTexStorage3DPtr == null)
            {
                glTexStorage3DPtr = (glTexStorage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexStorage3D"), typeof(glTexStorage3DFunc));
            }
            glTexStorage3DPtr(target, levels, internalformat, width, height, depth);
        }
        public static void glDrawTransformFeedbackInstanced(uint mode, uint id, int instancecount)
        {
            if (glDrawTransformFeedbackInstancedPtr == null)
            {
                glDrawTransformFeedbackInstancedPtr = (glDrawTransformFeedbackInstancedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawTransformFeedbackInstanced"), typeof(glDrawTransformFeedbackInstancedFunc));
            }
            glDrawTransformFeedbackInstancedPtr(mode, id, instancecount);
        }
        public static void glDrawTransformFeedbackStreamInstanced(uint mode, uint id, uint stream, int instancecount)
        {
            if (glDrawTransformFeedbackStreamInstancedPtr == null)
            {
                glDrawTransformFeedbackStreamInstancedPtr = (glDrawTransformFeedbackStreamInstancedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawTransformFeedbackStreamInstanced"), typeof(glDrawTransformFeedbackStreamInstancedFunc));
            }
            glDrawTransformFeedbackStreamInstancedPtr(mode, id, stream, instancecount);
        }
        public static void glClearBufferData(uint target, uint internalformat, uint format, uint type, IntPtr data)
        {
            if (glClearBufferDataPtr == null)
            {
                glClearBufferDataPtr = (glClearBufferDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearBufferData"), typeof(glClearBufferDataFunc));
            }
            glClearBufferDataPtr(target, internalformat, format, type, data);
        }
        public static void glClearBufferSubData(uint target, uint internalformat, IntPtr offset, int size, uint format, uint type, IntPtr data)
        {
            if (glClearBufferSubDataPtr == null)
            {
                glClearBufferSubDataPtr = (glClearBufferSubDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearBufferSubData"), typeof(glClearBufferSubDataFunc));
            }
            glClearBufferSubDataPtr(target, internalformat, offset, size, format, type, data);
        }
        public static void glDispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z)
        {
            if (glDispatchComputePtr == null)
            {
                glDispatchComputePtr = (glDispatchComputeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDispatchCompute"), typeof(glDispatchComputeFunc));
            }
            glDispatchComputePtr(num_groups_x, num_groups_y, num_groups_z);
        }
        public static void glDispatchComputeIndirect(IntPtr indirect)
        {
            if (glDispatchComputeIndirectPtr == null)
            {
                glDispatchComputeIndirectPtr = (glDispatchComputeIndirectFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDispatchComputeIndirect"), typeof(glDispatchComputeIndirectFunc));
            }
            glDispatchComputeIndirectPtr(indirect);
        }
        public static void glCopyImageSubData(uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
        {
            if (glCopyImageSubDataPtr == null)
            {
                glCopyImageSubDataPtr = (glCopyImageSubDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyImageSubData"), typeof(glCopyImageSubDataFunc));
            }
            glCopyImageSubDataPtr(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        }
        public static void glFramebufferParameteri(uint target, uint pname, int param)
        {
            if (glFramebufferParameteriPtr == null)
            {
                glFramebufferParameteriPtr = (glFramebufferParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferParameteri"), typeof(glFramebufferParameteriFunc));
            }
            glFramebufferParameteriPtr(target, pname, param);
        }
        public static void glGetFramebufferParameteriv(uint target, uint pname, IntPtr @params)
        {
            if (glGetFramebufferParameterivPtr == null)
            {
                glGetFramebufferParameterivPtr = (glGetFramebufferParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFramebufferParameteriv"), typeof(glGetFramebufferParameterivFunc));
            }
            glGetFramebufferParameterivPtr(target, pname, @params);
        }
        public static void glGetInternalformati64v(uint target, uint internalformat, uint pname, int bufSize, IntPtr @params)
        {
            if (glGetInternalformati64vPtr == null)
            {
                glGetInternalformati64vPtr = (glGetInternalformati64vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetInternalformati64v"), typeof(glGetInternalformati64vFunc));
            }
            glGetInternalformati64vPtr(target, internalformat, pname, bufSize, @params);
        }
        public static void glInvalidateTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth)
        {
            if (glInvalidateTexSubImagePtr == null)
            {
                glInvalidateTexSubImagePtr = (glInvalidateTexSubImageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glInvalidateTexSubImage"), typeof(glInvalidateTexSubImageFunc));
            }
            glInvalidateTexSubImagePtr(texture, level, xoffset, yoffset, zoffset, width, height, depth);
        }
        public static void glInvalidateTexImage(uint texture, int level)
        {
            if (glInvalidateTexImagePtr == null)
            {
                glInvalidateTexImagePtr = (glInvalidateTexImageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glInvalidateTexImage"), typeof(glInvalidateTexImageFunc));
            }
            glInvalidateTexImagePtr(texture, level);
        }
        public static void glInvalidateBufferSubData(uint buffer, IntPtr offset, int length)
        {
            if (glInvalidateBufferSubDataPtr == null)
            {
                glInvalidateBufferSubDataPtr = (glInvalidateBufferSubDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glInvalidateBufferSubData"), typeof(glInvalidateBufferSubDataFunc));
            }
            glInvalidateBufferSubDataPtr(buffer, offset, length);
        }
        public static void glInvalidateBufferData(uint buffer)
        {
            if (glInvalidateBufferDataPtr == null)
            {
                glInvalidateBufferDataPtr = (glInvalidateBufferDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glInvalidateBufferData"), typeof(glInvalidateBufferDataFunc));
            }
            glInvalidateBufferDataPtr(buffer);
        }
        public static void glInvalidateFramebuffer(uint target, int numAttachments, IntPtr attachments)
        {
            if (glInvalidateFramebufferPtr == null)
            {
                glInvalidateFramebufferPtr = (glInvalidateFramebufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glInvalidateFramebuffer"), typeof(glInvalidateFramebufferFunc));
            }
            glInvalidateFramebufferPtr(target, numAttachments, attachments);
        }
        public static void glInvalidateSubFramebuffer(uint target, int numAttachments, IntPtr attachments, int x, int y, int width, int height)
        {
            if (glInvalidateSubFramebufferPtr == null)
            {
                glInvalidateSubFramebufferPtr = (glInvalidateSubFramebufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glInvalidateSubFramebuffer"), typeof(glInvalidateSubFramebufferFunc));
            }
            glInvalidateSubFramebufferPtr(target, numAttachments, attachments, x, y, width, height);
        }
        public static void glMultiDrawArraysIndirect(uint mode, IntPtr indirect, int drawcount, int stride)
        {
            if (glMultiDrawArraysIndirectPtr == null)
            {
                glMultiDrawArraysIndirectPtr = (glMultiDrawArraysIndirectFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiDrawArraysIndirect"), typeof(glMultiDrawArraysIndirectFunc));
            }
            glMultiDrawArraysIndirectPtr(mode, indirect, drawcount, stride);
        }
        public static void glMultiDrawElementsIndirect(uint mode, uint type, IntPtr indirect, int drawcount, int stride)
        {
            if (glMultiDrawElementsIndirectPtr == null)
            {
                glMultiDrawElementsIndirectPtr = (glMultiDrawElementsIndirectFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiDrawElementsIndirect"), typeof(glMultiDrawElementsIndirectFunc));
            }
            glMultiDrawElementsIndirectPtr(mode, type, indirect, drawcount, stride);
        }
        public static void glGetProgramInterfaceiv(uint program, uint programInterface, uint pname, IntPtr @params)
        {
            if (glGetProgramInterfaceivPtr == null)
            {
                glGetProgramInterfaceivPtr = (glGetProgramInterfaceivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramInterfaceiv"), typeof(glGetProgramInterfaceivFunc));
            }
            glGetProgramInterfaceivPtr(program, programInterface, pname, @params);
        }
        public static uint glGetProgramResourceIndex(uint program, uint programInterface, IntPtr name)
        {
            if (glGetProgramResourceIndexPtr == null)
            {
                glGetProgramResourceIndexPtr = (glGetProgramResourceIndexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramResourceIndex"), typeof(glGetProgramResourceIndexFunc));
            }
            return glGetProgramResourceIndexPtr(program, programInterface, name);
        }
        public static void glGetProgramResourceName(uint program, uint programInterface, uint index, int bufSize, IntPtr length, IntPtr name)
        {
            if (glGetProgramResourceNamePtr == null)
            {
                glGetProgramResourceNamePtr = (glGetProgramResourceNameFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramResourceName"), typeof(glGetProgramResourceNameFunc));
            }
            glGetProgramResourceNamePtr(program, programInterface, index, bufSize, length, name);
        }
        public static void glGetProgramResourceiv(uint program, uint programInterface, uint index, int propCount, IntPtr props, int bufSize, IntPtr length, IntPtr @params)
        {
            if (glGetProgramResourceivPtr == null)
            {
                glGetProgramResourceivPtr = (glGetProgramResourceivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramResourceiv"), typeof(glGetProgramResourceivFunc));
            }
            glGetProgramResourceivPtr(program, programInterface, index, propCount, props, bufSize, length, @params);
        }
        public static int glGetProgramResourceLocation(uint program, uint programInterface, IntPtr name)
        {
            if (glGetProgramResourceLocationPtr == null)
            {
                glGetProgramResourceLocationPtr = (glGetProgramResourceLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramResourceLocation"), typeof(glGetProgramResourceLocationFunc));
            }
            return glGetProgramResourceLocationPtr(program, programInterface, name);
        }
        public static int glGetProgramResourceLocationIndex(uint program, uint programInterface, IntPtr name)
        {
            if (glGetProgramResourceLocationIndexPtr == null)
            {
                glGetProgramResourceLocationIndexPtr = (glGetProgramResourceLocationIndexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramResourceLocationIndex"), typeof(glGetProgramResourceLocationIndexFunc));
            }
            return glGetProgramResourceLocationIndexPtr(program, programInterface, name);
        }
        public static void glShaderStorageBlockBinding(uint program, uint storageBlockIndex, uint storageBlockBinding)
        {
            if (glShaderStorageBlockBindingPtr == null)
            {
                glShaderStorageBlockBindingPtr = (glShaderStorageBlockBindingFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glShaderStorageBlockBinding"), typeof(glShaderStorageBlockBindingFunc));
            }
            glShaderStorageBlockBindingPtr(program, storageBlockIndex, storageBlockBinding);
        }
        public static void glTexBufferRange(uint target, uint internalformat, uint buffer, IntPtr offset, int size)
        {
            if (glTexBufferRangePtr == null)
            {
                glTexBufferRangePtr = (glTexBufferRangeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexBufferRange"), typeof(glTexBufferRangeFunc));
            }
            glTexBufferRangePtr(target, internalformat, buffer, offset, size);
        }
        public static void glTexStorage2DMultisample(uint target, int samples, uint internalformat, int width, int height, bool fixedsamplelocations)
        {
            if (glTexStorage2DMultisamplePtr == null)
            {
                glTexStorage2DMultisamplePtr = (glTexStorage2DMultisampleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexStorage2DMultisample"), typeof(glTexStorage2DMultisampleFunc));
            }
            glTexStorage2DMultisamplePtr(target, samples, internalformat, width, height, fixedsamplelocations);
        }
        public static void glTexStorage3DMultisample(uint target, int samples, uint internalformat, int width, int height, int depth, bool fixedsamplelocations)
        {
            if (glTexStorage3DMultisamplePtr == null)
            {
                glTexStorage3DMultisamplePtr = (glTexStorage3DMultisampleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexStorage3DMultisample"), typeof(glTexStorage3DMultisampleFunc));
            }
            glTexStorage3DMultisamplePtr(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        public static void glTextureView(uint texture, uint target, uint origtexture, uint internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
        {
            if (glTextureViewPtr == null)
            {
                glTextureViewPtr = (glTextureViewFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTextureView"), typeof(glTextureViewFunc));
            }
            glTextureViewPtr(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        }
        public static void glBindVertexBuffer(uint bindingindex, uint buffer, IntPtr offset, int stride)
        {
            if (glBindVertexBufferPtr == null)
            {
                glBindVertexBufferPtr = (glBindVertexBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindVertexBuffer"), typeof(glBindVertexBufferFunc));
            }
            glBindVertexBufferPtr(bindingindex, buffer, offset, stride);
        }
        public static void glVertexAttribFormat(uint attribindex, int size, uint type, bool normalized, uint relativeoffset)
        {
            if (glVertexAttribFormatPtr == null)
            {
                glVertexAttribFormatPtr = (glVertexAttribFormatFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribFormat"), typeof(glVertexAttribFormatFunc));
            }
            glVertexAttribFormatPtr(attribindex, size, type, normalized, relativeoffset);
        }
        public static void glVertexAttribIFormat(uint attribindex, int size, uint type, uint relativeoffset)
        {
            if (glVertexAttribIFormatPtr == null)
            {
                glVertexAttribIFormatPtr = (glVertexAttribIFormatFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribIFormat"), typeof(glVertexAttribIFormatFunc));
            }
            glVertexAttribIFormatPtr(attribindex, size, type, relativeoffset);
        }
        public static void glVertexAttribLFormat(uint attribindex, int size, uint type, uint relativeoffset)
        {
            if (glVertexAttribLFormatPtr == null)
            {
                glVertexAttribLFormatPtr = (glVertexAttribLFormatFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribLFormat"), typeof(glVertexAttribLFormatFunc));
            }
            glVertexAttribLFormatPtr(attribindex, size, type, relativeoffset);
        }
        public static void glVertexAttribBinding(uint attribindex, uint bindingindex)
        {
            if (glVertexAttribBindingPtr == null)
            {
                glVertexAttribBindingPtr = (glVertexAttribBindingFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribBinding"), typeof(glVertexAttribBindingFunc));
            }
            glVertexAttribBindingPtr(attribindex, bindingindex);
        }
        public static void glVertexBindingDivisor(uint bindingindex, uint divisor)
        {
            if (glVertexBindingDivisorPtr == null)
            {
                glVertexBindingDivisorPtr = (glVertexBindingDivisorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexBindingDivisor"), typeof(glVertexBindingDivisorFunc));
            }
            glVertexBindingDivisorPtr(bindingindex, divisor);
        }
        public static void glDebugMessageControl(uint source, uint type, uint severity, int count, IntPtr ids, bool enabled)
        {
            if (glDebugMessageControlPtr == null)
            {
                glDebugMessageControlPtr = (glDebugMessageControlFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDebugMessageControl"), typeof(glDebugMessageControlFunc));
            }
            glDebugMessageControlPtr(source, type, severity, count, ids, enabled);
        }
        public static void glDebugMessageInsert(uint source, uint type, uint id, uint severity, int length, IntPtr buf)
        {
            if (glDebugMessageInsertPtr == null)
            {
                glDebugMessageInsertPtr = (glDebugMessageInsertFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDebugMessageInsert"), typeof(glDebugMessageInsertFunc));
            }
            glDebugMessageInsertPtr(source, type, id, severity, length, buf);
        }
        public static void glDebugMessageCallback(IntPtr callback, IntPtr userParam)
        {
            if (glDebugMessageCallbackPtr == null)
            {
                glDebugMessageCallbackPtr = (glDebugMessageCallbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDebugMessageCallback"), typeof(glDebugMessageCallbackFunc));
            }
            glDebugMessageCallbackPtr(callback, userParam);
        }
        public static uint glGetDebugMessageLog(uint count, int bufSize, IntPtr sources, IntPtr types, IntPtr ids, IntPtr severities, IntPtr lengths, IntPtr messageLog)
        {
            if (glGetDebugMessageLogPtr == null)
            {
                glGetDebugMessageLogPtr = (glGetDebugMessageLogFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetDebugMessageLog"), typeof(glGetDebugMessageLogFunc));
            }
            return glGetDebugMessageLogPtr(count, bufSize, sources, types, ids, severities, lengths, messageLog);
        }
        public static void glPushDebugGroup(uint source, uint id, int length, IntPtr message)
        {
            if (glPushDebugGroupPtr == null)
            {
                glPushDebugGroupPtr = (glPushDebugGroupFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPushDebugGroup"), typeof(glPushDebugGroupFunc));
            }
            glPushDebugGroupPtr(source, id, length, message);
        }
        public static void glPopDebugGroup()
        {
            if (glPopDebugGroupPtr == null)
            {
                glPopDebugGroupPtr = (glPopDebugGroupFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPopDebugGroup"), typeof(glPopDebugGroupFunc));
            }
            glPopDebugGroupPtr();
        }
        public static void glObjectLabel(uint identifier, uint name, int length, IntPtr label)
        {
            if (glObjectLabelPtr == null)
            {
                glObjectLabelPtr = (glObjectLabelFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glObjectLabel"), typeof(glObjectLabelFunc));
            }
            glObjectLabelPtr(identifier, name, length, label);
        }
        public static void glGetObjectLabel(uint identifier, uint name, int bufSize, IntPtr length, IntPtr label)
        {
            if (glGetObjectLabelPtr == null)
            {
                glGetObjectLabelPtr = (glGetObjectLabelFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetObjectLabel"), typeof(glGetObjectLabelFunc));
            }
            glGetObjectLabelPtr(identifier, name, bufSize, length, label);
        }
        public static void glObjectPtrLabel(IntPtr ptr, int length, IntPtr label)
        {
            if (glObjectPtrLabelPtr == null)
            {
                glObjectPtrLabelPtr = (glObjectPtrLabelFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glObjectPtrLabel"), typeof(glObjectPtrLabelFunc));
            }
            glObjectPtrLabelPtr(ptr, length, label);
        }
        public static void glGetObjectPtrLabel(IntPtr ptr, int bufSize, IntPtr length, IntPtr label)
        {
            if (glGetObjectPtrLabelPtr == null)
            {
                glGetObjectPtrLabelPtr = (glGetObjectPtrLabelFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetObjectPtrLabel"), typeof(glGetObjectPtrLabelFunc));
            }
            glGetObjectPtrLabelPtr(ptr, bufSize, length, label);
        }
        public static void glGetPointerv(uint pname, IntPtr @params)
        {
            if (glGetPointervPtr == null)
            {
                glGetPointervPtr = (glGetPointervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetPointerv"), typeof(glGetPointervFunc));
            }
            glGetPointervPtr(pname, @params);
        }
        public static void glBufferStorage(uint target, int size, IntPtr data, uint flags)
        {
            if (glBufferStoragePtr == null)
            {
                glBufferStoragePtr = (glBufferStorageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBufferStorage"), typeof(glBufferStorageFunc));
            }
            glBufferStoragePtr(target, size, data, flags);
        }
        public static void glClearTexImage(uint texture, int level, uint format, uint type, IntPtr data)
        {
            if (glClearTexImagePtr == null)
            {
                glClearTexImagePtr = (glClearTexImageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearTexImage"), typeof(glClearTexImageFunc));
            }
            glClearTexImagePtr(texture, level, format, type, data);
        }
        public static void glClearTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, IntPtr data)
        {
            if (glClearTexSubImagePtr == null)
            {
                glClearTexSubImagePtr = (glClearTexSubImageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearTexSubImage"), typeof(glClearTexSubImageFunc));
            }
            glClearTexSubImagePtr(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
        }
        public static void glBindBuffersBase(uint target, uint first, int count, IntPtr buffers)
        {
            if (glBindBuffersBasePtr == null)
            {
                glBindBuffersBasePtr = (glBindBuffersBaseFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindBuffersBase"), typeof(glBindBuffersBaseFunc));
            }
            glBindBuffersBasePtr(target, first, count, buffers);
        }
        public static void glBindBuffersRange(uint target, uint first, int count, IntPtr buffers, IntPtr offsets, IntPtr sizes)
        {
            if (glBindBuffersRangePtr == null)
            {
                glBindBuffersRangePtr = (glBindBuffersRangeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindBuffersRange"), typeof(glBindBuffersRangeFunc));
            }
            glBindBuffersRangePtr(target, first, count, buffers, offsets, sizes);
        }
        public static void glBindTextures(uint first, int count, IntPtr textures)
        {
            if (glBindTexturesPtr == null)
            {
                glBindTexturesPtr = (glBindTexturesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindTextures"), typeof(glBindTexturesFunc));
            }
            glBindTexturesPtr(first, count, textures);
        }
        public static void glBindSamplers(uint first, int count, IntPtr samplers)
        {
            if (glBindSamplersPtr == null)
            {
                glBindSamplersPtr = (glBindSamplersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindSamplers"), typeof(glBindSamplersFunc));
            }
            glBindSamplersPtr(first, count, samplers);
        }
        public static void glBindImageTextures(uint first, int count, IntPtr textures)
        {
            if (glBindImageTexturesPtr == null)
            {
                glBindImageTexturesPtr = (glBindImageTexturesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindImageTextures"), typeof(glBindImageTexturesFunc));
            }
            glBindImageTexturesPtr(first, count, textures);
        }
        public static void glBindVertexBuffers(uint first, int count, IntPtr buffers, IntPtr offsets, IntPtr strides)
        {
            if (glBindVertexBuffersPtr == null)
            {
                glBindVertexBuffersPtr = (glBindVertexBuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindVertexBuffers"), typeof(glBindVertexBuffersFunc));
            }
            glBindVertexBuffersPtr(first, count, buffers, offsets, strides);
        }
        #endregion

        #region Command Delegates
        private delegate void glCullFaceFunc(uint mode);
        private static glCullFaceFunc glCullFacePtr;
        private delegate void glFrontFaceFunc(uint mode);
        private static glFrontFaceFunc glFrontFacePtr;
        private delegate void glHintFunc(uint target, uint mode);
        private static glHintFunc glHintPtr;
        private delegate void glLineWidthFunc(float width);
        private static glLineWidthFunc glLineWidthPtr;
        private delegate void glPointSizeFunc(float size);
        private static glPointSizeFunc glPointSizePtr;
        private delegate void glPolygonModeFunc(uint face, uint mode);
        private static glPolygonModeFunc glPolygonModePtr;
        private delegate void glScissorFunc(int x, int y, int width, int height);
        private static glScissorFunc glScissorPtr;
        private delegate void glTexParameterfFunc(uint target, uint pname, float param);
        private static glTexParameterfFunc glTexParameterfPtr;
        private delegate void glTexParameterfvFunc(uint target, uint pname, IntPtr @params);
        private static glTexParameterfvFunc glTexParameterfvPtr;
        private delegate void glTexParameteriFunc(uint target, uint pname, int param);
        private static glTexParameteriFunc glTexParameteriPtr;
        private delegate void glTexParameterivFunc(uint target, uint pname, IntPtr @params);
        private static glTexParameterivFunc glTexParameterivPtr;
        private delegate void glTexImage1DFunc(uint target, int level, int internalformat, int width, int border, uint format, uint type, IntPtr pixels);
        private static glTexImage1DFunc glTexImage1DPtr;
        private delegate void glTexImage2DFunc(uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, IntPtr pixels);
        private static glTexImage2DFunc glTexImage2DPtr;
        private delegate void glDrawBufferFunc(uint mode);
        private static glDrawBufferFunc glDrawBufferPtr;
        private delegate void glClearFunc(uint mask);
        private static glClearFunc glClearPtr;
        private delegate void glClearColorFunc(float red, float green, float blue, float alpha);
        private static glClearColorFunc glClearColorPtr;
        private delegate void glClearStencilFunc(int s);
        private static glClearStencilFunc glClearStencilPtr;
        private delegate void glClearDepthFunc(double depth);
        private static glClearDepthFunc glClearDepthPtr;
        private delegate void glStencilMaskFunc(uint mask);
        private static glStencilMaskFunc glStencilMaskPtr;
        private delegate void glColorMaskFunc(bool red, bool green, bool blue, bool alpha);
        private static glColorMaskFunc glColorMaskPtr;
        private delegate void glDepthMaskFunc(bool flag);
        private static glDepthMaskFunc glDepthMaskPtr;
        private delegate void glDisableFunc(uint cap);
        private static glDisableFunc glDisablePtr;
        private delegate void glEnableFunc(uint cap);
        private static glEnableFunc glEnablePtr;
        private delegate void glFinishFunc();
        private static glFinishFunc glFinishPtr;
        private delegate void glFlushFunc();
        private static glFlushFunc glFlushPtr;
        private delegate void glBlendFuncFunc(uint sfactor, uint dfactor);
        private static glBlendFuncFunc glBlendFuncPtr;
        private delegate void glLogicOpFunc(uint opcode);
        private static glLogicOpFunc glLogicOpPtr;
        private delegate void glStencilFuncFunc(uint func, int @ref, uint mask);
        private static glStencilFuncFunc glStencilFuncPtr;
        private delegate void glStencilOpFunc(uint fail, uint zfail, uint zpass);
        private static glStencilOpFunc glStencilOpPtr;
        private delegate void glDepthFuncFunc(uint func);
        private static glDepthFuncFunc glDepthFuncPtr;
        private delegate void glPixelStorefFunc(uint pname, float param);
        private static glPixelStorefFunc glPixelStorefPtr;
        private delegate void glPixelStoreiFunc(uint pname, int param);
        private static glPixelStoreiFunc glPixelStoreiPtr;
        private delegate void glReadBufferFunc(uint mode);
        private static glReadBufferFunc glReadBufferPtr;
        private delegate void glReadPixelsFunc(int x, int y, int width, int height, uint format, uint type, IntPtr pixels);
        private static glReadPixelsFunc glReadPixelsPtr;
        private delegate void glGetBooleanvFunc(uint pname, IntPtr data);
        private static glGetBooleanvFunc glGetBooleanvPtr;
        private delegate void glGetDoublevFunc(uint pname, IntPtr data);
        private static glGetDoublevFunc glGetDoublevPtr;
        private delegate uint glGetErrorFunc();
        private static glGetErrorFunc glGetErrorPtr;
        private delegate void glGetFloatvFunc(uint pname, IntPtr data);
        private static glGetFloatvFunc glGetFloatvPtr;
        private delegate void glGetIntegervFunc(uint pname, IntPtr data);
        private static glGetIntegervFunc glGetIntegervPtr;
        private delegate IntPtr glGetStringFunc(uint name);
        private static glGetStringFunc glGetStringPtr;
        private delegate void glGetTexImageFunc(uint target, int level, uint format, uint type, IntPtr pixels);
        private static glGetTexImageFunc glGetTexImagePtr;
        private delegate void glGetTexParameterfvFunc(uint target, uint pname, IntPtr @params);
        private static glGetTexParameterfvFunc glGetTexParameterfvPtr;
        private delegate void glGetTexParameterivFunc(uint target, uint pname, IntPtr @params);
        private static glGetTexParameterivFunc glGetTexParameterivPtr;
        private delegate void glGetTexLevelParameterfvFunc(uint target, int level, uint pname, IntPtr @params);
        private static glGetTexLevelParameterfvFunc glGetTexLevelParameterfvPtr;
        private delegate void glGetTexLevelParameterivFunc(uint target, int level, uint pname, IntPtr @params);
        private static glGetTexLevelParameterivFunc glGetTexLevelParameterivPtr;
        private delegate bool glIsEnabledFunc(uint cap);
        private static glIsEnabledFunc glIsEnabledPtr;
        private delegate void glDepthRangeFunc(double near, double far);
        private static glDepthRangeFunc glDepthRangePtr;
        private delegate void glViewportFunc(int x, int y, int width, int height);
        private static glViewportFunc glViewportPtr;
        private delegate void glDrawArraysFunc(uint mode, int first, int count);
        private static glDrawArraysFunc glDrawArraysPtr;
        private delegate void glDrawElementsFunc(uint mode, int count, uint type, IntPtr indices);
        private static glDrawElementsFunc glDrawElementsPtr;
        private delegate void glPolygonOffsetFunc(float factor, float units);
        private static glPolygonOffsetFunc glPolygonOffsetPtr;
        private delegate void glCopyTexImage1DFunc(uint target, int level, uint internalformat, int x, int y, int width, int border);
        private static glCopyTexImage1DFunc glCopyTexImage1DPtr;
        private delegate void glCopyTexImage2DFunc(uint target, int level, uint internalformat, int x, int y, int width, int height, int border);
        private static glCopyTexImage2DFunc glCopyTexImage2DPtr;
        private delegate void glCopyTexSubImage1DFunc(uint target, int level, int xoffset, int x, int y, int width);
        private static glCopyTexSubImage1DFunc glCopyTexSubImage1DPtr;
        private delegate void glCopyTexSubImage2DFunc(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
        private static glCopyTexSubImage2DFunc glCopyTexSubImage2DPtr;
        private delegate void glTexSubImage1DFunc(uint target, int level, int xoffset, int width, uint format, uint type, IntPtr pixels);
        private static glTexSubImage1DFunc glTexSubImage1DPtr;
        private delegate void glTexSubImage2DFunc(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, IntPtr pixels);
        private static glTexSubImage2DFunc glTexSubImage2DPtr;
        private delegate void glBindTextureFunc(uint target, uint texture);
        private static glBindTextureFunc glBindTexturePtr;
        private delegate void glDeleteTexturesFunc(int n, IntPtr textures);
        private static glDeleteTexturesFunc glDeleteTexturesPtr;
        private delegate void glGenTexturesFunc(int n, IntPtr textures);
        private static glGenTexturesFunc glGenTexturesPtr;
        private delegate bool glIsTextureFunc(uint texture);
        private static glIsTextureFunc glIsTexturePtr;
        private delegate void glDrawRangeElementsFunc(uint mode, uint start, uint end, int count, uint type, IntPtr indices);
        private static glDrawRangeElementsFunc glDrawRangeElementsPtr;
        private delegate void glTexImage3DFunc(uint target, int level, int internalformat, int width, int height, int depth, int border, uint format, uint type, IntPtr pixels);
        private static glTexImage3DFunc glTexImage3DPtr;
        private delegate void glTexSubImage3DFunc(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, IntPtr pixels);
        private static glTexSubImage3DFunc glTexSubImage3DPtr;
        private delegate void glCopyTexSubImage3DFunc(uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
        private static glCopyTexSubImage3DFunc glCopyTexSubImage3DPtr;
        private delegate void glActiveTextureFunc(uint texture);
        private static glActiveTextureFunc glActiveTexturePtr;
        private delegate void glSampleCoverageFunc(float value, bool invert);
        private static glSampleCoverageFunc glSampleCoveragePtr;
        private delegate void glCompressedTexImage3DFunc(uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data);
        private static glCompressedTexImage3DFunc glCompressedTexImage3DPtr;
        private delegate void glCompressedTexImage2DFunc(uint target, int level, uint internalformat, int width, int height, int border, int imageSize, IntPtr data);
        private static glCompressedTexImage2DFunc glCompressedTexImage2DPtr;
        private delegate void glCompressedTexImage1DFunc(uint target, int level, uint internalformat, int width, int border, int imageSize, IntPtr data);
        private static glCompressedTexImage1DFunc glCompressedTexImage1DPtr;
        private delegate void glCompressedTexSubImage3DFunc(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, IntPtr data);
        private static glCompressedTexSubImage3DFunc glCompressedTexSubImage3DPtr;
        private delegate void glCompressedTexSubImage2DFunc(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, IntPtr data);
        private static glCompressedTexSubImage2DFunc glCompressedTexSubImage2DPtr;
        private delegate void glCompressedTexSubImage1DFunc(uint target, int level, int xoffset, int width, uint format, int imageSize, IntPtr data);
        private static glCompressedTexSubImage1DFunc glCompressedTexSubImage1DPtr;
        private delegate void glGetCompressedTexImageFunc(uint target, int level, IntPtr img);
        private static glGetCompressedTexImageFunc glGetCompressedTexImagePtr;
        private delegate void glBlendFuncSeparateFunc(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha);
        private static glBlendFuncSeparateFunc glBlendFuncSeparatePtr;
        private delegate void glMultiDrawArraysFunc(uint mode, IntPtr first, IntPtr count, int drawcount);
        private static glMultiDrawArraysFunc glMultiDrawArraysPtr;
        private delegate void glMultiDrawElementsFunc(uint mode, IntPtr count, uint type, IntPtr indices, int drawcount);
        private static glMultiDrawElementsFunc glMultiDrawElementsPtr;
        private delegate void glPointParameterfFunc(uint pname, float param);
        private static glPointParameterfFunc glPointParameterfPtr;
        private delegate void glPointParameterfvFunc(uint pname, IntPtr @params);
        private static glPointParameterfvFunc glPointParameterfvPtr;
        private delegate void glPointParameteriFunc(uint pname, int param);
        private static glPointParameteriFunc glPointParameteriPtr;
        private delegate void glPointParameterivFunc(uint pname, IntPtr @params);
        private static glPointParameterivFunc glPointParameterivPtr;
        private delegate void glBlendColorFunc(float red, float green, float blue, float alpha);
        private static glBlendColorFunc glBlendColorPtr;
        private delegate void glBlendEquationFunc(uint mode);
        private static glBlendEquationFunc glBlendEquationPtr;
        private delegate void glGenQueriesFunc(int n, IntPtr ids);
        private static glGenQueriesFunc glGenQueriesPtr;
        private delegate void glDeleteQueriesFunc(int n, IntPtr ids);
        private static glDeleteQueriesFunc glDeleteQueriesPtr;
        private delegate bool glIsQueryFunc(uint id);
        private static glIsQueryFunc glIsQueryPtr;
        private delegate void glBeginQueryFunc(uint target, uint id);
        private static glBeginQueryFunc glBeginQueryPtr;
        private delegate void glEndQueryFunc(uint target);
        private static glEndQueryFunc glEndQueryPtr;
        private delegate void glGetQueryivFunc(uint target, uint pname, IntPtr @params);
        private static glGetQueryivFunc glGetQueryivPtr;
        private delegate void glGetQueryObjectivFunc(uint id, uint pname, IntPtr @params);
        private static glGetQueryObjectivFunc glGetQueryObjectivPtr;
        private delegate void glGetQueryObjectuivFunc(uint id, uint pname, IntPtr @params);
        private static glGetQueryObjectuivFunc glGetQueryObjectuivPtr;
        private delegate void glBindBufferFunc(uint target, uint buffer);
        private static glBindBufferFunc glBindBufferPtr;
        private delegate void glDeleteBuffersFunc(int n, IntPtr buffers);
        private static glDeleteBuffersFunc glDeleteBuffersPtr;
        private delegate void glGenBuffersFunc(int n, IntPtr buffers);
        private static glGenBuffersFunc glGenBuffersPtr;
        private delegate bool glIsBufferFunc(uint buffer);
        private static glIsBufferFunc glIsBufferPtr;
        private delegate void glBufferDataFunc(uint target, int size, IntPtr data, uint usage);
        private static glBufferDataFunc glBufferDataPtr;
        private delegate void glBufferSubDataFunc(uint target, IntPtr offset, int size, IntPtr data);
        private static glBufferSubDataFunc glBufferSubDataPtr;
        private delegate void glGetBufferSubDataFunc(uint target, IntPtr offset, int size, IntPtr data);
        private static glGetBufferSubDataFunc glGetBufferSubDataPtr;
        private delegate IntPtr glMapBufferFunc(uint target, uint access);
        private static glMapBufferFunc glMapBufferPtr;
        private delegate bool glUnmapBufferFunc(uint target);
        private static glUnmapBufferFunc glUnmapBufferPtr;
        private delegate void glGetBufferParameterivFunc(uint target, uint pname, IntPtr @params);
        private static glGetBufferParameterivFunc glGetBufferParameterivPtr;
        private delegate void glGetBufferPointervFunc(uint target, uint pname, IntPtr @params);
        private static glGetBufferPointervFunc glGetBufferPointervPtr;
        private delegate void glBlendEquationSeparateFunc(uint modeRGB, uint modeAlpha);
        private static glBlendEquationSeparateFunc glBlendEquationSeparatePtr;
        private delegate void glDrawBuffersFunc(int n, IntPtr bufs);
        private static glDrawBuffersFunc glDrawBuffersPtr;
        private delegate void glStencilOpSeparateFunc(uint face, uint sfail, uint dpfail, uint dppass);
        private static glStencilOpSeparateFunc glStencilOpSeparatePtr;
        private delegate void glStencilFuncSeparateFunc(uint face, uint func, int @ref, uint mask);
        private static glStencilFuncSeparateFunc glStencilFuncSeparatePtr;
        private delegate void glStencilMaskSeparateFunc(uint face, uint mask);
        private static glStencilMaskSeparateFunc glStencilMaskSeparatePtr;
        private delegate void glAttachShaderFunc(uint program, uint shader);
        private static glAttachShaderFunc glAttachShaderPtr;
        private delegate void glBindAttribLocationFunc(uint program, uint index, IntPtr name);
        private static glBindAttribLocationFunc glBindAttribLocationPtr;
        private delegate void glCompileShaderFunc(uint shader);
        private static glCompileShaderFunc glCompileShaderPtr;
        private delegate uint glCreateProgramFunc();
        private static glCreateProgramFunc glCreateProgramPtr;
        private delegate uint glCreateShaderFunc(uint type);
        private static glCreateShaderFunc glCreateShaderPtr;
        private delegate void glDeleteProgramFunc(uint program);
        private static glDeleteProgramFunc glDeleteProgramPtr;
        private delegate void glDeleteShaderFunc(uint shader);
        private static glDeleteShaderFunc glDeleteShaderPtr;
        private delegate void glDetachShaderFunc(uint program, uint shader);
        private static glDetachShaderFunc glDetachShaderPtr;
        private delegate void glDisableVertexAttribArrayFunc(uint index);
        private static glDisableVertexAttribArrayFunc glDisableVertexAttribArrayPtr;
        private delegate void glEnableVertexAttribArrayFunc(uint index);
        private static glEnableVertexAttribArrayFunc glEnableVertexAttribArrayPtr;
        private delegate void glGetActiveAttribFunc(uint program, uint index, int bufSize, IntPtr length, IntPtr size, IntPtr type, IntPtr name);
        private static glGetActiveAttribFunc glGetActiveAttribPtr;
        private delegate void glGetActiveUniformFunc(uint program, uint index, int bufSize, IntPtr length, IntPtr size, IntPtr type, IntPtr name);
        private static glGetActiveUniformFunc glGetActiveUniformPtr;
        private delegate void glGetAttachedShadersFunc(uint program, int maxCount, IntPtr count, IntPtr shaders);
        private static glGetAttachedShadersFunc glGetAttachedShadersPtr;
        private delegate int glGetAttribLocationFunc(uint program, IntPtr name);
        private static glGetAttribLocationFunc glGetAttribLocationPtr;
        private delegate void glGetProgramivFunc(uint program, uint pname, IntPtr @params);
        private static glGetProgramivFunc glGetProgramivPtr;
        private delegate void glGetProgramInfoLogFunc(uint program, int bufSize, IntPtr length, IntPtr infoLog);
        private static glGetProgramInfoLogFunc glGetProgramInfoLogPtr;
        private delegate void glGetShaderivFunc(uint shader, uint pname, IntPtr @params);
        private static glGetShaderivFunc glGetShaderivPtr;
        private delegate void glGetShaderInfoLogFunc(uint shader, int bufSize, IntPtr length, IntPtr infoLog);
        private static glGetShaderInfoLogFunc glGetShaderInfoLogPtr;
        private delegate void glGetShaderSourceFunc(uint shader, int bufSize, IntPtr length, IntPtr source);
        private static glGetShaderSourceFunc glGetShaderSourcePtr;
        private delegate int glGetUniformLocationFunc(uint program, IntPtr name);
        private static glGetUniformLocationFunc glGetUniformLocationPtr;
        private delegate void glGetUniformfvFunc(uint program, int location, IntPtr @params);
        private static glGetUniformfvFunc glGetUniformfvPtr;
        private delegate void glGetUniformivFunc(uint program, int location, IntPtr @params);
        private static glGetUniformivFunc glGetUniformivPtr;
        private delegate void glGetVertexAttribdvFunc(uint index, uint pname, IntPtr @params);
        private static glGetVertexAttribdvFunc glGetVertexAttribdvPtr;
        private delegate void glGetVertexAttribfvFunc(uint index, uint pname, IntPtr @params);
        private static glGetVertexAttribfvFunc glGetVertexAttribfvPtr;
        private delegate void glGetVertexAttribivFunc(uint index, uint pname, IntPtr @params);
        private static glGetVertexAttribivFunc glGetVertexAttribivPtr;
        private delegate void glGetVertexAttribPointervFunc(uint index, uint pname, IntPtr pointer);
        private static glGetVertexAttribPointervFunc glGetVertexAttribPointervPtr;
        private delegate bool glIsProgramFunc(uint program);
        private static glIsProgramFunc glIsProgramPtr;
        private delegate bool glIsShaderFunc(uint shader);
        private static glIsShaderFunc glIsShaderPtr;
        private delegate void glLinkProgramFunc(uint program);
        private static glLinkProgramFunc glLinkProgramPtr;
        private delegate void glShaderSourceFunc(uint shader, int count, IntPtr @string, IntPtr length);
        private static glShaderSourceFunc glShaderSourcePtr;
        private delegate void glUseProgramFunc(uint program);
        private static glUseProgramFunc glUseProgramPtr;
        private delegate void glUniform1fFunc(int location, float v0);
        private static glUniform1fFunc glUniform1fPtr;
        private delegate void glUniform2fFunc(int location, float v0, float v1);
        private static glUniform2fFunc glUniform2fPtr;
        private delegate void glUniform3fFunc(int location, float v0, float v1, float v2);
        private static glUniform3fFunc glUniform3fPtr;
        private delegate void glUniform4fFunc(int location, float v0, float v1, float v2, float v3);
        private static glUniform4fFunc glUniform4fPtr;
        private delegate void glUniform1iFunc(int location, int v0);
        private static glUniform1iFunc glUniform1iPtr;
        private delegate void glUniform2iFunc(int location, int v0, int v1);
        private static glUniform2iFunc glUniform2iPtr;
        private delegate void glUniform3iFunc(int location, int v0, int v1, int v2);
        private static glUniform3iFunc glUniform3iPtr;
        private delegate void glUniform4iFunc(int location, int v0, int v1, int v2, int v3);
        private static glUniform4iFunc glUniform4iPtr;
        private delegate void glUniform1fvFunc(int location, int count, IntPtr value);
        private static glUniform1fvFunc glUniform1fvPtr;
        private delegate void glUniform2fvFunc(int location, int count, IntPtr value);
        private static glUniform2fvFunc glUniform2fvPtr;
        private delegate void glUniform3fvFunc(int location, int count, IntPtr value);
        private static glUniform3fvFunc glUniform3fvPtr;
        private delegate void glUniform4fvFunc(int location, int count, IntPtr value);
        private static glUniform4fvFunc glUniform4fvPtr;
        private delegate void glUniform1ivFunc(int location, int count, IntPtr value);
        private static glUniform1ivFunc glUniform1ivPtr;
        private delegate void glUniform2ivFunc(int location, int count, IntPtr value);
        private static glUniform2ivFunc glUniform2ivPtr;
        private delegate void glUniform3ivFunc(int location, int count, IntPtr value);
        private static glUniform3ivFunc glUniform3ivPtr;
        private delegate void glUniform4ivFunc(int location, int count, IntPtr value);
        private static glUniform4ivFunc glUniform4ivPtr;
        private delegate void glUniformMatrix2fvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix2fvFunc glUniformMatrix2fvPtr;
        private delegate void glUniformMatrix3fvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix3fvFunc glUniformMatrix3fvPtr;
        private delegate void glUniformMatrix4fvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix4fvFunc glUniformMatrix4fvPtr;
        private delegate void glValidateProgramFunc(uint program);
        private static glValidateProgramFunc glValidateProgramPtr;
        private delegate void glVertexAttrib1dFunc(uint index, double x);
        private static glVertexAttrib1dFunc glVertexAttrib1dPtr;
        private delegate void glVertexAttrib1dvFunc(uint index, IntPtr v);
        private static glVertexAttrib1dvFunc glVertexAttrib1dvPtr;
        private delegate void glVertexAttrib1fFunc(uint index, float x);
        private static glVertexAttrib1fFunc glVertexAttrib1fPtr;
        private delegate void glVertexAttrib1fvFunc(uint index, IntPtr v);
        private static glVertexAttrib1fvFunc glVertexAttrib1fvPtr;
        private delegate void glVertexAttrib1sFunc(uint index, short x);
        private static glVertexAttrib1sFunc glVertexAttrib1sPtr;
        private delegate void glVertexAttrib1svFunc(uint index, IntPtr v);
        private static glVertexAttrib1svFunc glVertexAttrib1svPtr;
        private delegate void glVertexAttrib2dFunc(uint index, double x, double y);
        private static glVertexAttrib2dFunc glVertexAttrib2dPtr;
        private delegate void glVertexAttrib2dvFunc(uint index, IntPtr v);
        private static glVertexAttrib2dvFunc glVertexAttrib2dvPtr;
        private delegate void glVertexAttrib2fFunc(uint index, float x, float y);
        private static glVertexAttrib2fFunc glVertexAttrib2fPtr;
        private delegate void glVertexAttrib2fvFunc(uint index, IntPtr v);
        private static glVertexAttrib2fvFunc glVertexAttrib2fvPtr;
        private delegate void glVertexAttrib2sFunc(uint index, short x, short y);
        private static glVertexAttrib2sFunc glVertexAttrib2sPtr;
        private delegate void glVertexAttrib2svFunc(uint index, IntPtr v);
        private static glVertexAttrib2svFunc glVertexAttrib2svPtr;
        private delegate void glVertexAttrib3dFunc(uint index, double x, double y, double z);
        private static glVertexAttrib3dFunc glVertexAttrib3dPtr;
        private delegate void glVertexAttrib3dvFunc(uint index, IntPtr v);
        private static glVertexAttrib3dvFunc glVertexAttrib3dvPtr;
        private delegate void glVertexAttrib3fFunc(uint index, float x, float y, float z);
        private static glVertexAttrib3fFunc glVertexAttrib3fPtr;
        private delegate void glVertexAttrib3fvFunc(uint index, IntPtr v);
        private static glVertexAttrib3fvFunc glVertexAttrib3fvPtr;
        private delegate void glVertexAttrib3sFunc(uint index, short x, short y, short z);
        private static glVertexAttrib3sFunc glVertexAttrib3sPtr;
        private delegate void glVertexAttrib3svFunc(uint index, IntPtr v);
        private static glVertexAttrib3svFunc glVertexAttrib3svPtr;
        private delegate void glVertexAttrib4NbvFunc(uint index, IntPtr v);
        private static glVertexAttrib4NbvFunc glVertexAttrib4NbvPtr;
        private delegate void glVertexAttrib4NivFunc(uint index, IntPtr v);
        private static glVertexAttrib4NivFunc glVertexAttrib4NivPtr;
        private delegate void glVertexAttrib4NsvFunc(uint index, IntPtr v);
        private static glVertexAttrib4NsvFunc glVertexAttrib4NsvPtr;
        private delegate void glVertexAttrib4NubFunc(uint index, byte x, byte y, byte z, byte w);
        private static glVertexAttrib4NubFunc glVertexAttrib4NubPtr;
        private delegate void glVertexAttrib4NubvFunc(uint index, IntPtr v);
        private static glVertexAttrib4NubvFunc glVertexAttrib4NubvPtr;
        private delegate void glVertexAttrib4NuivFunc(uint index, IntPtr v);
        private static glVertexAttrib4NuivFunc glVertexAttrib4NuivPtr;
        private delegate void glVertexAttrib4NusvFunc(uint index, IntPtr v);
        private static glVertexAttrib4NusvFunc glVertexAttrib4NusvPtr;
        private delegate void glVertexAttrib4bvFunc(uint index, IntPtr v);
        private static glVertexAttrib4bvFunc glVertexAttrib4bvPtr;
        private delegate void glVertexAttrib4dFunc(uint index, double x, double y, double z, double w);
        private static glVertexAttrib4dFunc glVertexAttrib4dPtr;
        private delegate void glVertexAttrib4dvFunc(uint index, IntPtr v);
        private static glVertexAttrib4dvFunc glVertexAttrib4dvPtr;
        private delegate void glVertexAttrib4fFunc(uint index, float x, float y, float z, float w);
        private static glVertexAttrib4fFunc glVertexAttrib4fPtr;
        private delegate void glVertexAttrib4fvFunc(uint index, IntPtr v);
        private static glVertexAttrib4fvFunc glVertexAttrib4fvPtr;
        private delegate void glVertexAttrib4ivFunc(uint index, IntPtr v);
        private static glVertexAttrib4ivFunc glVertexAttrib4ivPtr;
        private delegate void glVertexAttrib4sFunc(uint index, short x, short y, short z, short w);
        private static glVertexAttrib4sFunc glVertexAttrib4sPtr;
        private delegate void glVertexAttrib4svFunc(uint index, IntPtr v);
        private static glVertexAttrib4svFunc glVertexAttrib4svPtr;
        private delegate void glVertexAttrib4ubvFunc(uint index, IntPtr v);
        private static glVertexAttrib4ubvFunc glVertexAttrib4ubvPtr;
        private delegate void glVertexAttrib4uivFunc(uint index, IntPtr v);
        private static glVertexAttrib4uivFunc glVertexAttrib4uivPtr;
        private delegate void glVertexAttrib4usvFunc(uint index, IntPtr v);
        private static glVertexAttrib4usvFunc glVertexAttrib4usvPtr;
        private delegate void glVertexAttribPointerFunc(uint index, int size, uint type, bool normalized, int stride, IntPtr pointer);
        private static glVertexAttribPointerFunc glVertexAttribPointerPtr;
        private delegate void glUniformMatrix2x3fvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix2x3fvFunc glUniformMatrix2x3fvPtr;
        private delegate void glUniformMatrix3x2fvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix3x2fvFunc glUniformMatrix3x2fvPtr;
        private delegate void glUniformMatrix2x4fvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix2x4fvFunc glUniformMatrix2x4fvPtr;
        private delegate void glUniformMatrix4x2fvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix4x2fvFunc glUniformMatrix4x2fvPtr;
        private delegate void glUniformMatrix3x4fvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix3x4fvFunc glUniformMatrix3x4fvPtr;
        private delegate void glUniformMatrix4x3fvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix4x3fvFunc glUniformMatrix4x3fvPtr;
        private delegate void glColorMaskiFunc(uint index, bool r, bool g, bool b, bool a);
        private static glColorMaskiFunc glColorMaskiPtr;
        private delegate void glGetBooleani_vFunc(uint target, uint index, IntPtr data);
        private static glGetBooleani_vFunc glGetBooleani_vPtr;
        private delegate void glGetIntegeri_vFunc(uint target, uint index, IntPtr data);
        private static glGetIntegeri_vFunc glGetIntegeri_vPtr;
        private delegate void glEnableiFunc(uint target, uint index);
        private static glEnableiFunc glEnableiPtr;
        private delegate void glDisableiFunc(uint target, uint index);
        private static glDisableiFunc glDisableiPtr;
        private delegate bool glIsEnablediFunc(uint target, uint index);
        private static glIsEnablediFunc glIsEnablediPtr;
        private delegate void glBeginTransformFeedbackFunc(uint primitiveMode);
        private static glBeginTransformFeedbackFunc glBeginTransformFeedbackPtr;
        private delegate void glEndTransformFeedbackFunc();
        private static glEndTransformFeedbackFunc glEndTransformFeedbackPtr;
        private delegate void glBindBufferRangeFunc(uint target, uint index, uint buffer, IntPtr offset, int size);
        private static glBindBufferRangeFunc glBindBufferRangePtr;
        private delegate void glBindBufferBaseFunc(uint target, uint index, uint buffer);
        private static glBindBufferBaseFunc glBindBufferBasePtr;
        private delegate void glTransformFeedbackVaryingsFunc(uint program, int count, IntPtr varyings, uint bufferMode);
        private static glTransformFeedbackVaryingsFunc glTransformFeedbackVaryingsPtr;
        private delegate void glGetTransformFeedbackVaryingFunc(uint program, uint index, int bufSize, IntPtr length, IntPtr size, IntPtr type, IntPtr name);
        private static glGetTransformFeedbackVaryingFunc glGetTransformFeedbackVaryingPtr;
        private delegate void glClampColorFunc(uint target, uint clamp);
        private static glClampColorFunc glClampColorPtr;
        private delegate void glBeginConditionalRenderFunc(uint id, uint mode);
        private static glBeginConditionalRenderFunc glBeginConditionalRenderPtr;
        private delegate void glEndConditionalRenderFunc();
        private static glEndConditionalRenderFunc glEndConditionalRenderPtr;
        private delegate void glVertexAttribIPointerFunc(uint index, int size, uint type, int stride, IntPtr pointer);
        private static glVertexAttribIPointerFunc glVertexAttribIPointerPtr;
        private delegate void glGetVertexAttribIivFunc(uint index, uint pname, IntPtr @params);
        private static glGetVertexAttribIivFunc glGetVertexAttribIivPtr;
        private delegate void glGetVertexAttribIuivFunc(uint index, uint pname, IntPtr @params);
        private static glGetVertexAttribIuivFunc glGetVertexAttribIuivPtr;
        private delegate void glVertexAttribI1iFunc(uint index, int x);
        private static glVertexAttribI1iFunc glVertexAttribI1iPtr;
        private delegate void glVertexAttribI2iFunc(uint index, int x, int y);
        private static glVertexAttribI2iFunc glVertexAttribI2iPtr;
        private delegate void glVertexAttribI3iFunc(uint index, int x, int y, int z);
        private static glVertexAttribI3iFunc glVertexAttribI3iPtr;
        private delegate void glVertexAttribI4iFunc(uint index, int x, int y, int z, int w);
        private static glVertexAttribI4iFunc glVertexAttribI4iPtr;
        private delegate void glVertexAttribI1uiFunc(uint index, uint x);
        private static glVertexAttribI1uiFunc glVertexAttribI1uiPtr;
        private delegate void glVertexAttribI2uiFunc(uint index, uint x, uint y);
        private static glVertexAttribI2uiFunc glVertexAttribI2uiPtr;
        private delegate void glVertexAttribI3uiFunc(uint index, uint x, uint y, uint z);
        private static glVertexAttribI3uiFunc glVertexAttribI3uiPtr;
        private delegate void glVertexAttribI4uiFunc(uint index, uint x, uint y, uint z, uint w);
        private static glVertexAttribI4uiFunc glVertexAttribI4uiPtr;
        private delegate void glVertexAttribI1ivFunc(uint index, IntPtr v);
        private static glVertexAttribI1ivFunc glVertexAttribI1ivPtr;
        private delegate void glVertexAttribI2ivFunc(uint index, IntPtr v);
        private static glVertexAttribI2ivFunc glVertexAttribI2ivPtr;
        private delegate void glVertexAttribI3ivFunc(uint index, IntPtr v);
        private static glVertexAttribI3ivFunc glVertexAttribI3ivPtr;
        private delegate void glVertexAttribI4ivFunc(uint index, IntPtr v);
        private static glVertexAttribI4ivFunc glVertexAttribI4ivPtr;
        private delegate void glVertexAttribI1uivFunc(uint index, IntPtr v);
        private static glVertexAttribI1uivFunc glVertexAttribI1uivPtr;
        private delegate void glVertexAttribI2uivFunc(uint index, IntPtr v);
        private static glVertexAttribI2uivFunc glVertexAttribI2uivPtr;
        private delegate void glVertexAttribI3uivFunc(uint index, IntPtr v);
        private static glVertexAttribI3uivFunc glVertexAttribI3uivPtr;
        private delegate void glVertexAttribI4uivFunc(uint index, IntPtr v);
        private static glVertexAttribI4uivFunc glVertexAttribI4uivPtr;
        private delegate void glVertexAttribI4bvFunc(uint index, IntPtr v);
        private static glVertexAttribI4bvFunc glVertexAttribI4bvPtr;
        private delegate void glVertexAttribI4svFunc(uint index, IntPtr v);
        private static glVertexAttribI4svFunc glVertexAttribI4svPtr;
        private delegate void glVertexAttribI4ubvFunc(uint index, IntPtr v);
        private static glVertexAttribI4ubvFunc glVertexAttribI4ubvPtr;
        private delegate void glVertexAttribI4usvFunc(uint index, IntPtr v);
        private static glVertexAttribI4usvFunc glVertexAttribI4usvPtr;
        private delegate void glGetUniformuivFunc(uint program, int location, IntPtr @params);
        private static glGetUniformuivFunc glGetUniformuivPtr;
        private delegate void glBindFragDataLocationFunc(uint program, uint color, IntPtr name);
        private static glBindFragDataLocationFunc glBindFragDataLocationPtr;
        private delegate int glGetFragDataLocationFunc(uint program, IntPtr name);
        private static glGetFragDataLocationFunc glGetFragDataLocationPtr;
        private delegate void glUniform1uiFunc(int location, uint v0);
        private static glUniform1uiFunc glUniform1uiPtr;
        private delegate void glUniform2uiFunc(int location, uint v0, uint v1);
        private static glUniform2uiFunc glUniform2uiPtr;
        private delegate void glUniform3uiFunc(int location, uint v0, uint v1, uint v2);
        private static glUniform3uiFunc glUniform3uiPtr;
        private delegate void glUniform4uiFunc(int location, uint v0, uint v1, uint v2, uint v3);
        private static glUniform4uiFunc glUniform4uiPtr;
        private delegate void glUniform1uivFunc(int location, int count, IntPtr value);
        private static glUniform1uivFunc glUniform1uivPtr;
        private delegate void glUniform2uivFunc(int location, int count, IntPtr value);
        private static glUniform2uivFunc glUniform2uivPtr;
        private delegate void glUniform3uivFunc(int location, int count, IntPtr value);
        private static glUniform3uivFunc glUniform3uivPtr;
        private delegate void glUniform4uivFunc(int location, int count, IntPtr value);
        private static glUniform4uivFunc glUniform4uivPtr;
        private delegate void glTexParameterIivFunc(uint target, uint pname, IntPtr @params);
        private static glTexParameterIivFunc glTexParameterIivPtr;
        private delegate void glTexParameterIuivFunc(uint target, uint pname, IntPtr @params);
        private static glTexParameterIuivFunc glTexParameterIuivPtr;
        private delegate void glGetTexParameterIivFunc(uint target, uint pname, IntPtr @params);
        private static glGetTexParameterIivFunc glGetTexParameterIivPtr;
        private delegate void glGetTexParameterIuivFunc(uint target, uint pname, IntPtr @params);
        private static glGetTexParameterIuivFunc glGetTexParameterIuivPtr;
        private delegate void glClearBufferivFunc(uint buffer, int drawbuffer, IntPtr value);
        private static glClearBufferivFunc glClearBufferivPtr;
        private delegate void glClearBufferuivFunc(uint buffer, int drawbuffer, IntPtr value);
        private static glClearBufferuivFunc glClearBufferuivPtr;
        private delegate void glClearBufferfvFunc(uint buffer, int drawbuffer, IntPtr value);
        private static glClearBufferfvFunc glClearBufferfvPtr;
        private delegate void glClearBufferfiFunc(uint buffer, int drawbuffer, float depth, int stencil);
        private static glClearBufferfiFunc glClearBufferfiPtr;
        private delegate IntPtr glGetStringiFunc(uint name, uint index);
        private static glGetStringiFunc glGetStringiPtr;
        private delegate bool glIsRenderbufferFunc(uint renderbuffer);
        private static glIsRenderbufferFunc glIsRenderbufferPtr;
        private delegate void glBindRenderbufferFunc(uint target, uint renderbuffer);
        private static glBindRenderbufferFunc glBindRenderbufferPtr;
        private delegate void glDeleteRenderbuffersFunc(int n, IntPtr renderbuffers);
        private static glDeleteRenderbuffersFunc glDeleteRenderbuffersPtr;
        private delegate void glGenRenderbuffersFunc(int n, IntPtr renderbuffers);
        private static glGenRenderbuffersFunc glGenRenderbuffersPtr;
        private delegate void glRenderbufferStorageFunc(uint target, uint internalformat, int width, int height);
        private static glRenderbufferStorageFunc glRenderbufferStoragePtr;
        private delegate void glGetRenderbufferParameterivFunc(uint target, uint pname, IntPtr @params);
        private static glGetRenderbufferParameterivFunc glGetRenderbufferParameterivPtr;
        private delegate bool glIsFramebufferFunc(uint framebuffer);
        private static glIsFramebufferFunc glIsFramebufferPtr;
        private delegate void glBindFramebufferFunc(uint target, uint framebuffer);
        private static glBindFramebufferFunc glBindFramebufferPtr;
        private delegate void glDeleteFramebuffersFunc(int n, IntPtr framebuffers);
        private static glDeleteFramebuffersFunc glDeleteFramebuffersPtr;
        private delegate void glGenFramebuffersFunc(int n, IntPtr framebuffers);
        private static glGenFramebuffersFunc glGenFramebuffersPtr;
        private delegate uint glCheckFramebufferStatusFunc(uint target);
        private static glCheckFramebufferStatusFunc glCheckFramebufferStatusPtr;
        private delegate void glFramebufferTexture1DFunc(uint target, uint attachment, uint textarget, uint texture, int level);
        private static glFramebufferTexture1DFunc glFramebufferTexture1DPtr;
        private delegate void glFramebufferTexture2DFunc(uint target, uint attachment, uint textarget, uint texture, int level);
        private static glFramebufferTexture2DFunc glFramebufferTexture2DPtr;
        private delegate void glFramebufferTexture3DFunc(uint target, uint attachment, uint textarget, uint texture, int level, int zoffset);
        private static glFramebufferTexture3DFunc glFramebufferTexture3DPtr;
        private delegate void glFramebufferRenderbufferFunc(uint target, uint attachment, uint renderbuffertarget, uint renderbuffer);
        private static glFramebufferRenderbufferFunc glFramebufferRenderbufferPtr;
        private delegate void glGetFramebufferAttachmentParameterivFunc(uint target, uint attachment, uint pname, IntPtr @params);
        private static glGetFramebufferAttachmentParameterivFunc glGetFramebufferAttachmentParameterivPtr;
        private delegate void glGenerateMipmapFunc(uint target);
        private static glGenerateMipmapFunc glGenerateMipmapPtr;
        private delegate void glBlitFramebufferFunc(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter);
        private static glBlitFramebufferFunc glBlitFramebufferPtr;
        private delegate void glRenderbufferStorageMultisampleFunc(uint target, int samples, uint internalformat, int width, int height);
        private static glRenderbufferStorageMultisampleFunc glRenderbufferStorageMultisamplePtr;
        private delegate void glFramebufferTextureLayerFunc(uint target, uint attachment, uint texture, int level, int layer);
        private static glFramebufferTextureLayerFunc glFramebufferTextureLayerPtr;
        private delegate IntPtr glMapBufferRangeFunc(uint target, IntPtr offset, int length, uint access);
        private static glMapBufferRangeFunc glMapBufferRangePtr;
        private delegate void glFlushMappedBufferRangeFunc(uint target, IntPtr offset, int length);
        private static glFlushMappedBufferRangeFunc glFlushMappedBufferRangePtr;
        private delegate void glBindVertexArrayFunc(uint array);
        private static glBindVertexArrayFunc glBindVertexArrayPtr;
        private delegate void glDeleteVertexArraysFunc(int n, IntPtr arrays);
        private static glDeleteVertexArraysFunc glDeleteVertexArraysPtr;
        private delegate void glGenVertexArraysFunc(int n, IntPtr arrays);
        private static glGenVertexArraysFunc glGenVertexArraysPtr;
        private delegate bool glIsVertexArrayFunc(uint array);
        private static glIsVertexArrayFunc glIsVertexArrayPtr;
        private delegate void glDrawArraysInstancedFunc(uint mode, int first, int count, int instancecount);
        private static glDrawArraysInstancedFunc glDrawArraysInstancedPtr;
        private delegate void glDrawElementsInstancedFunc(uint mode, int count, uint type, IntPtr indices, int instancecount);
        private static glDrawElementsInstancedFunc glDrawElementsInstancedPtr;
        private delegate void glTexBufferFunc(uint target, uint internalformat, uint buffer);
        private static glTexBufferFunc glTexBufferPtr;
        private delegate void glPrimitiveRestartIndexFunc(uint index);
        private static glPrimitiveRestartIndexFunc glPrimitiveRestartIndexPtr;
        private delegate void glCopyBufferSubDataFunc(uint readTarget, uint writeTarget, IntPtr readOffset, IntPtr writeOffset, int size);
        private static glCopyBufferSubDataFunc glCopyBufferSubDataPtr;
        private delegate void glGetUniformIndicesFunc(uint program, int uniformCount, IntPtr uniformNames, IntPtr uniformIndices);
        private static glGetUniformIndicesFunc glGetUniformIndicesPtr;
        private delegate void glGetActiveUniformsivFunc(uint program, int uniformCount, IntPtr uniformIndices, uint pname, IntPtr @params);
        private static glGetActiveUniformsivFunc glGetActiveUniformsivPtr;
        private delegate void glGetActiveUniformNameFunc(uint program, uint uniformIndex, int bufSize, IntPtr length, IntPtr uniformName);
        private static glGetActiveUniformNameFunc glGetActiveUniformNamePtr;
        private delegate uint glGetUniformBlockIndexFunc(uint program, IntPtr uniformBlockName);
        private static glGetUniformBlockIndexFunc glGetUniformBlockIndexPtr;
        private delegate void glGetActiveUniformBlockivFunc(uint program, uint uniformBlockIndex, uint pname, IntPtr @params);
        private static glGetActiveUniformBlockivFunc glGetActiveUniformBlockivPtr;
        private delegate void glGetActiveUniformBlockNameFunc(uint program, uint uniformBlockIndex, int bufSize, IntPtr length, IntPtr uniformBlockName);
        private static glGetActiveUniformBlockNameFunc glGetActiveUniformBlockNamePtr;
        private delegate void glUniformBlockBindingFunc(uint program, uint uniformBlockIndex, uint uniformBlockBinding);
        private static glUniformBlockBindingFunc glUniformBlockBindingPtr;
        private delegate void glDrawElementsBaseVertexFunc(uint mode, int count, uint type, IntPtr indices, int basevertex);
        private static glDrawElementsBaseVertexFunc glDrawElementsBaseVertexPtr;
        private delegate void glDrawRangeElementsBaseVertexFunc(uint mode, uint start, uint end, int count, uint type, IntPtr indices, int basevertex);
        private static glDrawRangeElementsBaseVertexFunc glDrawRangeElementsBaseVertexPtr;
        private delegate void glDrawElementsInstancedBaseVertexFunc(uint mode, int count, uint type, IntPtr indices, int instancecount, int basevertex);
        private static glDrawElementsInstancedBaseVertexFunc glDrawElementsInstancedBaseVertexPtr;
        private delegate void glMultiDrawElementsBaseVertexFunc(uint mode, IntPtr count, uint type, IntPtr indices, int drawcount, IntPtr basevertex);
        private static glMultiDrawElementsBaseVertexFunc glMultiDrawElementsBaseVertexPtr;
        private delegate void glProvokingVertexFunc(uint mode);
        private static glProvokingVertexFunc glProvokingVertexPtr;
        private delegate IntPtr glFenceSyncFunc(uint condition, uint flags);
        private static glFenceSyncFunc glFenceSyncPtr;
        private delegate bool glIsSyncFunc(IntPtr sync);
        private static glIsSyncFunc glIsSyncPtr;
        private delegate void glDeleteSyncFunc(IntPtr sync);
        private static glDeleteSyncFunc glDeleteSyncPtr;
        private delegate uint glClientWaitSyncFunc(IntPtr sync, uint flags, ulong timeout);
        private static glClientWaitSyncFunc glClientWaitSyncPtr;
        private delegate void glWaitSyncFunc(IntPtr sync, uint flags, ulong timeout);
        private static glWaitSyncFunc glWaitSyncPtr;
        private delegate void glGetInteger64vFunc(uint pname, IntPtr data);
        private static glGetInteger64vFunc glGetInteger64vPtr;
        private delegate void glGetSyncivFunc(IntPtr sync, uint pname, int bufSize, IntPtr length, IntPtr values);
        private static glGetSyncivFunc glGetSyncivPtr;
        private delegate void glGetInteger64i_vFunc(uint target, uint index, IntPtr data);
        private static glGetInteger64i_vFunc glGetInteger64i_vPtr;
        private delegate void glGetBufferParameteri64vFunc(uint target, uint pname, IntPtr @params);
        private static glGetBufferParameteri64vFunc glGetBufferParameteri64vPtr;
        private delegate void glFramebufferTextureFunc(uint target, uint attachment, uint texture, int level);
        private static glFramebufferTextureFunc glFramebufferTexturePtr;
        private delegate void glTexImage2DMultisampleFunc(uint target, int samples, uint internalformat, int width, int height, bool fixedsamplelocations);
        private static glTexImage2DMultisampleFunc glTexImage2DMultisamplePtr;
        private delegate void glTexImage3DMultisampleFunc(uint target, int samples, uint internalformat, int width, int height, int depth, bool fixedsamplelocations);
        private static glTexImage3DMultisampleFunc glTexImage3DMultisamplePtr;
        private delegate void glGetMultisamplefvFunc(uint pname, uint index, IntPtr val);
        private static glGetMultisamplefvFunc glGetMultisamplefvPtr;
        private delegate void glSampleMaskiFunc(uint index, uint mask);
        private static glSampleMaskiFunc glSampleMaskiPtr;
        private delegate void glBindFragDataLocationIndexedFunc(uint program, uint colorNumber, uint index, IntPtr name);
        private static glBindFragDataLocationIndexedFunc glBindFragDataLocationIndexedPtr;
        private delegate int glGetFragDataIndexFunc(uint program, IntPtr name);
        private static glGetFragDataIndexFunc glGetFragDataIndexPtr;
        private delegate void glGenSamplersFunc(int count, IntPtr samplers);
        private static glGenSamplersFunc glGenSamplersPtr;
        private delegate void glDeleteSamplersFunc(int count, IntPtr samplers);
        private static glDeleteSamplersFunc glDeleteSamplersPtr;
        private delegate bool glIsSamplerFunc(uint sampler);
        private static glIsSamplerFunc glIsSamplerPtr;
        private delegate void glBindSamplerFunc(uint unit, uint sampler);
        private static glBindSamplerFunc glBindSamplerPtr;
        private delegate void glSamplerParameteriFunc(uint sampler, uint pname, int param);
        private static glSamplerParameteriFunc glSamplerParameteriPtr;
        private delegate void glSamplerParameterivFunc(uint sampler, uint pname, IntPtr param);
        private static glSamplerParameterivFunc glSamplerParameterivPtr;
        private delegate void glSamplerParameterfFunc(uint sampler, uint pname, float param);
        private static glSamplerParameterfFunc glSamplerParameterfPtr;
        private delegate void glSamplerParameterfvFunc(uint sampler, uint pname, IntPtr param);
        private static glSamplerParameterfvFunc glSamplerParameterfvPtr;
        private delegate void glSamplerParameterIivFunc(uint sampler, uint pname, IntPtr param);
        private static glSamplerParameterIivFunc glSamplerParameterIivPtr;
        private delegate void glSamplerParameterIuivFunc(uint sampler, uint pname, IntPtr param);
        private static glSamplerParameterIuivFunc glSamplerParameterIuivPtr;
        private delegate void glGetSamplerParameterivFunc(uint sampler, uint pname, IntPtr @params);
        private static glGetSamplerParameterivFunc glGetSamplerParameterivPtr;
        private delegate void glGetSamplerParameterIivFunc(uint sampler, uint pname, IntPtr @params);
        private static glGetSamplerParameterIivFunc glGetSamplerParameterIivPtr;
        private delegate void glGetSamplerParameterfvFunc(uint sampler, uint pname, IntPtr @params);
        private static glGetSamplerParameterfvFunc glGetSamplerParameterfvPtr;
        private delegate void glGetSamplerParameterIuivFunc(uint sampler, uint pname, IntPtr @params);
        private static glGetSamplerParameterIuivFunc glGetSamplerParameterIuivPtr;
        private delegate void glQueryCounterFunc(uint id, uint target);
        private static glQueryCounterFunc glQueryCounterPtr;
        private delegate void glGetQueryObjecti64vFunc(uint id, uint pname, IntPtr @params);
        private static glGetQueryObjecti64vFunc glGetQueryObjecti64vPtr;
        private delegate void glGetQueryObjectui64vFunc(uint id, uint pname, IntPtr @params);
        private static glGetQueryObjectui64vFunc glGetQueryObjectui64vPtr;
        private delegate void glVertexAttribDivisorFunc(uint index, uint divisor);
        private static glVertexAttribDivisorFunc glVertexAttribDivisorPtr;
        private delegate void glVertexAttribP1uiFunc(uint index, uint type, bool normalized, uint value);
        private static glVertexAttribP1uiFunc glVertexAttribP1uiPtr;
        private delegate void glVertexAttribP1uivFunc(uint index, uint type, bool normalized, IntPtr value);
        private static glVertexAttribP1uivFunc glVertexAttribP1uivPtr;
        private delegate void glVertexAttribP2uiFunc(uint index, uint type, bool normalized, uint value);
        private static glVertexAttribP2uiFunc glVertexAttribP2uiPtr;
        private delegate void glVertexAttribP2uivFunc(uint index, uint type, bool normalized, IntPtr value);
        private static glVertexAttribP2uivFunc glVertexAttribP2uivPtr;
        private delegate void glVertexAttribP3uiFunc(uint index, uint type, bool normalized, uint value);
        private static glVertexAttribP3uiFunc glVertexAttribP3uiPtr;
        private delegate void glVertexAttribP3uivFunc(uint index, uint type, bool normalized, IntPtr value);
        private static glVertexAttribP3uivFunc glVertexAttribP3uivPtr;
        private delegate void glVertexAttribP4uiFunc(uint index, uint type, bool normalized, uint value);
        private static glVertexAttribP4uiFunc glVertexAttribP4uiPtr;
        private delegate void glVertexAttribP4uivFunc(uint index, uint type, bool normalized, IntPtr value);
        private static glVertexAttribP4uivFunc glVertexAttribP4uivPtr;
        private delegate void glVertexP2uiFunc(uint type, uint value);
        private static glVertexP2uiFunc glVertexP2uiPtr;
        private delegate void glVertexP2uivFunc(uint type, IntPtr value);
        private static glVertexP2uivFunc glVertexP2uivPtr;
        private delegate void glVertexP3uiFunc(uint type, uint value);
        private static glVertexP3uiFunc glVertexP3uiPtr;
        private delegate void glVertexP3uivFunc(uint type, IntPtr value);
        private static glVertexP3uivFunc glVertexP3uivPtr;
        private delegate void glVertexP4uiFunc(uint type, uint value);
        private static glVertexP4uiFunc glVertexP4uiPtr;
        private delegate void glVertexP4uivFunc(uint type, IntPtr value);
        private static glVertexP4uivFunc glVertexP4uivPtr;
        private delegate void glTexCoordP1uiFunc(uint type, uint coords);
        private static glTexCoordP1uiFunc glTexCoordP1uiPtr;
        private delegate void glTexCoordP1uivFunc(uint type, IntPtr coords);
        private static glTexCoordP1uivFunc glTexCoordP1uivPtr;
        private delegate void glTexCoordP2uiFunc(uint type, uint coords);
        private static glTexCoordP2uiFunc glTexCoordP2uiPtr;
        private delegate void glTexCoordP2uivFunc(uint type, IntPtr coords);
        private static glTexCoordP2uivFunc glTexCoordP2uivPtr;
        private delegate void glTexCoordP3uiFunc(uint type, uint coords);
        private static glTexCoordP3uiFunc glTexCoordP3uiPtr;
        private delegate void glTexCoordP3uivFunc(uint type, IntPtr coords);
        private static glTexCoordP3uivFunc glTexCoordP3uivPtr;
        private delegate void glTexCoordP4uiFunc(uint type, uint coords);
        private static glTexCoordP4uiFunc glTexCoordP4uiPtr;
        private delegate void glTexCoordP4uivFunc(uint type, IntPtr coords);
        private static glTexCoordP4uivFunc glTexCoordP4uivPtr;
        private delegate void glMultiTexCoordP1uiFunc(uint texture, uint type, uint coords);
        private static glMultiTexCoordP1uiFunc glMultiTexCoordP1uiPtr;
        private delegate void glMultiTexCoordP1uivFunc(uint texture, uint type, IntPtr coords);
        private static glMultiTexCoordP1uivFunc glMultiTexCoordP1uivPtr;
        private delegate void glMultiTexCoordP2uiFunc(uint texture, uint type, uint coords);
        private static glMultiTexCoordP2uiFunc glMultiTexCoordP2uiPtr;
        private delegate void glMultiTexCoordP2uivFunc(uint texture, uint type, IntPtr coords);
        private static glMultiTexCoordP2uivFunc glMultiTexCoordP2uivPtr;
        private delegate void glMultiTexCoordP3uiFunc(uint texture, uint type, uint coords);
        private static glMultiTexCoordP3uiFunc glMultiTexCoordP3uiPtr;
        private delegate void glMultiTexCoordP3uivFunc(uint texture, uint type, IntPtr coords);
        private static glMultiTexCoordP3uivFunc glMultiTexCoordP3uivPtr;
        private delegate void glMultiTexCoordP4uiFunc(uint texture, uint type, uint coords);
        private static glMultiTexCoordP4uiFunc glMultiTexCoordP4uiPtr;
        private delegate void glMultiTexCoordP4uivFunc(uint texture, uint type, IntPtr coords);
        private static glMultiTexCoordP4uivFunc glMultiTexCoordP4uivPtr;
        private delegate void glNormalP3uiFunc(uint type, uint coords);
        private static glNormalP3uiFunc glNormalP3uiPtr;
        private delegate void glNormalP3uivFunc(uint type, IntPtr coords);
        private static glNormalP3uivFunc glNormalP3uivPtr;
        private delegate void glColorP3uiFunc(uint type, uint color);
        private static glColorP3uiFunc glColorP3uiPtr;
        private delegate void glColorP3uivFunc(uint type, IntPtr color);
        private static glColorP3uivFunc glColorP3uivPtr;
        private delegate void glColorP4uiFunc(uint type, uint color);
        private static glColorP4uiFunc glColorP4uiPtr;
        private delegate void glColorP4uivFunc(uint type, IntPtr color);
        private static glColorP4uivFunc glColorP4uivPtr;
        private delegate void glSecondaryColorP3uiFunc(uint type, uint color);
        private static glSecondaryColorP3uiFunc glSecondaryColorP3uiPtr;
        private delegate void glSecondaryColorP3uivFunc(uint type, IntPtr color);
        private static glSecondaryColorP3uivFunc glSecondaryColorP3uivPtr;
        private delegate void glMinSampleShadingFunc(float value);
        private static glMinSampleShadingFunc glMinSampleShadingPtr;
        private delegate void glBlendEquationiFunc(uint buf, uint mode);
        private static glBlendEquationiFunc glBlendEquationiPtr;
        private delegate void glBlendEquationSeparateiFunc(uint buf, uint modeRGB, uint modeAlpha);
        private static glBlendEquationSeparateiFunc glBlendEquationSeparateiPtr;
        private delegate void glBlendFunciFunc(uint buf, uint src, uint dst);
        private static glBlendFunciFunc glBlendFunciPtr;
        private delegate void glBlendFuncSeparateiFunc(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha);
        private static glBlendFuncSeparateiFunc glBlendFuncSeparateiPtr;
        private delegate void glDrawArraysIndirectFunc(uint mode, IntPtr indirect);
        private static glDrawArraysIndirectFunc glDrawArraysIndirectPtr;
        private delegate void glDrawElementsIndirectFunc(uint mode, uint type, IntPtr indirect);
        private static glDrawElementsIndirectFunc glDrawElementsIndirectPtr;
        private delegate void glUniform1dFunc(int location, double x);
        private static glUniform1dFunc glUniform1dPtr;
        private delegate void glUniform2dFunc(int location, double x, double y);
        private static glUniform2dFunc glUniform2dPtr;
        private delegate void glUniform3dFunc(int location, double x, double y, double z);
        private static glUniform3dFunc glUniform3dPtr;
        private delegate void glUniform4dFunc(int location, double x, double y, double z, double w);
        private static glUniform4dFunc glUniform4dPtr;
        private delegate void glUniform1dvFunc(int location, int count, IntPtr value);
        private static glUniform1dvFunc glUniform1dvPtr;
        private delegate void glUniform2dvFunc(int location, int count, IntPtr value);
        private static glUniform2dvFunc glUniform2dvPtr;
        private delegate void glUniform3dvFunc(int location, int count, IntPtr value);
        private static glUniform3dvFunc glUniform3dvPtr;
        private delegate void glUniform4dvFunc(int location, int count, IntPtr value);
        private static glUniform4dvFunc glUniform4dvPtr;
        private delegate void glUniformMatrix2dvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix2dvFunc glUniformMatrix2dvPtr;
        private delegate void glUniformMatrix3dvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix3dvFunc glUniformMatrix3dvPtr;
        private delegate void glUniformMatrix4dvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix4dvFunc glUniformMatrix4dvPtr;
        private delegate void glUniformMatrix2x3dvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix2x3dvFunc glUniformMatrix2x3dvPtr;
        private delegate void glUniformMatrix2x4dvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix2x4dvFunc glUniformMatrix2x4dvPtr;
        private delegate void glUniformMatrix3x2dvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix3x2dvFunc glUniformMatrix3x2dvPtr;
        private delegate void glUniformMatrix3x4dvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix3x4dvFunc glUniformMatrix3x4dvPtr;
        private delegate void glUniformMatrix4x2dvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix4x2dvFunc glUniformMatrix4x2dvPtr;
        private delegate void glUniformMatrix4x3dvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix4x3dvFunc glUniformMatrix4x3dvPtr;
        private delegate void glGetUniformdvFunc(uint program, int location, IntPtr @params);
        private static glGetUniformdvFunc glGetUniformdvPtr;
        private delegate int glGetSubroutineUniformLocationFunc(uint program, uint shadertype, IntPtr name);
        private static glGetSubroutineUniformLocationFunc glGetSubroutineUniformLocationPtr;
        private delegate uint glGetSubroutineIndexFunc(uint program, uint shadertype, IntPtr name);
        private static glGetSubroutineIndexFunc glGetSubroutineIndexPtr;
        private delegate void glGetActiveSubroutineUniformivFunc(uint program, uint shadertype, uint index, uint pname, IntPtr values);
        private static glGetActiveSubroutineUniformivFunc glGetActiveSubroutineUniformivPtr;
        private delegate void glGetActiveSubroutineUniformNameFunc(uint program, uint shadertype, uint index, int bufsize, IntPtr length, IntPtr name);
        private static glGetActiveSubroutineUniformNameFunc glGetActiveSubroutineUniformNamePtr;
        private delegate void glGetActiveSubroutineNameFunc(uint program, uint shadertype, uint index, int bufsize, IntPtr length, IntPtr name);
        private static glGetActiveSubroutineNameFunc glGetActiveSubroutineNamePtr;
        private delegate void glUniformSubroutinesuivFunc(uint shadertype, int count, IntPtr indices);
        private static glUniformSubroutinesuivFunc glUniformSubroutinesuivPtr;
        private delegate void glGetUniformSubroutineuivFunc(uint shadertype, int location, IntPtr @params);
        private static glGetUniformSubroutineuivFunc glGetUniformSubroutineuivPtr;
        private delegate void glGetProgramStageivFunc(uint program, uint shadertype, uint pname, IntPtr values);
        private static glGetProgramStageivFunc glGetProgramStageivPtr;
        private delegate void glPatchParameteriFunc(uint pname, int value);
        private static glPatchParameteriFunc glPatchParameteriPtr;
        private delegate void glPatchParameterfvFunc(uint pname, IntPtr values);
        private static glPatchParameterfvFunc glPatchParameterfvPtr;
        private delegate void glBindTransformFeedbackFunc(uint target, uint id);
        private static glBindTransformFeedbackFunc glBindTransformFeedbackPtr;
        private delegate void glDeleteTransformFeedbacksFunc(int n, IntPtr ids);
        private static glDeleteTransformFeedbacksFunc glDeleteTransformFeedbacksPtr;
        private delegate void glGenTransformFeedbacksFunc(int n, IntPtr ids);
        private static glGenTransformFeedbacksFunc glGenTransformFeedbacksPtr;
        private delegate bool glIsTransformFeedbackFunc(uint id);
        private static glIsTransformFeedbackFunc glIsTransformFeedbackPtr;
        private delegate void glPauseTransformFeedbackFunc();
        private static glPauseTransformFeedbackFunc glPauseTransformFeedbackPtr;
        private delegate void glResumeTransformFeedbackFunc();
        private static glResumeTransformFeedbackFunc glResumeTransformFeedbackPtr;
        private delegate void glDrawTransformFeedbackFunc(uint mode, uint id);
        private static glDrawTransformFeedbackFunc glDrawTransformFeedbackPtr;
        private delegate void glDrawTransformFeedbackStreamFunc(uint mode, uint id, uint stream);
        private static glDrawTransformFeedbackStreamFunc glDrawTransformFeedbackStreamPtr;
        private delegate void glBeginQueryIndexedFunc(uint target, uint index, uint id);
        private static glBeginQueryIndexedFunc glBeginQueryIndexedPtr;
        private delegate void glEndQueryIndexedFunc(uint target, uint index);
        private static glEndQueryIndexedFunc glEndQueryIndexedPtr;
        private delegate void glGetQueryIndexedivFunc(uint target, uint index, uint pname, IntPtr @params);
        private static glGetQueryIndexedivFunc glGetQueryIndexedivPtr;
        private delegate void glReleaseShaderCompilerFunc();
        private static glReleaseShaderCompilerFunc glReleaseShaderCompilerPtr;
        private delegate void glShaderBinaryFunc(int count, IntPtr shaders, uint binaryformat, IntPtr binary, int length);
        private static glShaderBinaryFunc glShaderBinaryPtr;
        private delegate void glGetShaderPrecisionFormatFunc(uint shadertype, uint precisiontype, IntPtr range, IntPtr precision);
        private static glGetShaderPrecisionFormatFunc glGetShaderPrecisionFormatPtr;
        private delegate void glDepthRangefFunc(float n, float f);
        private static glDepthRangefFunc glDepthRangefPtr;
        private delegate void glClearDepthfFunc(float d);
        private static glClearDepthfFunc glClearDepthfPtr;
        private delegate void glGetProgramBinaryFunc(uint program, int bufSize, IntPtr length, IntPtr binaryFormat, IntPtr binary);
        private static glGetProgramBinaryFunc glGetProgramBinaryPtr;
        private delegate void glProgramBinaryFunc(uint program, uint binaryFormat, IntPtr binary, int length);
        private static glProgramBinaryFunc glProgramBinaryPtr;
        private delegate void glProgramParameteriFunc(uint program, uint pname, int value);
        private static glProgramParameteriFunc glProgramParameteriPtr;
        private delegate void glUseProgramStagesFunc(uint pipeline, uint stages, uint program);
        private static glUseProgramStagesFunc glUseProgramStagesPtr;
        private delegate void glActiveShaderProgramFunc(uint pipeline, uint program);
        private static glActiveShaderProgramFunc glActiveShaderProgramPtr;
        private delegate uint glCreateShaderProgramvFunc(uint type, int count, IntPtr strings);
        private static glCreateShaderProgramvFunc glCreateShaderProgramvPtr;
        private delegate void glBindProgramPipelineFunc(uint pipeline);
        private static glBindProgramPipelineFunc glBindProgramPipelinePtr;
        private delegate void glDeleteProgramPipelinesFunc(int n, IntPtr pipelines);
        private static glDeleteProgramPipelinesFunc glDeleteProgramPipelinesPtr;
        private delegate void glGenProgramPipelinesFunc(int n, IntPtr pipelines);
        private static glGenProgramPipelinesFunc glGenProgramPipelinesPtr;
        private delegate bool glIsProgramPipelineFunc(uint pipeline);
        private static glIsProgramPipelineFunc glIsProgramPipelinePtr;
        private delegate void glGetProgramPipelineivFunc(uint pipeline, uint pname, IntPtr @params);
        private static glGetProgramPipelineivFunc glGetProgramPipelineivPtr;
        private delegate void glProgramUniform1iFunc(uint program, int location, int v0);
        private static glProgramUniform1iFunc glProgramUniform1iPtr;
        private delegate void glProgramUniform1ivFunc(uint program, int location, int count, IntPtr value);
        private static glProgramUniform1ivFunc glProgramUniform1ivPtr;
        private delegate void glProgramUniform1fFunc(uint program, int location, float v0);
        private static glProgramUniform1fFunc glProgramUniform1fPtr;
        private delegate void glProgramUniform1fvFunc(uint program, int location, int count, IntPtr value);
        private static glProgramUniform1fvFunc glProgramUniform1fvPtr;
        private delegate void glProgramUniform1dFunc(uint program, int location, double v0);
        private static glProgramUniform1dFunc glProgramUniform1dPtr;
        private delegate void glProgramUniform1dvFunc(uint program, int location, int count, IntPtr value);
        private static glProgramUniform1dvFunc glProgramUniform1dvPtr;
        private delegate void glProgramUniform1uiFunc(uint program, int location, uint v0);
        private static glProgramUniform1uiFunc glProgramUniform1uiPtr;
        private delegate void glProgramUniform1uivFunc(uint program, int location, int count, IntPtr value);
        private static glProgramUniform1uivFunc glProgramUniform1uivPtr;
        private delegate void glProgramUniform2iFunc(uint program, int location, int v0, int v1);
        private static glProgramUniform2iFunc glProgramUniform2iPtr;
        private delegate void glProgramUniform2ivFunc(uint program, int location, int count, IntPtr value);
        private static glProgramUniform2ivFunc glProgramUniform2ivPtr;
        private delegate void glProgramUniform2fFunc(uint program, int location, float v0, float v1);
        private static glProgramUniform2fFunc glProgramUniform2fPtr;
        private delegate void glProgramUniform2fvFunc(uint program, int location, int count, IntPtr value);
        private static glProgramUniform2fvFunc glProgramUniform2fvPtr;
        private delegate void glProgramUniform2dFunc(uint program, int location, double v0, double v1);
        private static glProgramUniform2dFunc glProgramUniform2dPtr;
        private delegate void glProgramUniform2dvFunc(uint program, int location, int count, IntPtr value);
        private static glProgramUniform2dvFunc glProgramUniform2dvPtr;
        private delegate void glProgramUniform2uiFunc(uint program, int location, uint v0, uint v1);
        private static glProgramUniform2uiFunc glProgramUniform2uiPtr;
        private delegate void glProgramUniform2uivFunc(uint program, int location, int count, IntPtr value);
        private static glProgramUniform2uivFunc glProgramUniform2uivPtr;
        private delegate void glProgramUniform3iFunc(uint program, int location, int v0, int v1, int v2);
        private static glProgramUniform3iFunc glProgramUniform3iPtr;
        private delegate void glProgramUniform3ivFunc(uint program, int location, int count, IntPtr value);
        private static glProgramUniform3ivFunc glProgramUniform3ivPtr;
        private delegate void glProgramUniform3fFunc(uint program, int location, float v0, float v1, float v2);
        private static glProgramUniform3fFunc glProgramUniform3fPtr;
        private delegate void glProgramUniform3fvFunc(uint program, int location, int count, IntPtr value);
        private static glProgramUniform3fvFunc glProgramUniform3fvPtr;
        private delegate void glProgramUniform3dFunc(uint program, int location, double v0, double v1, double v2);
        private static glProgramUniform3dFunc glProgramUniform3dPtr;
        private delegate void glProgramUniform3dvFunc(uint program, int location, int count, IntPtr value);
        private static glProgramUniform3dvFunc glProgramUniform3dvPtr;
        private delegate void glProgramUniform3uiFunc(uint program, int location, uint v0, uint v1, uint v2);
        private static glProgramUniform3uiFunc glProgramUniform3uiPtr;
        private delegate void glProgramUniform3uivFunc(uint program, int location, int count, IntPtr value);
        private static glProgramUniform3uivFunc glProgramUniform3uivPtr;
        private delegate void glProgramUniform4iFunc(uint program, int location, int v0, int v1, int v2, int v3);
        private static glProgramUniform4iFunc glProgramUniform4iPtr;
        private delegate void glProgramUniform4ivFunc(uint program, int location, int count, IntPtr value);
        private static glProgramUniform4ivFunc glProgramUniform4ivPtr;
        private delegate void glProgramUniform4fFunc(uint program, int location, float v0, float v1, float v2, float v3);
        private static glProgramUniform4fFunc glProgramUniform4fPtr;
        private delegate void glProgramUniform4fvFunc(uint program, int location, int count, IntPtr value);
        private static glProgramUniform4fvFunc glProgramUniform4fvPtr;
        private delegate void glProgramUniform4dFunc(uint program, int location, double v0, double v1, double v2, double v3);
        private static glProgramUniform4dFunc glProgramUniform4dPtr;
        private delegate void glProgramUniform4dvFunc(uint program, int location, int count, IntPtr value);
        private static glProgramUniform4dvFunc glProgramUniform4dvPtr;
        private delegate void glProgramUniform4uiFunc(uint program, int location, uint v0, uint v1, uint v2, uint v3);
        private static glProgramUniform4uiFunc glProgramUniform4uiPtr;
        private delegate void glProgramUniform4uivFunc(uint program, int location, int count, IntPtr value);
        private static glProgramUniform4uivFunc glProgramUniform4uivPtr;
        private delegate void glProgramUniformMatrix2fvFunc(uint program, int location, int count, bool transpose, IntPtr value);
        private static glProgramUniformMatrix2fvFunc glProgramUniformMatrix2fvPtr;
        private delegate void glProgramUniformMatrix3fvFunc(uint program, int location, int count, bool transpose, IntPtr value);
        private static glProgramUniformMatrix3fvFunc glProgramUniformMatrix3fvPtr;
        private delegate void glProgramUniformMatrix4fvFunc(uint program, int location, int count, bool transpose, IntPtr value);
        private static glProgramUniformMatrix4fvFunc glProgramUniformMatrix4fvPtr;
        private delegate void glProgramUniformMatrix2dvFunc(uint program, int location, int count, bool transpose, IntPtr value);
        private static glProgramUniformMatrix2dvFunc glProgramUniformMatrix2dvPtr;
        private delegate void glProgramUniformMatrix3dvFunc(uint program, int location, int count, bool transpose, IntPtr value);
        private static glProgramUniformMatrix3dvFunc glProgramUniformMatrix3dvPtr;
        private delegate void glProgramUniformMatrix4dvFunc(uint program, int location, int count, bool transpose, IntPtr value);
        private static glProgramUniformMatrix4dvFunc glProgramUniformMatrix4dvPtr;
        private delegate void glProgramUniformMatrix2x3fvFunc(uint program, int location, int count, bool transpose, IntPtr value);
        private static glProgramUniformMatrix2x3fvFunc glProgramUniformMatrix2x3fvPtr;
        private delegate void glProgramUniformMatrix3x2fvFunc(uint program, int location, int count, bool transpose, IntPtr value);
        private static glProgramUniformMatrix3x2fvFunc glProgramUniformMatrix3x2fvPtr;
        private delegate void glProgramUniformMatrix2x4fvFunc(uint program, int location, int count, bool transpose, IntPtr value);
        private static glProgramUniformMatrix2x4fvFunc glProgramUniformMatrix2x4fvPtr;
        private delegate void glProgramUniformMatrix4x2fvFunc(uint program, int location, int count, bool transpose, IntPtr value);
        private static glProgramUniformMatrix4x2fvFunc glProgramUniformMatrix4x2fvPtr;
        private delegate void glProgramUniformMatrix3x4fvFunc(uint program, int location, int count, bool transpose, IntPtr value);
        private static glProgramUniformMatrix3x4fvFunc glProgramUniformMatrix3x4fvPtr;
        private delegate void glProgramUniformMatrix4x3fvFunc(uint program, int location, int count, bool transpose, IntPtr value);
        private static glProgramUniformMatrix4x3fvFunc glProgramUniformMatrix4x3fvPtr;
        private delegate void glProgramUniformMatrix2x3dvFunc(uint program, int location, int count, bool transpose, IntPtr value);
        private static glProgramUniformMatrix2x3dvFunc glProgramUniformMatrix2x3dvPtr;
        private delegate void glProgramUniformMatrix3x2dvFunc(uint program, int location, int count, bool transpose, IntPtr value);
        private static glProgramUniformMatrix3x2dvFunc glProgramUniformMatrix3x2dvPtr;
        private delegate void glProgramUniformMatrix2x4dvFunc(uint program, int location, int count, bool transpose, IntPtr value);
        private static glProgramUniformMatrix2x4dvFunc glProgramUniformMatrix2x4dvPtr;
        private delegate void glProgramUniformMatrix4x2dvFunc(uint program, int location, int count, bool transpose, IntPtr value);
        private static glProgramUniformMatrix4x2dvFunc glProgramUniformMatrix4x2dvPtr;
        private delegate void glProgramUniformMatrix3x4dvFunc(uint program, int location, int count, bool transpose, IntPtr value);
        private static glProgramUniformMatrix3x4dvFunc glProgramUniformMatrix3x4dvPtr;
        private delegate void glProgramUniformMatrix4x3dvFunc(uint program, int location, int count, bool transpose, IntPtr value);
        private static glProgramUniformMatrix4x3dvFunc glProgramUniformMatrix4x3dvPtr;
        private delegate void glValidateProgramPipelineFunc(uint pipeline);
        private static glValidateProgramPipelineFunc glValidateProgramPipelinePtr;
        private delegate void glGetProgramPipelineInfoLogFunc(uint pipeline, int bufSize, IntPtr length, IntPtr infoLog);
        private static glGetProgramPipelineInfoLogFunc glGetProgramPipelineInfoLogPtr;
        private delegate void glVertexAttribL1dFunc(uint index, double x);
        private static glVertexAttribL1dFunc glVertexAttribL1dPtr;
        private delegate void glVertexAttribL2dFunc(uint index, double x, double y);
        private static glVertexAttribL2dFunc glVertexAttribL2dPtr;
        private delegate void glVertexAttribL3dFunc(uint index, double x, double y, double z);
        private static glVertexAttribL3dFunc glVertexAttribL3dPtr;
        private delegate void glVertexAttribL4dFunc(uint index, double x, double y, double z, double w);
        private static glVertexAttribL4dFunc glVertexAttribL4dPtr;
        private delegate void glVertexAttribL1dvFunc(uint index, IntPtr v);
        private static glVertexAttribL1dvFunc glVertexAttribL1dvPtr;
        private delegate void glVertexAttribL2dvFunc(uint index, IntPtr v);
        private static glVertexAttribL2dvFunc glVertexAttribL2dvPtr;
        private delegate void glVertexAttribL3dvFunc(uint index, IntPtr v);
        private static glVertexAttribL3dvFunc glVertexAttribL3dvPtr;
        private delegate void glVertexAttribL4dvFunc(uint index, IntPtr v);
        private static glVertexAttribL4dvFunc glVertexAttribL4dvPtr;
        private delegate void glVertexAttribLPointerFunc(uint index, int size, uint type, int stride, IntPtr pointer);
        private static glVertexAttribLPointerFunc glVertexAttribLPointerPtr;
        private delegate void glGetVertexAttribLdvFunc(uint index, uint pname, IntPtr @params);
        private static glGetVertexAttribLdvFunc glGetVertexAttribLdvPtr;
        private delegate void glViewportArrayvFunc(uint first, int count, IntPtr v);
        private static glViewportArrayvFunc glViewportArrayvPtr;
        private delegate void glViewportIndexedfFunc(uint index, float x, float y, float w, float h);
        private static glViewportIndexedfFunc glViewportIndexedfPtr;
        private delegate void glViewportIndexedfvFunc(uint index, IntPtr v);
        private static glViewportIndexedfvFunc glViewportIndexedfvPtr;
        private delegate void glScissorArrayvFunc(uint first, int count, IntPtr v);
        private static glScissorArrayvFunc glScissorArrayvPtr;
        private delegate void glScissorIndexedFunc(uint index, int left, int bottom, int width, int height);
        private static glScissorIndexedFunc glScissorIndexedPtr;
        private delegate void glScissorIndexedvFunc(uint index, IntPtr v);
        private static glScissorIndexedvFunc glScissorIndexedvPtr;
        private delegate void glDepthRangeArrayvFunc(uint first, int count, IntPtr v);
        private static glDepthRangeArrayvFunc glDepthRangeArrayvPtr;
        private delegate void glDepthRangeIndexedFunc(uint index, double n, double f);
        private static glDepthRangeIndexedFunc glDepthRangeIndexedPtr;
        private delegate void glGetFloati_vFunc(uint target, uint index, IntPtr data);
        private static glGetFloati_vFunc glGetFloati_vPtr;
        private delegate void glGetDoublei_vFunc(uint target, uint index, IntPtr data);
        private static glGetDoublei_vFunc glGetDoublei_vPtr;
        private delegate void glDrawArraysInstancedBaseInstanceFunc(uint mode, int first, int count, int instancecount, uint baseinstance);
        private static glDrawArraysInstancedBaseInstanceFunc glDrawArraysInstancedBaseInstancePtr;
        private delegate void glDrawElementsInstancedBaseInstanceFunc(uint mode, int count, uint type, IntPtr indices, int instancecount, uint baseinstance);
        private static glDrawElementsInstancedBaseInstanceFunc glDrawElementsInstancedBaseInstancePtr;
        private delegate void glDrawElementsInstancedBaseVertexBaseInstanceFunc(uint mode, int count, uint type, IntPtr indices, int instancecount, int basevertex, uint baseinstance);
        private static glDrawElementsInstancedBaseVertexBaseInstanceFunc glDrawElementsInstancedBaseVertexBaseInstancePtr;
        private delegate void glGetInternalformativFunc(uint target, uint internalformat, uint pname, int bufSize, IntPtr @params);
        private static glGetInternalformativFunc glGetInternalformativPtr;
        private delegate void glGetActiveAtomicCounterBufferivFunc(uint program, uint bufferIndex, uint pname, IntPtr @params);
        private static glGetActiveAtomicCounterBufferivFunc glGetActiveAtomicCounterBufferivPtr;
        private delegate void glBindImageTextureFunc(uint unit, uint texture, int level, bool layered, int layer, uint access, uint format);
        private static glBindImageTextureFunc glBindImageTexturePtr;
        private delegate void glMemoryBarrierFunc(uint barriers);
        private static glMemoryBarrierFunc glMemoryBarrierPtr;
        private delegate void glTexStorage1DFunc(uint target, int levels, uint internalformat, int width);
        private static glTexStorage1DFunc glTexStorage1DPtr;
        private delegate void glTexStorage2DFunc(uint target, int levels, uint internalformat, int width, int height);
        private static glTexStorage2DFunc glTexStorage2DPtr;
        private delegate void glTexStorage3DFunc(uint target, int levels, uint internalformat, int width, int height, int depth);
        private static glTexStorage3DFunc glTexStorage3DPtr;
        private delegate void glDrawTransformFeedbackInstancedFunc(uint mode, uint id, int instancecount);
        private static glDrawTransformFeedbackInstancedFunc glDrawTransformFeedbackInstancedPtr;
        private delegate void glDrawTransformFeedbackStreamInstancedFunc(uint mode, uint id, uint stream, int instancecount);
        private static glDrawTransformFeedbackStreamInstancedFunc glDrawTransformFeedbackStreamInstancedPtr;
        private delegate void glClearBufferDataFunc(uint target, uint internalformat, uint format, uint type, IntPtr data);
        private static glClearBufferDataFunc glClearBufferDataPtr;
        private delegate void glClearBufferSubDataFunc(uint target, uint internalformat, IntPtr offset, int size, uint format, uint type, IntPtr data);
        private static glClearBufferSubDataFunc glClearBufferSubDataPtr;
        private delegate void glDispatchComputeFunc(uint num_groups_x, uint num_groups_y, uint num_groups_z);
        private static glDispatchComputeFunc glDispatchComputePtr;
        private delegate void glDispatchComputeIndirectFunc(IntPtr indirect);
        private static glDispatchComputeIndirectFunc glDispatchComputeIndirectPtr;
        private delegate void glCopyImageSubDataFunc(uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);
        private static glCopyImageSubDataFunc glCopyImageSubDataPtr;
        private delegate void glFramebufferParameteriFunc(uint target, uint pname, int param);
        private static glFramebufferParameteriFunc glFramebufferParameteriPtr;
        private delegate void glGetFramebufferParameterivFunc(uint target, uint pname, IntPtr @params);
        private static glGetFramebufferParameterivFunc glGetFramebufferParameterivPtr;
        private delegate void glGetInternalformati64vFunc(uint target, uint internalformat, uint pname, int bufSize, IntPtr @params);
        private static glGetInternalformati64vFunc glGetInternalformati64vPtr;
        private delegate void glInvalidateTexSubImageFunc(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth);
        private static glInvalidateTexSubImageFunc glInvalidateTexSubImagePtr;
        private delegate void glInvalidateTexImageFunc(uint texture, int level);
        private static glInvalidateTexImageFunc glInvalidateTexImagePtr;
        private delegate void glInvalidateBufferSubDataFunc(uint buffer, IntPtr offset, int length);
        private static glInvalidateBufferSubDataFunc glInvalidateBufferSubDataPtr;
        private delegate void glInvalidateBufferDataFunc(uint buffer);
        private static glInvalidateBufferDataFunc glInvalidateBufferDataPtr;
        private delegate void glInvalidateFramebufferFunc(uint target, int numAttachments, IntPtr attachments);
        private static glInvalidateFramebufferFunc glInvalidateFramebufferPtr;
        private delegate void glInvalidateSubFramebufferFunc(uint target, int numAttachments, IntPtr attachments, int x, int y, int width, int height);
        private static glInvalidateSubFramebufferFunc glInvalidateSubFramebufferPtr;
        private delegate void glMultiDrawArraysIndirectFunc(uint mode, IntPtr indirect, int drawcount, int stride);
        private static glMultiDrawArraysIndirectFunc glMultiDrawArraysIndirectPtr;
        private delegate void glMultiDrawElementsIndirectFunc(uint mode, uint type, IntPtr indirect, int drawcount, int stride);
        private static glMultiDrawElementsIndirectFunc glMultiDrawElementsIndirectPtr;
        private delegate void glGetProgramInterfaceivFunc(uint program, uint programInterface, uint pname, IntPtr @params);
        private static glGetProgramInterfaceivFunc glGetProgramInterfaceivPtr;
        private delegate uint glGetProgramResourceIndexFunc(uint program, uint programInterface, IntPtr name);
        private static glGetProgramResourceIndexFunc glGetProgramResourceIndexPtr;
        private delegate void glGetProgramResourceNameFunc(uint program, uint programInterface, uint index, int bufSize, IntPtr length, IntPtr name);
        private static glGetProgramResourceNameFunc glGetProgramResourceNamePtr;
        private delegate void glGetProgramResourceivFunc(uint program, uint programInterface, uint index, int propCount, IntPtr props, int bufSize, IntPtr length, IntPtr @params);
        private static glGetProgramResourceivFunc glGetProgramResourceivPtr;
        private delegate int glGetProgramResourceLocationFunc(uint program, uint programInterface, IntPtr name);
        private static glGetProgramResourceLocationFunc glGetProgramResourceLocationPtr;
        private delegate int glGetProgramResourceLocationIndexFunc(uint program, uint programInterface, IntPtr name);
        private static glGetProgramResourceLocationIndexFunc glGetProgramResourceLocationIndexPtr;
        private delegate void glShaderStorageBlockBindingFunc(uint program, uint storageBlockIndex, uint storageBlockBinding);
        private static glShaderStorageBlockBindingFunc glShaderStorageBlockBindingPtr;
        private delegate void glTexBufferRangeFunc(uint target, uint internalformat, uint buffer, IntPtr offset, int size);
        private static glTexBufferRangeFunc glTexBufferRangePtr;
        private delegate void glTexStorage2DMultisampleFunc(uint target, int samples, uint internalformat, int width, int height, bool fixedsamplelocations);
        private static glTexStorage2DMultisampleFunc glTexStorage2DMultisamplePtr;
        private delegate void glTexStorage3DMultisampleFunc(uint target, int samples, uint internalformat, int width, int height, int depth, bool fixedsamplelocations);
        private static glTexStorage3DMultisampleFunc glTexStorage3DMultisamplePtr;
        private delegate void glTextureViewFunc(uint texture, uint target, uint origtexture, uint internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers);
        private static glTextureViewFunc glTextureViewPtr;
        private delegate void glBindVertexBufferFunc(uint bindingindex, uint buffer, IntPtr offset, int stride);
        private static glBindVertexBufferFunc glBindVertexBufferPtr;
        private delegate void glVertexAttribFormatFunc(uint attribindex, int size, uint type, bool normalized, uint relativeoffset);
        private static glVertexAttribFormatFunc glVertexAttribFormatPtr;
        private delegate void glVertexAttribIFormatFunc(uint attribindex, int size, uint type, uint relativeoffset);
        private static glVertexAttribIFormatFunc glVertexAttribIFormatPtr;
        private delegate void glVertexAttribLFormatFunc(uint attribindex, int size, uint type, uint relativeoffset);
        private static glVertexAttribLFormatFunc glVertexAttribLFormatPtr;
        private delegate void glVertexAttribBindingFunc(uint attribindex, uint bindingindex);
        private static glVertexAttribBindingFunc glVertexAttribBindingPtr;
        private delegate void glVertexBindingDivisorFunc(uint bindingindex, uint divisor);
        private static glVertexBindingDivisorFunc glVertexBindingDivisorPtr;
        private delegate void glDebugMessageControlFunc(uint source, uint type, uint severity, int count, IntPtr ids, bool enabled);
        private static glDebugMessageControlFunc glDebugMessageControlPtr;
        private delegate void glDebugMessageInsertFunc(uint source, uint type, uint id, uint severity, int length, IntPtr buf);
        private static glDebugMessageInsertFunc glDebugMessageInsertPtr;
        private delegate void glDebugMessageCallbackFunc(IntPtr callback, IntPtr userParam);
        private static glDebugMessageCallbackFunc glDebugMessageCallbackPtr;
        private delegate uint glGetDebugMessageLogFunc(uint count, int bufSize, IntPtr sources, IntPtr types, IntPtr ids, IntPtr severities, IntPtr lengths, IntPtr messageLog);
        private static glGetDebugMessageLogFunc glGetDebugMessageLogPtr;
        private delegate void glPushDebugGroupFunc(uint source, uint id, int length, IntPtr message);
        private static glPushDebugGroupFunc glPushDebugGroupPtr;
        private delegate void glPopDebugGroupFunc();
        private static glPopDebugGroupFunc glPopDebugGroupPtr;
        private delegate void glObjectLabelFunc(uint identifier, uint name, int length, IntPtr label);
        private static glObjectLabelFunc glObjectLabelPtr;
        private delegate void glGetObjectLabelFunc(uint identifier, uint name, int bufSize, IntPtr length, IntPtr label);
        private static glGetObjectLabelFunc glGetObjectLabelPtr;
        private delegate void glObjectPtrLabelFunc(IntPtr ptr, int length, IntPtr label);
        private static glObjectPtrLabelFunc glObjectPtrLabelPtr;
        private delegate void glGetObjectPtrLabelFunc(IntPtr ptr, int bufSize, IntPtr length, IntPtr label);
        private static glGetObjectPtrLabelFunc glGetObjectPtrLabelPtr;
        private delegate void glGetPointervFunc(uint pname, IntPtr @params);
        private static glGetPointervFunc glGetPointervPtr;
        private delegate void glBufferStorageFunc(uint target, int size, IntPtr data, uint flags);
        private static glBufferStorageFunc glBufferStoragePtr;
        private delegate void glClearTexImageFunc(uint texture, int level, uint format, uint type, IntPtr data);
        private static glClearTexImageFunc glClearTexImagePtr;
        private delegate void glClearTexSubImageFunc(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, IntPtr data);
        private static glClearTexSubImageFunc glClearTexSubImagePtr;
        private delegate void glBindBuffersBaseFunc(uint target, uint first, int count, IntPtr buffers);
        private static glBindBuffersBaseFunc glBindBuffersBasePtr;
        private delegate void glBindBuffersRangeFunc(uint target, uint first, int count, IntPtr buffers, IntPtr offsets, IntPtr sizes);
        private static glBindBuffersRangeFunc glBindBuffersRangePtr;
        private delegate void glBindTexturesFunc(uint first, int count, IntPtr textures);
        private static glBindTexturesFunc glBindTexturesPtr;
        private delegate void glBindSamplersFunc(uint first, int count, IntPtr samplers);
        private static glBindSamplersFunc glBindSamplersPtr;
        private delegate void glBindImageTexturesFunc(uint first, int count, IntPtr textures);
        private static glBindImageTexturesFunc glBindImageTexturesPtr;
        private delegate void glBindVertexBuffersFunc(uint first, int count, IntPtr buffers, IntPtr offsets, IntPtr strides);
        private static glBindVertexBuffersFunc glBindVertexBuffersPtr;
        #endregion

        #region Interop
        public static Func<string, IntPtr> GetProcAddress = null;

        public static void PreloadAllFunctions()
        {
            glCullFacePtr = (glCullFaceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCullFace"), typeof(glCullFaceFunc));
            glFrontFacePtr = (glFrontFaceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFrontFace"), typeof(glFrontFaceFunc));
            glHintPtr = (glHintFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glHint"), typeof(glHintFunc));
            glLineWidthPtr = (glLineWidthFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLineWidth"), typeof(glLineWidthFunc));
            glPointSizePtr = (glPointSizeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointSize"), typeof(glPointSizeFunc));
            glPolygonModePtr = (glPolygonModeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPolygonMode"), typeof(glPolygonModeFunc));
            glScissorPtr = (glScissorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScissor"), typeof(glScissorFunc));
            glTexParameterfPtr = (glTexParameterfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterf"), typeof(glTexParameterfFunc));
            glTexParameterfvPtr = (glTexParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterfv"), typeof(glTexParameterfvFunc));
            glTexParameteriPtr = (glTexParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameteri"), typeof(glTexParameteriFunc));
            glTexParameterivPtr = (glTexParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameteriv"), typeof(glTexParameterivFunc));
            glTexImage1DPtr = (glTexImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage1D"), typeof(glTexImage1DFunc));
            glTexImage2DPtr = (glTexImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage2D"), typeof(glTexImage2DFunc));
            glDrawBufferPtr = (glDrawBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawBuffer"), typeof(glDrawBufferFunc));
            glClearPtr = (glClearFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClear"), typeof(glClearFunc));
            glClearColorPtr = (glClearColorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearColor"), typeof(glClearColorFunc));
            glClearStencilPtr = (glClearStencilFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearStencil"), typeof(glClearStencilFunc));
            glClearDepthPtr = (glClearDepthFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearDepth"), typeof(glClearDepthFunc));
            glStencilMaskPtr = (glStencilMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilMask"), typeof(glStencilMaskFunc));
            glColorMaskPtr = (glColorMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorMask"), typeof(glColorMaskFunc));
            glDepthMaskPtr = (glDepthMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthMask"), typeof(glDepthMaskFunc));
            glDisablePtr = (glDisableFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDisable"), typeof(glDisableFunc));
            glEnablePtr = (glEnableFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnable"), typeof(glEnableFunc));
            glFinishPtr = (glFinishFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFinish"), typeof(glFinishFunc));
            glFlushPtr = (glFlushFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFlush"), typeof(glFlushFunc));
            glBlendFuncPtr = (glBlendFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendFunc"), typeof(glBlendFuncFunc));
            glLogicOpPtr = (glLogicOpFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLogicOp"), typeof(glLogicOpFunc));
            glStencilFuncPtr = (glStencilFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilFunc"), typeof(glStencilFuncFunc));
            glStencilOpPtr = (glStencilOpFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilOp"), typeof(glStencilOpFunc));
            glDepthFuncPtr = (glDepthFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthFunc"), typeof(glDepthFuncFunc));
            glPixelStorefPtr = (glPixelStorefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelStoref"), typeof(glPixelStorefFunc));
            glPixelStoreiPtr = (glPixelStoreiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelStorei"), typeof(glPixelStoreiFunc));
            glReadBufferPtr = (glReadBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glReadBuffer"), typeof(glReadBufferFunc));
            glReadPixelsPtr = (glReadPixelsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glReadPixels"), typeof(glReadPixelsFunc));
            glGetBooleanvPtr = (glGetBooleanvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBooleanv"), typeof(glGetBooleanvFunc));
            glGetDoublevPtr = (glGetDoublevFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetDoublev"), typeof(glGetDoublevFunc));
            glGetErrorPtr = (glGetErrorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetError"), typeof(glGetErrorFunc));
            glGetFloatvPtr = (glGetFloatvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFloatv"), typeof(glGetFloatvFunc));
            glGetIntegervPtr = (glGetIntegervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetIntegerv"), typeof(glGetIntegervFunc));
            glGetStringPtr = (glGetStringFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetString"), typeof(glGetStringFunc));
            glGetTexImagePtr = (glGetTexImageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexImage"), typeof(glGetTexImageFunc));
            glGetTexParameterfvPtr = (glGetTexParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameterfv"), typeof(glGetTexParameterfvFunc));
            glGetTexParameterivPtr = (glGetTexParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameteriv"), typeof(glGetTexParameterivFunc));
            glGetTexLevelParameterfvPtr = (glGetTexLevelParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexLevelParameterfv"), typeof(glGetTexLevelParameterfvFunc));
            glGetTexLevelParameterivPtr = (glGetTexLevelParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexLevelParameteriv"), typeof(glGetTexLevelParameterivFunc));
            glIsEnabledPtr = (glIsEnabledFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsEnabled"), typeof(glIsEnabledFunc));
            glDepthRangePtr = (glDepthRangeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthRange"), typeof(glDepthRangeFunc));
            glViewportPtr = (glViewportFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glViewport"), typeof(glViewportFunc));
            glDrawArraysPtr = (glDrawArraysFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawArrays"), typeof(glDrawArraysFunc));
            glDrawElementsPtr = (glDrawElementsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElements"), typeof(glDrawElementsFunc));
            glPolygonOffsetPtr = (glPolygonOffsetFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPolygonOffset"), typeof(glPolygonOffsetFunc));
            glCopyTexImage1DPtr = (glCopyTexImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexImage1D"), typeof(glCopyTexImage1DFunc));
            glCopyTexImage2DPtr = (glCopyTexImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexImage2D"), typeof(glCopyTexImage2DFunc));
            glCopyTexSubImage1DPtr = (glCopyTexSubImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexSubImage1D"), typeof(glCopyTexSubImage1DFunc));
            glCopyTexSubImage2DPtr = (glCopyTexSubImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexSubImage2D"), typeof(glCopyTexSubImage2DFunc));
            glTexSubImage1DPtr = (glTexSubImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexSubImage1D"), typeof(glTexSubImage1DFunc));
            glTexSubImage2DPtr = (glTexSubImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexSubImage2D"), typeof(glTexSubImage2DFunc));
            glBindTexturePtr = (glBindTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindTexture"), typeof(glBindTextureFunc));
            glDeleteTexturesPtr = (glDeleteTexturesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteTextures"), typeof(glDeleteTexturesFunc));
            glGenTexturesPtr = (glGenTexturesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenTextures"), typeof(glGenTexturesFunc));
            glIsTexturePtr = (glIsTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsTexture"), typeof(glIsTextureFunc));
            glDrawRangeElementsPtr = (glDrawRangeElementsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawRangeElements"), typeof(glDrawRangeElementsFunc));
            glTexImage3DPtr = (glTexImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage3D"), typeof(glTexImage3DFunc));
            glTexSubImage3DPtr = (glTexSubImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexSubImage3D"), typeof(glTexSubImage3DFunc));
            glCopyTexSubImage3DPtr = (glCopyTexSubImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexSubImage3D"), typeof(glCopyTexSubImage3DFunc));
            glActiveTexturePtr = (glActiveTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glActiveTexture"), typeof(glActiveTextureFunc));
            glSampleCoveragePtr = (glSampleCoverageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSampleCoverage"), typeof(glSampleCoverageFunc));
            glCompressedTexImage3DPtr = (glCompressedTexImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexImage3D"), typeof(glCompressedTexImage3DFunc));
            glCompressedTexImage2DPtr = (glCompressedTexImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexImage2D"), typeof(glCompressedTexImage2DFunc));
            glCompressedTexImage1DPtr = (glCompressedTexImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexImage1D"), typeof(glCompressedTexImage1DFunc));
            glCompressedTexSubImage3DPtr = (glCompressedTexSubImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexSubImage3D"), typeof(glCompressedTexSubImage3DFunc));
            glCompressedTexSubImage2DPtr = (glCompressedTexSubImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexSubImage2D"), typeof(glCompressedTexSubImage2DFunc));
            glCompressedTexSubImage1DPtr = (glCompressedTexSubImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexSubImage1D"), typeof(glCompressedTexSubImage1DFunc));
            glGetCompressedTexImagePtr = (glGetCompressedTexImageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetCompressedTexImage"), typeof(glGetCompressedTexImageFunc));
            glBlendFuncSeparatePtr = (glBlendFuncSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendFuncSeparate"), typeof(glBlendFuncSeparateFunc));
            glMultiDrawArraysPtr = (glMultiDrawArraysFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiDrawArrays"), typeof(glMultiDrawArraysFunc));
            glMultiDrawElementsPtr = (glMultiDrawElementsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiDrawElements"), typeof(glMultiDrawElementsFunc));
            glPointParameterfPtr = (glPointParameterfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameterf"), typeof(glPointParameterfFunc));
            glPointParameterfvPtr = (glPointParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameterfv"), typeof(glPointParameterfvFunc));
            glPointParameteriPtr = (glPointParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameteri"), typeof(glPointParameteriFunc));
            glPointParameterivPtr = (glPointParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameteriv"), typeof(glPointParameterivFunc));
            glBlendColorPtr = (glBlendColorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendColor"), typeof(glBlendColorFunc));
            glBlendEquationPtr = (glBlendEquationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendEquation"), typeof(glBlendEquationFunc));
            glGenQueriesPtr = (glGenQueriesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenQueries"), typeof(glGenQueriesFunc));
            glDeleteQueriesPtr = (glDeleteQueriesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteQueries"), typeof(glDeleteQueriesFunc));
            glIsQueryPtr = (glIsQueryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsQuery"), typeof(glIsQueryFunc));
            glBeginQueryPtr = (glBeginQueryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBeginQuery"), typeof(glBeginQueryFunc));
            glEndQueryPtr = (glEndQueryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEndQuery"), typeof(glEndQueryFunc));
            glGetQueryivPtr = (glGetQueryivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetQueryiv"), typeof(glGetQueryivFunc));
            glGetQueryObjectivPtr = (glGetQueryObjectivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetQueryObjectiv"), typeof(glGetQueryObjectivFunc));
            glGetQueryObjectuivPtr = (glGetQueryObjectuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetQueryObjectuiv"), typeof(glGetQueryObjectuivFunc));
            glBindBufferPtr = (glBindBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindBuffer"), typeof(glBindBufferFunc));
            glDeleteBuffersPtr = (glDeleteBuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteBuffers"), typeof(glDeleteBuffersFunc));
            glGenBuffersPtr = (glGenBuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenBuffers"), typeof(glGenBuffersFunc));
            glIsBufferPtr = (glIsBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsBuffer"), typeof(glIsBufferFunc));
            glBufferDataPtr = (glBufferDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBufferData"), typeof(glBufferDataFunc));
            glBufferSubDataPtr = (glBufferSubDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBufferSubData"), typeof(glBufferSubDataFunc));
            glGetBufferSubDataPtr = (glGetBufferSubDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBufferSubData"), typeof(glGetBufferSubDataFunc));
            glMapBufferPtr = (glMapBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMapBuffer"), typeof(glMapBufferFunc));
            glUnmapBufferPtr = (glUnmapBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUnmapBuffer"), typeof(glUnmapBufferFunc));
            glGetBufferParameterivPtr = (glGetBufferParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBufferParameteriv"), typeof(glGetBufferParameterivFunc));
            glGetBufferPointervPtr = (glGetBufferPointervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBufferPointerv"), typeof(glGetBufferPointervFunc));
            glBlendEquationSeparatePtr = (glBlendEquationSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendEquationSeparate"), typeof(glBlendEquationSeparateFunc));
            glDrawBuffersPtr = (glDrawBuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawBuffers"), typeof(glDrawBuffersFunc));
            glStencilOpSeparatePtr = (glStencilOpSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilOpSeparate"), typeof(glStencilOpSeparateFunc));
            glStencilFuncSeparatePtr = (glStencilFuncSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilFuncSeparate"), typeof(glStencilFuncSeparateFunc));
            glStencilMaskSeparatePtr = (glStencilMaskSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilMaskSeparate"), typeof(glStencilMaskSeparateFunc));
            glAttachShaderPtr = (glAttachShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glAttachShader"), typeof(glAttachShaderFunc));
            glBindAttribLocationPtr = (glBindAttribLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindAttribLocation"), typeof(glBindAttribLocationFunc));
            glCompileShaderPtr = (glCompileShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompileShader"), typeof(glCompileShaderFunc));
            glCreateProgramPtr = (glCreateProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCreateProgram"), typeof(glCreateProgramFunc));
            glCreateShaderPtr = (glCreateShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCreateShader"), typeof(glCreateShaderFunc));
            glDeleteProgramPtr = (glDeleteProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteProgram"), typeof(glDeleteProgramFunc));
            glDeleteShaderPtr = (glDeleteShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteShader"), typeof(glDeleteShaderFunc));
            glDetachShaderPtr = (glDetachShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDetachShader"), typeof(glDetachShaderFunc));
            glDisableVertexAttribArrayPtr = (glDisableVertexAttribArrayFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDisableVertexAttribArray"), typeof(glDisableVertexAttribArrayFunc));
            glEnableVertexAttribArrayPtr = (glEnableVertexAttribArrayFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnableVertexAttribArray"), typeof(glEnableVertexAttribArrayFunc));
            glGetActiveAttribPtr = (glGetActiveAttribFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveAttrib"), typeof(glGetActiveAttribFunc));
            glGetActiveUniformPtr = (glGetActiveUniformFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveUniform"), typeof(glGetActiveUniformFunc));
            glGetAttachedShadersPtr = (glGetAttachedShadersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetAttachedShaders"), typeof(glGetAttachedShadersFunc));
            glGetAttribLocationPtr = (glGetAttribLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetAttribLocation"), typeof(glGetAttribLocationFunc));
            glGetProgramivPtr = (glGetProgramivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramiv"), typeof(glGetProgramivFunc));
            glGetProgramInfoLogPtr = (glGetProgramInfoLogFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramInfoLog"), typeof(glGetProgramInfoLogFunc));
            glGetShaderivPtr = (glGetShaderivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetShaderiv"), typeof(glGetShaderivFunc));
            glGetShaderInfoLogPtr = (glGetShaderInfoLogFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetShaderInfoLog"), typeof(glGetShaderInfoLogFunc));
            glGetShaderSourcePtr = (glGetShaderSourceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetShaderSource"), typeof(glGetShaderSourceFunc));
            glGetUniformLocationPtr = (glGetUniformLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformLocation"), typeof(glGetUniformLocationFunc));
            glGetUniformfvPtr = (glGetUniformfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformfv"), typeof(glGetUniformfvFunc));
            glGetUniformivPtr = (glGetUniformivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformiv"), typeof(glGetUniformivFunc));
            glGetVertexAttribdvPtr = (glGetVertexAttribdvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribdv"), typeof(glGetVertexAttribdvFunc));
            glGetVertexAttribfvPtr = (glGetVertexAttribfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribfv"), typeof(glGetVertexAttribfvFunc));
            glGetVertexAttribivPtr = (glGetVertexAttribivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribiv"), typeof(glGetVertexAttribivFunc));
            glGetVertexAttribPointervPtr = (glGetVertexAttribPointervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribPointerv"), typeof(glGetVertexAttribPointervFunc));
            glIsProgramPtr = (glIsProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsProgram"), typeof(glIsProgramFunc));
            glIsShaderPtr = (glIsShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsShader"), typeof(glIsShaderFunc));
            glLinkProgramPtr = (glLinkProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLinkProgram"), typeof(glLinkProgramFunc));
            glShaderSourcePtr = (glShaderSourceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glShaderSource"), typeof(glShaderSourceFunc));
            glUseProgramPtr = (glUseProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUseProgram"), typeof(glUseProgramFunc));
            glUniform1fPtr = (glUniform1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1f"), typeof(glUniform1fFunc));
            glUniform2fPtr = (glUniform2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2f"), typeof(glUniform2fFunc));
            glUniform3fPtr = (glUniform3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3f"), typeof(glUniform3fFunc));
            glUniform4fPtr = (glUniform4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4f"), typeof(glUniform4fFunc));
            glUniform1iPtr = (glUniform1iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1i"), typeof(glUniform1iFunc));
            glUniform2iPtr = (glUniform2iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2i"), typeof(glUniform2iFunc));
            glUniform3iPtr = (glUniform3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3i"), typeof(glUniform3iFunc));
            glUniform4iPtr = (glUniform4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4i"), typeof(glUniform4iFunc));
            glUniform1fvPtr = (glUniform1fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1fv"), typeof(glUniform1fvFunc));
            glUniform2fvPtr = (glUniform2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2fv"), typeof(glUniform2fvFunc));
            glUniform3fvPtr = (glUniform3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3fv"), typeof(glUniform3fvFunc));
            glUniform4fvPtr = (glUniform4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4fv"), typeof(glUniform4fvFunc));
            glUniform1ivPtr = (glUniform1ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1iv"), typeof(glUniform1ivFunc));
            glUniform2ivPtr = (glUniform2ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2iv"), typeof(glUniform2ivFunc));
            glUniform3ivPtr = (glUniform3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3iv"), typeof(glUniform3ivFunc));
            glUniform4ivPtr = (glUniform4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4iv"), typeof(glUniform4ivFunc));
            glUniformMatrix2fvPtr = (glUniformMatrix2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix2fv"), typeof(glUniformMatrix2fvFunc));
            glUniformMatrix3fvPtr = (glUniformMatrix3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix3fv"), typeof(glUniformMatrix3fvFunc));
            glUniformMatrix4fvPtr = (glUniformMatrix4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix4fv"), typeof(glUniformMatrix4fvFunc));
            glValidateProgramPtr = (glValidateProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glValidateProgram"), typeof(glValidateProgramFunc));
            glVertexAttrib1dPtr = (glVertexAttrib1dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1d"), typeof(glVertexAttrib1dFunc));
            glVertexAttrib1dvPtr = (glVertexAttrib1dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1dv"), typeof(glVertexAttrib1dvFunc));
            glVertexAttrib1fPtr = (glVertexAttrib1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1f"), typeof(glVertexAttrib1fFunc));
            glVertexAttrib1fvPtr = (glVertexAttrib1fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1fv"), typeof(glVertexAttrib1fvFunc));
            glVertexAttrib1sPtr = (glVertexAttrib1sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1s"), typeof(glVertexAttrib1sFunc));
            glVertexAttrib1svPtr = (glVertexAttrib1svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1sv"), typeof(glVertexAttrib1svFunc));
            glVertexAttrib2dPtr = (glVertexAttrib2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2d"), typeof(glVertexAttrib2dFunc));
            glVertexAttrib2dvPtr = (glVertexAttrib2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2dv"), typeof(glVertexAttrib2dvFunc));
            glVertexAttrib2fPtr = (glVertexAttrib2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2f"), typeof(glVertexAttrib2fFunc));
            glVertexAttrib2fvPtr = (glVertexAttrib2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2fv"), typeof(glVertexAttrib2fvFunc));
            glVertexAttrib2sPtr = (glVertexAttrib2sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2s"), typeof(glVertexAttrib2sFunc));
            glVertexAttrib2svPtr = (glVertexAttrib2svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2sv"), typeof(glVertexAttrib2svFunc));
            glVertexAttrib3dPtr = (glVertexAttrib3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3d"), typeof(glVertexAttrib3dFunc));
            glVertexAttrib3dvPtr = (glVertexAttrib3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3dv"), typeof(glVertexAttrib3dvFunc));
            glVertexAttrib3fPtr = (glVertexAttrib3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3f"), typeof(glVertexAttrib3fFunc));
            glVertexAttrib3fvPtr = (glVertexAttrib3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3fv"), typeof(glVertexAttrib3fvFunc));
            glVertexAttrib3sPtr = (glVertexAttrib3sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3s"), typeof(glVertexAttrib3sFunc));
            glVertexAttrib3svPtr = (glVertexAttrib3svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3sv"), typeof(glVertexAttrib3svFunc));
            glVertexAttrib4NbvPtr = (glVertexAttrib4NbvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Nbv"), typeof(glVertexAttrib4NbvFunc));
            glVertexAttrib4NivPtr = (glVertexAttrib4NivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Niv"), typeof(glVertexAttrib4NivFunc));
            glVertexAttrib4NsvPtr = (glVertexAttrib4NsvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Nsv"), typeof(glVertexAttrib4NsvFunc));
            glVertexAttrib4NubPtr = (glVertexAttrib4NubFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Nub"), typeof(glVertexAttrib4NubFunc));
            glVertexAttrib4NubvPtr = (glVertexAttrib4NubvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Nubv"), typeof(glVertexAttrib4NubvFunc));
            glVertexAttrib4NuivPtr = (glVertexAttrib4NuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Nuiv"), typeof(glVertexAttrib4NuivFunc));
            glVertexAttrib4NusvPtr = (glVertexAttrib4NusvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Nusv"), typeof(glVertexAttrib4NusvFunc));
            glVertexAttrib4bvPtr = (glVertexAttrib4bvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4bv"), typeof(glVertexAttrib4bvFunc));
            glVertexAttrib4dPtr = (glVertexAttrib4dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4d"), typeof(glVertexAttrib4dFunc));
            glVertexAttrib4dvPtr = (glVertexAttrib4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4dv"), typeof(glVertexAttrib4dvFunc));
            glVertexAttrib4fPtr = (glVertexAttrib4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4f"), typeof(glVertexAttrib4fFunc));
            glVertexAttrib4fvPtr = (glVertexAttrib4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4fv"), typeof(glVertexAttrib4fvFunc));
            glVertexAttrib4ivPtr = (glVertexAttrib4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4iv"), typeof(glVertexAttrib4ivFunc));
            glVertexAttrib4sPtr = (glVertexAttrib4sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4s"), typeof(glVertexAttrib4sFunc));
            glVertexAttrib4svPtr = (glVertexAttrib4svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4sv"), typeof(glVertexAttrib4svFunc));
            glVertexAttrib4ubvPtr = (glVertexAttrib4ubvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4ubv"), typeof(glVertexAttrib4ubvFunc));
            glVertexAttrib4uivPtr = (glVertexAttrib4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4uiv"), typeof(glVertexAttrib4uivFunc));
            glVertexAttrib4usvPtr = (glVertexAttrib4usvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4usv"), typeof(glVertexAttrib4usvFunc));
            glVertexAttribPointerPtr = (glVertexAttribPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribPointer"), typeof(glVertexAttribPointerFunc));
            glUniformMatrix2x3fvPtr = (glUniformMatrix2x3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix2x3fv"), typeof(glUniformMatrix2x3fvFunc));
            glUniformMatrix3x2fvPtr = (glUniformMatrix3x2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix3x2fv"), typeof(glUniformMatrix3x2fvFunc));
            glUniformMatrix2x4fvPtr = (glUniformMatrix2x4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix2x4fv"), typeof(glUniformMatrix2x4fvFunc));
            glUniformMatrix4x2fvPtr = (glUniformMatrix4x2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix4x2fv"), typeof(glUniformMatrix4x2fvFunc));
            glUniformMatrix3x4fvPtr = (glUniformMatrix3x4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix3x4fv"), typeof(glUniformMatrix3x4fvFunc));
            glUniformMatrix4x3fvPtr = (glUniformMatrix4x3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix4x3fv"), typeof(glUniformMatrix4x3fvFunc));
            glColorMaskiPtr = (glColorMaskiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorMaski"), typeof(glColorMaskiFunc));
            glGetBooleani_vPtr = (glGetBooleani_vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBooleani_v"), typeof(glGetBooleani_vFunc));
            glGetIntegeri_vPtr = (glGetIntegeri_vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetIntegeri_v"), typeof(glGetIntegeri_vFunc));
            glEnableiPtr = (glEnableiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnablei"), typeof(glEnableiFunc));
            glDisableiPtr = (glDisableiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDisablei"), typeof(glDisableiFunc));
            glIsEnablediPtr = (glIsEnablediFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsEnabledi"), typeof(glIsEnablediFunc));
            glBeginTransformFeedbackPtr = (glBeginTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBeginTransformFeedback"), typeof(glBeginTransformFeedbackFunc));
            glEndTransformFeedbackPtr = (glEndTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEndTransformFeedback"), typeof(glEndTransformFeedbackFunc));
            glBindBufferRangePtr = (glBindBufferRangeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindBufferRange"), typeof(glBindBufferRangeFunc));
            glBindBufferBasePtr = (glBindBufferBaseFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindBufferBase"), typeof(glBindBufferBaseFunc));
            glTransformFeedbackVaryingsPtr = (glTransformFeedbackVaryingsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTransformFeedbackVaryings"), typeof(glTransformFeedbackVaryingsFunc));
            glGetTransformFeedbackVaryingPtr = (glGetTransformFeedbackVaryingFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTransformFeedbackVarying"), typeof(glGetTransformFeedbackVaryingFunc));
            glClampColorPtr = (glClampColorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClampColor"), typeof(glClampColorFunc));
            glBeginConditionalRenderPtr = (glBeginConditionalRenderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBeginConditionalRender"), typeof(glBeginConditionalRenderFunc));
            glEndConditionalRenderPtr = (glEndConditionalRenderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEndConditionalRender"), typeof(glEndConditionalRenderFunc));
            glVertexAttribIPointerPtr = (glVertexAttribIPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribIPointer"), typeof(glVertexAttribIPointerFunc));
            glGetVertexAttribIivPtr = (glGetVertexAttribIivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribIiv"), typeof(glGetVertexAttribIivFunc));
            glGetVertexAttribIuivPtr = (glGetVertexAttribIuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribIuiv"), typeof(glGetVertexAttribIuivFunc));
            glVertexAttribI1iPtr = (glVertexAttribI1iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI1i"), typeof(glVertexAttribI1iFunc));
            glVertexAttribI2iPtr = (glVertexAttribI2iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI2i"), typeof(glVertexAttribI2iFunc));
            glVertexAttribI3iPtr = (glVertexAttribI3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI3i"), typeof(glVertexAttribI3iFunc));
            glVertexAttribI4iPtr = (glVertexAttribI4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4i"), typeof(glVertexAttribI4iFunc));
            glVertexAttribI1uiPtr = (glVertexAttribI1uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI1ui"), typeof(glVertexAttribI1uiFunc));
            glVertexAttribI2uiPtr = (glVertexAttribI2uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI2ui"), typeof(glVertexAttribI2uiFunc));
            glVertexAttribI3uiPtr = (glVertexAttribI3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI3ui"), typeof(glVertexAttribI3uiFunc));
            glVertexAttribI4uiPtr = (glVertexAttribI4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4ui"), typeof(glVertexAttribI4uiFunc));
            glVertexAttribI1ivPtr = (glVertexAttribI1ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI1iv"), typeof(glVertexAttribI1ivFunc));
            glVertexAttribI2ivPtr = (glVertexAttribI2ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI2iv"), typeof(glVertexAttribI2ivFunc));
            glVertexAttribI3ivPtr = (glVertexAttribI3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI3iv"), typeof(glVertexAttribI3ivFunc));
            glVertexAttribI4ivPtr = (glVertexAttribI4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4iv"), typeof(glVertexAttribI4ivFunc));
            glVertexAttribI1uivPtr = (glVertexAttribI1uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI1uiv"), typeof(glVertexAttribI1uivFunc));
            glVertexAttribI2uivPtr = (glVertexAttribI2uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI2uiv"), typeof(glVertexAttribI2uivFunc));
            glVertexAttribI3uivPtr = (glVertexAttribI3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI3uiv"), typeof(glVertexAttribI3uivFunc));
            glVertexAttribI4uivPtr = (glVertexAttribI4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4uiv"), typeof(glVertexAttribI4uivFunc));
            glVertexAttribI4bvPtr = (glVertexAttribI4bvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4bv"), typeof(glVertexAttribI4bvFunc));
            glVertexAttribI4svPtr = (glVertexAttribI4svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4sv"), typeof(glVertexAttribI4svFunc));
            glVertexAttribI4ubvPtr = (glVertexAttribI4ubvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4ubv"), typeof(glVertexAttribI4ubvFunc));
            glVertexAttribI4usvPtr = (glVertexAttribI4usvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4usv"), typeof(glVertexAttribI4usvFunc));
            glGetUniformuivPtr = (glGetUniformuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformuiv"), typeof(glGetUniformuivFunc));
            glBindFragDataLocationPtr = (glBindFragDataLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindFragDataLocation"), typeof(glBindFragDataLocationFunc));
            glGetFragDataLocationPtr = (glGetFragDataLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFragDataLocation"), typeof(glGetFragDataLocationFunc));
            glUniform1uiPtr = (glUniform1uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1ui"), typeof(glUniform1uiFunc));
            glUniform2uiPtr = (glUniform2uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2ui"), typeof(glUniform2uiFunc));
            glUniform3uiPtr = (glUniform3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3ui"), typeof(glUniform3uiFunc));
            glUniform4uiPtr = (glUniform4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4ui"), typeof(glUniform4uiFunc));
            glUniform1uivPtr = (glUniform1uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1uiv"), typeof(glUniform1uivFunc));
            glUniform2uivPtr = (glUniform2uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2uiv"), typeof(glUniform2uivFunc));
            glUniform3uivPtr = (glUniform3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3uiv"), typeof(glUniform3uivFunc));
            glUniform4uivPtr = (glUniform4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4uiv"), typeof(glUniform4uivFunc));
            glTexParameterIivPtr = (glTexParameterIivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterIiv"), typeof(glTexParameterIivFunc));
            glTexParameterIuivPtr = (glTexParameterIuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterIuiv"), typeof(glTexParameterIuivFunc));
            glGetTexParameterIivPtr = (glGetTexParameterIivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameterIiv"), typeof(glGetTexParameterIivFunc));
            glGetTexParameterIuivPtr = (glGetTexParameterIuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameterIuiv"), typeof(glGetTexParameterIuivFunc));
            glClearBufferivPtr = (glClearBufferivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearBufferiv"), typeof(glClearBufferivFunc));
            glClearBufferuivPtr = (glClearBufferuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearBufferuiv"), typeof(glClearBufferuivFunc));
            glClearBufferfvPtr = (glClearBufferfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearBufferfv"), typeof(glClearBufferfvFunc));
            glClearBufferfiPtr = (glClearBufferfiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearBufferfi"), typeof(glClearBufferfiFunc));
            glGetStringiPtr = (glGetStringiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetStringi"), typeof(glGetStringiFunc));
            glIsRenderbufferPtr = (glIsRenderbufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsRenderbuffer"), typeof(glIsRenderbufferFunc));
            glBindRenderbufferPtr = (glBindRenderbufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindRenderbuffer"), typeof(glBindRenderbufferFunc));
            glDeleteRenderbuffersPtr = (glDeleteRenderbuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteRenderbuffers"), typeof(glDeleteRenderbuffersFunc));
            glGenRenderbuffersPtr = (glGenRenderbuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenRenderbuffers"), typeof(glGenRenderbuffersFunc));
            glRenderbufferStoragePtr = (glRenderbufferStorageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRenderbufferStorage"), typeof(glRenderbufferStorageFunc));
            glGetRenderbufferParameterivPtr = (glGetRenderbufferParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetRenderbufferParameteriv"), typeof(glGetRenderbufferParameterivFunc));
            glIsFramebufferPtr = (glIsFramebufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsFramebuffer"), typeof(glIsFramebufferFunc));
            glBindFramebufferPtr = (glBindFramebufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindFramebuffer"), typeof(glBindFramebufferFunc));
            glDeleteFramebuffersPtr = (glDeleteFramebuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteFramebuffers"), typeof(glDeleteFramebuffersFunc));
            glGenFramebuffersPtr = (glGenFramebuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenFramebuffers"), typeof(glGenFramebuffersFunc));
            glCheckFramebufferStatusPtr = (glCheckFramebufferStatusFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCheckFramebufferStatus"), typeof(glCheckFramebufferStatusFunc));
            glFramebufferTexture1DPtr = (glFramebufferTexture1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferTexture1D"), typeof(glFramebufferTexture1DFunc));
            glFramebufferTexture2DPtr = (glFramebufferTexture2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferTexture2D"), typeof(glFramebufferTexture2DFunc));
            glFramebufferTexture3DPtr = (glFramebufferTexture3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferTexture3D"), typeof(glFramebufferTexture3DFunc));
            glFramebufferRenderbufferPtr = (glFramebufferRenderbufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferRenderbuffer"), typeof(glFramebufferRenderbufferFunc));
            glGetFramebufferAttachmentParameterivPtr = (glGetFramebufferAttachmentParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFramebufferAttachmentParameteriv"), typeof(glGetFramebufferAttachmentParameterivFunc));
            glGenerateMipmapPtr = (glGenerateMipmapFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenerateMipmap"), typeof(glGenerateMipmapFunc));
            glBlitFramebufferPtr = (glBlitFramebufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlitFramebuffer"), typeof(glBlitFramebufferFunc));
            glRenderbufferStorageMultisamplePtr = (glRenderbufferStorageMultisampleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRenderbufferStorageMultisample"), typeof(glRenderbufferStorageMultisampleFunc));
            glFramebufferTextureLayerPtr = (glFramebufferTextureLayerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferTextureLayer"), typeof(glFramebufferTextureLayerFunc));
            glMapBufferRangePtr = (glMapBufferRangeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMapBufferRange"), typeof(glMapBufferRangeFunc));
            glFlushMappedBufferRangePtr = (glFlushMappedBufferRangeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFlushMappedBufferRange"), typeof(glFlushMappedBufferRangeFunc));
            glBindVertexArrayPtr = (glBindVertexArrayFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindVertexArray"), typeof(glBindVertexArrayFunc));
            glDeleteVertexArraysPtr = (glDeleteVertexArraysFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteVertexArrays"), typeof(glDeleteVertexArraysFunc));
            glGenVertexArraysPtr = (glGenVertexArraysFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenVertexArrays"), typeof(glGenVertexArraysFunc));
            glIsVertexArrayPtr = (glIsVertexArrayFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsVertexArray"), typeof(glIsVertexArrayFunc));
            glDrawArraysInstancedPtr = (glDrawArraysInstancedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawArraysInstanced"), typeof(glDrawArraysInstancedFunc));
            glDrawElementsInstancedPtr = (glDrawElementsInstancedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElementsInstanced"), typeof(glDrawElementsInstancedFunc));
            glTexBufferPtr = (glTexBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexBuffer"), typeof(glTexBufferFunc));
            glPrimitiveRestartIndexPtr = (glPrimitiveRestartIndexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPrimitiveRestartIndex"), typeof(glPrimitiveRestartIndexFunc));
            glCopyBufferSubDataPtr = (glCopyBufferSubDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyBufferSubData"), typeof(glCopyBufferSubDataFunc));
            glGetUniformIndicesPtr = (glGetUniformIndicesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformIndices"), typeof(glGetUniformIndicesFunc));
            glGetActiveUniformsivPtr = (glGetActiveUniformsivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveUniformsiv"), typeof(glGetActiveUniformsivFunc));
            glGetActiveUniformNamePtr = (glGetActiveUniformNameFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveUniformName"), typeof(glGetActiveUniformNameFunc));
            glGetUniformBlockIndexPtr = (glGetUniformBlockIndexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformBlockIndex"), typeof(glGetUniformBlockIndexFunc));
            glGetActiveUniformBlockivPtr = (glGetActiveUniformBlockivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveUniformBlockiv"), typeof(glGetActiveUniformBlockivFunc));
            glGetActiveUniformBlockNamePtr = (glGetActiveUniformBlockNameFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveUniformBlockName"), typeof(glGetActiveUniformBlockNameFunc));
            glUniformBlockBindingPtr = (glUniformBlockBindingFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformBlockBinding"), typeof(glUniformBlockBindingFunc));
            glDrawElementsBaseVertexPtr = (glDrawElementsBaseVertexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElementsBaseVertex"), typeof(glDrawElementsBaseVertexFunc));
            glDrawRangeElementsBaseVertexPtr = (glDrawRangeElementsBaseVertexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawRangeElementsBaseVertex"), typeof(glDrawRangeElementsBaseVertexFunc));
            glDrawElementsInstancedBaseVertexPtr = (glDrawElementsInstancedBaseVertexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElementsInstancedBaseVertex"), typeof(glDrawElementsInstancedBaseVertexFunc));
            glMultiDrawElementsBaseVertexPtr = (glMultiDrawElementsBaseVertexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiDrawElementsBaseVertex"), typeof(glMultiDrawElementsBaseVertexFunc));
            glProvokingVertexPtr = (glProvokingVertexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProvokingVertex"), typeof(glProvokingVertexFunc));
            glFenceSyncPtr = (glFenceSyncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFenceSync"), typeof(glFenceSyncFunc));
            glIsSyncPtr = (glIsSyncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsSync"), typeof(glIsSyncFunc));
            glDeleteSyncPtr = (glDeleteSyncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteSync"), typeof(glDeleteSyncFunc));
            glClientWaitSyncPtr = (glClientWaitSyncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClientWaitSync"), typeof(glClientWaitSyncFunc));
            glWaitSyncPtr = (glWaitSyncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWaitSync"), typeof(glWaitSyncFunc));
            glGetInteger64vPtr = (glGetInteger64vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetInteger64v"), typeof(glGetInteger64vFunc));
            glGetSyncivPtr = (glGetSyncivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetSynciv"), typeof(glGetSyncivFunc));
            glGetInteger64i_vPtr = (glGetInteger64i_vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetInteger64i_v"), typeof(glGetInteger64i_vFunc));
            glGetBufferParameteri64vPtr = (glGetBufferParameteri64vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBufferParameteri64v"), typeof(glGetBufferParameteri64vFunc));
            glFramebufferTexturePtr = (glFramebufferTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferTexture"), typeof(glFramebufferTextureFunc));
            glTexImage2DMultisamplePtr = (glTexImage2DMultisampleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage2DMultisample"), typeof(glTexImage2DMultisampleFunc));
            glTexImage3DMultisamplePtr = (glTexImage3DMultisampleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage3DMultisample"), typeof(glTexImage3DMultisampleFunc));
            glGetMultisamplefvPtr = (glGetMultisamplefvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetMultisamplefv"), typeof(glGetMultisamplefvFunc));
            glSampleMaskiPtr = (glSampleMaskiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSampleMaski"), typeof(glSampleMaskiFunc));
            glBindFragDataLocationIndexedPtr = (glBindFragDataLocationIndexedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindFragDataLocationIndexed"), typeof(glBindFragDataLocationIndexedFunc));
            glGetFragDataIndexPtr = (glGetFragDataIndexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFragDataIndex"), typeof(glGetFragDataIndexFunc));
            glGenSamplersPtr = (glGenSamplersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenSamplers"), typeof(glGenSamplersFunc));
            glDeleteSamplersPtr = (glDeleteSamplersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteSamplers"), typeof(glDeleteSamplersFunc));
            glIsSamplerPtr = (glIsSamplerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsSampler"), typeof(glIsSamplerFunc));
            glBindSamplerPtr = (glBindSamplerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindSampler"), typeof(glBindSamplerFunc));
            glSamplerParameteriPtr = (glSamplerParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSamplerParameteri"), typeof(glSamplerParameteriFunc));
            glSamplerParameterivPtr = (glSamplerParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSamplerParameteriv"), typeof(glSamplerParameterivFunc));
            glSamplerParameterfPtr = (glSamplerParameterfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSamplerParameterf"), typeof(glSamplerParameterfFunc));
            glSamplerParameterfvPtr = (glSamplerParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSamplerParameterfv"), typeof(glSamplerParameterfvFunc));
            glSamplerParameterIivPtr = (glSamplerParameterIivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSamplerParameterIiv"), typeof(glSamplerParameterIivFunc));
            glSamplerParameterIuivPtr = (glSamplerParameterIuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSamplerParameterIuiv"), typeof(glSamplerParameterIuivFunc));
            glGetSamplerParameterivPtr = (glGetSamplerParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetSamplerParameteriv"), typeof(glGetSamplerParameterivFunc));
            glGetSamplerParameterIivPtr = (glGetSamplerParameterIivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetSamplerParameterIiv"), typeof(glGetSamplerParameterIivFunc));
            glGetSamplerParameterfvPtr = (glGetSamplerParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetSamplerParameterfv"), typeof(glGetSamplerParameterfvFunc));
            glGetSamplerParameterIuivPtr = (glGetSamplerParameterIuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetSamplerParameterIuiv"), typeof(glGetSamplerParameterIuivFunc));
            glQueryCounterPtr = (glQueryCounterFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glQueryCounter"), typeof(glQueryCounterFunc));
            glGetQueryObjecti64vPtr = (glGetQueryObjecti64vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetQueryObjecti64v"), typeof(glGetQueryObjecti64vFunc));
            glGetQueryObjectui64vPtr = (glGetQueryObjectui64vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetQueryObjectui64v"), typeof(glGetQueryObjectui64vFunc));
            glVertexAttribDivisorPtr = (glVertexAttribDivisorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribDivisor"), typeof(glVertexAttribDivisorFunc));
            glVertexAttribP1uiPtr = (glVertexAttribP1uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribP1ui"), typeof(glVertexAttribP1uiFunc));
            glVertexAttribP1uivPtr = (glVertexAttribP1uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribP1uiv"), typeof(glVertexAttribP1uivFunc));
            glVertexAttribP2uiPtr = (glVertexAttribP2uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribP2ui"), typeof(glVertexAttribP2uiFunc));
            glVertexAttribP2uivPtr = (glVertexAttribP2uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribP2uiv"), typeof(glVertexAttribP2uivFunc));
            glVertexAttribP3uiPtr = (glVertexAttribP3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribP3ui"), typeof(glVertexAttribP3uiFunc));
            glVertexAttribP3uivPtr = (glVertexAttribP3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribP3uiv"), typeof(glVertexAttribP3uivFunc));
            glVertexAttribP4uiPtr = (glVertexAttribP4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribP4ui"), typeof(glVertexAttribP4uiFunc));
            glVertexAttribP4uivPtr = (glVertexAttribP4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribP4uiv"), typeof(glVertexAttribP4uivFunc));
            glVertexP2uiPtr = (glVertexP2uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexP2ui"), typeof(glVertexP2uiFunc));
            glVertexP2uivPtr = (glVertexP2uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexP2uiv"), typeof(glVertexP2uivFunc));
            glVertexP3uiPtr = (glVertexP3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexP3ui"), typeof(glVertexP3uiFunc));
            glVertexP3uivPtr = (glVertexP3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexP3uiv"), typeof(glVertexP3uivFunc));
            glVertexP4uiPtr = (glVertexP4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexP4ui"), typeof(glVertexP4uiFunc));
            glVertexP4uivPtr = (glVertexP4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexP4uiv"), typeof(glVertexP4uivFunc));
            glTexCoordP1uiPtr = (glTexCoordP1uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordP1ui"), typeof(glTexCoordP1uiFunc));
            glTexCoordP1uivPtr = (glTexCoordP1uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordP1uiv"), typeof(glTexCoordP1uivFunc));
            glTexCoordP2uiPtr = (glTexCoordP2uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordP2ui"), typeof(glTexCoordP2uiFunc));
            glTexCoordP2uivPtr = (glTexCoordP2uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordP2uiv"), typeof(glTexCoordP2uivFunc));
            glTexCoordP3uiPtr = (glTexCoordP3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordP3ui"), typeof(glTexCoordP3uiFunc));
            glTexCoordP3uivPtr = (glTexCoordP3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordP3uiv"), typeof(glTexCoordP3uivFunc));
            glTexCoordP4uiPtr = (glTexCoordP4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordP4ui"), typeof(glTexCoordP4uiFunc));
            glTexCoordP4uivPtr = (glTexCoordP4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordP4uiv"), typeof(glTexCoordP4uivFunc));
            glMultiTexCoordP1uiPtr = (glMultiTexCoordP1uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoordP1ui"), typeof(glMultiTexCoordP1uiFunc));
            glMultiTexCoordP1uivPtr = (glMultiTexCoordP1uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoordP1uiv"), typeof(glMultiTexCoordP1uivFunc));
            glMultiTexCoordP2uiPtr = (glMultiTexCoordP2uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoordP2ui"), typeof(glMultiTexCoordP2uiFunc));
            glMultiTexCoordP2uivPtr = (glMultiTexCoordP2uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoordP2uiv"), typeof(glMultiTexCoordP2uivFunc));
            glMultiTexCoordP3uiPtr = (glMultiTexCoordP3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoordP3ui"), typeof(glMultiTexCoordP3uiFunc));
            glMultiTexCoordP3uivPtr = (glMultiTexCoordP3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoordP3uiv"), typeof(glMultiTexCoordP3uivFunc));
            glMultiTexCoordP4uiPtr = (glMultiTexCoordP4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoordP4ui"), typeof(glMultiTexCoordP4uiFunc));
            glMultiTexCoordP4uivPtr = (glMultiTexCoordP4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoordP4uiv"), typeof(glMultiTexCoordP4uivFunc));
            glNormalP3uiPtr = (glNormalP3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormalP3ui"), typeof(glNormalP3uiFunc));
            glNormalP3uivPtr = (glNormalP3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormalP3uiv"), typeof(glNormalP3uivFunc));
            glColorP3uiPtr = (glColorP3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorP3ui"), typeof(glColorP3uiFunc));
            glColorP3uivPtr = (glColorP3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorP3uiv"), typeof(glColorP3uivFunc));
            glColorP4uiPtr = (glColorP4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorP4ui"), typeof(glColorP4uiFunc));
            glColorP4uivPtr = (glColorP4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorP4uiv"), typeof(glColorP4uivFunc));
            glSecondaryColorP3uiPtr = (glSecondaryColorP3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColorP3ui"), typeof(glSecondaryColorP3uiFunc));
            glSecondaryColorP3uivPtr = (glSecondaryColorP3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColorP3uiv"), typeof(glSecondaryColorP3uivFunc));
            glMinSampleShadingPtr = (glMinSampleShadingFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMinSampleShading"), typeof(glMinSampleShadingFunc));
            glBlendEquationiPtr = (glBlendEquationiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendEquationi"), typeof(glBlendEquationiFunc));
            glBlendEquationSeparateiPtr = (glBlendEquationSeparateiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendEquationSeparatei"), typeof(glBlendEquationSeparateiFunc));
            glBlendFunciPtr = (glBlendFunciFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendFunci"), typeof(glBlendFunciFunc));
            glBlendFuncSeparateiPtr = (glBlendFuncSeparateiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendFuncSeparatei"), typeof(glBlendFuncSeparateiFunc));
            glDrawArraysIndirectPtr = (glDrawArraysIndirectFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawArraysIndirect"), typeof(glDrawArraysIndirectFunc));
            glDrawElementsIndirectPtr = (glDrawElementsIndirectFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElementsIndirect"), typeof(glDrawElementsIndirectFunc));
            glUniform1dPtr = (glUniform1dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1d"), typeof(glUniform1dFunc));
            glUniform2dPtr = (glUniform2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2d"), typeof(glUniform2dFunc));
            glUniform3dPtr = (glUniform3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3d"), typeof(glUniform3dFunc));
            glUniform4dPtr = (glUniform4dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4d"), typeof(glUniform4dFunc));
            glUniform1dvPtr = (glUniform1dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1dv"), typeof(glUniform1dvFunc));
            glUniform2dvPtr = (glUniform2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2dv"), typeof(glUniform2dvFunc));
            glUniform3dvPtr = (glUniform3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3dv"), typeof(glUniform3dvFunc));
            glUniform4dvPtr = (glUniform4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4dv"), typeof(glUniform4dvFunc));
            glUniformMatrix2dvPtr = (glUniformMatrix2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix2dv"), typeof(glUniformMatrix2dvFunc));
            glUniformMatrix3dvPtr = (glUniformMatrix3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix3dv"), typeof(glUniformMatrix3dvFunc));
            glUniformMatrix4dvPtr = (glUniformMatrix4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix4dv"), typeof(glUniformMatrix4dvFunc));
            glUniformMatrix2x3dvPtr = (glUniformMatrix2x3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix2x3dv"), typeof(glUniformMatrix2x3dvFunc));
            glUniformMatrix2x4dvPtr = (glUniformMatrix2x4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix2x4dv"), typeof(glUniformMatrix2x4dvFunc));
            glUniformMatrix3x2dvPtr = (glUniformMatrix3x2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix3x2dv"), typeof(glUniformMatrix3x2dvFunc));
            glUniformMatrix3x4dvPtr = (glUniformMatrix3x4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix3x4dv"), typeof(glUniformMatrix3x4dvFunc));
            glUniformMatrix4x2dvPtr = (glUniformMatrix4x2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix4x2dv"), typeof(glUniformMatrix4x2dvFunc));
            glUniformMatrix4x3dvPtr = (glUniformMatrix4x3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix4x3dv"), typeof(glUniformMatrix4x3dvFunc));
            glGetUniformdvPtr = (glGetUniformdvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformdv"), typeof(glGetUniformdvFunc));
            glGetSubroutineUniformLocationPtr = (glGetSubroutineUniformLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetSubroutineUniformLocation"), typeof(glGetSubroutineUniformLocationFunc));
            glGetSubroutineIndexPtr = (glGetSubroutineIndexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetSubroutineIndex"), typeof(glGetSubroutineIndexFunc));
            glGetActiveSubroutineUniformivPtr = (glGetActiveSubroutineUniformivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveSubroutineUniformiv"), typeof(glGetActiveSubroutineUniformivFunc));
            glGetActiveSubroutineUniformNamePtr = (glGetActiveSubroutineUniformNameFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveSubroutineUniformName"), typeof(glGetActiveSubroutineUniformNameFunc));
            glGetActiveSubroutineNamePtr = (glGetActiveSubroutineNameFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveSubroutineName"), typeof(glGetActiveSubroutineNameFunc));
            glUniformSubroutinesuivPtr = (glUniformSubroutinesuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformSubroutinesuiv"), typeof(glUniformSubroutinesuivFunc));
            glGetUniformSubroutineuivPtr = (glGetUniformSubroutineuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformSubroutineuiv"), typeof(glGetUniformSubroutineuivFunc));
            glGetProgramStageivPtr = (glGetProgramStageivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramStageiv"), typeof(glGetProgramStageivFunc));
            glPatchParameteriPtr = (glPatchParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPatchParameteri"), typeof(glPatchParameteriFunc));
            glPatchParameterfvPtr = (glPatchParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPatchParameterfv"), typeof(glPatchParameterfvFunc));
            glBindTransformFeedbackPtr = (glBindTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindTransformFeedback"), typeof(glBindTransformFeedbackFunc));
            glDeleteTransformFeedbacksPtr = (glDeleteTransformFeedbacksFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteTransformFeedbacks"), typeof(glDeleteTransformFeedbacksFunc));
            glGenTransformFeedbacksPtr = (glGenTransformFeedbacksFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenTransformFeedbacks"), typeof(glGenTransformFeedbacksFunc));
            glIsTransformFeedbackPtr = (glIsTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsTransformFeedback"), typeof(glIsTransformFeedbackFunc));
            glPauseTransformFeedbackPtr = (glPauseTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPauseTransformFeedback"), typeof(glPauseTransformFeedbackFunc));
            glResumeTransformFeedbackPtr = (glResumeTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glResumeTransformFeedback"), typeof(glResumeTransformFeedbackFunc));
            glDrawTransformFeedbackPtr = (glDrawTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawTransformFeedback"), typeof(glDrawTransformFeedbackFunc));
            glDrawTransformFeedbackStreamPtr = (glDrawTransformFeedbackStreamFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawTransformFeedbackStream"), typeof(glDrawTransformFeedbackStreamFunc));
            glBeginQueryIndexedPtr = (glBeginQueryIndexedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBeginQueryIndexed"), typeof(glBeginQueryIndexedFunc));
            glEndQueryIndexedPtr = (glEndQueryIndexedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEndQueryIndexed"), typeof(glEndQueryIndexedFunc));
            glGetQueryIndexedivPtr = (glGetQueryIndexedivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetQueryIndexediv"), typeof(glGetQueryIndexedivFunc));
            glReleaseShaderCompilerPtr = (glReleaseShaderCompilerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glReleaseShaderCompiler"), typeof(glReleaseShaderCompilerFunc));
            glShaderBinaryPtr = (glShaderBinaryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glShaderBinary"), typeof(glShaderBinaryFunc));
            glGetShaderPrecisionFormatPtr = (glGetShaderPrecisionFormatFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetShaderPrecisionFormat"), typeof(glGetShaderPrecisionFormatFunc));
            glDepthRangefPtr = (glDepthRangefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthRangef"), typeof(glDepthRangefFunc));
            glClearDepthfPtr = (glClearDepthfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearDepthf"), typeof(glClearDepthfFunc));
            glGetProgramBinaryPtr = (glGetProgramBinaryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramBinary"), typeof(glGetProgramBinaryFunc));
            glProgramBinaryPtr = (glProgramBinaryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramBinary"), typeof(glProgramBinaryFunc));
            glProgramParameteriPtr = (glProgramParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramParameteri"), typeof(glProgramParameteriFunc));
            glUseProgramStagesPtr = (glUseProgramStagesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUseProgramStages"), typeof(glUseProgramStagesFunc));
            glActiveShaderProgramPtr = (glActiveShaderProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glActiveShaderProgram"), typeof(glActiveShaderProgramFunc));
            glCreateShaderProgramvPtr = (glCreateShaderProgramvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCreateShaderProgramv"), typeof(glCreateShaderProgramvFunc));
            glBindProgramPipelinePtr = (glBindProgramPipelineFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindProgramPipeline"), typeof(glBindProgramPipelineFunc));
            glDeleteProgramPipelinesPtr = (glDeleteProgramPipelinesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteProgramPipelines"), typeof(glDeleteProgramPipelinesFunc));
            glGenProgramPipelinesPtr = (glGenProgramPipelinesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenProgramPipelines"), typeof(glGenProgramPipelinesFunc));
            glIsProgramPipelinePtr = (glIsProgramPipelineFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsProgramPipeline"), typeof(glIsProgramPipelineFunc));
            glGetProgramPipelineivPtr = (glGetProgramPipelineivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramPipelineiv"), typeof(glGetProgramPipelineivFunc));
            glProgramUniform1iPtr = (glProgramUniform1iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform1i"), typeof(glProgramUniform1iFunc));
            glProgramUniform1ivPtr = (glProgramUniform1ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform1iv"), typeof(glProgramUniform1ivFunc));
            glProgramUniform1fPtr = (glProgramUniform1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform1f"), typeof(glProgramUniform1fFunc));
            glProgramUniform1fvPtr = (glProgramUniform1fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform1fv"), typeof(glProgramUniform1fvFunc));
            glProgramUniform1dPtr = (glProgramUniform1dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform1d"), typeof(glProgramUniform1dFunc));
            glProgramUniform1dvPtr = (glProgramUniform1dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform1dv"), typeof(glProgramUniform1dvFunc));
            glProgramUniform1uiPtr = (glProgramUniform1uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform1ui"), typeof(glProgramUniform1uiFunc));
            glProgramUniform1uivPtr = (glProgramUniform1uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform1uiv"), typeof(glProgramUniform1uivFunc));
            glProgramUniform2iPtr = (glProgramUniform2iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform2i"), typeof(glProgramUniform2iFunc));
            glProgramUniform2ivPtr = (glProgramUniform2ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform2iv"), typeof(glProgramUniform2ivFunc));
            glProgramUniform2fPtr = (glProgramUniform2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform2f"), typeof(glProgramUniform2fFunc));
            glProgramUniform2fvPtr = (glProgramUniform2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform2fv"), typeof(glProgramUniform2fvFunc));
            glProgramUniform2dPtr = (glProgramUniform2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform2d"), typeof(glProgramUniform2dFunc));
            glProgramUniform2dvPtr = (glProgramUniform2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform2dv"), typeof(glProgramUniform2dvFunc));
            glProgramUniform2uiPtr = (glProgramUniform2uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform2ui"), typeof(glProgramUniform2uiFunc));
            glProgramUniform2uivPtr = (glProgramUniform2uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform2uiv"), typeof(glProgramUniform2uivFunc));
            glProgramUniform3iPtr = (glProgramUniform3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform3i"), typeof(glProgramUniform3iFunc));
            glProgramUniform3ivPtr = (glProgramUniform3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform3iv"), typeof(glProgramUniform3ivFunc));
            glProgramUniform3fPtr = (glProgramUniform3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform3f"), typeof(glProgramUniform3fFunc));
            glProgramUniform3fvPtr = (glProgramUniform3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform3fv"), typeof(glProgramUniform3fvFunc));
            glProgramUniform3dPtr = (glProgramUniform3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform3d"), typeof(glProgramUniform3dFunc));
            glProgramUniform3dvPtr = (glProgramUniform3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform3dv"), typeof(glProgramUniform3dvFunc));
            glProgramUniform3uiPtr = (glProgramUniform3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform3ui"), typeof(glProgramUniform3uiFunc));
            glProgramUniform3uivPtr = (glProgramUniform3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform3uiv"), typeof(glProgramUniform3uivFunc));
            glProgramUniform4iPtr = (glProgramUniform4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform4i"), typeof(glProgramUniform4iFunc));
            glProgramUniform4ivPtr = (glProgramUniform4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform4iv"), typeof(glProgramUniform4ivFunc));
            glProgramUniform4fPtr = (glProgramUniform4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform4f"), typeof(glProgramUniform4fFunc));
            glProgramUniform4fvPtr = (glProgramUniform4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform4fv"), typeof(glProgramUniform4fvFunc));
            glProgramUniform4dPtr = (glProgramUniform4dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform4d"), typeof(glProgramUniform4dFunc));
            glProgramUniform4dvPtr = (glProgramUniform4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform4dv"), typeof(glProgramUniform4dvFunc));
            glProgramUniform4uiPtr = (glProgramUniform4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform4ui"), typeof(glProgramUniform4uiFunc));
            glProgramUniform4uivPtr = (glProgramUniform4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform4uiv"), typeof(glProgramUniform4uivFunc));
            glProgramUniformMatrix2fvPtr = (glProgramUniformMatrix2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix2fv"), typeof(glProgramUniformMatrix2fvFunc));
            glProgramUniformMatrix3fvPtr = (glProgramUniformMatrix3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix3fv"), typeof(glProgramUniformMatrix3fvFunc));
            glProgramUniformMatrix4fvPtr = (glProgramUniformMatrix4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix4fv"), typeof(glProgramUniformMatrix4fvFunc));
            glProgramUniformMatrix2dvPtr = (glProgramUniformMatrix2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix2dv"), typeof(glProgramUniformMatrix2dvFunc));
            glProgramUniformMatrix3dvPtr = (glProgramUniformMatrix3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix3dv"), typeof(glProgramUniformMatrix3dvFunc));
            glProgramUniformMatrix4dvPtr = (glProgramUniformMatrix4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix4dv"), typeof(glProgramUniformMatrix4dvFunc));
            glProgramUniformMatrix2x3fvPtr = (glProgramUniformMatrix2x3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix2x3fv"), typeof(glProgramUniformMatrix2x3fvFunc));
            glProgramUniformMatrix3x2fvPtr = (glProgramUniformMatrix3x2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix3x2fv"), typeof(glProgramUniformMatrix3x2fvFunc));
            glProgramUniformMatrix2x4fvPtr = (glProgramUniformMatrix2x4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix2x4fv"), typeof(glProgramUniformMatrix2x4fvFunc));
            glProgramUniformMatrix4x2fvPtr = (glProgramUniformMatrix4x2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix4x2fv"), typeof(glProgramUniformMatrix4x2fvFunc));
            glProgramUniformMatrix3x4fvPtr = (glProgramUniformMatrix3x4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix3x4fv"), typeof(glProgramUniformMatrix3x4fvFunc));
            glProgramUniformMatrix4x3fvPtr = (glProgramUniformMatrix4x3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix4x3fv"), typeof(glProgramUniformMatrix4x3fvFunc));
            glProgramUniformMatrix2x3dvPtr = (glProgramUniformMatrix2x3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix2x3dv"), typeof(glProgramUniformMatrix2x3dvFunc));
            glProgramUniformMatrix3x2dvPtr = (glProgramUniformMatrix3x2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix3x2dv"), typeof(glProgramUniformMatrix3x2dvFunc));
            glProgramUniformMatrix2x4dvPtr = (glProgramUniformMatrix2x4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix2x4dv"), typeof(glProgramUniformMatrix2x4dvFunc));
            glProgramUniformMatrix4x2dvPtr = (glProgramUniformMatrix4x2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix4x2dv"), typeof(glProgramUniformMatrix4x2dvFunc));
            glProgramUniformMatrix3x4dvPtr = (glProgramUniformMatrix3x4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix3x4dv"), typeof(glProgramUniformMatrix3x4dvFunc));
            glProgramUniformMatrix4x3dvPtr = (glProgramUniformMatrix4x3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix4x3dv"), typeof(glProgramUniformMatrix4x3dvFunc));
            glValidateProgramPipelinePtr = (glValidateProgramPipelineFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glValidateProgramPipeline"), typeof(glValidateProgramPipelineFunc));
            glGetProgramPipelineInfoLogPtr = (glGetProgramPipelineInfoLogFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramPipelineInfoLog"), typeof(glGetProgramPipelineInfoLogFunc));
            glVertexAttribL1dPtr = (glVertexAttribL1dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribL1d"), typeof(glVertexAttribL1dFunc));
            glVertexAttribL2dPtr = (glVertexAttribL2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribL2d"), typeof(glVertexAttribL2dFunc));
            glVertexAttribL3dPtr = (glVertexAttribL3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribL3d"), typeof(glVertexAttribL3dFunc));
            glVertexAttribL4dPtr = (glVertexAttribL4dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribL4d"), typeof(glVertexAttribL4dFunc));
            glVertexAttribL1dvPtr = (glVertexAttribL1dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribL1dv"), typeof(glVertexAttribL1dvFunc));
            glVertexAttribL2dvPtr = (glVertexAttribL2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribL2dv"), typeof(glVertexAttribL2dvFunc));
            glVertexAttribL3dvPtr = (glVertexAttribL3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribL3dv"), typeof(glVertexAttribL3dvFunc));
            glVertexAttribL4dvPtr = (glVertexAttribL4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribL4dv"), typeof(glVertexAttribL4dvFunc));
            glVertexAttribLPointerPtr = (glVertexAttribLPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribLPointer"), typeof(glVertexAttribLPointerFunc));
            glGetVertexAttribLdvPtr = (glGetVertexAttribLdvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribLdv"), typeof(glGetVertexAttribLdvFunc));
            glViewportArrayvPtr = (glViewportArrayvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glViewportArrayv"), typeof(glViewportArrayvFunc));
            glViewportIndexedfPtr = (glViewportIndexedfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glViewportIndexedf"), typeof(glViewportIndexedfFunc));
            glViewportIndexedfvPtr = (glViewportIndexedfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glViewportIndexedfv"), typeof(glViewportIndexedfvFunc));
            glScissorArrayvPtr = (glScissorArrayvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScissorArrayv"), typeof(glScissorArrayvFunc));
            glScissorIndexedPtr = (glScissorIndexedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScissorIndexed"), typeof(glScissorIndexedFunc));
            glScissorIndexedvPtr = (glScissorIndexedvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScissorIndexedv"), typeof(glScissorIndexedvFunc));
            glDepthRangeArrayvPtr = (glDepthRangeArrayvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthRangeArrayv"), typeof(glDepthRangeArrayvFunc));
            glDepthRangeIndexedPtr = (glDepthRangeIndexedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthRangeIndexed"), typeof(glDepthRangeIndexedFunc));
            glGetFloati_vPtr = (glGetFloati_vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFloati_v"), typeof(glGetFloati_vFunc));
            glGetDoublei_vPtr = (glGetDoublei_vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetDoublei_v"), typeof(glGetDoublei_vFunc));
            glDrawArraysInstancedBaseInstancePtr = (glDrawArraysInstancedBaseInstanceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawArraysInstancedBaseInstance"), typeof(glDrawArraysInstancedBaseInstanceFunc));
            glDrawElementsInstancedBaseInstancePtr = (glDrawElementsInstancedBaseInstanceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElementsInstancedBaseInstance"), typeof(glDrawElementsInstancedBaseInstanceFunc));
            glDrawElementsInstancedBaseVertexBaseInstancePtr = (glDrawElementsInstancedBaseVertexBaseInstanceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElementsInstancedBaseVertexBaseInstance"), typeof(glDrawElementsInstancedBaseVertexBaseInstanceFunc));
            glGetInternalformativPtr = (glGetInternalformativFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetInternalformativ"), typeof(glGetInternalformativFunc));
            glGetActiveAtomicCounterBufferivPtr = (glGetActiveAtomicCounterBufferivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveAtomicCounterBufferiv"), typeof(glGetActiveAtomicCounterBufferivFunc));
            glBindImageTexturePtr = (glBindImageTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindImageTexture"), typeof(glBindImageTextureFunc));
            glMemoryBarrierPtr = (glMemoryBarrierFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMemoryBarrier"), typeof(glMemoryBarrierFunc));
            glTexStorage1DPtr = (glTexStorage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexStorage1D"), typeof(glTexStorage1DFunc));
            glTexStorage2DPtr = (glTexStorage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexStorage2D"), typeof(glTexStorage2DFunc));
            glTexStorage3DPtr = (glTexStorage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexStorage3D"), typeof(glTexStorage3DFunc));
            glDrawTransformFeedbackInstancedPtr = (glDrawTransformFeedbackInstancedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawTransformFeedbackInstanced"), typeof(glDrawTransformFeedbackInstancedFunc));
            glDrawTransformFeedbackStreamInstancedPtr = (glDrawTransformFeedbackStreamInstancedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawTransformFeedbackStreamInstanced"), typeof(glDrawTransformFeedbackStreamInstancedFunc));
            glClearBufferDataPtr = (glClearBufferDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearBufferData"), typeof(glClearBufferDataFunc));
            glClearBufferSubDataPtr = (glClearBufferSubDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearBufferSubData"), typeof(glClearBufferSubDataFunc));
            glDispatchComputePtr = (glDispatchComputeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDispatchCompute"), typeof(glDispatchComputeFunc));
            glDispatchComputeIndirectPtr = (glDispatchComputeIndirectFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDispatchComputeIndirect"), typeof(glDispatchComputeIndirectFunc));
            glCopyImageSubDataPtr = (glCopyImageSubDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyImageSubData"), typeof(glCopyImageSubDataFunc));
            glFramebufferParameteriPtr = (glFramebufferParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferParameteri"), typeof(glFramebufferParameteriFunc));
            glGetFramebufferParameterivPtr = (glGetFramebufferParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFramebufferParameteriv"), typeof(glGetFramebufferParameterivFunc));
            glGetInternalformati64vPtr = (glGetInternalformati64vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetInternalformati64v"), typeof(glGetInternalformati64vFunc));
            glInvalidateTexSubImagePtr = (glInvalidateTexSubImageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glInvalidateTexSubImage"), typeof(glInvalidateTexSubImageFunc));
            glInvalidateTexImagePtr = (glInvalidateTexImageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glInvalidateTexImage"), typeof(glInvalidateTexImageFunc));
            glInvalidateBufferSubDataPtr = (glInvalidateBufferSubDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glInvalidateBufferSubData"), typeof(glInvalidateBufferSubDataFunc));
            glInvalidateBufferDataPtr = (glInvalidateBufferDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glInvalidateBufferData"), typeof(glInvalidateBufferDataFunc));
            glInvalidateFramebufferPtr = (glInvalidateFramebufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glInvalidateFramebuffer"), typeof(glInvalidateFramebufferFunc));
            glInvalidateSubFramebufferPtr = (glInvalidateSubFramebufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glInvalidateSubFramebuffer"), typeof(glInvalidateSubFramebufferFunc));
            glMultiDrawArraysIndirectPtr = (glMultiDrawArraysIndirectFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiDrawArraysIndirect"), typeof(glMultiDrawArraysIndirectFunc));
            glMultiDrawElementsIndirectPtr = (glMultiDrawElementsIndirectFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiDrawElementsIndirect"), typeof(glMultiDrawElementsIndirectFunc));
            glGetProgramInterfaceivPtr = (glGetProgramInterfaceivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramInterfaceiv"), typeof(glGetProgramInterfaceivFunc));
            glGetProgramResourceIndexPtr = (glGetProgramResourceIndexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramResourceIndex"), typeof(glGetProgramResourceIndexFunc));
            glGetProgramResourceNamePtr = (glGetProgramResourceNameFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramResourceName"), typeof(glGetProgramResourceNameFunc));
            glGetProgramResourceivPtr = (glGetProgramResourceivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramResourceiv"), typeof(glGetProgramResourceivFunc));
            glGetProgramResourceLocationPtr = (glGetProgramResourceLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramResourceLocation"), typeof(glGetProgramResourceLocationFunc));
            glGetProgramResourceLocationIndexPtr = (glGetProgramResourceLocationIndexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramResourceLocationIndex"), typeof(glGetProgramResourceLocationIndexFunc));
            glShaderStorageBlockBindingPtr = (glShaderStorageBlockBindingFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glShaderStorageBlockBinding"), typeof(glShaderStorageBlockBindingFunc));
            glTexBufferRangePtr = (glTexBufferRangeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexBufferRange"), typeof(glTexBufferRangeFunc));
            glTexStorage2DMultisamplePtr = (glTexStorage2DMultisampleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexStorage2DMultisample"), typeof(glTexStorage2DMultisampleFunc));
            glTexStorage3DMultisamplePtr = (glTexStorage3DMultisampleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexStorage3DMultisample"), typeof(glTexStorage3DMultisampleFunc));
            glTextureViewPtr = (glTextureViewFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTextureView"), typeof(glTextureViewFunc));
            glBindVertexBufferPtr = (glBindVertexBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindVertexBuffer"), typeof(glBindVertexBufferFunc));
            glVertexAttribFormatPtr = (glVertexAttribFormatFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribFormat"), typeof(glVertexAttribFormatFunc));
            glVertexAttribIFormatPtr = (glVertexAttribIFormatFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribIFormat"), typeof(glVertexAttribIFormatFunc));
            glVertexAttribLFormatPtr = (glVertexAttribLFormatFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribLFormat"), typeof(glVertexAttribLFormatFunc));
            glVertexAttribBindingPtr = (glVertexAttribBindingFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribBinding"), typeof(glVertexAttribBindingFunc));
            glVertexBindingDivisorPtr = (glVertexBindingDivisorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexBindingDivisor"), typeof(glVertexBindingDivisorFunc));
            glDebugMessageControlPtr = (glDebugMessageControlFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDebugMessageControl"), typeof(glDebugMessageControlFunc));
            glDebugMessageInsertPtr = (glDebugMessageInsertFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDebugMessageInsert"), typeof(glDebugMessageInsertFunc));
            glDebugMessageCallbackPtr = (glDebugMessageCallbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDebugMessageCallback"), typeof(glDebugMessageCallbackFunc));
            glGetDebugMessageLogPtr = (glGetDebugMessageLogFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetDebugMessageLog"), typeof(glGetDebugMessageLogFunc));
            glPushDebugGroupPtr = (glPushDebugGroupFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPushDebugGroup"), typeof(glPushDebugGroupFunc));
            glPopDebugGroupPtr = (glPopDebugGroupFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPopDebugGroup"), typeof(glPopDebugGroupFunc));
            glObjectLabelPtr = (glObjectLabelFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glObjectLabel"), typeof(glObjectLabelFunc));
            glGetObjectLabelPtr = (glGetObjectLabelFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetObjectLabel"), typeof(glGetObjectLabelFunc));
            glObjectPtrLabelPtr = (glObjectPtrLabelFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glObjectPtrLabel"), typeof(glObjectPtrLabelFunc));
            glGetObjectPtrLabelPtr = (glGetObjectPtrLabelFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetObjectPtrLabel"), typeof(glGetObjectPtrLabelFunc));
            glGetPointervPtr = (glGetPointervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetPointerv"), typeof(glGetPointervFunc));
            glBufferStoragePtr = (glBufferStorageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBufferStorage"), typeof(glBufferStorageFunc));
            glClearTexImagePtr = (glClearTexImageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearTexImage"), typeof(glClearTexImageFunc));
            glClearTexSubImagePtr = (glClearTexSubImageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearTexSubImage"), typeof(glClearTexSubImageFunc));
            glBindBuffersBasePtr = (glBindBuffersBaseFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindBuffersBase"), typeof(glBindBuffersBaseFunc));
            glBindBuffersRangePtr = (glBindBuffersRangeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindBuffersRange"), typeof(glBindBuffersRangeFunc));
            glBindTexturesPtr = (glBindTexturesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindTextures"), typeof(glBindTexturesFunc));
            glBindSamplersPtr = (glBindSamplersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindSamplers"), typeof(glBindSamplersFunc));
            glBindImageTexturesPtr = (glBindImageTexturesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindImageTextures"), typeof(glBindImageTexturesFunc));
            glBindVertexBuffersPtr = (glBindVertexBuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindVertexBuffers"), typeof(glBindVertexBuffersFunc));
        }

        public static void PreloadFunction(string name)
        {
            var memberInfo = typeof(GL44Core).GetField(name + "Ptr", BindingFlags.NonPublic | BindingFlags.Static);
            memberInfo.SetValue(null, Marshal.GetDelegateForFunctionPointer(GetProcAddress(name), memberInfo.FieldType));
        }
        #endregion
    }
}
