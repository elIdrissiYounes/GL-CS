// This file was autogenerated by GLCSGen on 11/5/2013 3:08:40 PM UTC
// Original copyright from gl.xml:
// 
// Copyright (c) 2013 The Khronos Group Inc.
// 
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
// 
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
// 
// ------------------------------------------------------------------------
// 
// This file, gl.xml, is the OpenGL and OpenGL API Registry. The older
// ".spec" file format has been retired and will no longer be updated with
// new extensions and API versions. The canonical version of the registry,
// together with documentation, schema, and Python generator scripts used
// to generate C header files for OpenGL and OpenGL ES, can always be found
// in the Khronos Registry at
//         http://www.opengl.org/registry/
//     

using System;
using System.Reflection;
using System.Runtime.InteropServices;

namespace OpenGL
{
    public static class GL43Compatibility
    {
        #region Enums
        public static uint GL_BACK = 0x0405;
        public static uint GL_FRONT = 0x0404;
        public static uint GL_FRONT_AND_BACK = 0x0408;
        public static uint GL_CCW = 0x0901;
        public static uint GL_CW = 0x0900;
        public static uint GL_ALLOW_DRAW_FRG_HINT_PGI = 0x1A210;
        public static uint GL_ALLOW_DRAW_MEM_HINT_PGI = 0x1A211;
        public static uint GL_ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E;
        public static uint GL_ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F;
        public static uint GL_ALWAYS_FAST_HINT_PGI = 0x1A20C;
        public static uint GL_ALWAYS_SOFT_HINT_PGI = 0x1A20D;
        public static uint GL_BACK_NORMALS_HINT_PGI = 0x1A223;
        public static uint GL_BINNING_CONTROL_HINT_QCOM = 0x8FB0;
        public static uint GL_CLIP_FAR_HINT_PGI = 0x1A221;
        public static uint GL_CLIP_NEAR_HINT_PGI = 0x1A220;
        public static uint GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0;
        public static uint GL_CONSERVE_MEMORY_HINT_PGI = 0x1A1FD;
        public static uint GL_CONVOLUTION_HINT_SGIX = 0x8316;
        public static uint GL_FOG_HINT = 0x0C54;
        public static uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
        public static uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B;
        public static uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES = 0x8B8B;
        public static uint GL_FULL_STIPPLE_HINT_PGI = 0x1A219;
        public static uint GL_GENERATE_MIPMAP_HINT = 0x8192;
        public static uint GL_GENERATE_MIPMAP_HINT_SGIS = 0x8192;
        public static uint GL_LINE_QUALITY_HINT_SGIX = 0x835B;
        public static uint GL_LINE_SMOOTH_HINT = 0x0C52;
        public static uint GL_MATERIAL_SIDE_HINT_PGI = 0x1A22C;
        public static uint GL_MAX_VERTEX_HINT_PGI = 0x1A22D;
        public static uint GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534;
        public static uint GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203;
        public static uint GL_NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204;
        public static uint GL_PACK_CMYK_HINT_EXT = 0x800E;
        public static uint GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
        public static uint GL_PHONG_HINT_WIN = 0x80EB;
        public static uint GL_POINT_SMOOTH_HINT = 0x0C51;
        public static uint GL_POLYGON_SMOOTH_HINT = 0x0C53;
        public static uint GL_PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8;
        public static uint GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
        public static uint GL_RECLAIM_MEMORY_HINT_PGI = 0x1A1FE;
        public static uint GL_SCALEBIAS_HINT_SGIX = 0x8322;
        public static uint GL_STRICT_DEPTHFUNC_HINT_PGI = 0x1A216;
        public static uint GL_STRICT_LIGHTING_HINT_PGI = 0x1A217;
        public static uint GL_STRICT_SCISSOR_HINT_PGI = 0x1A218;
        public static uint GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
        public static uint GL_TEXTURE_COMPRESSION_HINT_ARB = 0x84EF;
        public static uint GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E;
        public static uint GL_TEXTURE_STORAGE_HINT_APPLE = 0x85BC;
        public static uint GL_TRANSFORM_HINT_APPLE = 0x85B1;
        public static uint GL_UNPACK_CMYK_HINT_EXT = 0x800F;
        public static uint GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F;
        public static uint GL_VERTEX_CONSISTENT_HINT_PGI = 0x1A22B;
        public static uint GL_VERTEX_DATA_HINT_PGI = 0x1A22A;
        public static uint GL_VERTEX_PRECLIP_HINT_SGIX = 0x83EF;
        public static uint GL_VERTEX_PRECLIP_SGIX = 0x83EE;
        public static uint GL_WIDE_LINE_HINT_PGI = 0x1A222;
        public static uint GL_DONT_CARE = 0x1100;
        public static uint GL_FASTEST = 0x1101;
        public static uint GL_NICEST = 0x1102;
        public static uint GL_FILL = 0x1B02;
        public static uint GL_LINE = 0x1B01;
        public static uint GL_POINT = 0x1B00;
        public static uint GL_DETAIL_TEXTURE_2D_SGIS = 0x8095;
        public static uint GL_PROXY_TEXTURE_1D = 0x8063;
        public static uint GL_PROXY_TEXTURE_1D_EXT = 0x8063;
        public static uint GL_PROXY_TEXTURE_2D = 0x8064;
        public static uint GL_PROXY_TEXTURE_2D_EXT = 0x8064;
        public static uint GL_PROXY_TEXTURE_3D = 0x8070;
        public static uint GL_PROXY_TEXTURE_3D_EXT = 0x8070;
        public static uint GL_PROXY_TEXTURE_4D_SGIS = 0x8135;
        public static uint GL_TEXTURE_1D = 0x0DE0;
        public static uint GL_TEXTURE_2D = 0x0DE1;
        public static uint GL_TEXTURE_3D = 0x806F;
        public static uint GL_TEXTURE_3D_EXT = 0x806F;
        public static uint GL_TEXTURE_3D_OES = 0x806F;
        public static uint GL_TEXTURE_4D_SGIS = 0x8134;
        public static uint GL_TEXTURE_BASE_LEVEL = 0x813C;
        public static uint GL_TEXTURE_BASE_LEVEL_SGIS = 0x813C;
        public static uint GL_TEXTURE_MAX_LEVEL = 0x813D;
        public static uint GL_TEXTURE_MAX_LEVEL_SGIS = 0x813D;
        public static uint GL_TEXTURE_MAX_LOD = 0x813B;
        public static uint GL_TEXTURE_MAX_LOD_SGIS = 0x813B;
        public static uint GL_TEXTURE_MIN_LOD = 0x813A;
        public static uint GL_TEXTURE_MIN_LOD_SGIS = 0x813A;
        public static uint GL_DETAIL_TEXTURE_LEVEL_SGIS = 0x809A;
        public static uint GL_DETAIL_TEXTURE_MODE_SGIS = 0x809B;
        public static uint GL_DUAL_TEXTURE_SELECT_SGIS = 0x8124;
        public static uint GL_GENERATE_MIPMAP = 0x8191;
        public static uint GL_GENERATE_MIPMAP_SGIS = 0x8191;
        public static uint GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179;
        public static uint GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A;
        public static uint GL_QUAD_TEXTURE_SELECT_SGIS = 0x8125;
        public static uint GL_SHADOW_AMBIENT_SGIX = 0x80BF;
        public static uint GL_TEXTURE_BORDER_COLOR = 0x1004;
        public static uint GL_TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171;
        public static uint GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176;
        public static uint GL_TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172;
        public static uint GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175;
        public static uint GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173;
        public static uint GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174;
        public static uint GL_TEXTURE_COMPARE_SGIX = 0x819A;
        public static uint GL_TEXTURE_LOD_BIAS_R_SGIX = 0x8190;
        public static uint GL_TEXTURE_LOD_BIAS_S_SGIX = 0x818E;
        public static uint GL_TEXTURE_LOD_BIAS_T_SGIX = 0x818F;
        public static uint GL_TEXTURE_MAG_FILTER = 0x2800;
        public static uint GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x836B;
        public static uint GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x8369;
        public static uint GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x836A;
        public static uint GL_TEXTURE_MIN_FILTER = 0x2801;
        public static uint GL_TEXTURE_PRIORITY = 0x8066;
        public static uint GL_TEXTURE_PRIORITY_EXT = 0x8066;
        public static uint GL_TEXTURE_WRAP_Q_SGIS = 0x8137;
        public static uint GL_TEXTURE_WRAP_R = 0x8072;
        public static uint GL_TEXTURE_WRAP_R_EXT = 0x8072;
        public static uint GL_TEXTURE_WRAP_R_OES = 0x8072;
        public static uint GL_TEXTURE_WRAP_S = 0x2802;
        public static uint GL_TEXTURE_WRAP_T = 0x2803;
        public static uint GL_ABGR_EXT = 0x8000;
        public static uint GL_ALPHA = 0x1906;
        public static uint GL_BLUE = 0x1905;
        public static uint GL_CMYKA_EXT = 0x800D;
        public static uint GL_CMYK_EXT = 0x800C;
        public static uint GL_COLOR_INDEX = 0x1900;
        public static uint GL_DEPTH_COMPONENT = 0x1902;
        public static uint GL_GREEN = 0x1904;
        public static uint GL_LUMINANCE = 0x1909;
        public static uint GL_LUMINANCE_ALPHA = 0x190A;
        public static uint GL_RED = 0x1903;
        public static uint GL_RED_EXT = 0x1903;
        public static uint GL_RGB = 0x1907;
        public static uint GL_RGBA = 0x1908;
        public static uint GL_STENCIL_INDEX = 0x1901;
        public static uint GL_UNSIGNED_INT = 0x1405;
        public static uint GL_UNSIGNED_SHORT = 0x1403;
        public static uint GL_YCRCB_422_SGIX = 0x81BB;
        public static uint GL_YCRCB_444_SGIX = 0x81BC;
        public static uint GL_BITMAP = 0x1A00;
        public static uint GL_BYTE = 0x1400;
        public static uint GL_FLOAT = 0x1406;
        public static uint GL_INT = 0x1404;
        public static uint GL_SHORT = 0x1402;
        public static uint GL_UNSIGNED_BYTE = 0x1401;
        public static uint GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
        public static uint GL_UNSIGNED_BYTE_3_3_2_EXT = 0x8032;
        public static uint GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
        public static uint GL_UNSIGNED_INT_10_10_10_2_EXT = 0x8036;
        public static uint GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
        public static uint GL_UNSIGNED_INT_8_8_8_8_EXT = 0x8035;
        public static uint GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
        public static uint GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033;
        public static uint GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
        public static uint GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034;
        public static uint GL_AUX0 = 0x0409;
        public static uint GL_AUX1 = 0x040A;
        public static uint GL_AUX2 = 0x040B;
        public static uint GL_AUX3 = 0x040C;
        public static uint GL_BACK_LEFT = 0x0402;
        public static uint GL_BACK_RIGHT = 0x0403;
        public static uint GL_FRONT_LEFT = 0x0400;
        public static uint GL_FRONT_RIGHT = 0x0401;
        public static uint GL_LEFT = 0x0406;
        public static uint GL_NONE = 0;
        public static uint GL_NONE_OES = 0;
        public static uint GL_RIGHT = 0x0407;
        public static uint GL_ACCUM_BUFFER_BIT = 0x00000200;
        public static uint GL_COLOR_BUFFER_BIT = 0x00004000;
        public static uint GL_COVERAGE_BUFFER_BIT_NV = 0x00008000;
        public static uint GL_DEPTH_BUFFER_BIT = 0x00000100;
        public static uint GL_STENCIL_BUFFER_BIT = 0x00000400;
        public static uint GL_FALSE = 0;
        public static uint GL_TRUE = 1;
        public static uint GL_ALPHA_TEST = 0x0BC0;
        public static uint GL_ASYNC_DRAW_PIXELS_SGIX = 0x835D;
        public static uint GL_ASYNC_HISTOGRAM_SGIX = 0x832C;
        public static uint GL_ASYNC_READ_PIXELS_SGIX = 0x835E;
        public static uint GL_ASYNC_TEX_IMAGE_SGIX = 0x835C;
        public static uint GL_AUTO_NORMAL = 0x0D80;
        public static uint GL_BLEND = 0x0BE2;
        public static uint GL_CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183;
        public static uint GL_CLIP_PLANE0 = 0x3000;
        public static uint GL_CLIP_PLANE1 = 0x3001;
        public static uint GL_CLIP_PLANE2 = 0x3002;
        public static uint GL_CLIP_PLANE3 = 0x3003;
        public static uint GL_CLIP_PLANE4 = 0x3004;
        public static uint GL_CLIP_PLANE5 = 0x3005;
        public static uint GL_COLOR_ARRAY = 0x8076;
        public static uint GL_COLOR_LOGIC_OP = 0x0BF2;
        public static uint GL_COLOR_MATERIAL = 0x0B57;
        public static uint GL_COLOR_TABLE_SGI = 0x80D0;
        public static uint GL_CONVOLUTION_1D_EXT = 0x8010;
        public static uint GL_CONVOLUTION_2D_EXT = 0x8011;
        public static uint GL_CULL_FACE = 0x0B44;
        public static uint GL_DEPTH_TEST = 0x0B71;
        public static uint GL_DITHER = 0x0BD0;
        public static uint GL_EDGE_FLAG_ARRAY = 0x8079;
        public static uint GL_FOG = 0x0B60;
        public static uint GL_FOG_OFFSET_SGIX = 0x8198;
        public static uint GL_FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401;
        public static uint GL_FRAGMENT_LIGHT0_SGIX = 0x840C;
        public static uint GL_FRAGMENT_LIGHT1_SGIX = 0x840D;
        public static uint GL_FRAGMENT_LIGHT2_SGIX = 0x840E;
        public static uint GL_FRAGMENT_LIGHT3_SGIX = 0x840F;
        public static uint GL_FRAGMENT_LIGHT4_SGIX = 0x8410;
        public static uint GL_FRAGMENT_LIGHT5_SGIX = 0x8411;
        public static uint GL_FRAGMENT_LIGHT6_SGIX = 0x8412;
        public static uint GL_FRAGMENT_LIGHT7_SGIX = 0x8413;
        public static uint GL_FRAGMENT_LIGHTING_SGIX = 0x8400;
        public static uint GL_FRAMEZOOM_SGIX = 0x818B;
        public static uint GL_HISTOGRAM_EXT = 0x8024;
        public static uint GL_INDEX_ARRAY = 0x8077;
        public static uint GL_INDEX_LOGIC_OP = 0x0BF1;
        public static uint GL_INTERLACE_SGIX = 0x8094;
        public static uint GL_IR_INSTRUMENT1_SGIX = 0x817F;
        public static uint GL_LIGHT0 = 0x4000;
        public static uint GL_LIGHT1 = 0x4001;
        public static uint GL_LIGHT2 = 0x4002;
        public static uint GL_LIGHT3 = 0x4003;
        public static uint GL_LIGHT4 = 0x4004;
        public static uint GL_LIGHT5 = 0x4005;
        public static uint GL_LIGHT6 = 0x4006;
        public static uint GL_LIGHT7 = 0x4007;
        public static uint GL_LIGHTING = 0x0B50;
        public static uint GL_LINE_SMOOTH = 0x0B20;
        public static uint GL_LINE_STIPPLE = 0x0B24;
        public static uint GL_MAP1_COLOR_4 = 0x0D90;
        public static uint GL_MAP1_INDEX = 0x0D91;
        public static uint GL_MAP1_NORMAL = 0x0D92;
        public static uint GL_MAP1_TEXTURE_COORD_1 = 0x0D93;
        public static uint GL_MAP1_TEXTURE_COORD_2 = 0x0D94;
        public static uint GL_MAP1_TEXTURE_COORD_3 = 0x0D95;
        public static uint GL_MAP1_TEXTURE_COORD_4 = 0x0D96;
        public static uint GL_MAP1_VERTEX_3 = 0x0D97;
        public static uint GL_MAP1_VERTEX_4 = 0x0D98;
        public static uint GL_MAP2_COLOR_4 = 0x0DB0;
        public static uint GL_MAP2_INDEX = 0x0DB1;
        public static uint GL_MAP2_NORMAL = 0x0DB2;
        public static uint GL_MAP2_TEXTURE_COORD_1 = 0x0DB3;
        public static uint GL_MAP2_TEXTURE_COORD_2 = 0x0DB4;
        public static uint GL_MAP2_TEXTURE_COORD_3 = 0x0DB5;
        public static uint GL_MAP2_TEXTURE_COORD_4 = 0x0DB6;
        public static uint GL_MAP2_VERTEX_3 = 0x0DB7;
        public static uint GL_MAP2_VERTEX_4 = 0x0DB8;
        public static uint GL_MINMAX_EXT = 0x802E;
        public static uint GL_MULTISAMPLE_SGIS = 0x809D;
        public static uint GL_NORMALIZE = 0x0BA1;
        public static uint GL_NORMAL_ARRAY = 0x8075;
        public static uint GL_PIXEL_TEXTURE_SGIS = 0x8353;
        public static uint GL_PIXEL_TEX_GEN_SGIX = 0x8139;
        public static uint GL_POINT_SMOOTH = 0x0B10;
        public static uint GL_POLYGON_OFFSET_FILL = 0x8037;
        public static uint GL_POLYGON_OFFSET_LINE = 0x2A02;
        public static uint GL_POLYGON_OFFSET_POINT = 0x2A01;
        public static uint GL_POLYGON_SMOOTH = 0x0B41;
        public static uint GL_POLYGON_STIPPLE = 0x0B42;
        public static uint GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2;
        public static uint GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1;
        public static uint GL_REFERENCE_PLANE_SGIX = 0x817D;
        public static uint GL_RESCALE_NORMAL_EXT = 0x803A;
        public static uint GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E;
        public static uint GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F;
        public static uint GL_SAMPLE_MASK_SGIS = 0x80A0;
        public static uint GL_SCISSOR_TEST = 0x0C11;
        public static uint GL_SEPARABLE_2D_EXT = 0x8012;
        public static uint GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB;
        public static uint GL_SPRITE_SGIX = 0x8148;
        public static uint GL_STENCIL_TEST = 0x0B90;
        public static uint GL_TEXTURE_COLOR_TABLE_SGI = 0x80BC;
        public static uint GL_TEXTURE_COORD_ARRAY = 0x8078;
        public static uint GL_TEXTURE_GEN_Q = 0x0C63;
        public static uint GL_TEXTURE_GEN_R = 0x0C62;
        public static uint GL_TEXTURE_GEN_S = 0x0C60;
        public static uint GL_TEXTURE_GEN_T = 0x0C61;
        public static uint GL_VERTEX_ARRAY = 0x8074;
        public static uint GL_CONSTANT_ALPHA_EXT = 0x8003;
        public static uint GL_CONSTANT_COLOR_EXT = 0x8001;
        public static uint GL_DST_ALPHA = 0x0304;
        public static uint GL_DST_COLOR = 0x0306;
        public static uint GL_ONE = 1;
        public static uint GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004;
        public static uint GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002;
        public static uint GL_ONE_MINUS_DST_ALPHA = 0x0305;
        public static uint GL_ONE_MINUS_DST_COLOR = 0x0307;
        public static uint GL_ONE_MINUS_SRC_ALPHA = 0x0303;
        public static uint GL_SRC_ALPHA = 0x0302;
        public static uint GL_SRC_ALPHA_SATURATE = 0x0308;
        public static uint GL_ZERO = 0;
        public static uint GL_ONE_MINUS_SRC_COLOR = 0x0301;
        public static uint GL_SRC_COLOR = 0x0300;
        public static uint GL_AND = 0x1501;
        public static uint GL_AND_INVERTED = 0x1504;
        public static uint GL_AND_REVERSE = 0x1502;
        public static uint GL_CLEAR = 0x1500;
        public static uint GL_COPY = 0x1503;
        public static uint GL_COPY_INVERTED = 0x150C;
        public static uint GL_EQUIV = 0x1509;
        public static uint GL_INVERT = 0x150A;
        public static uint GL_NAND = 0x150E;
        public static uint GL_NOOP = 0x1505;
        public static uint GL_NOR = 0x1508;
        public static uint GL_OR = 0x1507;
        public static uint GL_OR_INVERTED = 0x150D;
        public static uint GL_OR_REVERSE = 0x150B;
        public static uint GL_SET = 0x150F;
        public static uint GL_XOR = 0x1506;
        public static uint GL_ALWAYS = 0x0207;
        public static uint GL_EQUAL = 0x0202;
        public static uint GL_GEQUAL = 0x0206;
        public static uint GL_GREATER = 0x0204;
        public static uint GL_LEQUAL = 0x0203;
        public static uint GL_LESS = 0x0201;
        public static uint GL_NEVER = 0x0200;
        public static uint GL_NOTEQUAL = 0x0205;
        public static uint GL_DECR = 0x1E03;
        public static uint GL_INCR = 0x1E02;
        public static uint GL_KEEP = 0x1E00;
        public static uint GL_REPLACE = 0x1E01;
        public static uint GL_PACK_ALIGNMENT = 0x0D05;
        public static uint GL_PACK_IMAGE_DEPTH_SGIS = 0x8131;
        public static uint GL_PACK_IMAGE_HEIGHT = 0x806C;
        public static uint GL_PACK_IMAGE_HEIGHT_EXT = 0x806C;
        public static uint GL_PACK_LSB_FIRST = 0x0D01;
        public static uint GL_PACK_RESAMPLE_OML = 0x8984;
        public static uint GL_PACK_RESAMPLE_SGIX = 0x842C;
        public static uint GL_PACK_ROW_LENGTH = 0x0D02;
        public static uint GL_PACK_SKIP_IMAGES = 0x806B;
        public static uint GL_PACK_SKIP_IMAGES_EXT = 0x806B;
        public static uint GL_PACK_SKIP_PIXELS = 0x0D04;
        public static uint GL_PACK_SKIP_ROWS = 0x0D03;
        public static uint GL_PACK_SKIP_VOLUMES_SGIS = 0x8130;
        public static uint GL_PACK_SUBSAMPLE_RATE_SGIX = 0x85A0;
        public static uint GL_PACK_SWAP_BYTES = 0x0D00;
        public static uint GL_PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145;
        public static uint GL_PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144;
        public static uint GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143;
        public static uint GL_PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142;
        public static uint GL_PIXEL_TILE_HEIGHT_SGIX = 0x8141;
        public static uint GL_PIXEL_TILE_WIDTH_SGIX = 0x8140;
        public static uint GL_UNPACK_ALIGNMENT = 0x0CF5;
        public static uint GL_UNPACK_IMAGE_DEPTH_SGIS = 0x8133;
        public static uint GL_UNPACK_IMAGE_HEIGHT = 0x806E;
        public static uint GL_UNPACK_IMAGE_HEIGHT_EXT = 0x806E;
        public static uint GL_UNPACK_LSB_FIRST = 0x0CF1;
        public static uint GL_UNPACK_RESAMPLE_OML = 0x8985;
        public static uint GL_UNPACK_RESAMPLE_SGIX = 0x842D;
        public static uint GL_UNPACK_ROW_LENGTH = 0x0CF2;
        public static uint GL_UNPACK_ROW_LENGTH_EXT = 0x0CF2;
        public static uint GL_UNPACK_SKIP_IMAGES = 0x806D;
        public static uint GL_UNPACK_SKIP_IMAGES_EXT = 0x806D;
        public static uint GL_UNPACK_SKIP_PIXELS = 0x0CF4;
        public static uint GL_UNPACK_SKIP_PIXELS_EXT = 0x0CF4;
        public static uint GL_UNPACK_SKIP_ROWS = 0x0CF3;
        public static uint GL_UNPACK_SKIP_ROWS_EXT = 0x0CF3;
        public static uint GL_UNPACK_SKIP_VOLUMES_SGIS = 0x8132;
        public static uint GL_UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1;
        public static uint GL_UNPACK_SWAP_BYTES = 0x0CF0;
        public static uint GL_ACCUM_ALPHA_BITS = 0x0D5B;
        public static uint GL_ACCUM_BLUE_BITS = 0x0D5A;
        public static uint GL_ACCUM_CLEAR_VALUE = 0x0B80;
        public static uint GL_ACCUM_GREEN_BITS = 0x0D59;
        public static uint GL_ACCUM_RED_BITS = 0x0D58;
        public static uint GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
        public static uint GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
        public static uint GL_ALPHA_BIAS = 0x0D1D;
        public static uint GL_ALPHA_BITS = 0x0D55;
        public static uint GL_ALPHA_SCALE = 0x0D1C;
        public static uint GL_ALPHA_TEST_FUNC = 0x0BC1;
        public static uint GL_ALPHA_TEST_FUNC_QCOM = 0x0BC1;
        public static uint GL_ALPHA_TEST_QCOM = 0x0BC0;
        public static uint GL_ALPHA_TEST_REF = 0x0BC2;
        public static uint GL_ALPHA_TEST_REF_QCOM = 0x0BC2;
        public static uint GL_ASYNC_MARKER_SGIX = 0x8329;
        public static uint GL_ATTRIB_STACK_DEPTH = 0x0BB0;
        public static uint GL_AUX_BUFFERS = 0x0C00;
        public static uint GL_BLEND_COLOR_EXT = 0x8005;
        public static uint GL_BLEND_DST = 0x0BE0;
        public static uint GL_BLEND_EQUATION_EXT = 0x8009;
        public static uint GL_BLEND_SRC = 0x0BE1;
        public static uint GL_BLUE_BIAS = 0x0D1B;
        public static uint GL_BLUE_BITS = 0x0D54;
        public static uint GL_BLUE_SCALE = 0x0D1A;
        public static uint GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
        public static uint GL_COLOR_ARRAY_COUNT_EXT = 0x8084;
        public static uint GL_COLOR_ARRAY_SIZE = 0x8081;
        public static uint GL_COLOR_ARRAY_STRIDE = 0x8083;
        public static uint GL_COLOR_ARRAY_TYPE = 0x8082;
        public static uint GL_COLOR_CLEAR_VALUE = 0x0C22;
        public static uint GL_COLOR_MATERIAL_FACE = 0x0B55;
        public static uint GL_COLOR_MATERIAL_PARAMETER = 0x0B56;
        public static uint GL_COLOR_MATRIX_SGI = 0x80B1;
        public static uint GL_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2;
        public static uint GL_COLOR_WRITEMASK = 0x0C23;
        public static uint GL_CULL_FACE_MODE = 0x0B45;
        public static uint GL_CURRENT_COLOR = 0x0B00;
        public static uint GL_CURRENT_INDEX = 0x0B01;
        public static uint GL_CURRENT_NORMAL = 0x0B02;
        public static uint GL_CURRENT_RASTER_COLOR = 0x0B04;
        public static uint GL_CURRENT_RASTER_DISTANCE = 0x0B09;
        public static uint GL_CURRENT_RASTER_INDEX = 0x0B05;
        public static uint GL_CURRENT_RASTER_POSITION = 0x0B07;
        public static uint GL_CURRENT_RASTER_POSITION_VALID = 0x0B08;
        public static uint GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
        public static uint GL_CURRENT_TEXTURE_COORDS = 0x0B03;
        public static uint GL_DEFORMATIONS_MASK_SGIX = 0x8196;
        public static uint GL_DEPTH_BIAS = 0x0D1F;
        public static uint GL_DEPTH_BITS = 0x0D56;
        public static uint GL_DEPTH_CLEAR_VALUE = 0x0B73;
        public static uint GL_DEPTH_FUNC = 0x0B74;
        public static uint GL_DEPTH_RANGE = 0x0B70;
        public static uint GL_DEPTH_SCALE = 0x0D1E;
        public static uint GL_DEPTH_WRITEMASK = 0x0B72;
        public static uint GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096;
        public static uint GL_DISTANCE_ATTENUATION_SGIS = 0x8129;
        public static uint GL_DOUBLEBUFFER = 0x0C32;
        public static uint GL_DRAW_BUFFER = 0x0C01;
        public static uint GL_DRAW_BUFFER_EXT = 0x0C01;
        public static uint GL_EDGE_FLAG = 0x0B43;
        public static uint GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D;
        public static uint GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C;
        public static uint GL_FEEDBACK_BUFFER_SIZE = 0x0DF1;
        public static uint GL_FEEDBACK_BUFFER_TYPE = 0x0DF2;
        public static uint GL_FOG_COLOR = 0x0B66;
        public static uint GL_FOG_DENSITY = 0x0B62;
        public static uint GL_FOG_END = 0x0B64;
        public static uint GL_FOG_FUNC_POINTS_SGIS = 0x812B;
        public static uint GL_FOG_INDEX = 0x0B61;
        public static uint GL_FOG_MODE = 0x0B65;
        public static uint GL_FOG_OFFSET_VALUE_SGIX = 0x8199;
        public static uint GL_FOG_START = 0x0B63;
        public static uint GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402;
        public static uint GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403;
        public static uint GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A;
        public static uint GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408;
        public static uint GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B;
        public static uint GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409;
        public static uint GL_FRAMEZOOM_FACTOR_SGIX = 0x818C;
        public static uint GL_FRONT_FACE = 0x0B46;
        public static uint GL_GREEN_BIAS = 0x0D19;
        public static uint GL_GREEN_BITS = 0x0D53;
        public static uint GL_GREEN_SCALE = 0x0D18;
        public static uint GL_INDEX_ARRAY_COUNT_EXT = 0x8087;
        public static uint GL_INDEX_ARRAY_STRIDE = 0x8086;
        public static uint GL_INDEX_ARRAY_TYPE = 0x8085;
        public static uint GL_INDEX_BITS = 0x0D51;
        public static uint GL_INDEX_CLEAR_VALUE = 0x0C20;
        public static uint GL_INDEX_MODE = 0x0C30;
        public static uint GL_INDEX_OFFSET = 0x0D13;
        public static uint GL_INDEX_SHIFT = 0x0D12;
        public static uint GL_INDEX_WRITEMASK = 0x0C21;
        public static uint GL_INSTRUMENT_MEASUREMENTS_SGIX = 0x8181;
        public static uint GL_LIGHT_ENV_MODE_SGIX = 0x8407;
        public static uint GL_LIGHT_MODEL_AMBIENT = 0x0B53;
        public static uint GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
        public static uint GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
        public static uint GL_LIGHT_MODEL_TWO_SIDE = 0x0B52;
        public static uint GL_LINE_STIPPLE_PATTERN = 0x0B25;
        public static uint GL_LINE_STIPPLE_REPEAT = 0x0B26;
        public static uint GL_LINE_WIDTH = 0x0B21;
        public static uint GL_LINE_WIDTH_GRANULARITY = 0x0B23;
        public static uint GL_LINE_WIDTH_RANGE = 0x0B22;
        public static uint GL_LIST_BASE = 0x0B32;
        public static uint GL_LIST_INDEX = 0x0B33;
        public static uint GL_LIST_MODE = 0x0B30;
        public static uint GL_LOGIC_OP = 0x0BF1;
        public static uint GL_LOGIC_OP_MODE = 0x0BF0;
        public static uint GL_MAP1_GRID_DOMAIN = 0x0DD0;
        public static uint GL_MAP1_GRID_SEGMENTS = 0x0DD1;
        public static uint GL_MAP2_GRID_DOMAIN = 0x0DD2;
        public static uint GL_MAP2_GRID_SEGMENTS = 0x0DD3;
        public static uint GL_MAP_COLOR = 0x0D10;
        public static uint GL_MAP_STENCIL = 0x0D11;
        public static uint GL_MATRIX_MODE = 0x0BA0;
        public static uint GL_MAX_3D_TEXTURE_SIZE_EXT = 0x8073;
        public static uint GL_MAX_4D_TEXTURE_SIZE_SGIS = 0x8138;
        public static uint GL_MAX_ACTIVE_LIGHTS_SGIX = 0x8405;
        public static uint GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360;
        public static uint GL_MAX_ASYNC_HISTOGRAM_SGIX = 0x832D;
        public static uint GL_MAX_ASYNC_READ_PIXELS_SGIX = 0x8361;
        public static uint GL_MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F;
        public static uint GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35;
        public static uint GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
        public static uint GL_MAX_CLIPMAP_DEPTH_SGIX = 0x8177;
        public static uint GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178;
        public static uint GL_MAX_CLIP_DISTANCES = 0x0D32;
        public static uint GL_MAX_CLIP_PLANES = 0x0D32;
        public static uint GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3;
        public static uint GL_MAX_EVAL_ORDER = 0x0D30;
        public static uint GL_MAX_FOG_FUNC_POINTS_SGIS = 0x812C;
        public static uint GL_MAX_FRAGMENT_LIGHTS_SGIX = 0x8404;
        public static uint GL_MAX_FRAMEZOOM_FACTOR_SGIX = 0x818D;
        public static uint GL_MAX_LIGHTS = 0x0D31;
        public static uint GL_MAX_LIST_NESTING = 0x0B31;
        public static uint GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
        public static uint GL_MAX_NAME_STACK_DEPTH = 0x0D37;
        public static uint GL_MAX_PIXEL_MAP_TABLE = 0x0D34;
        public static uint GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38;
        public static uint GL_MAX_TEXTURE_SIZE = 0x0D33;
        public static uint GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39;
        public static uint GL_MAX_VIEWPORT_DIMS = 0x0D3A;
        public static uint GL_MODELVIEW0_MATRIX_EXT = 0x0BA6;
        public static uint GL_MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3;
        public static uint GL_MODELVIEW_MATRIX = 0x0BA6;
        public static uint GL_MODELVIEW_STACK_DEPTH = 0x0BA3;
        public static uint GL_NAME_STACK_DEPTH = 0x0D70;
        public static uint GL_NORMAL_ARRAY_COUNT_EXT = 0x8080;
        public static uint GL_NORMAL_ARRAY_STRIDE = 0x807F;
        public static uint GL_NORMAL_ARRAY_TYPE = 0x807E;
        public static uint GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
        public static uint GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
        public static uint GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
        public static uint GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
        public static uint GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
        public static uint GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
        public static uint GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
        public static uint GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
        public static uint GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
        public static uint GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
        public static uint GL_PIXEL_TEX_GEN_MODE_SGIX = 0x832B;
        public static uint GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E;
        public static uint GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F;
        public static uint GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128;
        public static uint GL_POINT_SIZE = 0x0B11;
        public static uint GL_POINT_SIZE_GRANULARITY = 0x0B13;
        public static uint GL_POINT_SIZE_MAX_SGIS = 0x8127;
        public static uint GL_POINT_SIZE_MIN_SGIS = 0x8126;
        public static uint GL_POINT_SIZE_RANGE = 0x0B12;
        public static uint GL_POLYGON_MODE = 0x0B40;
        public static uint GL_POLYGON_OFFSET_BIAS_EXT = 0x8039;
        public static uint GL_POLYGON_OFFSET_FACTOR = 0x8038;
        public static uint GL_POLYGON_OFFSET_UNITS = 0x2A00;
        public static uint GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB;
        public static uint GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7;
        public static uint GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA;
        public static uint GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6;
        public static uint GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9;
        public static uint GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5;
        public static uint GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8;
        public static uint GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4;
        public static uint GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023;
        public static uint GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F;
        public static uint GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022;
        public static uint GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E;
        public static uint GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021;
        public static uint GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D;
        public static uint GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x8020;
        public static uint GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x801C;
        public static uint GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B;
        public static uint GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C;
        public static uint GL_PROJECTION_MATRIX = 0x0BA7;
        public static uint GL_PROJECTION_STACK_DEPTH = 0x0BA4;
        public static uint GL_READ_BUFFER = 0x0C02;
        public static uint GL_READ_BUFFER_EXT = 0x0C02;
        public static uint GL_READ_BUFFER_NV = 0x0C02;
        public static uint GL_RED_BIAS = 0x0D15;
        public static uint GL_RED_BITS = 0x0D52;
        public static uint GL_RED_SCALE = 0x0D14;
        public static uint GL_REFERENCE_PLANE_EQUATION_SGIX = 0x817E;
        public static uint GL_RENDER_MODE = 0x0C40;
        public static uint GL_RGBA_MODE = 0x0C31;
        public static uint GL_SAMPLES_SGIS = 0x80A9;
        public static uint GL_SAMPLE_BUFFERS_SGIS = 0x80A8;
        public static uint GL_SAMPLE_MASK_INVERT_SGIS = 0x80AB;
        public static uint GL_SAMPLE_MASK_VALUE_SGIS = 0x80AA;
        public static uint GL_SAMPLE_PATTERN_SGIS = 0x80AC;
        public static uint GL_SCISSOR_BOX = 0x0C10;
        public static uint GL_SELECTION_BUFFER_SIZE = 0x0DF4;
        public static uint GL_SHADE_MODEL = 0x0B54;
        public static uint GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
        public static uint GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
        public static uint GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
        public static uint GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
        public static uint GL_SPRITE_AXIS_SGIX = 0x814A;
        public static uint GL_SPRITE_MODE_SGIX = 0x8149;
        public static uint GL_SPRITE_TRANSLATION_SGIX = 0x814B;
        public static uint GL_STENCIL_BITS = 0x0D57;
        public static uint GL_STENCIL_CLEAR_VALUE = 0x0B91;
        public static uint GL_STENCIL_FAIL = 0x0B94;
        public static uint GL_STENCIL_FUNC = 0x0B92;
        public static uint GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
        public static uint GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
        public static uint GL_STENCIL_REF = 0x0B97;
        public static uint GL_STENCIL_VALUE_MASK = 0x0B93;
        public static uint GL_STENCIL_WRITEMASK = 0x0B98;
        public static uint GL_STEREO = 0x0C33;
        public static uint GL_SUBPIXEL_BITS = 0x0D50;
        public static uint GL_TEXTURE_3D_BINDING_EXT = 0x806A;
        public static uint GL_TEXTURE_4D_BINDING_SGIS = 0x814F;
        public static uint GL_TEXTURE_BINDING_1D = 0x8068;
        public static uint GL_TEXTURE_BINDING_2D = 0x8069;
        public static uint GL_TEXTURE_BINDING_3D = 0x806A;
        public static uint GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B;
        public static uint GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088;
        public static uint GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
        public static uint GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089;
        public static uint GL_TEXTURE_MATRIX = 0x0BA8;
        public static uint GL_TEXTURE_STACK_DEPTH = 0x0BA5;
        public static uint GL_VERTEX_ARRAY_COUNT_EXT = 0x807D;
        public static uint GL_VERTEX_ARRAY_SIZE = 0x807A;
        public static uint GL_VERTEX_ARRAY_STRIDE = 0x807C;
        public static uint GL_VERTEX_ARRAY_TYPE = 0x807B;
        public static uint GL_VIEWPORT = 0x0BA2;
        public static uint GL_ZOOM_X = 0x0D16;
        public static uint GL_ZOOM_Y = 0x0D17;
        public static uint GL_EXTENSIONS = 0x1F03;
        public static uint GL_RENDERER = 0x1F01;
        public static uint GL_VENDOR = 0x1F00;
        public static uint GL_VERSION = 0x1F02;
        public static uint GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C;
        public static uint GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0;
        public static uint GL_TEXTURE_4DSIZE_SGIS = 0x8136;
        public static uint GL_TEXTURE_ALPHA_SIZE = 0x805F;
        public static uint GL_TEXTURE_BLUE_SIZE = 0x805E;
        public static uint GL_TEXTURE_BORDER = 0x1005;
        public static uint GL_TEXTURE_BORDER_COLOR_NV = 0x1004;
        public static uint GL_TEXTURE_COMPARE_OPERATOR_SGIX = 0x819B;
        public static uint GL_TEXTURE_COMPONENTS = 0x1003;
        public static uint GL_TEXTURE_DEPTH_EXT = 0x8071;
        public static uint GL_TEXTURE_FILTER4_SIZE_SGIS = 0x8147;
        public static uint GL_TEXTURE_GEQUAL_R_SGIX = 0x819D;
        public static uint GL_TEXTURE_GREEN_SIZE = 0x805D;
        public static uint GL_TEXTURE_HEIGHT = 0x1001;
        public static uint GL_TEXTURE_INTENSITY_SIZE = 0x8061;
        public static uint GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
        public static uint GL_TEXTURE_LEQUAL_R_SGIX = 0x819C;
        public static uint GL_TEXTURE_LUMINANCE_SIZE = 0x8060;
        public static uint GL_TEXTURE_RED_SIZE = 0x805C;
        public static uint GL_TEXTURE_RESIDENT = 0x8067;
        public static uint GL_TEXTURE_WIDTH = 0x1000;
        public static uint GL_COMPILE = 0x1300;
        public static uint GL_COMPILE_AND_EXECUTE = 0x1301;
        public static uint GL_2_BYTES = 0x1407;
        public static uint GL_3_BYTES = 0x1408;
        public static uint GL_4_BYTES = 0x1409;
        public static uint GL_LINES = 0x0001;
        public static uint GL_LINES_ADJACENCY = 0x000A;
        public static uint GL_LINES_ADJACENCY_ARB = 0x000A;
        public static uint GL_LINES_ADJACENCY_EXT = 0x000A;
        public static uint GL_LINE_LOOP = 0x0002;
        public static uint GL_LINE_STRIP = 0x0003;
        public static uint GL_LINE_STRIP_ADJACENCY = 0x000B;
        public static uint GL_LINE_STRIP_ADJACENCY_ARB = 0x000B;
        public static uint GL_LINE_STRIP_ADJACENCY_EXT = 0x000B;
        public static uint GL_PATCHES = 0x000E;
        public static uint GL_POINTS = 0x0000;
        public static uint GL_POLYGON = 0x0009;
        public static uint GL_QUADS = 0x0007;
        public static uint GL_QUAD_STRIP = 0x0008;
        public static uint GL_TRIANGLES = 0x0004;
        public static uint GL_TRIANGLES_ADJACENCY = 0x000C;
        public static uint GL_TRIANGLES_ADJACENCY_ARB = 0x000C;
        public static uint GL_TRIANGLES_ADJACENCY_EXT = 0x000C;
        public static uint GL_TRIANGLE_FAN = 0x0006;
        public static uint GL_TRIANGLE_STRIP = 0x0005;
        public static uint GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
        public static uint GL_TRIANGLE_STRIP_ADJACENCY_ARB = 0x000D;
        public static uint GL_TRIANGLE_STRIP_ADJACENCY_EXT = 0x000D;
        public static uint GL_CLIP_DISTANCE0 = 0x3000;
        public static uint GL_CLIP_DISTANCE1 = 0x3001;
        public static uint GL_CLIP_DISTANCE2 = 0x3002;
        public static uint GL_CLIP_DISTANCE3 = 0x3003;
        public static uint GL_CLIP_DISTANCE4 = 0x3004;
        public static uint GL_CLIP_DISTANCE5 = 0x3005;
        public static uint GL_CLIP_DISTANCE6 = 0x3006;
        public static uint GL_CLIP_DISTANCE7 = 0x3007;
        public static uint GL_AMBIENT = 0x1200;
        public static uint GL_AMBIENT_AND_DIFFUSE = 0x1602;
        public static uint GL_DIFFUSE = 0x1201;
        public static uint GL_EMISSION = 0x1600;
        public static uint GL_SPECULAR = 0x1202;
        public static uint GL_CONSTANT_ATTENUATION = 0x1207;
        public static uint GL_LINEAR_ATTENUATION = 0x1208;
        public static uint GL_POSITION = 0x1203;
        public static uint GL_QUADRATIC_ATTENUATION = 0x1209;
        public static uint GL_SPOT_CUTOFF = 0x1206;
        public static uint GL_SPOT_DIRECTION = 0x1204;
        public static uint GL_SPOT_EXPONENT = 0x1205;
        public static uint GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8;
        public static uint GL_COLOR_INDEXES = 0x1603;
        public static uint GL_SHININESS = 0x1601;
        public static uint GL_FLAT = 0x1D00;
        public static uint GL_SMOOTH = 0x1D01;
        public static uint GL_TEXTURE_ENV = 0x2300;
        public static uint GL_TEXTURE_ENV_COLOR = 0x2201;
        public static uint GL_TEXTURE_ENV_MODE = 0x2200;
        public static uint GL_S = 0x2000;
        public static uint GL_T = 0x2001;
        public static uint GL_R = 0x2002;
        public static uint GL_Q = 0x2003;
        public static uint GL_EYE_LINE_SGIS = 0x81F6;
        public static uint GL_EYE_PLANE = 0x2502;
        public static uint GL_EYE_POINT_SGIS = 0x81F4;
        public static uint GL_OBJECT_LINE_SGIS = 0x81F7;
        public static uint GL_OBJECT_PLANE = 0x2501;
        public static uint GL_OBJECT_POINT_SGIS = 0x81F5;
        public static uint GL_TEXTURE_GEN_MODE = 0x2500;
        public static uint GL_2D = 0x0600;
        public static uint GL_3D = 0x0601;
        public static uint GL_3D_COLOR = 0x0602;
        public static uint GL_3D_COLOR_TEXTURE = 0x0603;
        public static uint GL_4D_COLOR_TEXTURE = 0x0604;
        public static uint GL_FEEDBACK = 0x1C01;
        public static uint GL_RENDER = 0x1C00;
        public static uint GL_SELECT = 0x1C02;
        public static uint GL_ACCUM = 0x0100;
        public static uint GL_LOAD = 0x0101;
        public static uint GL_RETURN = 0x0102;
        public static uint GL_MULT = 0x0103;
        public static uint GL_ADD = 0x0104;
        public static uint GL_ALL_ATTRIB_BITS = 0xFFFFFFFF;
        public static uint GL_CURRENT_BIT = 0x00000001;
        public static uint GL_ENABLE_BIT = 0x00002000;
        public static uint GL_EVAL_BIT = 0x00010000;
        public static uint GL_FOG_BIT = 0x00000080;
        public static uint GL_HINT_BIT = 0x00008000;
        public static uint GL_LIGHTING_BIT = 0x00000040;
        public static uint GL_LINE_BIT = 0x00000004;
        public static uint GL_LIST_BIT = 0x00020000;
        public static uint GL_MULTISAMPLE_BIT = 0x20000000;
        public static uint GL_MULTISAMPLE_BIT_3DFX = 0x20000000;
        public static uint GL_MULTISAMPLE_BIT_ARB = 0x20000000;
        public static uint GL_MULTISAMPLE_BIT_EXT = 0x20000000;
        public static uint GL_PIXEL_MODE_BIT = 0x00000020;
        public static uint GL_POINT_BIT = 0x00000002;
        public static uint GL_POLYGON_BIT = 0x00000008;
        public static uint GL_POLYGON_STIPPLE_BIT = 0x00000010;
        public static uint GL_SCISSOR_BIT = 0x00080000;
        public static uint GL_TEXTURE_BIT = 0x00040000;
        public static uint GL_TRANSFORM_BIT = 0x00001000;
        public static uint GL_VIEWPORT_BIT = 0x00000800;
        public static uint GL_GEOMETRY_DEFORMATION_SGIX = 0x8194;
        public static uint GL_TEXTURE_DEFORMATION_SGIX = 0x8195;
        public static uint GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB;
        public static uint GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7;
        public static uint GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA;
        public static uint GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6;
        public static uint GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9;
        public static uint GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5;
        public static uint GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8;
        public static uint GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4;
        public static uint GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023;
        public static uint GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F;
        public static uint GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022;
        public static uint GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E;
        public static uint GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021;
        public static uint GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D;
        public static uint GL_POST_CONVOLUTION_RED_BIAS = 0x8020;
        public static uint GL_POST_CONVOLUTION_RED_SCALE = 0x801C;
        public static uint GL_PIXEL_MAP_A_TO_A = 0x0C79;
        public static uint GL_PIXEL_MAP_B_TO_B = 0x0C78;
        public static uint GL_PIXEL_MAP_G_TO_G = 0x0C77;
        public static uint GL_PIXEL_MAP_I_TO_A = 0x0C75;
        public static uint GL_PIXEL_MAP_I_TO_B = 0x0C74;
        public static uint GL_PIXEL_MAP_I_TO_G = 0x0C73;
        public static uint GL_PIXEL_MAP_I_TO_I = 0x0C70;
        public static uint GL_PIXEL_MAP_I_TO_R = 0x0C72;
        public static uint GL_PIXEL_MAP_R_TO_R = 0x0C76;
        public static uint GL_PIXEL_MAP_S_TO_S = 0x0C71;
        public static uint GL_COLOR = 0x1800;
        public static uint GL_COLOR_EXT = 0x1800;
        public static uint GL_DEPTH = 0x1801;
        public static uint GL_DEPTH_EXT = 0x1801;
        public static uint GL_STENCIL = 0x1802;
        public static uint GL_STENCIL_EXT = 0x1802;
        public static uint GL_COEFF = 0x0A00;
        public static uint GL_DOMAIN = 0x0A02;
        public static uint GL_ORDER = 0x0A01;
        public static uint GL_MODELVIEW = 0x1700;
        public static uint GL_MODELVIEW0_EXT = 0x1700;
        public static uint GL_PROJECTION = 0x1701;
        public static uint GL_TEXTURE = 0x1702;
        public static uint GL_NO_ERROR = 0;
        public static uint GL_INVALID_ENUM = 0x0500;
        public static uint GL_INVALID_VALUE = 0x0501;
        public static uint GL_INVALID_OPERATION = 0x0502;
        public static uint GL_OUT_OF_MEMORY = 0x0505;
        public static uint GL_DOUBLE = 0x140A;
        public static uint GL_STACK_OVERFLOW = 0x0503;
        public static uint GL_STACK_UNDERFLOW = 0x0504;
        public static uint GL_NEAREST = 0x2600;
        public static uint GL_LINEAR = 0x2601;
        public static uint GL_NEAREST_MIPMAP_NEAREST = 0x2700;
        public static uint GL_LINEAR_MIPMAP_NEAREST = 0x2701;
        public static uint GL_NEAREST_MIPMAP_LINEAR = 0x2702;
        public static uint GL_LINEAR_MIPMAP_LINEAR = 0x2703;
        public static uint GL_REPEAT = 0x2901;
        public static uint GL_R3_G3_B2 = 0x2A10;
        public static uint GL_RGB4 = 0x804F;
        public static uint GL_RGB5 = 0x8050;
        public static uint GL_RGB8 = 0x8051;
        public static uint GL_RGB10 = 0x8052;
        public static uint GL_RGB12 = 0x8053;
        public static uint GL_RGB16 = 0x8054;
        public static uint GL_RGBA2 = 0x8055;
        public static uint GL_RGBA4 = 0x8056;
        public static uint GL_RGB5_A1 = 0x8057;
        public static uint GL_RGBA8 = 0x8058;
        public static uint GL_RGB10_A2 = 0x8059;
        public static uint GL_RGBA12 = 0x805A;
        public static uint GL_RGBA16 = 0x805B;
        public static uint GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
        public static uint GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
        public static uint GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF;
        public static uint GL_PASS_THROUGH_TOKEN = 0x0700;
        public static uint GL_POINT_TOKEN = 0x0701;
        public static uint GL_LINE_TOKEN = 0x0702;
        public static uint GL_POLYGON_TOKEN = 0x0703;
        public static uint GL_BITMAP_TOKEN = 0x0704;
        public static uint GL_DRAW_PIXEL_TOKEN = 0x0705;
        public static uint GL_COPY_PIXEL_TOKEN = 0x0706;
        public static uint GL_LINE_RESET_TOKEN = 0x0707;
        public static uint GL_EXP = 0x0800;
        public static uint GL_EXP2 = 0x0801;
        public static uint GL_VERTEX_ARRAY_POINTER = 0x808E;
        public static uint GL_NORMAL_ARRAY_POINTER = 0x808F;
        public static uint GL_COLOR_ARRAY_POINTER = 0x8090;
        public static uint GL_INDEX_ARRAY_POINTER = 0x8091;
        public static uint GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092;
        public static uint GL_EDGE_FLAG_ARRAY_POINTER = 0x8093;
        public static uint GL_FEEDBACK_BUFFER_POINTER = 0x0DF0;
        public static uint GL_SELECTION_BUFFER_POINTER = 0x0DF3;
        public static uint GL_MODULATE = 0x2100;
        public static uint GL_DECAL = 0x2101;
        public static uint GL_EYE_LINEAR = 0x2400;
        public static uint GL_OBJECT_LINEAR = 0x2401;
        public static uint GL_SPHERE_MAP = 0x2402;
        public static uint GL_CLAMP = 0x2900;
        public static uint GL_ALPHA4 = 0x803B;
        public static uint GL_ALPHA8 = 0x803C;
        public static uint GL_ALPHA12 = 0x803D;
        public static uint GL_ALPHA16 = 0x803E;
        public static uint GL_LUMINANCE4 = 0x803F;
        public static uint GL_LUMINANCE8 = 0x8040;
        public static uint GL_LUMINANCE12 = 0x8041;
        public static uint GL_LUMINANCE16 = 0x8042;
        public static uint GL_LUMINANCE4_ALPHA4 = 0x8043;
        public static uint GL_LUMINANCE6_ALPHA2 = 0x8044;
        public static uint GL_LUMINANCE8_ALPHA8 = 0x8045;
        public static uint GL_LUMINANCE12_ALPHA4 = 0x8046;
        public static uint GL_LUMINANCE12_ALPHA12 = 0x8047;
        public static uint GL_LUMINANCE16_ALPHA16 = 0x8048;
        public static uint GL_INTENSITY = 0x8049;
        public static uint GL_INTENSITY4 = 0x804A;
        public static uint GL_INTENSITY8 = 0x804B;
        public static uint GL_INTENSITY12 = 0x804C;
        public static uint GL_INTENSITY16 = 0x804D;
        public static uint GL_V2F = 0x2A20;
        public static uint GL_V3F = 0x2A21;
        public static uint GL_C4UB_V2F = 0x2A22;
        public static uint GL_C4UB_V3F = 0x2A23;
        public static uint GL_C3F_V3F = 0x2A24;
        public static uint GL_N3F_V3F = 0x2A25;
        public static uint GL_C4F_N3F_V3F = 0x2A26;
        public static uint GL_T2F_V3F = 0x2A27;
        public static uint GL_T4F_V4F = 0x2A28;
        public static uint GL_T2F_C4UB_V3F = 0x2A29;
        public static uint GL_T2F_C3F_V3F = 0x2A2A;
        public static uint GL_T2F_N3F_V3F = 0x2A2B;
        public static uint GL_T2F_C4F_N3F_V3F = 0x2A2C;
        public static uint GL_T4F_C4F_N3F_V4F = 0x2A2D;
        public static uint GL_TEXTURE_DEPTH = 0x8071;
        public static uint GL_MAX_3D_TEXTURE_SIZE = 0x8073;
        public static uint GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
        public static uint GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
        public static uint GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
        public static uint GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
        public static uint GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
        public static uint GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
        public static uint GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
        public static uint GL_BGR = 0x80E0;
        public static uint GL_BGRA = 0x80E1;
        public static uint GL_MAX_ELEMENTS_VERTICES = 0x80E8;
        public static uint GL_MAX_ELEMENTS_INDICES = 0x80E9;
        public static uint GL_CLAMP_TO_EDGE = 0x812F;
        public static uint GL_RESCALE_NORMAL = 0x803A;
        public static uint GL_SINGLE_COLOR = 0x81F9;
        public static uint GL_SEPARATE_SPECULAR_COLOR = 0x81FA;
        public static uint GL_TEXTURE0 = 0x84C0;
        public static uint GL_TEXTURE1 = 0x84C1;
        public static uint GL_TEXTURE2 = 0x84C2;
        public static uint GL_TEXTURE3 = 0x84C3;
        public static uint GL_TEXTURE4 = 0x84C4;
        public static uint GL_TEXTURE5 = 0x84C5;
        public static uint GL_TEXTURE6 = 0x84C6;
        public static uint GL_TEXTURE7 = 0x84C7;
        public static uint GL_TEXTURE8 = 0x84C8;
        public static uint GL_TEXTURE9 = 0x84C9;
        public static uint GL_TEXTURE10 = 0x84CA;
        public static uint GL_TEXTURE11 = 0x84CB;
        public static uint GL_TEXTURE12 = 0x84CC;
        public static uint GL_TEXTURE13 = 0x84CD;
        public static uint GL_TEXTURE14 = 0x84CE;
        public static uint GL_TEXTURE15 = 0x84CF;
        public static uint GL_TEXTURE16 = 0x84D0;
        public static uint GL_TEXTURE17 = 0x84D1;
        public static uint GL_TEXTURE18 = 0x84D2;
        public static uint GL_TEXTURE19 = 0x84D3;
        public static uint GL_TEXTURE20 = 0x84D4;
        public static uint GL_TEXTURE21 = 0x84D5;
        public static uint GL_TEXTURE22 = 0x84D6;
        public static uint GL_TEXTURE23 = 0x84D7;
        public static uint GL_TEXTURE24 = 0x84D8;
        public static uint GL_TEXTURE25 = 0x84D9;
        public static uint GL_TEXTURE26 = 0x84DA;
        public static uint GL_TEXTURE27 = 0x84DB;
        public static uint GL_TEXTURE28 = 0x84DC;
        public static uint GL_TEXTURE29 = 0x84DD;
        public static uint GL_TEXTURE30 = 0x84DE;
        public static uint GL_TEXTURE31 = 0x84DF;
        public static uint GL_ACTIVE_TEXTURE = 0x84E0;
        public static uint GL_MULTISAMPLE = 0x809D;
        public static uint GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
        public static uint GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
        public static uint GL_SAMPLE_COVERAGE = 0x80A0;
        public static uint GL_SAMPLE_BUFFERS = 0x80A8;
        public static uint GL_SAMPLES = 0x80A9;
        public static uint GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
        public static uint GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
        public static uint GL_TEXTURE_CUBE_MAP = 0x8513;
        public static uint GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
        public static uint GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
        public static uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
        public static uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
        public static uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
        public static uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
        public static uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
        public static uint GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
        public static uint GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
        public static uint GL_COMPRESSED_RGB = 0x84ED;
        public static uint GL_COMPRESSED_RGBA = 0x84EE;
        public static uint GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
        public static uint GL_TEXTURE_COMPRESSED = 0x86A1;
        public static uint GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
        public static uint GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
        public static uint GL_CLAMP_TO_BORDER = 0x812D;
        public static uint GL_CLIENT_ACTIVE_TEXTURE = 0x84E1;
        public static uint GL_MAX_TEXTURE_UNITS = 0x84E2;
        public static uint GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
        public static uint GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
        public static uint GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
        public static uint GL_TRANSPOSE_COLOR_MATRIX = 0x84E6;
        public static uint GL_NORMAL_MAP = 0x8511;
        public static uint GL_REFLECTION_MAP = 0x8512;
        public static uint GL_COMPRESSED_ALPHA = 0x84E9;
        public static uint GL_COMPRESSED_LUMINANCE = 0x84EA;
        public static uint GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
        public static uint GL_COMPRESSED_INTENSITY = 0x84EC;
        public static uint GL_COMBINE = 0x8570;
        public static uint GL_COMBINE_RGB = 0x8571;
        public static uint GL_COMBINE_ALPHA = 0x8572;
        public static uint GL_SOURCE0_RGB = 0x8580;
        public static uint GL_SOURCE1_RGB = 0x8581;
        public static uint GL_SOURCE2_RGB = 0x8582;
        public static uint GL_SOURCE0_ALPHA = 0x8588;
        public static uint GL_SOURCE1_ALPHA = 0x8589;
        public static uint GL_SOURCE2_ALPHA = 0x858A;
        public static uint GL_OPERAND0_RGB = 0x8590;
        public static uint GL_OPERAND1_RGB = 0x8591;
        public static uint GL_OPERAND2_RGB = 0x8592;
        public static uint GL_OPERAND0_ALPHA = 0x8598;
        public static uint GL_OPERAND1_ALPHA = 0x8599;
        public static uint GL_OPERAND2_ALPHA = 0x859A;
        public static uint GL_RGB_SCALE = 0x8573;
        public static uint GL_ADD_SIGNED = 0x8574;
        public static uint GL_INTERPOLATE = 0x8575;
        public static uint GL_SUBTRACT = 0x84E7;
        public static uint GL_CONSTANT = 0x8576;
        public static uint GL_PRIMARY_COLOR = 0x8577;
        public static uint GL_PREVIOUS = 0x8578;
        public static uint GL_DOT3_RGB = 0x86AE;
        public static uint GL_DOT3_RGBA = 0x86AF;
        public static uint GL_BLEND_DST_RGB = 0x80C8;
        public static uint GL_BLEND_SRC_RGB = 0x80C9;
        public static uint GL_BLEND_DST_ALPHA = 0x80CA;
        public static uint GL_BLEND_SRC_ALPHA = 0x80CB;
        public static uint GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
        public static uint GL_DEPTH_COMPONENT16 = 0x81A5;
        public static uint GL_DEPTH_COMPONENT24 = 0x81A6;
        public static uint GL_DEPTH_COMPONENT32 = 0x81A7;
        public static uint GL_MIRRORED_REPEAT = 0x8370;
        public static uint GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
        public static uint GL_TEXTURE_LOD_BIAS = 0x8501;
        public static uint GL_INCR_WRAP = 0x8507;
        public static uint GL_DECR_WRAP = 0x8508;
        public static uint GL_TEXTURE_DEPTH_SIZE = 0x884A;
        public static uint GL_TEXTURE_COMPARE_MODE = 0x884C;
        public static uint GL_TEXTURE_COMPARE_FUNC = 0x884D;
        public static uint GL_POINT_SIZE_MIN = 0x8126;
        public static uint GL_POINT_SIZE_MAX = 0x8127;
        public static uint GL_POINT_DISTANCE_ATTENUATION = 0x8129;
        public static uint GL_FOG_COORDINATE_SOURCE = 0x8450;
        public static uint GL_FOG_COORDINATE = 0x8451;
        public static uint GL_FRAGMENT_DEPTH = 0x8452;
        public static uint GL_CURRENT_FOG_COORDINATE = 0x8453;
        public static uint GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454;
        public static uint GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
        public static uint GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456;
        public static uint GL_FOG_COORDINATE_ARRAY = 0x8457;
        public static uint GL_COLOR_SUM = 0x8458;
        public static uint GL_CURRENT_SECONDARY_COLOR = 0x8459;
        public static uint GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
        public static uint GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
        public static uint GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
        public static uint GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
        public static uint GL_SECONDARY_COLOR_ARRAY = 0x845E;
        public static uint GL_TEXTURE_FILTER_CONTROL = 0x8500;
        public static uint GL_DEPTH_TEXTURE_MODE = 0x884B;
        public static uint GL_COMPARE_R_TO_TEXTURE = 0x884E;
        public static uint GL_FUNC_ADD = 0x8006;
        public static uint GL_FUNC_SUBTRACT = 0x800A;
        public static uint GL_FUNC_REVERSE_SUBTRACT = 0x800B;
        public static uint GL_MIN = 0x8007;
        public static uint GL_MAX = 0x8008;
        public static uint GL_CONSTANT_COLOR = 0x8001;
        public static uint GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
        public static uint GL_CONSTANT_ALPHA = 0x8003;
        public static uint GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
        public static uint GL_BUFFER_SIZE = 0x8764;
        public static uint GL_BUFFER_USAGE = 0x8765;
        public static uint GL_QUERY_COUNTER_BITS = 0x8864;
        public static uint GL_CURRENT_QUERY = 0x8865;
        public static uint GL_QUERY_RESULT = 0x8866;
        public static uint GL_QUERY_RESULT_AVAILABLE = 0x8867;
        public static uint GL_ARRAY_BUFFER = 0x8892;
        public static uint GL_ELEMENT_ARRAY_BUFFER = 0x8893;
        public static uint GL_ARRAY_BUFFER_BINDING = 0x8894;
        public static uint GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
        public static uint GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
        public static uint GL_READ_ONLY = 0x88B8;
        public static uint GL_WRITE_ONLY = 0x88B9;
        public static uint GL_READ_WRITE = 0x88BA;
        public static uint GL_BUFFER_ACCESS = 0x88BB;
        public static uint GL_BUFFER_MAPPED = 0x88BC;
        public static uint GL_BUFFER_MAP_POINTER = 0x88BD;
        public static uint GL_STREAM_DRAW = 0x88E0;
        public static uint GL_STREAM_READ = 0x88E1;
        public static uint GL_STREAM_COPY = 0x88E2;
        public static uint GL_STATIC_DRAW = 0x88E4;
        public static uint GL_STATIC_READ = 0x88E5;
        public static uint GL_STATIC_COPY = 0x88E6;
        public static uint GL_DYNAMIC_DRAW = 0x88E8;
        public static uint GL_DYNAMIC_READ = 0x88E9;
        public static uint GL_DYNAMIC_COPY = 0x88EA;
        public static uint GL_SAMPLES_PASSED = 0x8914;
        public static uint GL_SRC1_ALPHA = 0x8589;
        public static uint GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
        public static uint GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
        public static uint GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898;
        public static uint GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899;
        public static uint GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
        public static uint GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
        public static uint GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
        public static uint GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
        public static uint GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E;
        public static uint GL_FOG_COORD_SRC = 0x8450;
        public static uint GL_FOG_COORD = 0x8451;
        public static uint GL_CURRENT_FOG_COORD = 0x8453;
        public static uint GL_FOG_COORD_ARRAY_TYPE = 0x8454;
        public static uint GL_FOG_COORD_ARRAY_STRIDE = 0x8455;
        public static uint GL_FOG_COORD_ARRAY_POINTER = 0x8456;
        public static uint GL_FOG_COORD_ARRAY = 0x8457;
        public static uint GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D;
        public static uint GL_SRC0_RGB = 0x8580;
        public static uint GL_SRC1_RGB = 0x8581;
        public static uint GL_SRC2_RGB = 0x8582;
        public static uint GL_SRC0_ALPHA = 0x8588;
        public static uint GL_SRC2_ALPHA = 0x858A;
        public static uint GL_BLEND_EQUATION_RGB = 0x8009;
        public static uint GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
        public static uint GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
        public static uint GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
        public static uint GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
        public static uint GL_CURRENT_VERTEX_ATTRIB = 0x8626;
        public static uint GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
        public static uint GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
        public static uint GL_STENCIL_BACK_FUNC = 0x8800;
        public static uint GL_STENCIL_BACK_FAIL = 0x8801;
        public static uint GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
        public static uint GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
        public static uint GL_MAX_DRAW_BUFFERS = 0x8824;
        public static uint GL_DRAW_BUFFER0 = 0x8825;
        public static uint GL_DRAW_BUFFER1 = 0x8826;
        public static uint GL_DRAW_BUFFER2 = 0x8827;
        public static uint GL_DRAW_BUFFER3 = 0x8828;
        public static uint GL_DRAW_BUFFER4 = 0x8829;
        public static uint GL_DRAW_BUFFER5 = 0x882A;
        public static uint GL_DRAW_BUFFER6 = 0x882B;
        public static uint GL_DRAW_BUFFER7 = 0x882C;
        public static uint GL_DRAW_BUFFER8 = 0x882D;
        public static uint GL_DRAW_BUFFER9 = 0x882E;
        public static uint GL_DRAW_BUFFER10 = 0x882F;
        public static uint GL_DRAW_BUFFER11 = 0x8830;
        public static uint GL_DRAW_BUFFER12 = 0x8831;
        public static uint GL_DRAW_BUFFER13 = 0x8832;
        public static uint GL_DRAW_BUFFER14 = 0x8833;
        public static uint GL_DRAW_BUFFER15 = 0x8834;
        public static uint GL_BLEND_EQUATION_ALPHA = 0x883D;
        public static uint GL_MAX_VERTEX_ATTRIBS = 0x8869;
        public static uint GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
        public static uint GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
        public static uint GL_FRAGMENT_SHADER = 0x8B30;
        public static uint GL_VERTEX_SHADER = 0x8B31;
        public static uint GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
        public static uint GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
        public static uint GL_MAX_VARYING_FLOATS = 0x8B4B;
        public static uint GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
        public static uint GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
        public static uint GL_SHADER_TYPE = 0x8B4F;
        public static uint GL_FLOAT_VEC2 = 0x8B50;
        public static uint GL_FLOAT_VEC3 = 0x8B51;
        public static uint GL_FLOAT_VEC4 = 0x8B52;
        public static uint GL_INT_VEC2 = 0x8B53;
        public static uint GL_INT_VEC3 = 0x8B54;
        public static uint GL_INT_VEC4 = 0x8B55;
        public static uint GL_BOOL = 0x8B56;
        public static uint GL_BOOL_VEC2 = 0x8B57;
        public static uint GL_BOOL_VEC3 = 0x8B58;
        public static uint GL_BOOL_VEC4 = 0x8B59;
        public static uint GL_FLOAT_MAT2 = 0x8B5A;
        public static uint GL_FLOAT_MAT3 = 0x8B5B;
        public static uint GL_FLOAT_MAT4 = 0x8B5C;
        public static uint GL_SAMPLER_1D = 0x8B5D;
        public static uint GL_SAMPLER_2D = 0x8B5E;
        public static uint GL_SAMPLER_3D = 0x8B5F;
        public static uint GL_SAMPLER_CUBE = 0x8B60;
        public static uint GL_SAMPLER_1D_SHADOW = 0x8B61;
        public static uint GL_SAMPLER_2D_SHADOW = 0x8B62;
        public static uint GL_DELETE_STATUS = 0x8B80;
        public static uint GL_COMPILE_STATUS = 0x8B81;
        public static uint GL_LINK_STATUS = 0x8B82;
        public static uint GL_VALIDATE_STATUS = 0x8B83;
        public static uint GL_INFO_LOG_LENGTH = 0x8B84;
        public static uint GL_ATTACHED_SHADERS = 0x8B85;
        public static uint GL_ACTIVE_UNIFORMS = 0x8B86;
        public static uint GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
        public static uint GL_SHADER_SOURCE_LENGTH = 0x8B88;
        public static uint GL_ACTIVE_ATTRIBUTES = 0x8B89;
        public static uint GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
        public static uint GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
        public static uint GL_CURRENT_PROGRAM = 0x8B8D;
        public static uint GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
        public static uint GL_LOWER_LEFT = 0x8CA1;
        public static uint GL_UPPER_LEFT = 0x8CA2;
        public static uint GL_STENCIL_BACK_REF = 0x8CA3;
        public static uint GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
        public static uint GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
        public static uint GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643;
        public static uint GL_POINT_SPRITE = 0x8861;
        public static uint GL_COORD_REPLACE = 0x8862;
        public static uint GL_MAX_TEXTURE_COORDS = 0x8871;
        public static uint GL_PIXEL_PACK_BUFFER = 0x88EB;
        public static uint GL_PIXEL_UNPACK_BUFFER = 0x88EC;
        public static uint GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
        public static uint GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
        public static uint GL_FLOAT_MAT2x3 = 0x8B65;
        public static uint GL_FLOAT_MAT2x4 = 0x8B66;
        public static uint GL_FLOAT_MAT3x2 = 0x8B67;
        public static uint GL_FLOAT_MAT3x4 = 0x8B68;
        public static uint GL_FLOAT_MAT4x2 = 0x8B69;
        public static uint GL_FLOAT_MAT4x3 = 0x8B6A;
        public static uint GL_SRGB = 0x8C40;
        public static uint GL_SRGB8 = 0x8C41;
        public static uint GL_SRGB_ALPHA = 0x8C42;
        public static uint GL_SRGB8_ALPHA8 = 0x8C43;
        public static uint GL_COMPRESSED_SRGB = 0x8C48;
        public static uint GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
        public static uint GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F;
        public static uint GL_SLUMINANCE_ALPHA = 0x8C44;
        public static uint GL_SLUMINANCE8_ALPHA8 = 0x8C45;
        public static uint GL_SLUMINANCE = 0x8C46;
        public static uint GL_SLUMINANCE8 = 0x8C47;
        public static uint GL_COMPRESSED_SLUMINANCE = 0x8C4A;
        public static uint GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B;
        public static uint GL_COMPARE_REF_TO_TEXTURE = 0x884E;
        public static uint GL_MAJOR_VERSION = 0x821B;
        public static uint GL_MINOR_VERSION = 0x821C;
        public static uint GL_NUM_EXTENSIONS = 0x821D;
        public static uint GL_CONTEXT_FLAGS = 0x821E;
        public static uint GL_COMPRESSED_RED = 0x8225;
        public static uint GL_COMPRESSED_RG = 0x8226;
        public static uint GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
        public static uint GL_RGBA32F = 0x8814;
        public static uint GL_RGB32F = 0x8815;
        public static uint GL_RGBA16F = 0x881A;
        public static uint GL_RGB16F = 0x881B;
        public static uint GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
        public static uint GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
        public static uint GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
        public static uint GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
        public static uint GL_CLAMP_READ_COLOR = 0x891C;
        public static uint GL_FIXED_ONLY = 0x891D;
        public static uint GL_MAX_VARYING_COMPONENTS = 0x8B4B;
        public static uint GL_TEXTURE_1D_ARRAY = 0x8C18;
        public static uint GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
        public static uint GL_TEXTURE_2D_ARRAY = 0x8C1A;
        public static uint GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
        public static uint GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
        public static uint GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
        public static uint GL_R11F_G11F_B10F = 0x8C3A;
        public static uint GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
        public static uint GL_RGB9_E5 = 0x8C3D;
        public static uint GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
        public static uint GL_TEXTURE_SHARED_SIZE = 0x8C3F;
        public static uint GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
        public static uint GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
        public static uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
        public static uint GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
        public static uint GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
        public static uint GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
        public static uint GL_PRIMITIVES_GENERATED = 0x8C87;
        public static uint GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
        public static uint GL_RASTERIZER_DISCARD = 0x8C89;
        public static uint GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
        public static uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
        public static uint GL_INTERLEAVED_ATTRIBS = 0x8C8C;
        public static uint GL_SEPARATE_ATTRIBS = 0x8C8D;
        public static uint GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
        public static uint GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
        public static uint GL_RGBA32UI = 0x8D70;
        public static uint GL_RGB32UI = 0x8D71;
        public static uint GL_RGBA16UI = 0x8D76;
        public static uint GL_RGB16UI = 0x8D77;
        public static uint GL_RGBA8UI = 0x8D7C;
        public static uint GL_RGB8UI = 0x8D7D;
        public static uint GL_RGBA32I = 0x8D82;
        public static uint GL_RGB32I = 0x8D83;
        public static uint GL_RGBA16I = 0x8D88;
        public static uint GL_RGB16I = 0x8D89;
        public static uint GL_RGBA8I = 0x8D8E;
        public static uint GL_RGB8I = 0x8D8F;
        public static uint GL_RED_INTEGER = 0x8D94;
        public static uint GL_GREEN_INTEGER = 0x8D95;
        public static uint GL_BLUE_INTEGER = 0x8D96;
        public static uint GL_RGB_INTEGER = 0x8D98;
        public static uint GL_RGBA_INTEGER = 0x8D99;
        public static uint GL_BGR_INTEGER = 0x8D9A;
        public static uint GL_BGRA_INTEGER = 0x8D9B;
        public static uint GL_SAMPLER_1D_ARRAY = 0x8DC0;
        public static uint GL_SAMPLER_2D_ARRAY = 0x8DC1;
        public static uint GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
        public static uint GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
        public static uint GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
        public static uint GL_UNSIGNED_INT_VEC2 = 0x8DC6;
        public static uint GL_UNSIGNED_INT_VEC3 = 0x8DC7;
        public static uint GL_UNSIGNED_INT_VEC4 = 0x8DC8;
        public static uint GL_INT_SAMPLER_1D = 0x8DC9;
        public static uint GL_INT_SAMPLER_2D = 0x8DCA;
        public static uint GL_INT_SAMPLER_3D = 0x8DCB;
        public static uint GL_INT_SAMPLER_CUBE = 0x8DCC;
        public static uint GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
        public static uint GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
        public static uint GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
        public static uint GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
        public static uint GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
        public static uint GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
        public static uint GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
        public static uint GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
        public static uint GL_QUERY_WAIT = 0x8E13;
        public static uint GL_QUERY_NO_WAIT = 0x8E14;
        public static uint GL_QUERY_BY_REGION_WAIT = 0x8E15;
        public static uint GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
        public static uint GL_BUFFER_ACCESS_FLAGS = 0x911F;
        public static uint GL_BUFFER_MAP_LENGTH = 0x9120;
        public static uint GL_BUFFER_MAP_OFFSET = 0x9121;
        public static uint GL_DEPTH_COMPONENT32F = 0x8CAC;
        public static uint GL_DEPTH32F_STENCIL8 = 0x8CAD;
        public static uint GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
        public static uint GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
        public static uint GL_FRAMEBUFFER_DEFAULT = 0x8218;
        public static uint GL_FRAMEBUFFER_UNDEFINED = 0x8219;
        public static uint GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
        public static uint GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
        public static uint GL_DEPTH_STENCIL = 0x84F9;
        public static uint GL_UNSIGNED_INT_24_8 = 0x84FA;
        public static uint GL_DEPTH24_STENCIL8 = 0x88F0;
        public static uint GL_TEXTURE_STENCIL_SIZE = 0x88F1;
        public static uint GL_TEXTURE_RED_TYPE = 0x8C10;
        public static uint GL_TEXTURE_GREEN_TYPE = 0x8C11;
        public static uint GL_TEXTURE_BLUE_TYPE = 0x8C12;
        public static uint GL_TEXTURE_ALPHA_TYPE = 0x8C13;
        public static uint GL_TEXTURE_DEPTH_TYPE = 0x8C16;
        public static uint GL_UNSIGNED_NORMALIZED = 0x8C17;
        public static uint GL_FRAMEBUFFER_BINDING = 0x8CA6;
        public static uint GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
        public static uint GL_RENDERBUFFER_BINDING = 0x8CA7;
        public static uint GL_READ_FRAMEBUFFER = 0x8CA8;
        public static uint GL_DRAW_FRAMEBUFFER = 0x8CA9;
        public static uint GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
        public static uint GL_RENDERBUFFER_SAMPLES = 0x8CAB;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
        public static uint GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
        public static uint GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
        public static uint GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
        public static uint GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
        public static uint GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
        public static uint GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
        public static uint GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
        public static uint GL_COLOR_ATTACHMENT0 = 0x8CE0;
        public static uint GL_COLOR_ATTACHMENT1 = 0x8CE1;
        public static uint GL_COLOR_ATTACHMENT2 = 0x8CE2;
        public static uint GL_COLOR_ATTACHMENT3 = 0x8CE3;
        public static uint GL_COLOR_ATTACHMENT4 = 0x8CE4;
        public static uint GL_COLOR_ATTACHMENT5 = 0x8CE5;
        public static uint GL_COLOR_ATTACHMENT6 = 0x8CE6;
        public static uint GL_COLOR_ATTACHMENT7 = 0x8CE7;
        public static uint GL_COLOR_ATTACHMENT8 = 0x8CE8;
        public static uint GL_COLOR_ATTACHMENT9 = 0x8CE9;
        public static uint GL_COLOR_ATTACHMENT10 = 0x8CEA;
        public static uint GL_COLOR_ATTACHMENT11 = 0x8CEB;
        public static uint GL_COLOR_ATTACHMENT12 = 0x8CEC;
        public static uint GL_COLOR_ATTACHMENT13 = 0x8CED;
        public static uint GL_COLOR_ATTACHMENT14 = 0x8CEE;
        public static uint GL_COLOR_ATTACHMENT15 = 0x8CEF;
        public static uint GL_DEPTH_ATTACHMENT = 0x8D00;
        public static uint GL_STENCIL_ATTACHMENT = 0x8D20;
        public static uint GL_FRAMEBUFFER = 0x8D40;
        public static uint GL_RENDERBUFFER = 0x8D41;
        public static uint GL_RENDERBUFFER_WIDTH = 0x8D42;
        public static uint GL_RENDERBUFFER_HEIGHT = 0x8D43;
        public static uint GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
        public static uint GL_STENCIL_INDEX1 = 0x8D46;
        public static uint GL_STENCIL_INDEX4 = 0x8D47;
        public static uint GL_STENCIL_INDEX8 = 0x8D48;
        public static uint GL_STENCIL_INDEX16 = 0x8D49;
        public static uint GL_RENDERBUFFER_RED_SIZE = 0x8D50;
        public static uint GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
        public static uint GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
        public static uint GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
        public static uint GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
        public static uint GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
        public static uint GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
        public static uint GL_MAX_SAMPLES = 0x8D57;
        public static uint GL_INDEX = 0x8222;
        public static uint GL_TEXTURE_LUMINANCE_TYPE = 0x8C14;
        public static uint GL_TEXTURE_INTENSITY_TYPE = 0x8C15;
        public static uint GL_FRAMEBUFFER_SRGB = 0x8DB9;
        public static uint GL_HALF_FLOAT = 0x140B;
        public static uint GL_MAP_READ_BIT = 0x0001;
        public static uint GL_MAP_WRITE_BIT = 0x0002;
        public static uint GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
        public static uint GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
        public static uint GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
        public static uint GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
        public static uint GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
        public static uint GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
        public static uint GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
        public static uint GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
        public static uint GL_RG = 0x8227;
        public static uint GL_RG_INTEGER = 0x8228;
        public static uint GL_R8 = 0x8229;
        public static uint GL_R16 = 0x822A;
        public static uint GL_RG8 = 0x822B;
        public static uint GL_RG16 = 0x822C;
        public static uint GL_R16F = 0x822D;
        public static uint GL_R32F = 0x822E;
        public static uint GL_RG16F = 0x822F;
        public static uint GL_RG32F = 0x8230;
        public static uint GL_R8I = 0x8231;
        public static uint GL_R8UI = 0x8232;
        public static uint GL_R16I = 0x8233;
        public static uint GL_R16UI = 0x8234;
        public static uint GL_R32I = 0x8235;
        public static uint GL_R32UI = 0x8236;
        public static uint GL_RG8I = 0x8237;
        public static uint GL_RG8UI = 0x8238;
        public static uint GL_RG16I = 0x8239;
        public static uint GL_RG16UI = 0x823A;
        public static uint GL_RG32I = 0x823B;
        public static uint GL_RG32UI = 0x823C;
        public static uint GL_VERTEX_ARRAY_BINDING = 0x85B5;
        public static uint GL_CLAMP_VERTEX_COLOR = 0x891A;
        public static uint GL_CLAMP_FRAGMENT_COLOR = 0x891B;
        public static uint GL_ALPHA_INTEGER = 0x8D97;
        public static uint GL_SAMPLER_2D_RECT = 0x8B63;
        public static uint GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
        public static uint GL_SAMPLER_BUFFER = 0x8DC2;
        public static uint GL_INT_SAMPLER_2D_RECT = 0x8DCD;
        public static uint GL_INT_SAMPLER_BUFFER = 0x8DD0;
        public static uint GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
        public static uint GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
        public static uint GL_TEXTURE_BUFFER = 0x8C2A;
        public static uint GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
        public static uint GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
        public static uint GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
        public static uint GL_TEXTURE_RECTANGLE = 0x84F5;
        public static uint GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
        public static uint GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
        public static uint GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
        public static uint GL_R8_SNORM = 0x8F94;
        public static uint GL_RG8_SNORM = 0x8F95;
        public static uint GL_RGB8_SNORM = 0x8F96;
        public static uint GL_RGBA8_SNORM = 0x8F97;
        public static uint GL_R16_SNORM = 0x8F98;
        public static uint GL_RG16_SNORM = 0x8F99;
        public static uint GL_RGB16_SNORM = 0x8F9A;
        public static uint GL_RGBA16_SNORM = 0x8F9B;
        public static uint GL_SIGNED_NORMALIZED = 0x8F9C;
        public static uint GL_PRIMITIVE_RESTART = 0x8F9D;
        public static uint GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
        public static uint GL_COPY_READ_BUFFER = 0x8F36;
        public static uint GL_COPY_WRITE_BUFFER = 0x8F37;
        public static uint GL_UNIFORM_BUFFER = 0x8A11;
        public static uint GL_UNIFORM_BUFFER_BINDING = 0x8A28;
        public static uint GL_UNIFORM_BUFFER_START = 0x8A29;
        public static uint GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
        public static uint GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
        public static uint GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
        public static uint GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
        public static uint GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
        public static uint GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
        public static uint GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
        public static uint GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
        public static uint GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
        public static uint GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
        public static uint GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
        public static uint GL_UNIFORM_TYPE = 0x8A37;
        public static uint GL_UNIFORM_SIZE = 0x8A38;
        public static uint GL_UNIFORM_NAME_LENGTH = 0x8A39;
        public static uint GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
        public static uint GL_UNIFORM_OFFSET = 0x8A3B;
        public static uint GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
        public static uint GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
        public static uint GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
        public static uint GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
        public static uint GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
        public static uint GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
        public static uint GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
        public static uint GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
        public static uint GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
        public static uint GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
        public static uint GL_INVALID_INDEX = 0xFFFFFFFF;
        public static uint GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
        public static uint GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
        public static uint GL_PROGRAM_POINT_SIZE = 0x8642;
        public static uint GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
        public static uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
        public static uint GL_GEOMETRY_SHADER = 0x8DD9;
        public static uint GL_GEOMETRY_VERTICES_OUT = 0x8916;
        public static uint GL_GEOMETRY_INPUT_TYPE = 0x8917;
        public static uint GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
        public static uint GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
        public static uint GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
        public static uint GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
        public static uint GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
        public static uint GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
        public static uint GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
        public static uint GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
        public static uint GL_CONTEXT_PROFILE_MASK = 0x9126;
        public static uint GL_DEPTH_CLAMP = 0x864F;
        public static uint GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
        public static uint GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
        public static uint GL_LAST_VERTEX_CONVENTION = 0x8E4E;
        public static uint GL_PROVOKING_VERTEX = 0x8E4F;
        public static uint GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
        public static uint GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
        public static uint GL_OBJECT_TYPE = 0x9112;
        public static uint GL_SYNC_CONDITION = 0x9113;
        public static uint GL_SYNC_STATUS = 0x9114;
        public static uint GL_SYNC_FLAGS = 0x9115;
        public static uint GL_SYNC_FENCE = 0x9116;
        public static uint GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
        public static uint GL_UNSIGNALED = 0x9118;
        public static uint GL_SIGNALED = 0x9119;
        public static uint GL_ALREADY_SIGNALED = 0x911A;
        public static uint GL_TIMEOUT_EXPIRED = 0x911B;
        public static uint GL_CONDITION_SATISFIED = 0x911C;
        public static uint GL_WAIT_FAILED = 0x911D;
        public static ulong GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;
        public static uint GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
        public static uint GL_SAMPLE_POSITION = 0x8E50;
        public static uint GL_SAMPLE_MASK = 0x8E51;
        public static uint GL_SAMPLE_MASK_VALUE = 0x8E52;
        public static uint GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
        public static uint GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
        public static uint GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
        public static uint GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
        public static uint GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
        public static uint GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
        public static uint GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
        public static uint GL_TEXTURE_SAMPLES = 0x9106;
        public static uint GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
        public static uint GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
        public static uint GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
        public static uint GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
        public static uint GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
        public static uint GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
        public static uint GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
        public static uint GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
        public static uint GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
        public static uint GL_MAX_INTEGER_SAMPLES = 0x9110;
        public static uint GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
        public static uint GL_SRC1_COLOR = 0x88F9;
        public static uint GL_ONE_MINUS_SRC1_COLOR = 0x88FA;
        public static uint GL_ONE_MINUS_SRC1_ALPHA = 0x88FB;
        public static uint GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
        public static uint GL_ANY_SAMPLES_PASSED = 0x8C2F;
        public static uint GL_SAMPLER_BINDING = 0x8919;
        public static uint GL_RGB10_A2UI = 0x906F;
        public static uint GL_TEXTURE_SWIZZLE_R = 0x8E42;
        public static uint GL_TEXTURE_SWIZZLE_G = 0x8E43;
        public static uint GL_TEXTURE_SWIZZLE_B = 0x8E44;
        public static uint GL_TEXTURE_SWIZZLE_A = 0x8E45;
        public static uint GL_TEXTURE_SWIZZLE_RGBA = 0x8E46;
        public static uint GL_TIME_ELAPSED = 0x88BF;
        public static uint GL_TIMESTAMP = 0x8E28;
        public static uint GL_INT_2_10_10_10_REV = 0x8D9F;
        public static uint GL_SAMPLE_SHADING = 0x8C36;
        public static uint GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37;
        public static uint GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
        public static uint GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
        public static uint GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009;
        public static uint GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
        public static uint GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
        public static uint GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C;
        public static uint GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
        public static uint GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
        public static uint GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
        public static uint GL_DRAW_INDIRECT_BUFFER = 0x8F3F;
        public static uint GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
        public static uint GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
        public static uint GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
        public static uint GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
        public static uint GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
        public static uint GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
        public static uint GL_MAX_VERTEX_STREAMS = 0x8E71;
        public static uint GL_DOUBLE_VEC2 = 0x8FFC;
        public static uint GL_DOUBLE_VEC3 = 0x8FFD;
        public static uint GL_DOUBLE_VEC4 = 0x8FFE;
        public static uint GL_DOUBLE_MAT2 = 0x8F46;
        public static uint GL_DOUBLE_MAT3 = 0x8F47;
        public static uint GL_DOUBLE_MAT4 = 0x8F48;
        public static uint GL_DOUBLE_MAT2x3 = 0x8F49;
        public static uint GL_DOUBLE_MAT2x4 = 0x8F4A;
        public static uint GL_DOUBLE_MAT3x2 = 0x8F4B;
        public static uint GL_DOUBLE_MAT3x4 = 0x8F4C;
        public static uint GL_DOUBLE_MAT4x2 = 0x8F4D;
        public static uint GL_DOUBLE_MAT4x3 = 0x8F4E;
        public static uint GL_ACTIVE_SUBROUTINES = 0x8DE5;
        public static uint GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
        public static uint GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
        public static uint GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
        public static uint GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
        public static uint GL_MAX_SUBROUTINES = 0x8DE7;
        public static uint GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
        public static uint GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
        public static uint GL_COMPATIBLE_SUBROUTINES = 0x8E4B;
        public static uint GL_PATCH_VERTICES = 0x8E72;
        public static uint GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
        public static uint GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
        public static uint GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
        public static uint GL_TESS_GEN_MODE = 0x8E76;
        public static uint GL_TESS_GEN_SPACING = 0x8E77;
        public static uint GL_TESS_GEN_VERTEX_ORDER = 0x8E78;
        public static uint GL_TESS_GEN_POINT_MODE = 0x8E79;
        public static uint GL_ISOLINES = 0x8E7A;
        public static uint GL_FRACTIONAL_ODD = 0x8E7B;
        public static uint GL_FRACTIONAL_EVEN = 0x8E7C;
        public static uint GL_MAX_PATCH_VERTICES = 0x8E7D;
        public static uint GL_MAX_TESS_GEN_LEVEL = 0x8E7E;
        public static uint GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
        public static uint GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
        public static uint GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
        public static uint GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
        public static uint GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
        public static uint GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84;
        public static uint GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
        public static uint GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
        public static uint GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
        public static uint GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
        public static uint GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
        public static uint GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
        public static uint GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
        public static uint GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
        public static uint GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
        public static uint GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
        public static uint GL_TESS_EVALUATION_SHADER = 0x8E87;
        public static uint GL_TESS_CONTROL_SHADER = 0x8E88;
        public static uint GL_TRANSFORM_FEEDBACK = 0x8E22;
        public static uint GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
        public static uint GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
        public static uint GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
        public static uint GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
        public static uint GL_FIXED = 0x140C;
        public static uint GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
        public static uint GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
        public static uint GL_LOW_FLOAT = 0x8DF0;
        public static uint GL_MEDIUM_FLOAT = 0x8DF1;
        public static uint GL_HIGH_FLOAT = 0x8DF2;
        public static uint GL_LOW_INT = 0x8DF3;
        public static uint GL_MEDIUM_INT = 0x8DF4;
        public static uint GL_HIGH_INT = 0x8DF5;
        public static uint GL_SHADER_COMPILER = 0x8DFA;
        public static uint GL_SHADER_BINARY_FORMATS = 0x8DF8;
        public static uint GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
        public static uint GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
        public static uint GL_MAX_VARYING_VECTORS = 0x8DFC;
        public static uint GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
        public static uint GL_RGB565 = 0x8D62;
        public static uint GL_PROGRAM_BINARY_LENGTH = 0x8741;
        public static uint GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
        public static uint GL_PROGRAM_BINARY_FORMATS = 0x87FF;
        public static uint GL_VERTEX_SHADER_BIT = 0x00000001;
        public static uint GL_FRAGMENT_SHADER_BIT = 0x00000002;
        public static uint GL_GEOMETRY_SHADER_BIT = 0x00000004;
        public static uint GL_TESS_CONTROL_SHADER_BIT = 0x00000008;
        public static uint GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;
        public static uint GL_ALL_SHADER_BITS = 0xFFFFFFFF;
        public static uint GL_PROGRAM_SEPARABLE = 0x8258;
        public static uint GL_ACTIVE_PROGRAM = 0x8259;
        public static uint GL_PROGRAM_PIPELINE_BINDING = 0x825A;
        public static uint GL_MAX_VIEWPORTS = 0x825B;
        public static uint GL_VIEWPORT_SUBPIXEL_BITS = 0x825C;
        public static uint GL_VIEWPORT_BOUNDS_RANGE = 0x825D;
        public static uint GL_LAYER_PROVOKING_VERTEX = 0x825E;
        public static uint GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
        public static uint GL_UNDEFINED_VERTEX = 0x8260;
        public static uint GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
        public static uint GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
        public static uint GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
        public static uint GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
        public static uint GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
        public static uint GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
        public static uint GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
        public static uint GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E;
        public static uint GL_NUM_SAMPLE_COUNTS = 0x9380;
        public static uint GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;
        public static uint GL_ATOMIC_COUNTER_BUFFER = 0x92C0;
        public static uint GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
        public static uint GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2;
        public static uint GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
        public static uint GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
        public static uint GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
        public static uint GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
        public static uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
        public static uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
        public static uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
        public static uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
        public static uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
        public static uint GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
        public static uint GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
        public static uint GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
        public static uint GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
        public static uint GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
        public static uint GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
        public static uint GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
        public static uint GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
        public static uint GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
        public static uint GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
        public static uint GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
        public static uint GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
        public static uint GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
        public static uint GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
        public static uint GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
        public static uint GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
        public static uint GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
        public static uint GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
        public static uint GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
        public static uint GL_UNIFORM_BARRIER_BIT = 0x00000004;
        public static uint GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
        public static uint GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
        public static uint GL_COMMAND_BARRIER_BIT = 0x00000040;
        public static uint GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
        public static uint GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
        public static uint GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
        public static uint GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400;
        public static uint GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
        public static uint GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
        public static uint GL_ALL_BARRIER_BITS = 0xFFFFFFFF;
        public static uint GL_MAX_IMAGE_UNITS = 0x8F38;
        public static uint GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
        public static uint GL_IMAGE_BINDING_NAME = 0x8F3A;
        public static uint GL_IMAGE_BINDING_LEVEL = 0x8F3B;
        public static uint GL_IMAGE_BINDING_LAYERED = 0x8F3C;
        public static uint GL_IMAGE_BINDING_LAYER = 0x8F3D;
        public static uint GL_IMAGE_BINDING_ACCESS = 0x8F3E;
        public static uint GL_IMAGE_1D = 0x904C;
        public static uint GL_IMAGE_2D = 0x904D;
        public static uint GL_IMAGE_3D = 0x904E;
        public static uint GL_IMAGE_2D_RECT = 0x904F;
        public static uint GL_IMAGE_CUBE = 0x9050;
        public static uint GL_IMAGE_BUFFER = 0x9051;
        public static uint GL_IMAGE_1D_ARRAY = 0x9052;
        public static uint GL_IMAGE_2D_ARRAY = 0x9053;
        public static uint GL_IMAGE_CUBE_MAP_ARRAY = 0x9054;
        public static uint GL_IMAGE_2D_MULTISAMPLE = 0x9055;
        public static uint GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
        public static uint GL_INT_IMAGE_1D = 0x9057;
        public static uint GL_INT_IMAGE_2D = 0x9058;
        public static uint GL_INT_IMAGE_3D = 0x9059;
        public static uint GL_INT_IMAGE_2D_RECT = 0x905A;
        public static uint GL_INT_IMAGE_CUBE = 0x905B;
        public static uint GL_INT_IMAGE_BUFFER = 0x905C;
        public static uint GL_INT_IMAGE_1D_ARRAY = 0x905D;
        public static uint GL_INT_IMAGE_2D_ARRAY = 0x905E;
        public static uint GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
        public static uint GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060;
        public static uint GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
        public static uint GL_UNSIGNED_INT_IMAGE_1D = 0x9062;
        public static uint GL_UNSIGNED_INT_IMAGE_2D = 0x9063;
        public static uint GL_UNSIGNED_INT_IMAGE_3D = 0x9064;
        public static uint GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
        public static uint GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066;
        public static uint GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
        public static uint GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
        public static uint GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
        public static uint GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
        public static uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
        public static uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
        public static uint GL_MAX_IMAGE_SAMPLES = 0x906D;
        public static uint GL_IMAGE_BINDING_FORMAT = 0x906E;
        public static uint GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
        public static uint GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
        public static uint GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
        public static uint GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
        public static uint GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
        public static uint GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
        public static uint GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
        public static uint GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
        public static uint GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
        public static uint GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F;
        public static uint GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;
        public static uint GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E;
        public static uint GL_COMPRESSED_RGB8_ETC2 = 0x9274;
        public static uint GL_COMPRESSED_SRGB8_ETC2 = 0x9275;
        public static uint GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
        public static uint GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
        public static uint GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
        public static uint GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
        public static uint GL_COMPRESSED_R11_EAC = 0x9270;
        public static uint GL_COMPRESSED_SIGNED_R11_EAC = 0x9271;
        public static uint GL_COMPRESSED_RG11_EAC = 0x9272;
        public static uint GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273;
        public static uint GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
        public static uint GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
        public static uint GL_MAX_ELEMENT_INDEX = 0x8D6B;
        public static uint GL_COMPUTE_SHADER = 0x91B9;
        public static uint GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
        public static uint GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
        public static uint GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
        public static uint GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
        public static uint GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
        public static uint GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
        public static uint GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
        public static uint GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
        public static uint GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
        public static uint GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
        public static uint GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
        public static uint GL_COMPUTE_WORK_GROUP_SIZE = 0x8267;
        public static uint GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
        public static uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
        public static uint GL_DISPATCH_INDIRECT_BUFFER = 0x90EE;
        public static uint GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
        public static uint GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
        public static uint GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
        public static uint GL_DEBUG_CALLBACK_FUNCTION = 0x8244;
        public static uint GL_DEBUG_CALLBACK_USER_PARAM = 0x8245;
        public static uint GL_DEBUG_SOURCE_API = 0x8246;
        public static uint GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;
        public static uint GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
        public static uint GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249;
        public static uint GL_DEBUG_SOURCE_APPLICATION = 0x824A;
        public static uint GL_DEBUG_SOURCE_OTHER = 0x824B;
        public static uint GL_DEBUG_TYPE_ERROR = 0x824C;
        public static uint GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
        public static uint GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;
        public static uint GL_DEBUG_TYPE_PORTABILITY = 0x824F;
        public static uint GL_DEBUG_TYPE_PERFORMANCE = 0x8250;
        public static uint GL_DEBUG_TYPE_OTHER = 0x8251;
        public static uint GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
        public static uint GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
        public static uint GL_DEBUG_LOGGED_MESSAGES = 0x9145;
        public static uint GL_DEBUG_SEVERITY_HIGH = 0x9146;
        public static uint GL_DEBUG_SEVERITY_MEDIUM = 0x9147;
        public static uint GL_DEBUG_SEVERITY_LOW = 0x9148;
        public static uint GL_DEBUG_TYPE_MARKER = 0x8268;
        public static uint GL_DEBUG_TYPE_PUSH_GROUP = 0x8269;
        public static uint GL_DEBUG_TYPE_POP_GROUP = 0x826A;
        public static uint GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B;
        public static uint GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;
        public static uint GL_DEBUG_GROUP_STACK_DEPTH = 0x826D;
        public static uint GL_BUFFER = 0x82E0;
        public static uint GL_SHADER = 0x82E1;
        public static uint GL_PROGRAM = 0x82E2;
        public static uint GL_QUERY = 0x82E3;
        public static uint GL_PROGRAM_PIPELINE = 0x82E4;
        public static uint GL_SAMPLER = 0x82E6;
        public static uint GL_MAX_LABEL_LENGTH = 0x82E8;
        public static uint GL_DEBUG_OUTPUT = 0x92E0;
        public static uint GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002;
        public static uint GL_MAX_UNIFORM_LOCATIONS = 0x826E;
        public static uint GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
        public static uint GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
        public static uint GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
        public static uint GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
        public static uint GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
        public static uint GL_MAX_FRAMEBUFFER_WIDTH = 0x9315;
        public static uint GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316;
        public static uint GL_MAX_FRAMEBUFFER_LAYERS = 0x9317;
        public static uint GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318;
        public static uint GL_INTERNALFORMAT_SUPPORTED = 0x826F;
        public static uint GL_INTERNALFORMAT_PREFERRED = 0x8270;
        public static uint GL_INTERNALFORMAT_RED_SIZE = 0x8271;
        public static uint GL_INTERNALFORMAT_GREEN_SIZE = 0x8272;
        public static uint GL_INTERNALFORMAT_BLUE_SIZE = 0x8273;
        public static uint GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274;
        public static uint GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275;
        public static uint GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276;
        public static uint GL_INTERNALFORMAT_SHARED_SIZE = 0x8277;
        public static uint GL_INTERNALFORMAT_RED_TYPE = 0x8278;
        public static uint GL_INTERNALFORMAT_GREEN_TYPE = 0x8279;
        public static uint GL_INTERNALFORMAT_BLUE_TYPE = 0x827A;
        public static uint GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B;
        public static uint GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C;
        public static uint GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D;
        public static uint GL_MAX_WIDTH = 0x827E;
        public static uint GL_MAX_HEIGHT = 0x827F;
        public static uint GL_MAX_DEPTH = 0x8280;
        public static uint GL_MAX_LAYERS = 0x8281;
        public static uint GL_MAX_COMBINED_DIMENSIONS = 0x8282;
        public static uint GL_COLOR_COMPONENTS = 0x8283;
        public static uint GL_DEPTH_COMPONENTS = 0x8284;
        public static uint GL_STENCIL_COMPONENTS = 0x8285;
        public static uint GL_COLOR_RENDERABLE = 0x8286;
        public static uint GL_DEPTH_RENDERABLE = 0x8287;
        public static uint GL_STENCIL_RENDERABLE = 0x8288;
        public static uint GL_FRAMEBUFFER_RENDERABLE = 0x8289;
        public static uint GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
        public static uint GL_FRAMEBUFFER_BLEND = 0x828B;
        public static uint GL_READ_PIXELS = 0x828C;
        public static uint GL_READ_PIXELS_FORMAT = 0x828D;
        public static uint GL_READ_PIXELS_TYPE = 0x828E;
        public static uint GL_TEXTURE_IMAGE_FORMAT = 0x828F;
        public static uint GL_TEXTURE_IMAGE_TYPE = 0x8290;
        public static uint GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291;
        public static uint GL_GET_TEXTURE_IMAGE_TYPE = 0x8292;
        public static uint GL_MIPMAP = 0x8293;
        public static uint GL_MANUAL_GENERATE_MIPMAP = 0x8294;
        public static uint GL_AUTO_GENERATE_MIPMAP = 0x8295;
        public static uint GL_COLOR_ENCODING = 0x8296;
        public static uint GL_SRGB_READ = 0x8297;
        public static uint GL_SRGB_WRITE = 0x8298;
        public static uint GL_FILTER = 0x829A;
        public static uint GL_VERTEX_TEXTURE = 0x829B;
        public static uint GL_TESS_CONTROL_TEXTURE = 0x829C;
        public static uint GL_TESS_EVALUATION_TEXTURE = 0x829D;
        public static uint GL_GEOMETRY_TEXTURE = 0x829E;
        public static uint GL_FRAGMENT_TEXTURE = 0x829F;
        public static uint GL_COMPUTE_TEXTURE = 0x82A0;
        public static uint GL_TEXTURE_SHADOW = 0x82A1;
        public static uint GL_TEXTURE_GATHER = 0x82A2;
        public static uint GL_TEXTURE_GATHER_SHADOW = 0x82A3;
        public static uint GL_SHADER_IMAGE_LOAD = 0x82A4;
        public static uint GL_SHADER_IMAGE_STORE = 0x82A5;
        public static uint GL_SHADER_IMAGE_ATOMIC = 0x82A6;
        public static uint GL_IMAGE_TEXEL_SIZE = 0x82A7;
        public static uint GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8;
        public static uint GL_IMAGE_PIXEL_FORMAT = 0x82A9;
        public static uint GL_IMAGE_PIXEL_TYPE = 0x82AA;
        public static uint GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
        public static uint GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
        public static uint GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
        public static uint GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
        public static uint GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
        public static uint GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
        public static uint GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3;
        public static uint GL_CLEAR_BUFFER = 0x82B4;
        public static uint GL_TEXTURE_VIEW = 0x82B5;
        public static uint GL_VIEW_COMPATIBILITY_CLASS = 0x82B6;
        public static uint GL_FULL_SUPPORT = 0x82B7;
        public static uint GL_CAVEAT_SUPPORT = 0x82B8;
        public static uint GL_IMAGE_CLASS_4_X_32 = 0x82B9;
        public static uint GL_IMAGE_CLASS_2_X_32 = 0x82BA;
        public static uint GL_IMAGE_CLASS_1_X_32 = 0x82BB;
        public static uint GL_IMAGE_CLASS_4_X_16 = 0x82BC;
        public static uint GL_IMAGE_CLASS_2_X_16 = 0x82BD;
        public static uint GL_IMAGE_CLASS_1_X_16 = 0x82BE;
        public static uint GL_IMAGE_CLASS_4_X_8 = 0x82BF;
        public static uint GL_IMAGE_CLASS_2_X_8 = 0x82C0;
        public static uint GL_IMAGE_CLASS_1_X_8 = 0x82C1;
        public static uint GL_IMAGE_CLASS_11_11_10 = 0x82C2;
        public static uint GL_IMAGE_CLASS_10_10_10_2 = 0x82C3;
        public static uint GL_VIEW_CLASS_128_BITS = 0x82C4;
        public static uint GL_VIEW_CLASS_96_BITS = 0x82C5;
        public static uint GL_VIEW_CLASS_64_BITS = 0x82C6;
        public static uint GL_VIEW_CLASS_48_BITS = 0x82C7;
        public static uint GL_VIEW_CLASS_32_BITS = 0x82C8;
        public static uint GL_VIEW_CLASS_24_BITS = 0x82C9;
        public static uint GL_VIEW_CLASS_16_BITS = 0x82CA;
        public static uint GL_VIEW_CLASS_8_BITS = 0x82CB;
        public static uint GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC;
        public static uint GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD;
        public static uint GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE;
        public static uint GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF;
        public static uint GL_VIEW_CLASS_RGTC1_RED = 0x82D0;
        public static uint GL_VIEW_CLASS_RGTC2_RG = 0x82D1;
        public static uint GL_VIEW_CLASS_BPTC_UNORM = 0x82D2;
        public static uint GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3;
        public static uint GL_UNIFORM = 0x92E1;
        public static uint GL_UNIFORM_BLOCK = 0x92E2;
        public static uint GL_PROGRAM_INPUT = 0x92E3;
        public static uint GL_PROGRAM_OUTPUT = 0x92E4;
        public static uint GL_BUFFER_VARIABLE = 0x92E5;
        public static uint GL_SHADER_STORAGE_BLOCK = 0x92E6;
        public static uint GL_VERTEX_SUBROUTINE = 0x92E8;
        public static uint GL_TESS_CONTROL_SUBROUTINE = 0x92E9;
        public static uint GL_TESS_EVALUATION_SUBROUTINE = 0x92EA;
        public static uint GL_GEOMETRY_SUBROUTINE = 0x92EB;
        public static uint GL_FRAGMENT_SUBROUTINE = 0x92EC;
        public static uint GL_COMPUTE_SUBROUTINE = 0x92ED;
        public static uint GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE;
        public static uint GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
        public static uint GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
        public static uint GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1;
        public static uint GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2;
        public static uint GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3;
        public static uint GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4;
        public static uint GL_ACTIVE_RESOURCES = 0x92F5;
        public static uint GL_MAX_NAME_LENGTH = 0x92F6;
        public static uint GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
        public static uint GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
        public static uint GL_NAME_LENGTH = 0x92F9;
        public static uint GL_TYPE = 0x92FA;
        public static uint GL_ARRAY_SIZE = 0x92FB;
        public static uint GL_OFFSET = 0x92FC;
        public static uint GL_BLOCK_INDEX = 0x92FD;
        public static uint GL_ARRAY_STRIDE = 0x92FE;
        public static uint GL_MATRIX_STRIDE = 0x92FF;
        public static uint GL_IS_ROW_MAJOR = 0x9300;
        public static uint GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
        public static uint GL_BUFFER_BINDING = 0x9302;
        public static uint GL_BUFFER_DATA_SIZE = 0x9303;
        public static uint GL_NUM_ACTIVE_VARIABLES = 0x9304;
        public static uint GL_ACTIVE_VARIABLES = 0x9305;
        public static uint GL_REFERENCED_BY_VERTEX_SHADER = 0x9306;
        public static uint GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
        public static uint GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
        public static uint GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
        public static uint GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
        public static uint GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B;
        public static uint GL_TOP_LEVEL_ARRAY_SIZE = 0x930C;
        public static uint GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D;
        public static uint GL_LOCATION = 0x930E;
        public static uint GL_LOCATION_INDEX = 0x930F;
        public static uint GL_IS_PER_PATCH = 0x92E7;
        public static uint GL_SHADER_STORAGE_BUFFER = 0x90D2;
        public static uint GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
        public static uint GL_SHADER_STORAGE_BUFFER_START = 0x90D4;
        public static uint GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
        public static uint GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
        public static uint GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
        public static uint GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
        public static uint GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
        public static uint GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
        public static uint GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
        public static uint GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
        public static uint GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
        public static uint GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
        public static uint GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
        public static uint GL_SHADER_STORAGE_BARRIER_BIT = 0x00002000;
        public static uint GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
        public static uint GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
        public static uint GL_TEXTURE_BUFFER_OFFSET = 0x919D;
        public static uint GL_TEXTURE_BUFFER_SIZE = 0x919E;
        public static uint GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
        public static uint GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB;
        public static uint GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC;
        public static uint GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD;
        public static uint GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE;
        public static uint GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
        public static uint GL_VERTEX_ATTRIB_BINDING = 0x82D4;
        public static uint GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
        public static uint GL_VERTEX_BINDING_DIVISOR = 0x82D6;
        public static uint GL_VERTEX_BINDING_OFFSET = 0x82D7;
        public static uint GL_VERTEX_BINDING_STRIDE = 0x82D8;
        public static uint GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
        public static uint GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;
        public static uint GL_DISPLAY_LIST = 0x82E7;
        #endregion

        #region Commands
        public static void glCullFace(uint mode)
        {
            GLInterop.glCullFacePtr(mode);
        }
        public static void glFrontFace(uint mode)
        {
            GLInterop.glFrontFacePtr(mode);
        }
        public static void glHint(uint target, uint mode)
        {
            GLInterop.glHintPtr(target, mode);
        }
        public static void glLineWidth(float width)
        {
            GLInterop.glLineWidthPtr(width);
        }
        public static void glPointSize(float size)
        {
            GLInterop.glPointSizePtr(size);
        }
        public static void glPolygonMode(uint face, uint mode)
        {
            GLInterop.glPolygonModePtr(face, mode);
        }
        public static void glScissor(int x, int y, int width, int height)
        {
            GLInterop.glScissorPtr(x, y, width, height);
        }
        public static void glTexParameterf(uint target, uint pname, float param)
        {
            GLInterop.glTexParameterfPtr(target, pname, param);
        }
        public static void glTexParameterfv(uint target, uint pname, IntPtr @params)
        {
            GLInterop.glTexParameterfvPtr(target, pname, @params);
        }
        public static void glTexParameteri(uint target, uint pname, int param)
        {
            GLInterop.glTexParameteriPtr(target, pname, param);
        }
        public static void glTexParameteriv(uint target, uint pname, IntPtr @params)
        {
            GLInterop.glTexParameterivPtr(target, pname, @params);
        }
        public static void glTexImage1D(uint target, int level, int internalformat, int width, int border, uint format, uint type, IntPtr pixels)
        {
            GLInterop.glTexImage1DPtr(target, level, internalformat, width, border, format, type, pixels);
        }
        public static void glTexImage2D(uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, IntPtr pixels)
        {
            GLInterop.glTexImage2DPtr(target, level, internalformat, width, height, border, format, type, pixels);
        }
        public static void glDrawBuffer(uint mode)
        {
            GLInterop.glDrawBufferPtr(mode);
        }
        public static void glClear(uint mask)
        {
            GLInterop.glClearPtr(mask);
        }
        public static void glClearColor(float red, float green, float blue, float alpha)
        {
            GLInterop.glClearColorPtr(red, green, blue, alpha);
        }
        public static void glClearStencil(int s)
        {
            GLInterop.glClearStencilPtr(s);
        }
        public static void glClearDepth(double depth)
        {
            GLInterop.glClearDepthPtr(depth);
        }
        public static void glStencilMask(uint mask)
        {
            GLInterop.glStencilMaskPtr(mask);
        }
        public static void glColorMask(bool red, bool green, bool blue, bool alpha)
        {
            GLInterop.glColorMaskPtr(red, green, blue, alpha);
        }
        public static void glDepthMask(bool flag)
        {
            GLInterop.glDepthMaskPtr(flag);
        }
        public static void glDisable(uint cap)
        {
            GLInterop.glDisablePtr(cap);
        }
        public static void glEnable(uint cap)
        {
            GLInterop.glEnablePtr(cap);
        }
        public static void glFinish()
        {
            GLInterop.glFinishPtr();
        }
        public static void glFlush()
        {
            GLInterop.glFlushPtr();
        }
        public static void glBlendFunc(uint sfactor, uint dfactor)
        {
            GLInterop.glBlendFuncPtr(sfactor, dfactor);
        }
        public static void glLogicOp(uint opcode)
        {
            GLInterop.glLogicOpPtr(opcode);
        }
        public static void glStencilFunc(uint func, int @ref, uint mask)
        {
            GLInterop.glStencilFuncPtr(func, @ref, mask);
        }
        public static void glStencilOp(uint fail, uint zfail, uint zpass)
        {
            GLInterop.glStencilOpPtr(fail, zfail, zpass);
        }
        public static void glDepthFunc(uint func)
        {
            GLInterop.glDepthFuncPtr(func);
        }
        public static void glPixelStoref(uint pname, float param)
        {
            GLInterop.glPixelStorefPtr(pname, param);
        }
        public static void glPixelStorei(uint pname, int param)
        {
            GLInterop.glPixelStoreiPtr(pname, param);
        }
        public static void glReadBuffer(uint mode)
        {
            GLInterop.glReadBufferPtr(mode);
        }
        public static void glReadPixels(int x, int y, int width, int height, uint format, uint type, IntPtr pixels)
        {
            GLInterop.glReadPixelsPtr(x, y, width, height, format, type, pixels);
        }
        public static void glGetBooleanv(uint pname, IntPtr data)
        {
            GLInterop.glGetBooleanvPtr(pname, data);
        }
        public static void glGetDoublev(uint pname, IntPtr data)
        {
            GLInterop.glGetDoublevPtr(pname, data);
        }
        public static uint glGetError()
        {
            return GLInterop.glGetErrorPtr();
        }
        public static void glGetFloatv(uint pname, IntPtr data)
        {
            GLInterop.glGetFloatvPtr(pname, data);
        }
        public static void glGetIntegerv(uint pname, IntPtr data)
        {
            GLInterop.glGetIntegervPtr(pname, data);
        }
        public static IntPtr glGetString(uint name)
        {
            return GLInterop.glGetStringPtr(name);
        }
        public static void glGetTexImage(uint target, int level, uint format, uint type, IntPtr pixels)
        {
            GLInterop.glGetTexImagePtr(target, level, format, type, pixels);
        }
        public static void glGetTexParameterfv(uint target, uint pname, IntPtr @params)
        {
            GLInterop.glGetTexParameterfvPtr(target, pname, @params);
        }
        public static void glGetTexParameteriv(uint target, uint pname, IntPtr @params)
        {
            GLInterop.glGetTexParameterivPtr(target, pname, @params);
        }
        public static void glGetTexLevelParameterfv(uint target, int level, uint pname, IntPtr @params)
        {
            GLInterop.glGetTexLevelParameterfvPtr(target, level, pname, @params);
        }
        public static void glGetTexLevelParameteriv(uint target, int level, uint pname, IntPtr @params)
        {
            GLInterop.glGetTexLevelParameterivPtr(target, level, pname, @params);
        }
        public static bool glIsEnabled(uint cap)
        {
            return GLInterop.glIsEnabledPtr(cap);
        }
        public static void glDepthRange(double near, double far)
        {
            GLInterop.glDepthRangePtr(near, far);
        }
        public static void glViewport(int x, int y, int width, int height)
        {
            GLInterop.glViewportPtr(x, y, width, height);
        }
        public static void glNewList(uint list, uint mode)
        {
            GLInterop.glNewListPtr(list, mode);
        }
        public static void glEndList()
        {
            GLInterop.glEndListPtr();
        }
        public static void glCallList(uint list)
        {
            GLInterop.glCallListPtr(list);
        }
        public static void glCallLists(int n, uint type, IntPtr lists)
        {
            GLInterop.glCallListsPtr(n, type, lists);
        }
        public static void glDeleteLists(uint list, int range)
        {
            GLInterop.glDeleteListsPtr(list, range);
        }
        public static uint glGenLists(int range)
        {
            return GLInterop.glGenListsPtr(range);
        }
        public static void glListBase(uint @base)
        {
            GLInterop.glListBasePtr(@base);
        }
        public static void glBegin(uint mode)
        {
            GLInterop.glBeginPtr(mode);
        }
        public static void glBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, IntPtr bitmap)
        {
            GLInterop.glBitmapPtr(width, height, xorig, yorig, xmove, ymove, bitmap);
        }
        public static void glColor3b(sbyte red, sbyte green, sbyte blue)
        {
            GLInterop.glColor3bPtr(red, green, blue);
        }
        public static void glColor3bv(IntPtr v)
        {
            GLInterop.glColor3bvPtr(v);
        }
        public static void glColor3d(double red, double green, double blue)
        {
            GLInterop.glColor3dPtr(red, green, blue);
        }
        public static void glColor3dv(IntPtr v)
        {
            GLInterop.glColor3dvPtr(v);
        }
        public static void glColor3f(float red, float green, float blue)
        {
            GLInterop.glColor3fPtr(red, green, blue);
        }
        public static void glColor3fv(IntPtr v)
        {
            GLInterop.glColor3fvPtr(v);
        }
        public static void glColor3i(int red, int green, int blue)
        {
            GLInterop.glColor3iPtr(red, green, blue);
        }
        public static void glColor3iv(IntPtr v)
        {
            GLInterop.glColor3ivPtr(v);
        }
        public static void glColor3s(short red, short green, short blue)
        {
            GLInterop.glColor3sPtr(red, green, blue);
        }
        public static void glColor3sv(IntPtr v)
        {
            GLInterop.glColor3svPtr(v);
        }
        public static void glColor3ub(byte red, byte green, byte blue)
        {
            GLInterop.glColor3ubPtr(red, green, blue);
        }
        public static void glColor3ubv(IntPtr v)
        {
            GLInterop.glColor3ubvPtr(v);
        }
        public static void glColor3ui(uint red, uint green, uint blue)
        {
            GLInterop.glColor3uiPtr(red, green, blue);
        }
        public static void glColor3uiv(IntPtr v)
        {
            GLInterop.glColor3uivPtr(v);
        }
        public static void glColor3us(ushort red, ushort green, ushort blue)
        {
            GLInterop.glColor3usPtr(red, green, blue);
        }
        public static void glColor3usv(IntPtr v)
        {
            GLInterop.glColor3usvPtr(v);
        }
        public static void glColor4b(sbyte red, sbyte green, sbyte blue, sbyte alpha)
        {
            GLInterop.glColor4bPtr(red, green, blue, alpha);
        }
        public static void glColor4bv(IntPtr v)
        {
            GLInterop.glColor4bvPtr(v);
        }
        public static void glColor4d(double red, double green, double blue, double alpha)
        {
            GLInterop.glColor4dPtr(red, green, blue, alpha);
        }
        public static void glColor4dv(IntPtr v)
        {
            GLInterop.glColor4dvPtr(v);
        }
        public static void glColor4f(float red, float green, float blue, float alpha)
        {
            GLInterop.glColor4fPtr(red, green, blue, alpha);
        }
        public static void glColor4fv(IntPtr v)
        {
            GLInterop.glColor4fvPtr(v);
        }
        public static void glColor4i(int red, int green, int blue, int alpha)
        {
            GLInterop.glColor4iPtr(red, green, blue, alpha);
        }
        public static void glColor4iv(IntPtr v)
        {
            GLInterop.glColor4ivPtr(v);
        }
        public static void glColor4s(short red, short green, short blue, short alpha)
        {
            GLInterop.glColor4sPtr(red, green, blue, alpha);
        }
        public static void glColor4sv(IntPtr v)
        {
            GLInterop.glColor4svPtr(v);
        }
        public static void glColor4ub(byte red, byte green, byte blue, byte alpha)
        {
            GLInterop.glColor4ubPtr(red, green, blue, alpha);
        }
        public static void glColor4ubv(IntPtr v)
        {
            GLInterop.glColor4ubvPtr(v);
        }
        public static void glColor4ui(uint red, uint green, uint blue, uint alpha)
        {
            GLInterop.glColor4uiPtr(red, green, blue, alpha);
        }
        public static void glColor4uiv(IntPtr v)
        {
            GLInterop.glColor4uivPtr(v);
        }
        public static void glColor4us(ushort red, ushort green, ushort blue, ushort alpha)
        {
            GLInterop.glColor4usPtr(red, green, blue, alpha);
        }
        public static void glColor4usv(IntPtr v)
        {
            GLInterop.glColor4usvPtr(v);
        }
        public static void glEdgeFlag(bool flag)
        {
            GLInterop.glEdgeFlagPtr(flag);
        }
        public static void glEdgeFlagv(IntPtr flag)
        {
            GLInterop.glEdgeFlagvPtr(flag);
        }
        public static void glEnd()
        {
            GLInterop.glEndPtr();
        }
        public static void glIndexd(double c)
        {
            GLInterop.glIndexdPtr(c);
        }
        public static void glIndexdv(IntPtr c)
        {
            GLInterop.glIndexdvPtr(c);
        }
        public static void glIndexf(float c)
        {
            GLInterop.glIndexfPtr(c);
        }
        public static void glIndexfv(IntPtr c)
        {
            GLInterop.glIndexfvPtr(c);
        }
        public static void glIndexi(int c)
        {
            GLInterop.glIndexiPtr(c);
        }
        public static void glIndexiv(IntPtr c)
        {
            GLInterop.glIndexivPtr(c);
        }
        public static void glIndexs(short c)
        {
            GLInterop.glIndexsPtr(c);
        }
        public static void glIndexsv(IntPtr c)
        {
            GLInterop.glIndexsvPtr(c);
        }
        public static void glNormal3b(sbyte nx, sbyte ny, sbyte nz)
        {
            GLInterop.glNormal3bPtr(nx, ny, nz);
        }
        public static void glNormal3bv(IntPtr v)
        {
            GLInterop.glNormal3bvPtr(v);
        }
        public static void glNormal3d(double nx, double ny, double nz)
        {
            GLInterop.glNormal3dPtr(nx, ny, nz);
        }
        public static void glNormal3dv(IntPtr v)
        {
            GLInterop.glNormal3dvPtr(v);
        }
        public static void glNormal3f(float nx, float ny, float nz)
        {
            GLInterop.glNormal3fPtr(nx, ny, nz);
        }
        public static void glNormal3fv(IntPtr v)
        {
            GLInterop.glNormal3fvPtr(v);
        }
        public static void glNormal3i(int nx, int ny, int nz)
        {
            GLInterop.glNormal3iPtr(nx, ny, nz);
        }
        public static void glNormal3iv(IntPtr v)
        {
            GLInterop.glNormal3ivPtr(v);
        }
        public static void glNormal3s(short nx, short ny, short nz)
        {
            GLInterop.glNormal3sPtr(nx, ny, nz);
        }
        public static void glNormal3sv(IntPtr v)
        {
            GLInterop.glNormal3svPtr(v);
        }
        public static void glRasterPos2d(double x, double y)
        {
            GLInterop.glRasterPos2dPtr(x, y);
        }
        public static void glRasterPos2dv(IntPtr v)
        {
            GLInterop.glRasterPos2dvPtr(v);
        }
        public static void glRasterPos2f(float x, float y)
        {
            GLInterop.glRasterPos2fPtr(x, y);
        }
        public static void glRasterPos2fv(IntPtr v)
        {
            GLInterop.glRasterPos2fvPtr(v);
        }
        public static void glRasterPos2i(int x, int y)
        {
            GLInterop.glRasterPos2iPtr(x, y);
        }
        public static void glRasterPos2iv(IntPtr v)
        {
            GLInterop.glRasterPos2ivPtr(v);
        }
        public static void glRasterPos2s(short x, short y)
        {
            GLInterop.glRasterPos2sPtr(x, y);
        }
        public static void glRasterPos2sv(IntPtr v)
        {
            GLInterop.glRasterPos2svPtr(v);
        }
        public static void glRasterPos3d(double x, double y, double z)
        {
            GLInterop.glRasterPos3dPtr(x, y, z);
        }
        public static void glRasterPos3dv(IntPtr v)
        {
            GLInterop.glRasterPos3dvPtr(v);
        }
        public static void glRasterPos3f(float x, float y, float z)
        {
            GLInterop.glRasterPos3fPtr(x, y, z);
        }
        public static void glRasterPos3fv(IntPtr v)
        {
            GLInterop.glRasterPos3fvPtr(v);
        }
        public static void glRasterPos3i(int x, int y, int z)
        {
            GLInterop.glRasterPos3iPtr(x, y, z);
        }
        public static void glRasterPos3iv(IntPtr v)
        {
            GLInterop.glRasterPos3ivPtr(v);
        }
        public static void glRasterPos3s(short x, short y, short z)
        {
            GLInterop.glRasterPos3sPtr(x, y, z);
        }
        public static void glRasterPos3sv(IntPtr v)
        {
            GLInterop.glRasterPos3svPtr(v);
        }
        public static void glRasterPos4d(double x, double y, double z, double w)
        {
            GLInterop.glRasterPos4dPtr(x, y, z, w);
        }
        public static void glRasterPos4dv(IntPtr v)
        {
            GLInterop.glRasterPos4dvPtr(v);
        }
        public static void glRasterPos4f(float x, float y, float z, float w)
        {
            GLInterop.glRasterPos4fPtr(x, y, z, w);
        }
        public static void glRasterPos4fv(IntPtr v)
        {
            GLInterop.glRasterPos4fvPtr(v);
        }
        public static void glRasterPos4i(int x, int y, int z, int w)
        {
            GLInterop.glRasterPos4iPtr(x, y, z, w);
        }
        public static void glRasterPos4iv(IntPtr v)
        {
            GLInterop.glRasterPos4ivPtr(v);
        }
        public static void glRasterPos4s(short x, short y, short z, short w)
        {
            GLInterop.glRasterPos4sPtr(x, y, z, w);
        }
        public static void glRasterPos4sv(IntPtr v)
        {
            GLInterop.glRasterPos4svPtr(v);
        }
        public static void glRectd(double x1, double y1, double x2, double y2)
        {
            GLInterop.glRectdPtr(x1, y1, x2, y2);
        }
        public static void glRectdv(IntPtr v1, IntPtr v2)
        {
            GLInterop.glRectdvPtr(v1, v2);
        }
        public static void glRectf(float x1, float y1, float x2, float y2)
        {
            GLInterop.glRectfPtr(x1, y1, x2, y2);
        }
        public static void glRectfv(IntPtr v1, IntPtr v2)
        {
            GLInterop.glRectfvPtr(v1, v2);
        }
        public static void glRecti(int x1, int y1, int x2, int y2)
        {
            GLInterop.glRectiPtr(x1, y1, x2, y2);
        }
        public static void glRectiv(IntPtr v1, IntPtr v2)
        {
            GLInterop.glRectivPtr(v1, v2);
        }
        public static void glRects(short x1, short y1, short x2, short y2)
        {
            GLInterop.glRectsPtr(x1, y1, x2, y2);
        }
        public static void glRectsv(IntPtr v1, IntPtr v2)
        {
            GLInterop.glRectsvPtr(v1, v2);
        }
        public static void glTexCoord1d(double s)
        {
            GLInterop.glTexCoord1dPtr(s);
        }
        public static void glTexCoord1dv(IntPtr v)
        {
            GLInterop.glTexCoord1dvPtr(v);
        }
        public static void glTexCoord1f(float s)
        {
            GLInterop.glTexCoord1fPtr(s);
        }
        public static void glTexCoord1fv(IntPtr v)
        {
            GLInterop.glTexCoord1fvPtr(v);
        }
        public static void glTexCoord1i(int s)
        {
            GLInterop.glTexCoord1iPtr(s);
        }
        public static void glTexCoord1iv(IntPtr v)
        {
            GLInterop.glTexCoord1ivPtr(v);
        }
        public static void glTexCoord1s(short s)
        {
            GLInterop.glTexCoord1sPtr(s);
        }
        public static void glTexCoord1sv(IntPtr v)
        {
            GLInterop.glTexCoord1svPtr(v);
        }
        public static void glTexCoord2d(double s, double t)
        {
            GLInterop.glTexCoord2dPtr(s, t);
        }
        public static void glTexCoord2dv(IntPtr v)
        {
            GLInterop.glTexCoord2dvPtr(v);
        }
        public static void glTexCoord2f(float s, float t)
        {
            GLInterop.glTexCoord2fPtr(s, t);
        }
        public static void glTexCoord2fv(IntPtr v)
        {
            GLInterop.glTexCoord2fvPtr(v);
        }
        public static void glTexCoord2i(int s, int t)
        {
            GLInterop.glTexCoord2iPtr(s, t);
        }
        public static void glTexCoord2iv(IntPtr v)
        {
            GLInterop.glTexCoord2ivPtr(v);
        }
        public static void glTexCoord2s(short s, short t)
        {
            GLInterop.glTexCoord2sPtr(s, t);
        }
        public static void glTexCoord2sv(IntPtr v)
        {
            GLInterop.glTexCoord2svPtr(v);
        }
        public static void glTexCoord3d(double s, double t, double r)
        {
            GLInterop.glTexCoord3dPtr(s, t, r);
        }
        public static void glTexCoord3dv(IntPtr v)
        {
            GLInterop.glTexCoord3dvPtr(v);
        }
        public static void glTexCoord3f(float s, float t, float r)
        {
            GLInterop.glTexCoord3fPtr(s, t, r);
        }
        public static void glTexCoord3fv(IntPtr v)
        {
            GLInterop.glTexCoord3fvPtr(v);
        }
        public static void glTexCoord3i(int s, int t, int r)
        {
            GLInterop.glTexCoord3iPtr(s, t, r);
        }
        public static void glTexCoord3iv(IntPtr v)
        {
            GLInterop.glTexCoord3ivPtr(v);
        }
        public static void glTexCoord3s(short s, short t, short r)
        {
            GLInterop.glTexCoord3sPtr(s, t, r);
        }
        public static void glTexCoord3sv(IntPtr v)
        {
            GLInterop.glTexCoord3svPtr(v);
        }
        public static void glTexCoord4d(double s, double t, double r, double q)
        {
            GLInterop.glTexCoord4dPtr(s, t, r, q);
        }
        public static void glTexCoord4dv(IntPtr v)
        {
            GLInterop.glTexCoord4dvPtr(v);
        }
        public static void glTexCoord4f(float s, float t, float r, float q)
        {
            GLInterop.glTexCoord4fPtr(s, t, r, q);
        }
        public static void glTexCoord4fv(IntPtr v)
        {
            GLInterop.glTexCoord4fvPtr(v);
        }
        public static void glTexCoord4i(int s, int t, int r, int q)
        {
            GLInterop.glTexCoord4iPtr(s, t, r, q);
        }
        public static void glTexCoord4iv(IntPtr v)
        {
            GLInterop.glTexCoord4ivPtr(v);
        }
        public static void glTexCoord4s(short s, short t, short r, short q)
        {
            GLInterop.glTexCoord4sPtr(s, t, r, q);
        }
        public static void glTexCoord4sv(IntPtr v)
        {
            GLInterop.glTexCoord4svPtr(v);
        }
        public static void glVertex2d(double x, double y)
        {
            GLInterop.glVertex2dPtr(x, y);
        }
        public static void glVertex2dv(IntPtr v)
        {
            GLInterop.glVertex2dvPtr(v);
        }
        public static void glVertex2f(float x, float y)
        {
            GLInterop.glVertex2fPtr(x, y);
        }
        public static void glVertex2fv(IntPtr v)
        {
            GLInterop.glVertex2fvPtr(v);
        }
        public static void glVertex2i(int x, int y)
        {
            GLInterop.glVertex2iPtr(x, y);
        }
        public static void glVertex2iv(IntPtr v)
        {
            GLInterop.glVertex2ivPtr(v);
        }
        public static void glVertex2s(short x, short y)
        {
            GLInterop.glVertex2sPtr(x, y);
        }
        public static void glVertex2sv(IntPtr v)
        {
            GLInterop.glVertex2svPtr(v);
        }
        public static void glVertex3d(double x, double y, double z)
        {
            GLInterop.glVertex3dPtr(x, y, z);
        }
        public static void glVertex3dv(IntPtr v)
        {
            GLInterop.glVertex3dvPtr(v);
        }
        public static void glVertex3f(float x, float y, float z)
        {
            GLInterop.glVertex3fPtr(x, y, z);
        }
        public static void glVertex3fv(IntPtr v)
        {
            GLInterop.glVertex3fvPtr(v);
        }
        public static void glVertex3i(int x, int y, int z)
        {
            GLInterop.glVertex3iPtr(x, y, z);
        }
        public static void glVertex3iv(IntPtr v)
        {
            GLInterop.glVertex3ivPtr(v);
        }
        public static void glVertex3s(short x, short y, short z)
        {
            GLInterop.glVertex3sPtr(x, y, z);
        }
        public static void glVertex3sv(IntPtr v)
        {
            GLInterop.glVertex3svPtr(v);
        }
        public static void glVertex4d(double x, double y, double z, double w)
        {
            GLInterop.glVertex4dPtr(x, y, z, w);
        }
        public static void glVertex4dv(IntPtr v)
        {
            GLInterop.glVertex4dvPtr(v);
        }
        public static void glVertex4f(float x, float y, float z, float w)
        {
            GLInterop.glVertex4fPtr(x, y, z, w);
        }
        public static void glVertex4fv(IntPtr v)
        {
            GLInterop.glVertex4fvPtr(v);
        }
        public static void glVertex4i(int x, int y, int z, int w)
        {
            GLInterop.glVertex4iPtr(x, y, z, w);
        }
        public static void glVertex4iv(IntPtr v)
        {
            GLInterop.glVertex4ivPtr(v);
        }
        public static void glVertex4s(short x, short y, short z, short w)
        {
            GLInterop.glVertex4sPtr(x, y, z, w);
        }
        public static void glVertex4sv(IntPtr v)
        {
            GLInterop.glVertex4svPtr(v);
        }
        public static void glClipPlane(uint plane, IntPtr equation)
        {
            GLInterop.glClipPlanePtr(plane, equation);
        }
        public static void glColorMaterial(uint face, uint mode)
        {
            GLInterop.glColorMaterialPtr(face, mode);
        }
        public static void glFogf(uint pname, float param)
        {
            GLInterop.glFogfPtr(pname, param);
        }
        public static void glFogfv(uint pname, IntPtr @params)
        {
            GLInterop.glFogfvPtr(pname, @params);
        }
        public static void glFogi(uint pname, int param)
        {
            GLInterop.glFogiPtr(pname, param);
        }
        public static void glFogiv(uint pname, IntPtr @params)
        {
            GLInterop.glFogivPtr(pname, @params);
        }
        public static void glLightf(uint light, uint pname, float param)
        {
            GLInterop.glLightfPtr(light, pname, param);
        }
        public static void glLightfv(uint light, uint pname, IntPtr @params)
        {
            GLInterop.glLightfvPtr(light, pname, @params);
        }
        public static void glLighti(uint light, uint pname, int param)
        {
            GLInterop.glLightiPtr(light, pname, param);
        }
        public static void glLightiv(uint light, uint pname, IntPtr @params)
        {
            GLInterop.glLightivPtr(light, pname, @params);
        }
        public static void glLightModelf(uint pname, float param)
        {
            GLInterop.glLightModelfPtr(pname, param);
        }
        public static void glLightModelfv(uint pname, IntPtr @params)
        {
            GLInterop.glLightModelfvPtr(pname, @params);
        }
        public static void glLightModeli(uint pname, int param)
        {
            GLInterop.glLightModeliPtr(pname, param);
        }
        public static void glLightModeliv(uint pname, IntPtr @params)
        {
            GLInterop.glLightModelivPtr(pname, @params);
        }
        public static void glLineStipple(int factor, ushort pattern)
        {
            GLInterop.glLineStipplePtr(factor, pattern);
        }
        public static void glMaterialf(uint face, uint pname, float param)
        {
            GLInterop.glMaterialfPtr(face, pname, param);
        }
        public static void glMaterialfv(uint face, uint pname, IntPtr @params)
        {
            GLInterop.glMaterialfvPtr(face, pname, @params);
        }
        public static void glMateriali(uint face, uint pname, int param)
        {
            GLInterop.glMaterialiPtr(face, pname, param);
        }
        public static void glMaterialiv(uint face, uint pname, IntPtr @params)
        {
            GLInterop.glMaterialivPtr(face, pname, @params);
        }
        public static void glPolygonStipple(IntPtr mask)
        {
            GLInterop.glPolygonStipplePtr(mask);
        }
        public static void glShadeModel(uint mode)
        {
            GLInterop.glShadeModelPtr(mode);
        }
        public static void glTexEnvf(uint target, uint pname, float param)
        {
            GLInterop.glTexEnvfPtr(target, pname, param);
        }
        public static void glTexEnvfv(uint target, uint pname, IntPtr @params)
        {
            GLInterop.glTexEnvfvPtr(target, pname, @params);
        }
        public static void glTexEnvi(uint target, uint pname, int param)
        {
            GLInterop.glTexEnviPtr(target, pname, param);
        }
        public static void glTexEnviv(uint target, uint pname, IntPtr @params)
        {
            GLInterop.glTexEnvivPtr(target, pname, @params);
        }
        public static void glTexGend(uint coord, uint pname, double param)
        {
            GLInterop.glTexGendPtr(coord, pname, param);
        }
        public static void glTexGendv(uint coord, uint pname, IntPtr @params)
        {
            GLInterop.glTexGendvPtr(coord, pname, @params);
        }
        public static void glTexGenf(uint coord, uint pname, float param)
        {
            GLInterop.glTexGenfPtr(coord, pname, param);
        }
        public static void glTexGenfv(uint coord, uint pname, IntPtr @params)
        {
            GLInterop.glTexGenfvPtr(coord, pname, @params);
        }
        public static void glTexGeni(uint coord, uint pname, int param)
        {
            GLInterop.glTexGeniPtr(coord, pname, param);
        }
        public static void glTexGeniv(uint coord, uint pname, IntPtr @params)
        {
            GLInterop.glTexGenivPtr(coord, pname, @params);
        }
        public static void glFeedbackBuffer(int size, uint type, IntPtr buffer)
        {
            GLInterop.glFeedbackBufferPtr(size, type, buffer);
        }
        public static void glSelectBuffer(int size, IntPtr buffer)
        {
            GLInterop.glSelectBufferPtr(size, buffer);
        }
        public static int glRenderMode(uint mode)
        {
            return GLInterop.glRenderModePtr(mode);
        }
        public static void glInitNames()
        {
            GLInterop.glInitNamesPtr();
        }
        public static void glLoadName(uint name)
        {
            GLInterop.glLoadNamePtr(name);
        }
        public static void glPassThrough(float token)
        {
            GLInterop.glPassThroughPtr(token);
        }
        public static void glPopName()
        {
            GLInterop.glPopNamePtr();
        }
        public static void glPushName(uint name)
        {
            GLInterop.glPushNamePtr(name);
        }
        public static void glClearAccum(float red, float green, float blue, float alpha)
        {
            GLInterop.glClearAccumPtr(red, green, blue, alpha);
        }
        public static void glClearIndex(float c)
        {
            GLInterop.glClearIndexPtr(c);
        }
        public static void glIndexMask(uint mask)
        {
            GLInterop.glIndexMaskPtr(mask);
        }
        public static void glAccum(uint op, float value)
        {
            GLInterop.glAccumPtr(op, value);
        }
        public static void glPopAttrib()
        {
            GLInterop.glPopAttribPtr();
        }
        public static void glPushAttrib(uint mask)
        {
            GLInterop.glPushAttribPtr(mask);
        }
        public static void glMap1d(uint target, double u1, double u2, int stride, int order, IntPtr points)
        {
            GLInterop.glMap1dPtr(target, u1, u2, stride, order, points);
        }
        public static void glMap1f(uint target, float u1, float u2, int stride, int order, IntPtr points)
        {
            GLInterop.glMap1fPtr(target, u1, u2, stride, order, points);
        }
        public static void glMap2d(uint target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, IntPtr points)
        {
            GLInterop.glMap2dPtr(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        public static void glMap2f(uint target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, IntPtr points)
        {
            GLInterop.glMap2fPtr(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        public static void glMapGrid1d(int un, double u1, double u2)
        {
            GLInterop.glMapGrid1dPtr(un, u1, u2);
        }
        public static void glMapGrid1f(int un, float u1, float u2)
        {
            GLInterop.glMapGrid1fPtr(un, u1, u2);
        }
        public static void glMapGrid2d(int un, double u1, double u2, int vn, double v1, double v2)
        {
            GLInterop.glMapGrid2dPtr(un, u1, u2, vn, v1, v2);
        }
        public static void glMapGrid2f(int un, float u1, float u2, int vn, float v1, float v2)
        {
            GLInterop.glMapGrid2fPtr(un, u1, u2, vn, v1, v2);
        }
        public static void glEvalCoord1d(double u)
        {
            GLInterop.glEvalCoord1dPtr(u);
        }
        public static void glEvalCoord1dv(IntPtr u)
        {
            GLInterop.glEvalCoord1dvPtr(u);
        }
        public static void glEvalCoord1f(float u)
        {
            GLInterop.glEvalCoord1fPtr(u);
        }
        public static void glEvalCoord1fv(IntPtr u)
        {
            GLInterop.glEvalCoord1fvPtr(u);
        }
        public static void glEvalCoord2d(double u, double v)
        {
            GLInterop.glEvalCoord2dPtr(u, v);
        }
        public static void glEvalCoord2dv(IntPtr u)
        {
            GLInterop.glEvalCoord2dvPtr(u);
        }
        public static void glEvalCoord2f(float u, float v)
        {
            GLInterop.glEvalCoord2fPtr(u, v);
        }
        public static void glEvalCoord2fv(IntPtr u)
        {
            GLInterop.glEvalCoord2fvPtr(u);
        }
        public static void glEvalMesh1(uint mode, int i1, int i2)
        {
            GLInterop.glEvalMesh1Ptr(mode, i1, i2);
        }
        public static void glEvalPoint1(int i)
        {
            GLInterop.glEvalPoint1Ptr(i);
        }
        public static void glEvalMesh2(uint mode, int i1, int i2, int j1, int j2)
        {
            GLInterop.glEvalMesh2Ptr(mode, i1, i2, j1, j2);
        }
        public static void glEvalPoint2(int i, int j)
        {
            GLInterop.glEvalPoint2Ptr(i, j);
        }
        public static void glAlphaFunc(uint func, float @ref)
        {
            GLInterop.glAlphaFuncPtr(func, @ref);
        }
        public static void glPixelZoom(float xfactor, float yfactor)
        {
            GLInterop.glPixelZoomPtr(xfactor, yfactor);
        }
        public static void glPixelTransferf(uint pname, float param)
        {
            GLInterop.glPixelTransferfPtr(pname, param);
        }
        public static void glPixelTransferi(uint pname, int param)
        {
            GLInterop.glPixelTransferiPtr(pname, param);
        }
        public static void glPixelMapfv(uint map, int mapsize, IntPtr values)
        {
            GLInterop.glPixelMapfvPtr(map, mapsize, values);
        }
        public static void glPixelMapuiv(uint map, int mapsize, IntPtr values)
        {
            GLInterop.glPixelMapuivPtr(map, mapsize, values);
        }
        public static void glPixelMapusv(uint map, int mapsize, IntPtr values)
        {
            GLInterop.glPixelMapusvPtr(map, mapsize, values);
        }
        public static void glCopyPixels(int x, int y, int width, int height, uint type)
        {
            GLInterop.glCopyPixelsPtr(x, y, width, height, type);
        }
        public static void glDrawPixels(int width, int height, uint format, uint type, IntPtr pixels)
        {
            GLInterop.glDrawPixelsPtr(width, height, format, type, pixels);
        }
        public static void glGetClipPlane(uint plane, IntPtr equation)
        {
            GLInterop.glGetClipPlanePtr(plane, equation);
        }
        public static void glGetLightfv(uint light, uint pname, IntPtr @params)
        {
            GLInterop.glGetLightfvPtr(light, pname, @params);
        }
        public static void glGetLightiv(uint light, uint pname, IntPtr @params)
        {
            GLInterop.glGetLightivPtr(light, pname, @params);
        }
        public static void glGetMapdv(uint target, uint query, IntPtr v)
        {
            GLInterop.glGetMapdvPtr(target, query, v);
        }
        public static void glGetMapfv(uint target, uint query, IntPtr v)
        {
            GLInterop.glGetMapfvPtr(target, query, v);
        }
        public static void glGetMapiv(uint target, uint query, IntPtr v)
        {
            GLInterop.glGetMapivPtr(target, query, v);
        }
        public static void glGetMaterialfv(uint face, uint pname, IntPtr @params)
        {
            GLInterop.glGetMaterialfvPtr(face, pname, @params);
        }
        public static void glGetMaterialiv(uint face, uint pname, IntPtr @params)
        {
            GLInterop.glGetMaterialivPtr(face, pname, @params);
        }
        public static void glGetPixelMapfv(uint map, IntPtr values)
        {
            GLInterop.glGetPixelMapfvPtr(map, values);
        }
        public static void glGetPixelMapuiv(uint map, IntPtr values)
        {
            GLInterop.glGetPixelMapuivPtr(map, values);
        }
        public static void glGetPixelMapusv(uint map, IntPtr values)
        {
            GLInterop.glGetPixelMapusvPtr(map, values);
        }
        public static void glGetPolygonStipple(IntPtr mask)
        {
            GLInterop.glGetPolygonStipplePtr(mask);
        }
        public static void glGetTexEnvfv(uint target, uint pname, IntPtr @params)
        {
            GLInterop.glGetTexEnvfvPtr(target, pname, @params);
        }
        public static void glGetTexEnviv(uint target, uint pname, IntPtr @params)
        {
            GLInterop.glGetTexEnvivPtr(target, pname, @params);
        }
        public static void glGetTexGendv(uint coord, uint pname, IntPtr @params)
        {
            GLInterop.glGetTexGendvPtr(coord, pname, @params);
        }
        public static void glGetTexGenfv(uint coord, uint pname, IntPtr @params)
        {
            GLInterop.glGetTexGenfvPtr(coord, pname, @params);
        }
        public static void glGetTexGeniv(uint coord, uint pname, IntPtr @params)
        {
            GLInterop.glGetTexGenivPtr(coord, pname, @params);
        }
        public static bool glIsList(uint list)
        {
            return GLInterop.glIsListPtr(list);
        }
        public static void glFrustum(double left, double right, double bottom, double top, double zNear, double zFar)
        {
            GLInterop.glFrustumPtr(left, right, bottom, top, zNear, zFar);
        }
        public static void glLoadIdentity()
        {
            GLInterop.glLoadIdentityPtr();
        }
        public static void glLoadMatrixf(IntPtr m)
        {
            GLInterop.glLoadMatrixfPtr(m);
        }
        public static void glLoadMatrixd(IntPtr m)
        {
            GLInterop.glLoadMatrixdPtr(m);
        }
        public static void glMatrixMode(uint mode)
        {
            GLInterop.glMatrixModePtr(mode);
        }
        public static void glMultMatrixf(IntPtr m)
        {
            GLInterop.glMultMatrixfPtr(m);
        }
        public static void glMultMatrixd(IntPtr m)
        {
            GLInterop.glMultMatrixdPtr(m);
        }
        public static void glOrtho(double left, double right, double bottom, double top, double zNear, double zFar)
        {
            GLInterop.glOrthoPtr(left, right, bottom, top, zNear, zFar);
        }
        public static void glPopMatrix()
        {
            GLInterop.glPopMatrixPtr();
        }
        public static void glPushMatrix()
        {
            GLInterop.glPushMatrixPtr();
        }
        public static void glRotated(double angle, double x, double y, double z)
        {
            GLInterop.glRotatedPtr(angle, x, y, z);
        }
        public static void glRotatef(float angle, float x, float y, float z)
        {
            GLInterop.glRotatefPtr(angle, x, y, z);
        }
        public static void glScaled(double x, double y, double z)
        {
            GLInterop.glScaledPtr(x, y, z);
        }
        public static void glScalef(float x, float y, float z)
        {
            GLInterop.glScalefPtr(x, y, z);
        }
        public static void glTranslated(double x, double y, double z)
        {
            GLInterop.glTranslatedPtr(x, y, z);
        }
        public static void glTranslatef(float x, float y, float z)
        {
            GLInterop.glTranslatefPtr(x, y, z);
        }
        public static void glDrawArrays(uint mode, int first, int count)
        {
            GLInterop.glDrawArraysPtr(mode, first, count);
        }
        public static void glDrawElements(uint mode, int count, uint type, IntPtr indices)
        {
            GLInterop.glDrawElementsPtr(mode, count, type, indices);
        }
        public static void glGetPointerv(uint pname, IntPtr @params)
        {
            GLInterop.glGetPointervPtr(pname, @params);
        }
        public static void glPolygonOffset(float factor, float units)
        {
            GLInterop.glPolygonOffsetPtr(factor, units);
        }
        public static void glCopyTexImage1D(uint target, int level, uint internalformat, int x, int y, int width, int border)
        {
            GLInterop.glCopyTexImage1DPtr(target, level, internalformat, x, y, width, border);
        }
        public static void glCopyTexImage2D(uint target, int level, uint internalformat, int x, int y, int width, int height, int border)
        {
            GLInterop.glCopyTexImage2DPtr(target, level, internalformat, x, y, width, height, border);
        }
        public static void glCopyTexSubImage1D(uint target, int level, int xoffset, int x, int y, int width)
        {
            GLInterop.glCopyTexSubImage1DPtr(target, level, xoffset, x, y, width);
        }
        public static void glCopyTexSubImage2D(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            GLInterop.glCopyTexSubImage2DPtr(target, level, xoffset, yoffset, x, y, width, height);
        }
        public static void glTexSubImage1D(uint target, int level, int xoffset, int width, uint format, uint type, IntPtr pixels)
        {
            GLInterop.glTexSubImage1DPtr(target, level, xoffset, width, format, type, pixels);
        }
        public static void glTexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, IntPtr pixels)
        {
            GLInterop.glTexSubImage2DPtr(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }
        public static void glBindTexture(uint target, uint texture)
        {
            GLInterop.glBindTexturePtr(target, texture);
        }
        public static void glDeleteTextures(int n, IntPtr textures)
        {
            GLInterop.glDeleteTexturesPtr(n, textures);
        }
        public static void glGenTextures(int n, IntPtr textures)
        {
            GLInterop.glGenTexturesPtr(n, textures);
        }
        public static bool glIsTexture(uint texture)
        {
            return GLInterop.glIsTexturePtr(texture);
        }
        public static void glArrayElement(int i)
        {
            GLInterop.glArrayElementPtr(i);
        }
        public static void glColorPointer(int size, uint type, int stride, IntPtr pointer)
        {
            GLInterop.glColorPointerPtr(size, type, stride, pointer);
        }
        public static void glDisableClientState(uint array)
        {
            GLInterop.glDisableClientStatePtr(array);
        }
        public static void glEdgeFlagPointer(int stride, IntPtr pointer)
        {
            GLInterop.glEdgeFlagPointerPtr(stride, pointer);
        }
        public static void glEnableClientState(uint array)
        {
            GLInterop.glEnableClientStatePtr(array);
        }
        public static void glIndexPointer(uint type, int stride, IntPtr pointer)
        {
            GLInterop.glIndexPointerPtr(type, stride, pointer);
        }
        public static void glInterleavedArrays(uint format, int stride, IntPtr pointer)
        {
            GLInterop.glInterleavedArraysPtr(format, stride, pointer);
        }
        public static void glNormalPointer(uint type, int stride, IntPtr pointer)
        {
            GLInterop.glNormalPointerPtr(type, stride, pointer);
        }
        public static void glTexCoordPointer(int size, uint type, int stride, IntPtr pointer)
        {
            GLInterop.glTexCoordPointerPtr(size, type, stride, pointer);
        }
        public static void glVertexPointer(int size, uint type, int stride, IntPtr pointer)
        {
            GLInterop.glVertexPointerPtr(size, type, stride, pointer);
        }
        public static bool glAreTexturesResident(int n, IntPtr textures, IntPtr residences)
        {
            return GLInterop.glAreTexturesResidentPtr(n, textures, residences);
        }
        public static void glPrioritizeTextures(int n, IntPtr textures, IntPtr priorities)
        {
            GLInterop.glPrioritizeTexturesPtr(n, textures, priorities);
        }
        public static void glIndexub(byte c)
        {
            GLInterop.glIndexubPtr(c);
        }
        public static void glIndexubv(IntPtr c)
        {
            GLInterop.glIndexubvPtr(c);
        }
        public static void glPopClientAttrib()
        {
            GLInterop.glPopClientAttribPtr();
        }
        public static void glPushClientAttrib(uint mask)
        {
            GLInterop.glPushClientAttribPtr(mask);
        }
        public static void glDrawRangeElements(uint mode, uint start, uint end, int count, uint type, IntPtr indices)
        {
            GLInterop.glDrawRangeElementsPtr(mode, start, end, count, type, indices);
        }
        public static void glTexImage3D(uint target, int level, int internalformat, int width, int height, int depth, int border, uint format, uint type, IntPtr pixels)
        {
            GLInterop.glTexImage3DPtr(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }
        public static void glTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, IntPtr pixels)
        {
            GLInterop.glTexSubImage3DPtr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        public static void glCopyTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            GLInterop.glCopyTexSubImage3DPtr(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        public static void glActiveTexture(uint texture)
        {
            GLInterop.glActiveTexturePtr(texture);
        }
        public static void glSampleCoverage(float value, bool invert)
        {
            GLInterop.glSampleCoveragePtr(value, invert);
        }
        public static void glCompressedTexImage3D(uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
        {
            GLInterop.glCompressedTexImage3DPtr(target, level, internalformat, width, height, depth, border, imageSize, data);
        }
        public static void glCompressedTexImage2D(uint target, int level, uint internalformat, int width, int height, int border, int imageSize, IntPtr data)
        {
            GLInterop.glCompressedTexImage2DPtr(target, level, internalformat, width, height, border, imageSize, data);
        }
        public static void glCompressedTexImage1D(uint target, int level, uint internalformat, int width, int border, int imageSize, IntPtr data)
        {
            GLInterop.glCompressedTexImage1DPtr(target, level, internalformat, width, border, imageSize, data);
        }
        public static void glCompressedTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, IntPtr data)
        {
            GLInterop.glCompressedTexSubImage3DPtr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }
        public static void glCompressedTexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, IntPtr data)
        {
            GLInterop.glCompressedTexSubImage2DPtr(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }
        public static void glCompressedTexSubImage1D(uint target, int level, int xoffset, int width, uint format, int imageSize, IntPtr data)
        {
            GLInterop.glCompressedTexSubImage1DPtr(target, level, xoffset, width, format, imageSize, data);
        }
        public static void glGetCompressedTexImage(uint target, int level, IntPtr img)
        {
            GLInterop.glGetCompressedTexImagePtr(target, level, img);
        }
        public static void glClientActiveTexture(uint texture)
        {
            GLInterop.glClientActiveTexturePtr(texture);
        }
        public static void glMultiTexCoord1d(uint target, double s)
        {
            GLInterop.glMultiTexCoord1dPtr(target, s);
        }
        public static void glMultiTexCoord1dv(uint target, IntPtr v)
        {
            GLInterop.glMultiTexCoord1dvPtr(target, v);
        }
        public static void glMultiTexCoord1f(uint target, float s)
        {
            GLInterop.glMultiTexCoord1fPtr(target, s);
        }
        public static void glMultiTexCoord1fv(uint target, IntPtr v)
        {
            GLInterop.glMultiTexCoord1fvPtr(target, v);
        }
        public static void glMultiTexCoord1i(uint target, int s)
        {
            GLInterop.glMultiTexCoord1iPtr(target, s);
        }
        public static void glMultiTexCoord1iv(uint target, IntPtr v)
        {
            GLInterop.glMultiTexCoord1ivPtr(target, v);
        }
        public static void glMultiTexCoord1s(uint target, short s)
        {
            GLInterop.glMultiTexCoord1sPtr(target, s);
        }
        public static void glMultiTexCoord1sv(uint target, IntPtr v)
        {
            GLInterop.glMultiTexCoord1svPtr(target, v);
        }
        public static void glMultiTexCoord2d(uint target, double s, double t)
        {
            GLInterop.glMultiTexCoord2dPtr(target, s, t);
        }
        public static void glMultiTexCoord2dv(uint target, IntPtr v)
        {
            GLInterop.glMultiTexCoord2dvPtr(target, v);
        }
        public static void glMultiTexCoord2f(uint target, float s, float t)
        {
            GLInterop.glMultiTexCoord2fPtr(target, s, t);
        }
        public static void glMultiTexCoord2fv(uint target, IntPtr v)
        {
            GLInterop.glMultiTexCoord2fvPtr(target, v);
        }
        public static void glMultiTexCoord2i(uint target, int s, int t)
        {
            GLInterop.glMultiTexCoord2iPtr(target, s, t);
        }
        public static void glMultiTexCoord2iv(uint target, IntPtr v)
        {
            GLInterop.glMultiTexCoord2ivPtr(target, v);
        }
        public static void glMultiTexCoord2s(uint target, short s, short t)
        {
            GLInterop.glMultiTexCoord2sPtr(target, s, t);
        }
        public static void glMultiTexCoord2sv(uint target, IntPtr v)
        {
            GLInterop.glMultiTexCoord2svPtr(target, v);
        }
        public static void glMultiTexCoord3d(uint target, double s, double t, double r)
        {
            GLInterop.glMultiTexCoord3dPtr(target, s, t, r);
        }
        public static void glMultiTexCoord3dv(uint target, IntPtr v)
        {
            GLInterop.glMultiTexCoord3dvPtr(target, v);
        }
        public static void glMultiTexCoord3f(uint target, float s, float t, float r)
        {
            GLInterop.glMultiTexCoord3fPtr(target, s, t, r);
        }
        public static void glMultiTexCoord3fv(uint target, IntPtr v)
        {
            GLInterop.glMultiTexCoord3fvPtr(target, v);
        }
        public static void glMultiTexCoord3i(uint target, int s, int t, int r)
        {
            GLInterop.glMultiTexCoord3iPtr(target, s, t, r);
        }
        public static void glMultiTexCoord3iv(uint target, IntPtr v)
        {
            GLInterop.glMultiTexCoord3ivPtr(target, v);
        }
        public static void glMultiTexCoord3s(uint target, short s, short t, short r)
        {
            GLInterop.glMultiTexCoord3sPtr(target, s, t, r);
        }
        public static void glMultiTexCoord3sv(uint target, IntPtr v)
        {
            GLInterop.glMultiTexCoord3svPtr(target, v);
        }
        public static void glMultiTexCoord4d(uint target, double s, double t, double r, double q)
        {
            GLInterop.glMultiTexCoord4dPtr(target, s, t, r, q);
        }
        public static void glMultiTexCoord4dv(uint target, IntPtr v)
        {
            GLInterop.glMultiTexCoord4dvPtr(target, v);
        }
        public static void glMultiTexCoord4f(uint target, float s, float t, float r, float q)
        {
            GLInterop.glMultiTexCoord4fPtr(target, s, t, r, q);
        }
        public static void glMultiTexCoord4fv(uint target, IntPtr v)
        {
            GLInterop.glMultiTexCoord4fvPtr(target, v);
        }
        public static void glMultiTexCoord4i(uint target, int s, int t, int r, int q)
        {
            GLInterop.glMultiTexCoord4iPtr(target, s, t, r, q);
        }
        public static void glMultiTexCoord4iv(uint target, IntPtr v)
        {
            GLInterop.glMultiTexCoord4ivPtr(target, v);
        }
        public static void glMultiTexCoord4s(uint target, short s, short t, short r, short q)
        {
            GLInterop.glMultiTexCoord4sPtr(target, s, t, r, q);
        }
        public static void glMultiTexCoord4sv(uint target, IntPtr v)
        {
            GLInterop.glMultiTexCoord4svPtr(target, v);
        }
        public static void glLoadTransposeMatrixf(IntPtr m)
        {
            GLInterop.glLoadTransposeMatrixfPtr(m);
        }
        public static void glLoadTransposeMatrixd(IntPtr m)
        {
            GLInterop.glLoadTransposeMatrixdPtr(m);
        }
        public static void glMultTransposeMatrixf(IntPtr m)
        {
            GLInterop.glMultTransposeMatrixfPtr(m);
        }
        public static void glMultTransposeMatrixd(IntPtr m)
        {
            GLInterop.glMultTransposeMatrixdPtr(m);
        }
        public static void glBlendFuncSeparate(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha)
        {
            GLInterop.glBlendFuncSeparatePtr(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }
        public static void glMultiDrawArrays(uint mode, IntPtr first, IntPtr count, int drawcount)
        {
            GLInterop.glMultiDrawArraysPtr(mode, first, count, drawcount);
        }
        public static void glMultiDrawElements(uint mode, IntPtr count, uint type, IntPtr indices, int drawcount)
        {
            GLInterop.glMultiDrawElementsPtr(mode, count, type, indices, drawcount);
        }
        public static void glPointParameterf(uint pname, float param)
        {
            GLInterop.glPointParameterfPtr(pname, param);
        }
        public static void glPointParameterfv(uint pname, IntPtr @params)
        {
            GLInterop.glPointParameterfvPtr(pname, @params);
        }
        public static void glPointParameteri(uint pname, int param)
        {
            GLInterop.glPointParameteriPtr(pname, param);
        }
        public static void glPointParameteriv(uint pname, IntPtr @params)
        {
            GLInterop.glPointParameterivPtr(pname, @params);
        }
        public static void glFogCoordf(float coord)
        {
            GLInterop.glFogCoordfPtr(coord);
        }
        public static void glFogCoordfv(IntPtr coord)
        {
            GLInterop.glFogCoordfvPtr(coord);
        }
        public static void glFogCoordd(double coord)
        {
            GLInterop.glFogCoorddPtr(coord);
        }
        public static void glFogCoorddv(IntPtr coord)
        {
            GLInterop.glFogCoorddvPtr(coord);
        }
        public static void glFogCoordPointer(uint type, int stride, IntPtr pointer)
        {
            GLInterop.glFogCoordPointerPtr(type, stride, pointer);
        }
        public static void glSecondaryColor3b(sbyte red, sbyte green, sbyte blue)
        {
            GLInterop.glSecondaryColor3bPtr(red, green, blue);
        }
        public static void glSecondaryColor3bv(IntPtr v)
        {
            GLInterop.glSecondaryColor3bvPtr(v);
        }
        public static void glSecondaryColor3d(double red, double green, double blue)
        {
            GLInterop.glSecondaryColor3dPtr(red, green, blue);
        }
        public static void glSecondaryColor3dv(IntPtr v)
        {
            GLInterop.glSecondaryColor3dvPtr(v);
        }
        public static void glSecondaryColor3f(float red, float green, float blue)
        {
            GLInterop.glSecondaryColor3fPtr(red, green, blue);
        }
        public static void glSecondaryColor3fv(IntPtr v)
        {
            GLInterop.glSecondaryColor3fvPtr(v);
        }
        public static void glSecondaryColor3i(int red, int green, int blue)
        {
            GLInterop.glSecondaryColor3iPtr(red, green, blue);
        }
        public static void glSecondaryColor3iv(IntPtr v)
        {
            GLInterop.glSecondaryColor3ivPtr(v);
        }
        public static void glSecondaryColor3s(short red, short green, short blue)
        {
            GLInterop.glSecondaryColor3sPtr(red, green, blue);
        }
        public static void glSecondaryColor3sv(IntPtr v)
        {
            GLInterop.glSecondaryColor3svPtr(v);
        }
        public static void glSecondaryColor3ub(byte red, byte green, byte blue)
        {
            GLInterop.glSecondaryColor3ubPtr(red, green, blue);
        }
        public static void glSecondaryColor3ubv(IntPtr v)
        {
            GLInterop.glSecondaryColor3ubvPtr(v);
        }
        public static void glSecondaryColor3ui(uint red, uint green, uint blue)
        {
            GLInterop.glSecondaryColor3uiPtr(red, green, blue);
        }
        public static void glSecondaryColor3uiv(IntPtr v)
        {
            GLInterop.glSecondaryColor3uivPtr(v);
        }
        public static void glSecondaryColor3us(ushort red, ushort green, ushort blue)
        {
            GLInterop.glSecondaryColor3usPtr(red, green, blue);
        }
        public static void glSecondaryColor3usv(IntPtr v)
        {
            GLInterop.glSecondaryColor3usvPtr(v);
        }
        public static void glSecondaryColorPointer(int size, uint type, int stride, IntPtr pointer)
        {
            GLInterop.glSecondaryColorPointerPtr(size, type, stride, pointer);
        }
        public static void glWindowPos2d(double x, double y)
        {
            GLInterop.glWindowPos2dPtr(x, y);
        }
        public static void glWindowPos2dv(IntPtr v)
        {
            GLInterop.glWindowPos2dvPtr(v);
        }
        public static void glWindowPos2f(float x, float y)
        {
            GLInterop.glWindowPos2fPtr(x, y);
        }
        public static void glWindowPos2fv(IntPtr v)
        {
            GLInterop.glWindowPos2fvPtr(v);
        }
        public static void glWindowPos2i(int x, int y)
        {
            GLInterop.glWindowPos2iPtr(x, y);
        }
        public static void glWindowPos2iv(IntPtr v)
        {
            GLInterop.glWindowPos2ivPtr(v);
        }
        public static void glWindowPos2s(short x, short y)
        {
            GLInterop.glWindowPos2sPtr(x, y);
        }
        public static void glWindowPos2sv(IntPtr v)
        {
            GLInterop.glWindowPos2svPtr(v);
        }
        public static void glWindowPos3d(double x, double y, double z)
        {
            GLInterop.glWindowPos3dPtr(x, y, z);
        }
        public static void glWindowPos3dv(IntPtr v)
        {
            GLInterop.glWindowPos3dvPtr(v);
        }
        public static void glWindowPos3f(float x, float y, float z)
        {
            GLInterop.glWindowPos3fPtr(x, y, z);
        }
        public static void glWindowPos3fv(IntPtr v)
        {
            GLInterop.glWindowPos3fvPtr(v);
        }
        public static void glWindowPos3i(int x, int y, int z)
        {
            GLInterop.glWindowPos3iPtr(x, y, z);
        }
        public static void glWindowPos3iv(IntPtr v)
        {
            GLInterop.glWindowPos3ivPtr(v);
        }
        public static void glWindowPos3s(short x, short y, short z)
        {
            GLInterop.glWindowPos3sPtr(x, y, z);
        }
        public static void glWindowPos3sv(IntPtr v)
        {
            GLInterop.glWindowPos3svPtr(v);
        }
        public static void glBlendColor(float red, float green, float blue, float alpha)
        {
            GLInterop.glBlendColorPtr(red, green, blue, alpha);
        }
        public static void glBlendEquation(uint mode)
        {
            GLInterop.glBlendEquationPtr(mode);
        }
        public static void glGenQueries(int n, IntPtr ids)
        {
            GLInterop.glGenQueriesPtr(n, ids);
        }
        public static void glDeleteQueries(int n, IntPtr ids)
        {
            GLInterop.glDeleteQueriesPtr(n, ids);
        }
        public static bool glIsQuery(uint id)
        {
            return GLInterop.glIsQueryPtr(id);
        }
        public static void glBeginQuery(uint target, uint id)
        {
            GLInterop.glBeginQueryPtr(target, id);
        }
        public static void glEndQuery(uint target)
        {
            GLInterop.glEndQueryPtr(target);
        }
        public static void glGetQueryiv(uint target, uint pname, IntPtr @params)
        {
            GLInterop.glGetQueryivPtr(target, pname, @params);
        }
        public static void glGetQueryObjectiv(uint id, uint pname, IntPtr @params)
        {
            GLInterop.glGetQueryObjectivPtr(id, pname, @params);
        }
        public static void glGetQueryObjectuiv(uint id, uint pname, IntPtr @params)
        {
            GLInterop.glGetQueryObjectuivPtr(id, pname, @params);
        }
        public static void glBindBuffer(uint target, uint buffer)
        {
            GLInterop.glBindBufferPtr(target, buffer);
        }
        public static void glDeleteBuffers(int n, IntPtr buffers)
        {
            GLInterop.glDeleteBuffersPtr(n, buffers);
        }
        public static void glGenBuffers(int n, IntPtr buffers)
        {
            GLInterop.glGenBuffersPtr(n, buffers);
        }
        public static bool glIsBuffer(uint buffer)
        {
            return GLInterop.glIsBufferPtr(buffer);
        }
        public static void glBufferData(uint target, int size, IntPtr data, uint usage)
        {
            GLInterop.glBufferDataPtr(target, size, data, usage);
        }
        public static void glBufferSubData(uint target, IntPtr offset, int size, IntPtr data)
        {
            GLInterop.glBufferSubDataPtr(target, offset, size, data);
        }
        public static void glGetBufferSubData(uint target, IntPtr offset, int size, IntPtr data)
        {
            GLInterop.glGetBufferSubDataPtr(target, offset, size, data);
        }
        public static IntPtr glMapBuffer(uint target, uint access)
        {
            return GLInterop.glMapBufferPtr(target, access);
        }
        public static bool glUnmapBuffer(uint target)
        {
            return GLInterop.glUnmapBufferPtr(target);
        }
        public static void glGetBufferParameteriv(uint target, uint pname, IntPtr @params)
        {
            GLInterop.glGetBufferParameterivPtr(target, pname, @params);
        }
        public static void glGetBufferPointerv(uint target, uint pname, IntPtr @params)
        {
            GLInterop.glGetBufferPointervPtr(target, pname, @params);
        }
        public static void glBlendEquationSeparate(uint modeRGB, uint modeAlpha)
        {
            GLInterop.glBlendEquationSeparatePtr(modeRGB, modeAlpha);
        }
        public static void glDrawBuffers(int n, IntPtr bufs)
        {
            GLInterop.glDrawBuffersPtr(n, bufs);
        }
        public static void glStencilOpSeparate(uint face, uint sfail, uint dpfail, uint dppass)
        {
            GLInterop.glStencilOpSeparatePtr(face, sfail, dpfail, dppass);
        }
        public static void glStencilFuncSeparate(uint face, uint func, int @ref, uint mask)
        {
            GLInterop.glStencilFuncSeparatePtr(face, func, @ref, mask);
        }
        public static void glStencilMaskSeparate(uint face, uint mask)
        {
            GLInterop.glStencilMaskSeparatePtr(face, mask);
        }
        public static void glAttachShader(uint program, uint shader)
        {
            GLInterop.glAttachShaderPtr(program, shader);
        }
        public static void glBindAttribLocation(uint program, uint index, IntPtr name)
        {
            GLInterop.glBindAttribLocationPtr(program, index, name);
        }
        public static void glCompileShader(uint shader)
        {
            GLInterop.glCompileShaderPtr(shader);
        }
        public static uint glCreateProgram()
        {
            return GLInterop.glCreateProgramPtr();
        }
        public static uint glCreateShader(uint type)
        {
            return GLInterop.glCreateShaderPtr(type);
        }
        public static void glDeleteProgram(uint program)
        {
            GLInterop.glDeleteProgramPtr(program);
        }
        public static void glDeleteShader(uint shader)
        {
            GLInterop.glDeleteShaderPtr(shader);
        }
        public static void glDetachShader(uint program, uint shader)
        {
            GLInterop.glDetachShaderPtr(program, shader);
        }
        public static void glDisableVertexAttribArray(uint index)
        {
            GLInterop.glDisableVertexAttribArrayPtr(index);
        }
        public static void glEnableVertexAttribArray(uint index)
        {
            GLInterop.glEnableVertexAttribArrayPtr(index);
        }
        public static void glGetActiveAttrib(uint program, uint index, int bufSize, IntPtr length, IntPtr size, IntPtr type, IntPtr name)
        {
            GLInterop.glGetActiveAttribPtr(program, index, bufSize, length, size, type, name);
        }
        public static void glGetActiveUniform(uint program, uint index, int bufSize, IntPtr length, IntPtr size, IntPtr type, IntPtr name)
        {
            GLInterop.glGetActiveUniformPtr(program, index, bufSize, length, size, type, name);
        }
        public static void glGetAttachedShaders(uint program, int maxCount, IntPtr count, IntPtr shaders)
        {
            GLInterop.glGetAttachedShadersPtr(program, maxCount, count, shaders);
        }
        public static int glGetAttribLocation(uint program, IntPtr name)
        {
            return GLInterop.glGetAttribLocationPtr(program, name);
        }
        public static void glGetProgramiv(uint program, uint pname, IntPtr @params)
        {
            GLInterop.glGetProgramivPtr(program, pname, @params);
        }
        public static void glGetProgramInfoLog(uint program, int bufSize, IntPtr length, IntPtr infoLog)
        {
            GLInterop.glGetProgramInfoLogPtr(program, bufSize, length, infoLog);
        }
        public static void glGetShaderiv(uint shader, uint pname, IntPtr @params)
        {
            GLInterop.glGetShaderivPtr(shader, pname, @params);
        }
        public static void glGetShaderInfoLog(uint shader, int bufSize, IntPtr length, IntPtr infoLog)
        {
            GLInterop.glGetShaderInfoLogPtr(shader, bufSize, length, infoLog);
        }
        public static void glGetShaderSource(uint shader, int bufSize, IntPtr length, IntPtr source)
        {
            GLInterop.glGetShaderSourcePtr(shader, bufSize, length, source);
        }
        public static int glGetUniformLocation(uint program, IntPtr name)
        {
            return GLInterop.glGetUniformLocationPtr(program, name);
        }
        public static void glGetUniformfv(uint program, int location, IntPtr @params)
        {
            GLInterop.glGetUniformfvPtr(program, location, @params);
        }
        public static void glGetUniformiv(uint program, int location, IntPtr @params)
        {
            GLInterop.glGetUniformivPtr(program, location, @params);
        }
        public static void glGetVertexAttribdv(uint index, uint pname, IntPtr @params)
        {
            GLInterop.glGetVertexAttribdvPtr(index, pname, @params);
        }
        public static void glGetVertexAttribfv(uint index, uint pname, IntPtr @params)
        {
            GLInterop.glGetVertexAttribfvPtr(index, pname, @params);
        }
        public static void glGetVertexAttribiv(uint index, uint pname, IntPtr @params)
        {
            GLInterop.glGetVertexAttribivPtr(index, pname, @params);
        }
        public static void glGetVertexAttribPointerv(uint index, uint pname, IntPtr pointer)
        {
            GLInterop.glGetVertexAttribPointervPtr(index, pname, pointer);
        }
        public static bool glIsProgram(uint program)
        {
            return GLInterop.glIsProgramPtr(program);
        }
        public static bool glIsShader(uint shader)
        {
            return GLInterop.glIsShaderPtr(shader);
        }
        public static void glLinkProgram(uint program)
        {
            GLInterop.glLinkProgramPtr(program);
        }
        public static void glShaderSource(uint shader, int count, IntPtr @string, IntPtr length)
        {
            GLInterop.glShaderSourcePtr(shader, count, @string, length);
        }
        public static void glUseProgram(uint program)
        {
            GLInterop.glUseProgramPtr(program);
        }
        public static void glUniform1f(int location, float v0)
        {
            GLInterop.glUniform1fPtr(location, v0);
        }
        public static void glUniform2f(int location, float v0, float v1)
        {
            GLInterop.glUniform2fPtr(location, v0, v1);
        }
        public static void glUniform3f(int location, float v0, float v1, float v2)
        {
            GLInterop.glUniform3fPtr(location, v0, v1, v2);
        }
        public static void glUniform4f(int location, float v0, float v1, float v2, float v3)
        {
            GLInterop.glUniform4fPtr(location, v0, v1, v2, v3);
        }
        public static void glUniform1i(int location, int v0)
        {
            GLInterop.glUniform1iPtr(location, v0);
        }
        public static void glUniform2i(int location, int v0, int v1)
        {
            GLInterop.glUniform2iPtr(location, v0, v1);
        }
        public static void glUniform3i(int location, int v0, int v1, int v2)
        {
            GLInterop.glUniform3iPtr(location, v0, v1, v2);
        }
        public static void glUniform4i(int location, int v0, int v1, int v2, int v3)
        {
            GLInterop.glUniform4iPtr(location, v0, v1, v2, v3);
        }
        public static void glUniform1fv(int location, int count, IntPtr value)
        {
            GLInterop.glUniform1fvPtr(location, count, value);
        }
        public static void glUniform2fv(int location, int count, IntPtr value)
        {
            GLInterop.glUniform2fvPtr(location, count, value);
        }
        public static void glUniform3fv(int location, int count, IntPtr value)
        {
            GLInterop.glUniform3fvPtr(location, count, value);
        }
        public static void glUniform4fv(int location, int count, IntPtr value)
        {
            GLInterop.glUniform4fvPtr(location, count, value);
        }
        public static void glUniform1iv(int location, int count, IntPtr value)
        {
            GLInterop.glUniform1ivPtr(location, count, value);
        }
        public static void glUniform2iv(int location, int count, IntPtr value)
        {
            GLInterop.glUniform2ivPtr(location, count, value);
        }
        public static void glUniform3iv(int location, int count, IntPtr value)
        {
            GLInterop.glUniform3ivPtr(location, count, value);
        }
        public static void glUniform4iv(int location, int count, IntPtr value)
        {
            GLInterop.glUniform4ivPtr(location, count, value);
        }
        public static void glUniformMatrix2fv(int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glUniformMatrix2fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix3fv(int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glUniformMatrix3fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix4fv(int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glUniformMatrix4fvPtr(location, count, transpose, value);
        }
        public static void glValidateProgram(uint program)
        {
            GLInterop.glValidateProgramPtr(program);
        }
        public static void glVertexAttrib1d(uint index, double x)
        {
            GLInterop.glVertexAttrib1dPtr(index, x);
        }
        public static void glVertexAttrib1dv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttrib1dvPtr(index, v);
        }
        public static void glVertexAttrib1f(uint index, float x)
        {
            GLInterop.glVertexAttrib1fPtr(index, x);
        }
        public static void glVertexAttrib1fv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttrib1fvPtr(index, v);
        }
        public static void glVertexAttrib1s(uint index, short x)
        {
            GLInterop.glVertexAttrib1sPtr(index, x);
        }
        public static void glVertexAttrib1sv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttrib1svPtr(index, v);
        }
        public static void glVertexAttrib2d(uint index, double x, double y)
        {
            GLInterop.glVertexAttrib2dPtr(index, x, y);
        }
        public static void glVertexAttrib2dv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttrib2dvPtr(index, v);
        }
        public static void glVertexAttrib2f(uint index, float x, float y)
        {
            GLInterop.glVertexAttrib2fPtr(index, x, y);
        }
        public static void glVertexAttrib2fv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttrib2fvPtr(index, v);
        }
        public static void glVertexAttrib2s(uint index, short x, short y)
        {
            GLInterop.glVertexAttrib2sPtr(index, x, y);
        }
        public static void glVertexAttrib2sv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttrib2svPtr(index, v);
        }
        public static void glVertexAttrib3d(uint index, double x, double y, double z)
        {
            GLInterop.glVertexAttrib3dPtr(index, x, y, z);
        }
        public static void glVertexAttrib3dv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttrib3dvPtr(index, v);
        }
        public static void glVertexAttrib3f(uint index, float x, float y, float z)
        {
            GLInterop.glVertexAttrib3fPtr(index, x, y, z);
        }
        public static void glVertexAttrib3fv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttrib3fvPtr(index, v);
        }
        public static void glVertexAttrib3s(uint index, short x, short y, short z)
        {
            GLInterop.glVertexAttrib3sPtr(index, x, y, z);
        }
        public static void glVertexAttrib3sv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttrib3svPtr(index, v);
        }
        public static void glVertexAttrib4Nbv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttrib4NbvPtr(index, v);
        }
        public static void glVertexAttrib4Niv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttrib4NivPtr(index, v);
        }
        public static void glVertexAttrib4Nsv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttrib4NsvPtr(index, v);
        }
        public static void glVertexAttrib4Nub(uint index, byte x, byte y, byte z, byte w)
        {
            GLInterop.glVertexAttrib4NubPtr(index, x, y, z, w);
        }
        public static void glVertexAttrib4Nubv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttrib4NubvPtr(index, v);
        }
        public static void glVertexAttrib4Nuiv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttrib4NuivPtr(index, v);
        }
        public static void glVertexAttrib4Nusv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttrib4NusvPtr(index, v);
        }
        public static void glVertexAttrib4bv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttrib4bvPtr(index, v);
        }
        public static void glVertexAttrib4d(uint index, double x, double y, double z, double w)
        {
            GLInterop.glVertexAttrib4dPtr(index, x, y, z, w);
        }
        public static void glVertexAttrib4dv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttrib4dvPtr(index, v);
        }
        public static void glVertexAttrib4f(uint index, float x, float y, float z, float w)
        {
            GLInterop.glVertexAttrib4fPtr(index, x, y, z, w);
        }
        public static void glVertexAttrib4fv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttrib4fvPtr(index, v);
        }
        public static void glVertexAttrib4iv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttrib4ivPtr(index, v);
        }
        public static void glVertexAttrib4s(uint index, short x, short y, short z, short w)
        {
            GLInterop.glVertexAttrib4sPtr(index, x, y, z, w);
        }
        public static void glVertexAttrib4sv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttrib4svPtr(index, v);
        }
        public static void glVertexAttrib4ubv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttrib4ubvPtr(index, v);
        }
        public static void glVertexAttrib4uiv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttrib4uivPtr(index, v);
        }
        public static void glVertexAttrib4usv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttrib4usvPtr(index, v);
        }
        public static void glVertexAttribPointer(uint index, int size, uint type, bool normalized, int stride, IntPtr pointer)
        {
            GLInterop.glVertexAttribPointerPtr(index, size, type, normalized, stride, pointer);
        }
        public static void glUniformMatrix2x3fv(int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glUniformMatrix2x3fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix3x2fv(int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glUniformMatrix3x2fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix2x4fv(int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glUniformMatrix2x4fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix4x2fv(int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glUniformMatrix4x2fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix3x4fv(int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glUniformMatrix3x4fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix4x3fv(int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glUniformMatrix4x3fvPtr(location, count, transpose, value);
        }
        public static void glColorMaski(uint index, bool r, bool g, bool b, bool a)
        {
            GLInterop.glColorMaskiPtr(index, r, g, b, a);
        }
        public static void glGetBooleani_v(uint target, uint index, IntPtr data)
        {
            GLInterop.glGetBooleani_vPtr(target, index, data);
        }
        public static void glGetIntegeri_v(uint target, uint index, IntPtr data)
        {
            GLInterop.glGetIntegeri_vPtr(target, index, data);
        }
        public static void glEnablei(uint target, uint index)
        {
            GLInterop.glEnableiPtr(target, index);
        }
        public static void glDisablei(uint target, uint index)
        {
            GLInterop.glDisableiPtr(target, index);
        }
        public static bool glIsEnabledi(uint target, uint index)
        {
            return GLInterop.glIsEnablediPtr(target, index);
        }
        public static void glBeginTransformFeedback(uint primitiveMode)
        {
            GLInterop.glBeginTransformFeedbackPtr(primitiveMode);
        }
        public static void glEndTransformFeedback()
        {
            GLInterop.glEndTransformFeedbackPtr();
        }
        public static void glBindBufferRange(uint target, uint index, uint buffer, IntPtr offset, int size)
        {
            GLInterop.glBindBufferRangePtr(target, index, buffer, offset, size);
        }
        public static void glBindBufferBase(uint target, uint index, uint buffer)
        {
            GLInterop.glBindBufferBasePtr(target, index, buffer);
        }
        public static void glTransformFeedbackVaryings(uint program, int count, IntPtr varyings, uint bufferMode)
        {
            GLInterop.glTransformFeedbackVaryingsPtr(program, count, varyings, bufferMode);
        }
        public static void glGetTransformFeedbackVarying(uint program, uint index, int bufSize, IntPtr length, IntPtr size, IntPtr type, IntPtr name)
        {
            GLInterop.glGetTransformFeedbackVaryingPtr(program, index, bufSize, length, size, type, name);
        }
        public static void glClampColor(uint target, uint clamp)
        {
            GLInterop.glClampColorPtr(target, clamp);
        }
        public static void glBeginConditionalRender(uint id, uint mode)
        {
            GLInterop.glBeginConditionalRenderPtr(id, mode);
        }
        public static void glEndConditionalRender()
        {
            GLInterop.glEndConditionalRenderPtr();
        }
        public static void glVertexAttribIPointer(uint index, int size, uint type, int stride, IntPtr pointer)
        {
            GLInterop.glVertexAttribIPointerPtr(index, size, type, stride, pointer);
        }
        public static void glGetVertexAttribIiv(uint index, uint pname, IntPtr @params)
        {
            GLInterop.glGetVertexAttribIivPtr(index, pname, @params);
        }
        public static void glGetVertexAttribIuiv(uint index, uint pname, IntPtr @params)
        {
            GLInterop.glGetVertexAttribIuivPtr(index, pname, @params);
        }
        public static void glVertexAttribI1i(uint index, int x)
        {
            GLInterop.glVertexAttribI1iPtr(index, x);
        }
        public static void glVertexAttribI2i(uint index, int x, int y)
        {
            GLInterop.glVertexAttribI2iPtr(index, x, y);
        }
        public static void glVertexAttribI3i(uint index, int x, int y, int z)
        {
            GLInterop.glVertexAttribI3iPtr(index, x, y, z);
        }
        public static void glVertexAttribI4i(uint index, int x, int y, int z, int w)
        {
            GLInterop.glVertexAttribI4iPtr(index, x, y, z, w);
        }
        public static void glVertexAttribI1ui(uint index, uint x)
        {
            GLInterop.glVertexAttribI1uiPtr(index, x);
        }
        public static void glVertexAttribI2ui(uint index, uint x, uint y)
        {
            GLInterop.glVertexAttribI2uiPtr(index, x, y);
        }
        public static void glVertexAttribI3ui(uint index, uint x, uint y, uint z)
        {
            GLInterop.glVertexAttribI3uiPtr(index, x, y, z);
        }
        public static void glVertexAttribI4ui(uint index, uint x, uint y, uint z, uint w)
        {
            GLInterop.glVertexAttribI4uiPtr(index, x, y, z, w);
        }
        public static void glVertexAttribI1iv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttribI1ivPtr(index, v);
        }
        public static void glVertexAttribI2iv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttribI2ivPtr(index, v);
        }
        public static void glVertexAttribI3iv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttribI3ivPtr(index, v);
        }
        public static void glVertexAttribI4iv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttribI4ivPtr(index, v);
        }
        public static void glVertexAttribI1uiv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttribI1uivPtr(index, v);
        }
        public static void glVertexAttribI2uiv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttribI2uivPtr(index, v);
        }
        public static void glVertexAttribI3uiv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttribI3uivPtr(index, v);
        }
        public static void glVertexAttribI4uiv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttribI4uivPtr(index, v);
        }
        public static void glVertexAttribI4bv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttribI4bvPtr(index, v);
        }
        public static void glVertexAttribI4sv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttribI4svPtr(index, v);
        }
        public static void glVertexAttribI4ubv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttribI4ubvPtr(index, v);
        }
        public static void glVertexAttribI4usv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttribI4usvPtr(index, v);
        }
        public static void glGetUniformuiv(uint program, int location, IntPtr @params)
        {
            GLInterop.glGetUniformuivPtr(program, location, @params);
        }
        public static void glBindFragDataLocation(uint program, uint color, IntPtr name)
        {
            GLInterop.glBindFragDataLocationPtr(program, color, name);
        }
        public static int glGetFragDataLocation(uint program, IntPtr name)
        {
            return GLInterop.glGetFragDataLocationPtr(program, name);
        }
        public static void glUniform1ui(int location, uint v0)
        {
            GLInterop.glUniform1uiPtr(location, v0);
        }
        public static void glUniform2ui(int location, uint v0, uint v1)
        {
            GLInterop.glUniform2uiPtr(location, v0, v1);
        }
        public static void glUniform3ui(int location, uint v0, uint v1, uint v2)
        {
            GLInterop.glUniform3uiPtr(location, v0, v1, v2);
        }
        public static void glUniform4ui(int location, uint v0, uint v1, uint v2, uint v3)
        {
            GLInterop.glUniform4uiPtr(location, v0, v1, v2, v3);
        }
        public static void glUniform1uiv(int location, int count, IntPtr value)
        {
            GLInterop.glUniform1uivPtr(location, count, value);
        }
        public static void glUniform2uiv(int location, int count, IntPtr value)
        {
            GLInterop.glUniform2uivPtr(location, count, value);
        }
        public static void glUniform3uiv(int location, int count, IntPtr value)
        {
            GLInterop.glUniform3uivPtr(location, count, value);
        }
        public static void glUniform4uiv(int location, int count, IntPtr value)
        {
            GLInterop.glUniform4uivPtr(location, count, value);
        }
        public static void glTexParameterIiv(uint target, uint pname, IntPtr @params)
        {
            GLInterop.glTexParameterIivPtr(target, pname, @params);
        }
        public static void glTexParameterIuiv(uint target, uint pname, IntPtr @params)
        {
            GLInterop.glTexParameterIuivPtr(target, pname, @params);
        }
        public static void glGetTexParameterIiv(uint target, uint pname, IntPtr @params)
        {
            GLInterop.glGetTexParameterIivPtr(target, pname, @params);
        }
        public static void glGetTexParameterIuiv(uint target, uint pname, IntPtr @params)
        {
            GLInterop.glGetTexParameterIuivPtr(target, pname, @params);
        }
        public static void glClearBufferiv(uint buffer, int drawbuffer, IntPtr value)
        {
            GLInterop.glClearBufferivPtr(buffer, drawbuffer, value);
        }
        public static void glClearBufferuiv(uint buffer, int drawbuffer, IntPtr value)
        {
            GLInterop.glClearBufferuivPtr(buffer, drawbuffer, value);
        }
        public static void glClearBufferfv(uint buffer, int drawbuffer, IntPtr value)
        {
            GLInterop.glClearBufferfvPtr(buffer, drawbuffer, value);
        }
        public static void glClearBufferfi(uint buffer, int drawbuffer, float depth, int stencil)
        {
            GLInterop.glClearBufferfiPtr(buffer, drawbuffer, depth, stencil);
        }
        public static IntPtr glGetStringi(uint name, uint index)
        {
            return GLInterop.glGetStringiPtr(name, index);
        }
        public static bool glIsRenderbuffer(uint renderbuffer)
        {
            return GLInterop.glIsRenderbufferPtr(renderbuffer);
        }
        public static void glBindRenderbuffer(uint target, uint renderbuffer)
        {
            GLInterop.glBindRenderbufferPtr(target, renderbuffer);
        }
        public static void glDeleteRenderbuffers(int n, IntPtr renderbuffers)
        {
            GLInterop.glDeleteRenderbuffersPtr(n, renderbuffers);
        }
        public static void glGenRenderbuffers(int n, IntPtr renderbuffers)
        {
            GLInterop.glGenRenderbuffersPtr(n, renderbuffers);
        }
        public static void glRenderbufferStorage(uint target, uint internalformat, int width, int height)
        {
            GLInterop.glRenderbufferStoragePtr(target, internalformat, width, height);
        }
        public static void glGetRenderbufferParameteriv(uint target, uint pname, IntPtr @params)
        {
            GLInterop.glGetRenderbufferParameterivPtr(target, pname, @params);
        }
        public static bool glIsFramebuffer(uint framebuffer)
        {
            return GLInterop.glIsFramebufferPtr(framebuffer);
        }
        public static void glBindFramebuffer(uint target, uint framebuffer)
        {
            GLInterop.glBindFramebufferPtr(target, framebuffer);
        }
        public static void glDeleteFramebuffers(int n, IntPtr framebuffers)
        {
            GLInterop.glDeleteFramebuffersPtr(n, framebuffers);
        }
        public static void glGenFramebuffers(int n, IntPtr framebuffers)
        {
            GLInterop.glGenFramebuffersPtr(n, framebuffers);
        }
        public static uint glCheckFramebufferStatus(uint target)
        {
            return GLInterop.glCheckFramebufferStatusPtr(target);
        }
        public static void glFramebufferTexture1D(uint target, uint attachment, uint textarget, uint texture, int level)
        {
            GLInterop.glFramebufferTexture1DPtr(target, attachment, textarget, texture, level);
        }
        public static void glFramebufferTexture2D(uint target, uint attachment, uint textarget, uint texture, int level)
        {
            GLInterop.glFramebufferTexture2DPtr(target, attachment, textarget, texture, level);
        }
        public static void glFramebufferTexture3D(uint target, uint attachment, uint textarget, uint texture, int level, int zoffset)
        {
            GLInterop.glFramebufferTexture3DPtr(target, attachment, textarget, texture, level, zoffset);
        }
        public static void glFramebufferRenderbuffer(uint target, uint attachment, uint renderbuffertarget, uint renderbuffer)
        {
            GLInterop.glFramebufferRenderbufferPtr(target, attachment, renderbuffertarget, renderbuffer);
        }
        public static void glGetFramebufferAttachmentParameteriv(uint target, uint attachment, uint pname, IntPtr @params)
        {
            GLInterop.glGetFramebufferAttachmentParameterivPtr(target, attachment, pname, @params);
        }
        public static void glGenerateMipmap(uint target)
        {
            GLInterop.glGenerateMipmapPtr(target);
        }
        public static void glBlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter)
        {
            GLInterop.glBlitFramebufferPtr(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        public static void glRenderbufferStorageMultisample(uint target, int samples, uint internalformat, int width, int height)
        {
            GLInterop.glRenderbufferStorageMultisamplePtr(target, samples, internalformat, width, height);
        }
        public static void glFramebufferTextureLayer(uint target, uint attachment, uint texture, int level, int layer)
        {
            GLInterop.glFramebufferTextureLayerPtr(target, attachment, texture, level, layer);
        }
        public static IntPtr glMapBufferRange(uint target, IntPtr offset, int length, uint access)
        {
            return GLInterop.glMapBufferRangePtr(target, offset, length, access);
        }
        public static void glFlushMappedBufferRange(uint target, IntPtr offset, int length)
        {
            GLInterop.glFlushMappedBufferRangePtr(target, offset, length);
        }
        public static void glBindVertexArray(uint array)
        {
            GLInterop.glBindVertexArrayPtr(array);
        }
        public static void glDeleteVertexArrays(int n, IntPtr arrays)
        {
            GLInterop.glDeleteVertexArraysPtr(n, arrays);
        }
        public static void glGenVertexArrays(int n, IntPtr arrays)
        {
            GLInterop.glGenVertexArraysPtr(n, arrays);
        }
        public static bool glIsVertexArray(uint array)
        {
            return GLInterop.glIsVertexArrayPtr(array);
        }
        public static void glDrawArraysInstanced(uint mode, int first, int count, int instancecount)
        {
            GLInterop.glDrawArraysInstancedPtr(mode, first, count, instancecount);
        }
        public static void glDrawElementsInstanced(uint mode, int count, uint type, IntPtr indices, int instancecount)
        {
            GLInterop.glDrawElementsInstancedPtr(mode, count, type, indices, instancecount);
        }
        public static void glTexBuffer(uint target, uint internalformat, uint buffer)
        {
            GLInterop.glTexBufferPtr(target, internalformat, buffer);
        }
        public static void glPrimitiveRestartIndex(uint index)
        {
            GLInterop.glPrimitiveRestartIndexPtr(index);
        }
        public static void glCopyBufferSubData(uint readTarget, uint writeTarget, IntPtr readOffset, IntPtr writeOffset, int size)
        {
            GLInterop.glCopyBufferSubDataPtr(readTarget, writeTarget, readOffset, writeOffset, size);
        }
        public static void glGetUniformIndices(uint program, int uniformCount, IntPtr uniformNames, IntPtr uniformIndices)
        {
            GLInterop.glGetUniformIndicesPtr(program, uniformCount, uniformNames, uniformIndices);
        }
        public static void glGetActiveUniformsiv(uint program, int uniformCount, IntPtr uniformIndices, uint pname, IntPtr @params)
        {
            GLInterop.glGetActiveUniformsivPtr(program, uniformCount, uniformIndices, pname, @params);
        }
        public static void glGetActiveUniformName(uint program, uint uniformIndex, int bufSize, IntPtr length, IntPtr uniformName)
        {
            GLInterop.glGetActiveUniformNamePtr(program, uniformIndex, bufSize, length, uniformName);
        }
        public static uint glGetUniformBlockIndex(uint program, IntPtr uniformBlockName)
        {
            return GLInterop.glGetUniformBlockIndexPtr(program, uniformBlockName);
        }
        public static void glGetActiveUniformBlockiv(uint program, uint uniformBlockIndex, uint pname, IntPtr @params)
        {
            GLInterop.glGetActiveUniformBlockivPtr(program, uniformBlockIndex, pname, @params);
        }
        public static void glGetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, IntPtr length, IntPtr uniformBlockName)
        {
            GLInterop.glGetActiveUniformBlockNamePtr(program, uniformBlockIndex, bufSize, length, uniformBlockName);
        }
        public static void glUniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding)
        {
            GLInterop.glUniformBlockBindingPtr(program, uniformBlockIndex, uniformBlockBinding);
        }
        public static void glDrawElementsBaseVertex(uint mode, int count, uint type, IntPtr indices, int basevertex)
        {
            GLInterop.glDrawElementsBaseVertexPtr(mode, count, type, indices, basevertex);
        }
        public static void glDrawRangeElementsBaseVertex(uint mode, uint start, uint end, int count, uint type, IntPtr indices, int basevertex)
        {
            GLInterop.glDrawRangeElementsBaseVertexPtr(mode, start, end, count, type, indices, basevertex);
        }
        public static void glDrawElementsInstancedBaseVertex(uint mode, int count, uint type, IntPtr indices, int instancecount, int basevertex)
        {
            GLInterop.glDrawElementsInstancedBaseVertexPtr(mode, count, type, indices, instancecount, basevertex);
        }
        public static void glMultiDrawElementsBaseVertex(uint mode, IntPtr count, uint type, IntPtr indices, int drawcount, IntPtr basevertex)
        {
            GLInterop.glMultiDrawElementsBaseVertexPtr(mode, count, type, indices, drawcount, basevertex);
        }
        public static void glProvokingVertex(uint mode)
        {
            GLInterop.glProvokingVertexPtr(mode);
        }
        public static IntPtr glFenceSync(uint condition, uint flags)
        {
            return GLInterop.glFenceSyncPtr(condition, flags);
        }
        public static bool glIsSync(IntPtr sync)
        {
            return GLInterop.glIsSyncPtr(sync);
        }
        public static void glDeleteSync(IntPtr sync)
        {
            GLInterop.glDeleteSyncPtr(sync);
        }
        public static uint glClientWaitSync(IntPtr sync, uint flags, ulong timeout)
        {
            return GLInterop.glClientWaitSyncPtr(sync, flags, timeout);
        }
        public static void glWaitSync(IntPtr sync, uint flags, ulong timeout)
        {
            GLInterop.glWaitSyncPtr(sync, flags, timeout);
        }
        public static void glGetInteger64v(uint pname, IntPtr data)
        {
            GLInterop.glGetInteger64vPtr(pname, data);
        }
        public static void glGetSynciv(IntPtr sync, uint pname, int bufSize, IntPtr length, IntPtr values)
        {
            GLInterop.glGetSyncivPtr(sync, pname, bufSize, length, values);
        }
        public static void glGetInteger64i_v(uint target, uint index, IntPtr data)
        {
            GLInterop.glGetInteger64i_vPtr(target, index, data);
        }
        public static void glGetBufferParameteri64v(uint target, uint pname, IntPtr @params)
        {
            GLInterop.glGetBufferParameteri64vPtr(target, pname, @params);
        }
        public static void glFramebufferTexture(uint target, uint attachment, uint texture, int level)
        {
            GLInterop.glFramebufferTexturePtr(target, attachment, texture, level);
        }
        public static void glTexImage2DMultisample(uint target, int samples, uint internalformat, int width, int height, bool fixedsamplelocations)
        {
            GLInterop.glTexImage2DMultisamplePtr(target, samples, internalformat, width, height, fixedsamplelocations);
        }
        public static void glTexImage3DMultisample(uint target, int samples, uint internalformat, int width, int height, int depth, bool fixedsamplelocations)
        {
            GLInterop.glTexImage3DMultisamplePtr(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        public static void glGetMultisamplefv(uint pname, uint index, IntPtr val)
        {
            GLInterop.glGetMultisamplefvPtr(pname, index, val);
        }
        public static void glSampleMaski(uint index, uint mask)
        {
            GLInterop.glSampleMaskiPtr(index, mask);
        }
        public static void glBindFragDataLocationIndexed(uint program, uint colorNumber, uint index, IntPtr name)
        {
            GLInterop.glBindFragDataLocationIndexedPtr(program, colorNumber, index, name);
        }
        public static int glGetFragDataIndex(uint program, IntPtr name)
        {
            return GLInterop.glGetFragDataIndexPtr(program, name);
        }
        public static void glGenSamplers(int count, IntPtr samplers)
        {
            GLInterop.glGenSamplersPtr(count, samplers);
        }
        public static void glDeleteSamplers(int count, IntPtr samplers)
        {
            GLInterop.glDeleteSamplersPtr(count, samplers);
        }
        public static bool glIsSampler(uint sampler)
        {
            return GLInterop.glIsSamplerPtr(sampler);
        }
        public static void glBindSampler(uint unit, uint sampler)
        {
            GLInterop.glBindSamplerPtr(unit, sampler);
        }
        public static void glSamplerParameteri(uint sampler, uint pname, int param)
        {
            GLInterop.glSamplerParameteriPtr(sampler, pname, param);
        }
        public static void glSamplerParameteriv(uint sampler, uint pname, IntPtr param)
        {
            GLInterop.glSamplerParameterivPtr(sampler, pname, param);
        }
        public static void glSamplerParameterf(uint sampler, uint pname, float param)
        {
            GLInterop.glSamplerParameterfPtr(sampler, pname, param);
        }
        public static void glSamplerParameterfv(uint sampler, uint pname, IntPtr param)
        {
            GLInterop.glSamplerParameterfvPtr(sampler, pname, param);
        }
        public static void glSamplerParameterIiv(uint sampler, uint pname, IntPtr param)
        {
            GLInterop.glSamplerParameterIivPtr(sampler, pname, param);
        }
        public static void glSamplerParameterIuiv(uint sampler, uint pname, IntPtr param)
        {
            GLInterop.glSamplerParameterIuivPtr(sampler, pname, param);
        }
        public static void glGetSamplerParameteriv(uint sampler, uint pname, IntPtr @params)
        {
            GLInterop.glGetSamplerParameterivPtr(sampler, pname, @params);
        }
        public static void glGetSamplerParameterIiv(uint sampler, uint pname, IntPtr @params)
        {
            GLInterop.glGetSamplerParameterIivPtr(sampler, pname, @params);
        }
        public static void glGetSamplerParameterfv(uint sampler, uint pname, IntPtr @params)
        {
            GLInterop.glGetSamplerParameterfvPtr(sampler, pname, @params);
        }
        public static void glGetSamplerParameterIuiv(uint sampler, uint pname, IntPtr @params)
        {
            GLInterop.glGetSamplerParameterIuivPtr(sampler, pname, @params);
        }
        public static void glQueryCounter(uint id, uint target)
        {
            GLInterop.glQueryCounterPtr(id, target);
        }
        public static void glGetQueryObjecti64v(uint id, uint pname, IntPtr @params)
        {
            GLInterop.glGetQueryObjecti64vPtr(id, pname, @params);
        }
        public static void glGetQueryObjectui64v(uint id, uint pname, IntPtr @params)
        {
            GLInterop.glGetQueryObjectui64vPtr(id, pname, @params);
        }
        public static void glVertexAttribDivisor(uint index, uint divisor)
        {
            GLInterop.glVertexAttribDivisorPtr(index, divisor);
        }
        public static void glVertexAttribP1ui(uint index, uint type, bool normalized, uint value)
        {
            GLInterop.glVertexAttribP1uiPtr(index, type, normalized, value);
        }
        public static void glVertexAttribP1uiv(uint index, uint type, bool normalized, IntPtr value)
        {
            GLInterop.glVertexAttribP1uivPtr(index, type, normalized, value);
        }
        public static void glVertexAttribP2ui(uint index, uint type, bool normalized, uint value)
        {
            GLInterop.glVertexAttribP2uiPtr(index, type, normalized, value);
        }
        public static void glVertexAttribP2uiv(uint index, uint type, bool normalized, IntPtr value)
        {
            GLInterop.glVertexAttribP2uivPtr(index, type, normalized, value);
        }
        public static void glVertexAttribP3ui(uint index, uint type, bool normalized, uint value)
        {
            GLInterop.glVertexAttribP3uiPtr(index, type, normalized, value);
        }
        public static void glVertexAttribP3uiv(uint index, uint type, bool normalized, IntPtr value)
        {
            GLInterop.glVertexAttribP3uivPtr(index, type, normalized, value);
        }
        public static void glVertexAttribP4ui(uint index, uint type, bool normalized, uint value)
        {
            GLInterop.glVertexAttribP4uiPtr(index, type, normalized, value);
        }
        public static void glVertexAttribP4uiv(uint index, uint type, bool normalized, IntPtr value)
        {
            GLInterop.glVertexAttribP4uivPtr(index, type, normalized, value);
        }
        public static void glVertexP2ui(uint type, uint value)
        {
            GLInterop.glVertexP2uiPtr(type, value);
        }
        public static void glVertexP2uiv(uint type, IntPtr value)
        {
            GLInterop.glVertexP2uivPtr(type, value);
        }
        public static void glVertexP3ui(uint type, uint value)
        {
            GLInterop.glVertexP3uiPtr(type, value);
        }
        public static void glVertexP3uiv(uint type, IntPtr value)
        {
            GLInterop.glVertexP3uivPtr(type, value);
        }
        public static void glVertexP4ui(uint type, uint value)
        {
            GLInterop.glVertexP4uiPtr(type, value);
        }
        public static void glVertexP4uiv(uint type, IntPtr value)
        {
            GLInterop.glVertexP4uivPtr(type, value);
        }
        public static void glTexCoordP1ui(uint type, uint coords)
        {
            GLInterop.glTexCoordP1uiPtr(type, coords);
        }
        public static void glTexCoordP1uiv(uint type, IntPtr coords)
        {
            GLInterop.glTexCoordP1uivPtr(type, coords);
        }
        public static void glTexCoordP2ui(uint type, uint coords)
        {
            GLInterop.glTexCoordP2uiPtr(type, coords);
        }
        public static void glTexCoordP2uiv(uint type, IntPtr coords)
        {
            GLInterop.glTexCoordP2uivPtr(type, coords);
        }
        public static void glTexCoordP3ui(uint type, uint coords)
        {
            GLInterop.glTexCoordP3uiPtr(type, coords);
        }
        public static void glTexCoordP3uiv(uint type, IntPtr coords)
        {
            GLInterop.glTexCoordP3uivPtr(type, coords);
        }
        public static void glTexCoordP4ui(uint type, uint coords)
        {
            GLInterop.glTexCoordP4uiPtr(type, coords);
        }
        public static void glTexCoordP4uiv(uint type, IntPtr coords)
        {
            GLInterop.glTexCoordP4uivPtr(type, coords);
        }
        public static void glMultiTexCoordP1ui(uint texture, uint type, uint coords)
        {
            GLInterop.glMultiTexCoordP1uiPtr(texture, type, coords);
        }
        public static void glMultiTexCoordP1uiv(uint texture, uint type, IntPtr coords)
        {
            GLInterop.glMultiTexCoordP1uivPtr(texture, type, coords);
        }
        public static void glMultiTexCoordP2ui(uint texture, uint type, uint coords)
        {
            GLInterop.glMultiTexCoordP2uiPtr(texture, type, coords);
        }
        public static void glMultiTexCoordP2uiv(uint texture, uint type, IntPtr coords)
        {
            GLInterop.glMultiTexCoordP2uivPtr(texture, type, coords);
        }
        public static void glMultiTexCoordP3ui(uint texture, uint type, uint coords)
        {
            GLInterop.glMultiTexCoordP3uiPtr(texture, type, coords);
        }
        public static void glMultiTexCoordP3uiv(uint texture, uint type, IntPtr coords)
        {
            GLInterop.glMultiTexCoordP3uivPtr(texture, type, coords);
        }
        public static void glMultiTexCoordP4ui(uint texture, uint type, uint coords)
        {
            GLInterop.glMultiTexCoordP4uiPtr(texture, type, coords);
        }
        public static void glMultiTexCoordP4uiv(uint texture, uint type, IntPtr coords)
        {
            GLInterop.glMultiTexCoordP4uivPtr(texture, type, coords);
        }
        public static void glNormalP3ui(uint type, uint coords)
        {
            GLInterop.glNormalP3uiPtr(type, coords);
        }
        public static void glNormalP3uiv(uint type, IntPtr coords)
        {
            GLInterop.glNormalP3uivPtr(type, coords);
        }
        public static void glColorP3ui(uint type, uint color)
        {
            GLInterop.glColorP3uiPtr(type, color);
        }
        public static void glColorP3uiv(uint type, IntPtr color)
        {
            GLInterop.glColorP3uivPtr(type, color);
        }
        public static void glColorP4ui(uint type, uint color)
        {
            GLInterop.glColorP4uiPtr(type, color);
        }
        public static void glColorP4uiv(uint type, IntPtr color)
        {
            GLInterop.glColorP4uivPtr(type, color);
        }
        public static void glSecondaryColorP3ui(uint type, uint color)
        {
            GLInterop.glSecondaryColorP3uiPtr(type, color);
        }
        public static void glSecondaryColorP3uiv(uint type, IntPtr color)
        {
            GLInterop.glSecondaryColorP3uivPtr(type, color);
        }
        public static void glMinSampleShading(float value)
        {
            GLInterop.glMinSampleShadingPtr(value);
        }
        public static void glBlendEquationi(uint buf, uint mode)
        {
            GLInterop.glBlendEquationiPtr(buf, mode);
        }
        public static void glBlendEquationSeparatei(uint buf, uint modeRGB, uint modeAlpha)
        {
            GLInterop.glBlendEquationSeparateiPtr(buf, modeRGB, modeAlpha);
        }
        public static void glBlendFunci(uint buf, uint src, uint dst)
        {
            GLInterop.glBlendFunciPtr(buf, src, dst);
        }
        public static void glBlendFuncSeparatei(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha)
        {
            GLInterop.glBlendFuncSeparateiPtr(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        }
        public static void glDrawArraysIndirect(uint mode, IntPtr indirect)
        {
            GLInterop.glDrawArraysIndirectPtr(mode, indirect);
        }
        public static void glDrawElementsIndirect(uint mode, uint type, IntPtr indirect)
        {
            GLInterop.glDrawElementsIndirectPtr(mode, type, indirect);
        }
        public static void glUniform1d(int location, double x)
        {
            GLInterop.glUniform1dPtr(location, x);
        }
        public static void glUniform2d(int location, double x, double y)
        {
            GLInterop.glUniform2dPtr(location, x, y);
        }
        public static void glUniform3d(int location, double x, double y, double z)
        {
            GLInterop.glUniform3dPtr(location, x, y, z);
        }
        public static void glUniform4d(int location, double x, double y, double z, double w)
        {
            GLInterop.glUniform4dPtr(location, x, y, z, w);
        }
        public static void glUniform1dv(int location, int count, IntPtr value)
        {
            GLInterop.glUniform1dvPtr(location, count, value);
        }
        public static void glUniform2dv(int location, int count, IntPtr value)
        {
            GLInterop.glUniform2dvPtr(location, count, value);
        }
        public static void glUniform3dv(int location, int count, IntPtr value)
        {
            GLInterop.glUniform3dvPtr(location, count, value);
        }
        public static void glUniform4dv(int location, int count, IntPtr value)
        {
            GLInterop.glUniform4dvPtr(location, count, value);
        }
        public static void glUniformMatrix2dv(int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glUniformMatrix2dvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix3dv(int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glUniformMatrix3dvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix4dv(int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glUniformMatrix4dvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix2x3dv(int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glUniformMatrix2x3dvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix2x4dv(int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glUniformMatrix2x4dvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix3x2dv(int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glUniformMatrix3x2dvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix3x4dv(int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glUniformMatrix3x4dvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix4x2dv(int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glUniformMatrix4x2dvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix4x3dv(int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glUniformMatrix4x3dvPtr(location, count, transpose, value);
        }
        public static void glGetUniformdv(uint program, int location, IntPtr @params)
        {
            GLInterop.glGetUniformdvPtr(program, location, @params);
        }
        public static int glGetSubroutineUniformLocation(uint program, uint shadertype, IntPtr name)
        {
            return GLInterop.glGetSubroutineUniformLocationPtr(program, shadertype, name);
        }
        public static uint glGetSubroutineIndex(uint program, uint shadertype, IntPtr name)
        {
            return GLInterop.glGetSubroutineIndexPtr(program, shadertype, name);
        }
        public static void glGetActiveSubroutineUniformiv(uint program, uint shadertype, uint index, uint pname, IntPtr values)
        {
            GLInterop.glGetActiveSubroutineUniformivPtr(program, shadertype, index, pname, values);
        }
        public static void glGetActiveSubroutineUniformName(uint program, uint shadertype, uint index, int bufsize, IntPtr length, IntPtr name)
        {
            GLInterop.glGetActiveSubroutineUniformNamePtr(program, shadertype, index, bufsize, length, name);
        }
        public static void glGetActiveSubroutineName(uint program, uint shadertype, uint index, int bufsize, IntPtr length, IntPtr name)
        {
            GLInterop.glGetActiveSubroutineNamePtr(program, shadertype, index, bufsize, length, name);
        }
        public static void glUniformSubroutinesuiv(uint shadertype, int count, IntPtr indices)
        {
            GLInterop.glUniformSubroutinesuivPtr(shadertype, count, indices);
        }
        public static void glGetUniformSubroutineuiv(uint shadertype, int location, IntPtr @params)
        {
            GLInterop.glGetUniformSubroutineuivPtr(shadertype, location, @params);
        }
        public static void glGetProgramStageiv(uint program, uint shadertype, uint pname, IntPtr values)
        {
            GLInterop.glGetProgramStageivPtr(program, shadertype, pname, values);
        }
        public static void glPatchParameteri(uint pname, int value)
        {
            GLInterop.glPatchParameteriPtr(pname, value);
        }
        public static void glPatchParameterfv(uint pname, IntPtr values)
        {
            GLInterop.glPatchParameterfvPtr(pname, values);
        }
        public static void glBindTransformFeedback(uint target, uint id)
        {
            GLInterop.glBindTransformFeedbackPtr(target, id);
        }
        public static void glDeleteTransformFeedbacks(int n, IntPtr ids)
        {
            GLInterop.glDeleteTransformFeedbacksPtr(n, ids);
        }
        public static void glGenTransformFeedbacks(int n, IntPtr ids)
        {
            GLInterop.glGenTransformFeedbacksPtr(n, ids);
        }
        public static bool glIsTransformFeedback(uint id)
        {
            return GLInterop.glIsTransformFeedbackPtr(id);
        }
        public static void glPauseTransformFeedback()
        {
            GLInterop.glPauseTransformFeedbackPtr();
        }
        public static void glResumeTransformFeedback()
        {
            GLInterop.glResumeTransformFeedbackPtr();
        }
        public static void glDrawTransformFeedback(uint mode, uint id)
        {
            GLInterop.glDrawTransformFeedbackPtr(mode, id);
        }
        public static void glDrawTransformFeedbackStream(uint mode, uint id, uint stream)
        {
            GLInterop.glDrawTransformFeedbackStreamPtr(mode, id, stream);
        }
        public static void glBeginQueryIndexed(uint target, uint index, uint id)
        {
            GLInterop.glBeginQueryIndexedPtr(target, index, id);
        }
        public static void glEndQueryIndexed(uint target, uint index)
        {
            GLInterop.glEndQueryIndexedPtr(target, index);
        }
        public static void glGetQueryIndexediv(uint target, uint index, uint pname, IntPtr @params)
        {
            GLInterop.glGetQueryIndexedivPtr(target, index, pname, @params);
        }
        public static void glReleaseShaderCompiler()
        {
            GLInterop.glReleaseShaderCompilerPtr();
        }
        public static void glShaderBinary(int count, IntPtr shaders, uint binaryformat, IntPtr binary, int length)
        {
            GLInterop.glShaderBinaryPtr(count, shaders, binaryformat, binary, length);
        }
        public static void glGetShaderPrecisionFormat(uint shadertype, uint precisiontype, IntPtr range, IntPtr precision)
        {
            GLInterop.glGetShaderPrecisionFormatPtr(shadertype, precisiontype, range, precision);
        }
        public static void glDepthRangef(float n, float f)
        {
            GLInterop.glDepthRangefPtr(n, f);
        }
        public static void glClearDepthf(float d)
        {
            GLInterop.glClearDepthfPtr(d);
        }
        public static void glGetProgramBinary(uint program, int bufSize, IntPtr length, IntPtr binaryFormat, IntPtr binary)
        {
            GLInterop.glGetProgramBinaryPtr(program, bufSize, length, binaryFormat, binary);
        }
        public static void glProgramBinary(uint program, uint binaryFormat, IntPtr binary, int length)
        {
            GLInterop.glProgramBinaryPtr(program, binaryFormat, binary, length);
        }
        public static void glProgramParameteri(uint program, uint pname, int value)
        {
            GLInterop.glProgramParameteriPtr(program, pname, value);
        }
        public static void glUseProgramStages(uint pipeline, uint stages, uint program)
        {
            GLInterop.glUseProgramStagesPtr(pipeline, stages, program);
        }
        public static void glActiveShaderProgram(uint pipeline, uint program)
        {
            GLInterop.glActiveShaderProgramPtr(pipeline, program);
        }
        public static uint glCreateShaderProgramv(uint type, int count, IntPtr strings)
        {
            return GLInterop.glCreateShaderProgramvPtr(type, count, strings);
        }
        public static void glBindProgramPipeline(uint pipeline)
        {
            GLInterop.glBindProgramPipelinePtr(pipeline);
        }
        public static void glDeleteProgramPipelines(int n, IntPtr pipelines)
        {
            GLInterop.glDeleteProgramPipelinesPtr(n, pipelines);
        }
        public static void glGenProgramPipelines(int n, IntPtr pipelines)
        {
            GLInterop.glGenProgramPipelinesPtr(n, pipelines);
        }
        public static bool glIsProgramPipeline(uint pipeline)
        {
            return GLInterop.glIsProgramPipelinePtr(pipeline);
        }
        public static void glGetProgramPipelineiv(uint pipeline, uint pname, IntPtr @params)
        {
            GLInterop.glGetProgramPipelineivPtr(pipeline, pname, @params);
        }
        public static void glProgramUniform1i(uint program, int location, int v0)
        {
            GLInterop.glProgramUniform1iPtr(program, location, v0);
        }
        public static void glProgramUniform1iv(uint program, int location, int count, IntPtr value)
        {
            GLInterop.glProgramUniform1ivPtr(program, location, count, value);
        }
        public static void glProgramUniform1f(uint program, int location, float v0)
        {
            GLInterop.glProgramUniform1fPtr(program, location, v0);
        }
        public static void glProgramUniform1fv(uint program, int location, int count, IntPtr value)
        {
            GLInterop.glProgramUniform1fvPtr(program, location, count, value);
        }
        public static void glProgramUniform1d(uint program, int location, double v0)
        {
            GLInterop.glProgramUniform1dPtr(program, location, v0);
        }
        public static void glProgramUniform1dv(uint program, int location, int count, IntPtr value)
        {
            GLInterop.glProgramUniform1dvPtr(program, location, count, value);
        }
        public static void glProgramUniform1ui(uint program, int location, uint v0)
        {
            GLInterop.glProgramUniform1uiPtr(program, location, v0);
        }
        public static void glProgramUniform1uiv(uint program, int location, int count, IntPtr value)
        {
            GLInterop.glProgramUniform1uivPtr(program, location, count, value);
        }
        public static void glProgramUniform2i(uint program, int location, int v0, int v1)
        {
            GLInterop.glProgramUniform2iPtr(program, location, v0, v1);
        }
        public static void glProgramUniform2iv(uint program, int location, int count, IntPtr value)
        {
            GLInterop.glProgramUniform2ivPtr(program, location, count, value);
        }
        public static void glProgramUniform2f(uint program, int location, float v0, float v1)
        {
            GLInterop.glProgramUniform2fPtr(program, location, v0, v1);
        }
        public static void glProgramUniform2fv(uint program, int location, int count, IntPtr value)
        {
            GLInterop.glProgramUniform2fvPtr(program, location, count, value);
        }
        public static void glProgramUniform2d(uint program, int location, double v0, double v1)
        {
            GLInterop.glProgramUniform2dPtr(program, location, v0, v1);
        }
        public static void glProgramUniform2dv(uint program, int location, int count, IntPtr value)
        {
            GLInterop.glProgramUniform2dvPtr(program, location, count, value);
        }
        public static void glProgramUniform2ui(uint program, int location, uint v0, uint v1)
        {
            GLInterop.glProgramUniform2uiPtr(program, location, v0, v1);
        }
        public static void glProgramUniform2uiv(uint program, int location, int count, IntPtr value)
        {
            GLInterop.glProgramUniform2uivPtr(program, location, count, value);
        }
        public static void glProgramUniform3i(uint program, int location, int v0, int v1, int v2)
        {
            GLInterop.glProgramUniform3iPtr(program, location, v0, v1, v2);
        }
        public static void glProgramUniform3iv(uint program, int location, int count, IntPtr value)
        {
            GLInterop.glProgramUniform3ivPtr(program, location, count, value);
        }
        public static void glProgramUniform3f(uint program, int location, float v0, float v1, float v2)
        {
            GLInterop.glProgramUniform3fPtr(program, location, v0, v1, v2);
        }
        public static void glProgramUniform3fv(uint program, int location, int count, IntPtr value)
        {
            GLInterop.glProgramUniform3fvPtr(program, location, count, value);
        }
        public static void glProgramUniform3d(uint program, int location, double v0, double v1, double v2)
        {
            GLInterop.glProgramUniform3dPtr(program, location, v0, v1, v2);
        }
        public static void glProgramUniform3dv(uint program, int location, int count, IntPtr value)
        {
            GLInterop.glProgramUniform3dvPtr(program, location, count, value);
        }
        public static void glProgramUniform3ui(uint program, int location, uint v0, uint v1, uint v2)
        {
            GLInterop.glProgramUniform3uiPtr(program, location, v0, v1, v2);
        }
        public static void glProgramUniform3uiv(uint program, int location, int count, IntPtr value)
        {
            GLInterop.glProgramUniform3uivPtr(program, location, count, value);
        }
        public static void glProgramUniform4i(uint program, int location, int v0, int v1, int v2, int v3)
        {
            GLInterop.glProgramUniform4iPtr(program, location, v0, v1, v2, v3);
        }
        public static void glProgramUniform4iv(uint program, int location, int count, IntPtr value)
        {
            GLInterop.glProgramUniform4ivPtr(program, location, count, value);
        }
        public static void glProgramUniform4f(uint program, int location, float v0, float v1, float v2, float v3)
        {
            GLInterop.glProgramUniform4fPtr(program, location, v0, v1, v2, v3);
        }
        public static void glProgramUniform4fv(uint program, int location, int count, IntPtr value)
        {
            GLInterop.glProgramUniform4fvPtr(program, location, count, value);
        }
        public static void glProgramUniform4d(uint program, int location, double v0, double v1, double v2, double v3)
        {
            GLInterop.glProgramUniform4dPtr(program, location, v0, v1, v2, v3);
        }
        public static void glProgramUniform4dv(uint program, int location, int count, IntPtr value)
        {
            GLInterop.glProgramUniform4dvPtr(program, location, count, value);
        }
        public static void glProgramUniform4ui(uint program, int location, uint v0, uint v1, uint v2, uint v3)
        {
            GLInterop.glProgramUniform4uiPtr(program, location, v0, v1, v2, v3);
        }
        public static void glProgramUniform4uiv(uint program, int location, int count, IntPtr value)
        {
            GLInterop.glProgramUniform4uivPtr(program, location, count, value);
        }
        public static void glProgramUniformMatrix2fv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glProgramUniformMatrix2fvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix3fv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glProgramUniformMatrix3fvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix4fv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glProgramUniformMatrix4fvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix2dv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glProgramUniformMatrix2dvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix3dv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glProgramUniformMatrix3dvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix4dv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glProgramUniformMatrix4dvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix2x3fv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glProgramUniformMatrix2x3fvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix3x2fv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glProgramUniformMatrix3x2fvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix2x4fv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glProgramUniformMatrix2x4fvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix4x2fv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glProgramUniformMatrix4x2fvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix3x4fv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glProgramUniformMatrix3x4fvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix4x3fv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glProgramUniformMatrix4x3fvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix2x3dv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glProgramUniformMatrix2x3dvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix3x2dv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glProgramUniformMatrix3x2dvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix2x4dv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glProgramUniformMatrix2x4dvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix4x2dv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glProgramUniformMatrix4x2dvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix3x4dv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glProgramUniformMatrix3x4dvPtr(program, location, count, transpose, value);
        }
        public static void glProgramUniformMatrix4x3dv(uint program, int location, int count, bool transpose, IntPtr value)
        {
            GLInterop.glProgramUniformMatrix4x3dvPtr(program, location, count, transpose, value);
        }
        public static void glValidateProgramPipeline(uint pipeline)
        {
            GLInterop.glValidateProgramPipelinePtr(pipeline);
        }
        public static void glGetProgramPipelineInfoLog(uint pipeline, int bufSize, IntPtr length, IntPtr infoLog)
        {
            GLInterop.glGetProgramPipelineInfoLogPtr(pipeline, bufSize, length, infoLog);
        }
        public static void glVertexAttribL1d(uint index, double x)
        {
            GLInterop.glVertexAttribL1dPtr(index, x);
        }
        public static void glVertexAttribL2d(uint index, double x, double y)
        {
            GLInterop.glVertexAttribL2dPtr(index, x, y);
        }
        public static void glVertexAttribL3d(uint index, double x, double y, double z)
        {
            GLInterop.glVertexAttribL3dPtr(index, x, y, z);
        }
        public static void glVertexAttribL4d(uint index, double x, double y, double z, double w)
        {
            GLInterop.glVertexAttribL4dPtr(index, x, y, z, w);
        }
        public static void glVertexAttribL1dv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttribL1dvPtr(index, v);
        }
        public static void glVertexAttribL2dv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttribL2dvPtr(index, v);
        }
        public static void glVertexAttribL3dv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttribL3dvPtr(index, v);
        }
        public static void glVertexAttribL4dv(uint index, IntPtr v)
        {
            GLInterop.glVertexAttribL4dvPtr(index, v);
        }
        public static void glVertexAttribLPointer(uint index, int size, uint type, int stride, IntPtr pointer)
        {
            GLInterop.glVertexAttribLPointerPtr(index, size, type, stride, pointer);
        }
        public static void glGetVertexAttribLdv(uint index, uint pname, IntPtr @params)
        {
            GLInterop.glGetVertexAttribLdvPtr(index, pname, @params);
        }
        public static void glViewportArrayv(uint first, int count, IntPtr v)
        {
            GLInterop.glViewportArrayvPtr(first, count, v);
        }
        public static void glViewportIndexedf(uint index, float x, float y, float w, float h)
        {
            GLInterop.glViewportIndexedfPtr(index, x, y, w, h);
        }
        public static void glViewportIndexedfv(uint index, IntPtr v)
        {
            GLInterop.glViewportIndexedfvPtr(index, v);
        }
        public static void glScissorArrayv(uint first, int count, IntPtr v)
        {
            GLInterop.glScissorArrayvPtr(first, count, v);
        }
        public static void glScissorIndexed(uint index, int left, int bottom, int width, int height)
        {
            GLInterop.glScissorIndexedPtr(index, left, bottom, width, height);
        }
        public static void glScissorIndexedv(uint index, IntPtr v)
        {
            GLInterop.glScissorIndexedvPtr(index, v);
        }
        public static void glDepthRangeArrayv(uint first, int count, IntPtr v)
        {
            GLInterop.glDepthRangeArrayvPtr(first, count, v);
        }
        public static void glDepthRangeIndexed(uint index, double n, double f)
        {
            GLInterop.glDepthRangeIndexedPtr(index, n, f);
        }
        public static void glGetFloati_v(uint target, uint index, IntPtr data)
        {
            GLInterop.glGetFloati_vPtr(target, index, data);
        }
        public static void glGetDoublei_v(uint target, uint index, IntPtr data)
        {
            GLInterop.glGetDoublei_vPtr(target, index, data);
        }
        public static void glDrawArraysInstancedBaseInstance(uint mode, int first, int count, int instancecount, uint baseinstance)
        {
            GLInterop.glDrawArraysInstancedBaseInstancePtr(mode, first, count, instancecount, baseinstance);
        }
        public static void glDrawElementsInstancedBaseInstance(uint mode, int count, uint type, IntPtr indices, int instancecount, uint baseinstance)
        {
            GLInterop.glDrawElementsInstancedBaseInstancePtr(mode, count, type, indices, instancecount, baseinstance);
        }
        public static void glDrawElementsInstancedBaseVertexBaseInstance(uint mode, int count, uint type, IntPtr indices, int instancecount, int basevertex, uint baseinstance)
        {
            GLInterop.glDrawElementsInstancedBaseVertexBaseInstancePtr(mode, count, type, indices, instancecount, basevertex, baseinstance);
        }
        public static void glGetInternalformativ(uint target, uint internalformat, uint pname, int bufSize, IntPtr @params)
        {
            GLInterop.glGetInternalformativPtr(target, internalformat, pname, bufSize, @params);
        }
        public static void glGetActiveAtomicCounterBufferiv(uint program, uint bufferIndex, uint pname, IntPtr @params)
        {
            GLInterop.glGetActiveAtomicCounterBufferivPtr(program, bufferIndex, pname, @params);
        }
        public static void glBindImageTexture(uint unit, uint texture, int level, bool layered, int layer, uint access, uint format)
        {
            GLInterop.glBindImageTexturePtr(unit, texture, level, layered, layer, access, format);
        }
        public static void glMemoryBarrier(uint barriers)
        {
            GLInterop.glMemoryBarrierPtr(barriers);
        }
        public static void glTexStorage1D(uint target, int levels, uint internalformat, int width)
        {
            GLInterop.glTexStorage1DPtr(target, levels, internalformat, width);
        }
        public static void glTexStorage2D(uint target, int levels, uint internalformat, int width, int height)
        {
            GLInterop.glTexStorage2DPtr(target, levels, internalformat, width, height);
        }
        public static void glTexStorage3D(uint target, int levels, uint internalformat, int width, int height, int depth)
        {
            GLInterop.glTexStorage3DPtr(target, levels, internalformat, width, height, depth);
        }
        public static void glDrawTransformFeedbackInstanced(uint mode, uint id, int instancecount)
        {
            GLInterop.glDrawTransformFeedbackInstancedPtr(mode, id, instancecount);
        }
        public static void glDrawTransformFeedbackStreamInstanced(uint mode, uint id, uint stream, int instancecount)
        {
            GLInterop.glDrawTransformFeedbackStreamInstancedPtr(mode, id, stream, instancecount);
        }
        public static void glClearBufferData(uint target, uint internalformat, uint format, uint type, IntPtr data)
        {
            GLInterop.glClearBufferDataPtr(target, internalformat, format, type, data);
        }
        public static void glClearBufferSubData(uint target, uint internalformat, IntPtr offset, int size, uint format, uint type, IntPtr data)
        {
            GLInterop.glClearBufferSubDataPtr(target, internalformat, offset, size, format, type, data);
        }
        public static void glDispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z)
        {
            GLInterop.glDispatchComputePtr(num_groups_x, num_groups_y, num_groups_z);
        }
        public static void glDispatchComputeIndirect(IntPtr indirect)
        {
            GLInterop.glDispatchComputeIndirectPtr(indirect);
        }
        public static void glCopyImageSubData(uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
        {
            GLInterop.glCopyImageSubDataPtr(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        }
        public static void glFramebufferParameteri(uint target, uint pname, int param)
        {
            GLInterop.glFramebufferParameteriPtr(target, pname, param);
        }
        public static void glGetFramebufferParameteriv(uint target, uint pname, IntPtr @params)
        {
            GLInterop.glGetFramebufferParameterivPtr(target, pname, @params);
        }
        public static void glGetInternalformati64v(uint target, uint internalformat, uint pname, int bufSize, IntPtr @params)
        {
            GLInterop.glGetInternalformati64vPtr(target, internalformat, pname, bufSize, @params);
        }
        public static void glInvalidateTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth)
        {
            GLInterop.glInvalidateTexSubImagePtr(texture, level, xoffset, yoffset, zoffset, width, height, depth);
        }
        public static void glInvalidateTexImage(uint texture, int level)
        {
            GLInterop.glInvalidateTexImagePtr(texture, level);
        }
        public static void glInvalidateBufferSubData(uint buffer, IntPtr offset, int length)
        {
            GLInterop.glInvalidateBufferSubDataPtr(buffer, offset, length);
        }
        public static void glInvalidateBufferData(uint buffer)
        {
            GLInterop.glInvalidateBufferDataPtr(buffer);
        }
        public static void glInvalidateFramebuffer(uint target, int numAttachments, IntPtr attachments)
        {
            GLInterop.glInvalidateFramebufferPtr(target, numAttachments, attachments);
        }
        public static void glInvalidateSubFramebuffer(uint target, int numAttachments, IntPtr attachments, int x, int y, int width, int height)
        {
            GLInterop.glInvalidateSubFramebufferPtr(target, numAttachments, attachments, x, y, width, height);
        }
        public static void glMultiDrawArraysIndirect(uint mode, IntPtr indirect, int drawcount, int stride)
        {
            GLInterop.glMultiDrawArraysIndirectPtr(mode, indirect, drawcount, stride);
        }
        public static void glMultiDrawElementsIndirect(uint mode, uint type, IntPtr indirect, int drawcount, int stride)
        {
            GLInterop.glMultiDrawElementsIndirectPtr(mode, type, indirect, drawcount, stride);
        }
        public static void glGetProgramInterfaceiv(uint program, uint programInterface, uint pname, IntPtr @params)
        {
            GLInterop.glGetProgramInterfaceivPtr(program, programInterface, pname, @params);
        }
        public static uint glGetProgramResourceIndex(uint program, uint programInterface, IntPtr name)
        {
            return GLInterop.glGetProgramResourceIndexPtr(program, programInterface, name);
        }
        public static void glGetProgramResourceName(uint program, uint programInterface, uint index, int bufSize, IntPtr length, IntPtr name)
        {
            GLInterop.glGetProgramResourceNamePtr(program, programInterface, index, bufSize, length, name);
        }
        public static void glGetProgramResourceiv(uint program, uint programInterface, uint index, int propCount, IntPtr props, int bufSize, IntPtr length, IntPtr @params)
        {
            GLInterop.glGetProgramResourceivPtr(program, programInterface, index, propCount, props, bufSize, length, @params);
        }
        public static int glGetProgramResourceLocation(uint program, uint programInterface, IntPtr name)
        {
            return GLInterop.glGetProgramResourceLocationPtr(program, programInterface, name);
        }
        public static int glGetProgramResourceLocationIndex(uint program, uint programInterface, IntPtr name)
        {
            return GLInterop.glGetProgramResourceLocationIndexPtr(program, programInterface, name);
        }
        public static void glShaderStorageBlockBinding(uint program, uint storageBlockIndex, uint storageBlockBinding)
        {
            GLInterop.glShaderStorageBlockBindingPtr(program, storageBlockIndex, storageBlockBinding);
        }
        public static void glTexBufferRange(uint target, uint internalformat, uint buffer, IntPtr offset, int size)
        {
            GLInterop.glTexBufferRangePtr(target, internalformat, buffer, offset, size);
        }
        public static void glTexStorage2DMultisample(uint target, int samples, uint internalformat, int width, int height, bool fixedsamplelocations)
        {
            GLInterop.glTexStorage2DMultisamplePtr(target, samples, internalformat, width, height, fixedsamplelocations);
        }
        public static void glTexStorage3DMultisample(uint target, int samples, uint internalformat, int width, int height, int depth, bool fixedsamplelocations)
        {
            GLInterop.glTexStorage3DMultisamplePtr(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        public static void glTextureView(uint texture, uint target, uint origtexture, uint internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
        {
            GLInterop.glTextureViewPtr(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        }
        public static void glBindVertexBuffer(uint bindingindex, uint buffer, IntPtr offset, int stride)
        {
            GLInterop.glBindVertexBufferPtr(bindingindex, buffer, offset, stride);
        }
        public static void glVertexAttribFormat(uint attribindex, int size, uint type, bool normalized, uint relativeoffset)
        {
            GLInterop.glVertexAttribFormatPtr(attribindex, size, type, normalized, relativeoffset);
        }
        public static void glVertexAttribIFormat(uint attribindex, int size, uint type, uint relativeoffset)
        {
            GLInterop.glVertexAttribIFormatPtr(attribindex, size, type, relativeoffset);
        }
        public static void glVertexAttribLFormat(uint attribindex, int size, uint type, uint relativeoffset)
        {
            GLInterop.glVertexAttribLFormatPtr(attribindex, size, type, relativeoffset);
        }
        public static void glVertexAttribBinding(uint attribindex, uint bindingindex)
        {
            GLInterop.glVertexAttribBindingPtr(attribindex, bindingindex);
        }
        public static void glVertexBindingDivisor(uint bindingindex, uint divisor)
        {
            GLInterop.glVertexBindingDivisorPtr(bindingindex, divisor);
        }
        public static void glDebugMessageControl(uint source, uint type, uint severity, int count, IntPtr ids, bool enabled)
        {
            GLInterop.glDebugMessageControlPtr(source, type, severity, count, ids, enabled);
        }
        public static void glDebugMessageInsert(uint source, uint type, uint id, uint severity, int length, IntPtr buf)
        {
            GLInterop.glDebugMessageInsertPtr(source, type, id, severity, length, buf);
        }
        public static void glDebugMessageCallback(IntPtr callback, IntPtr userParam)
        {
            GLInterop.glDebugMessageCallbackPtr(callback, userParam);
        }
        public static uint glGetDebugMessageLog(uint count, int bufSize, IntPtr sources, IntPtr types, IntPtr ids, IntPtr severities, IntPtr lengths, IntPtr messageLog)
        {
            return GLInterop.glGetDebugMessageLogPtr(count, bufSize, sources, types, ids, severities, lengths, messageLog);
        }
        public static void glPushDebugGroup(uint source, uint id, int length, IntPtr message)
        {
            GLInterop.glPushDebugGroupPtr(source, id, length, message);
        }
        public static void glPopDebugGroup()
        {
            GLInterop.glPopDebugGroupPtr();
        }
        public static void glObjectLabel(uint identifier, uint name, int length, IntPtr label)
        {
            GLInterop.glObjectLabelPtr(identifier, name, length, label);
        }
        public static void glGetObjectLabel(uint identifier, uint name, int bufSize, IntPtr length, IntPtr label)
        {
            GLInterop.glGetObjectLabelPtr(identifier, name, bufSize, length, label);
        }
        public static void glObjectPtrLabel(IntPtr ptr, int length, IntPtr label)
        {
            GLInterop.glObjectPtrLabelPtr(ptr, length, label);
        }
        public static void glGetObjectPtrLabel(IntPtr ptr, int bufSize, IntPtr length, IntPtr label)
        {
            GLInterop.glGetObjectPtrLabelPtr(ptr, bufSize, length, label);
        }
        #endregion

        #region Interop
        public static Func<string, IntPtr> GetProcAddress = null;

        public static void LoadAllFunctions()
        {
            GLInterop.glCullFacePtr = (GLInterop.glCullFaceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCullFace"), typeof(GLInterop.glCullFaceFunc));
            GLInterop.glFrontFacePtr = (GLInterop.glFrontFaceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFrontFace"), typeof(GLInterop.glFrontFaceFunc));
            GLInterop.glHintPtr = (GLInterop.glHintFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glHint"), typeof(GLInterop.glHintFunc));
            GLInterop.glLineWidthPtr = (GLInterop.glLineWidthFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLineWidth"), typeof(GLInterop.glLineWidthFunc));
            GLInterop.glPointSizePtr = (GLInterop.glPointSizeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointSize"), typeof(GLInterop.glPointSizeFunc));
            GLInterop.glPolygonModePtr = (GLInterop.glPolygonModeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPolygonMode"), typeof(GLInterop.glPolygonModeFunc));
            GLInterop.glScissorPtr = (GLInterop.glScissorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScissor"), typeof(GLInterop.glScissorFunc));
            GLInterop.glTexParameterfPtr = (GLInterop.glTexParameterfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterf"), typeof(GLInterop.glTexParameterfFunc));
            GLInterop.glTexParameterfvPtr = (GLInterop.glTexParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterfv"), typeof(GLInterop.glTexParameterfvFunc));
            GLInterop.glTexParameteriPtr = (GLInterop.glTexParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameteri"), typeof(GLInterop.glTexParameteriFunc));
            GLInterop.glTexParameterivPtr = (GLInterop.glTexParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameteriv"), typeof(GLInterop.glTexParameterivFunc));
            GLInterop.glTexImage1DPtr = (GLInterop.glTexImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage1D"), typeof(GLInterop.glTexImage1DFunc));
            GLInterop.glTexImage2DPtr = (GLInterop.glTexImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage2D"), typeof(GLInterop.glTexImage2DFunc));
            GLInterop.glDrawBufferPtr = (GLInterop.glDrawBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawBuffer"), typeof(GLInterop.glDrawBufferFunc));
            GLInterop.glClearPtr = (GLInterop.glClearFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClear"), typeof(GLInterop.glClearFunc));
            GLInterop.glClearColorPtr = (GLInterop.glClearColorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearColor"), typeof(GLInterop.glClearColorFunc));
            GLInterop.glClearStencilPtr = (GLInterop.glClearStencilFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearStencil"), typeof(GLInterop.glClearStencilFunc));
            GLInterop.glClearDepthPtr = (GLInterop.glClearDepthFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearDepth"), typeof(GLInterop.glClearDepthFunc));
            GLInterop.glStencilMaskPtr = (GLInterop.glStencilMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilMask"), typeof(GLInterop.glStencilMaskFunc));
            GLInterop.glColorMaskPtr = (GLInterop.glColorMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorMask"), typeof(GLInterop.glColorMaskFunc));
            GLInterop.glDepthMaskPtr = (GLInterop.glDepthMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthMask"), typeof(GLInterop.glDepthMaskFunc));
            GLInterop.glDisablePtr = (GLInterop.glDisableFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDisable"), typeof(GLInterop.glDisableFunc));
            GLInterop.glEnablePtr = (GLInterop.glEnableFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnable"), typeof(GLInterop.glEnableFunc));
            GLInterop.glFinishPtr = (GLInterop.glFinishFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFinish"), typeof(GLInterop.glFinishFunc));
            GLInterop.glFlushPtr = (GLInterop.glFlushFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFlush"), typeof(GLInterop.glFlushFunc));
            GLInterop.glBlendFuncPtr = (GLInterop.glBlendFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendFunc"), typeof(GLInterop.glBlendFuncFunc));
            GLInterop.glLogicOpPtr = (GLInterop.glLogicOpFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLogicOp"), typeof(GLInterop.glLogicOpFunc));
            GLInterop.glStencilFuncPtr = (GLInterop.glStencilFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilFunc"), typeof(GLInterop.glStencilFuncFunc));
            GLInterop.glStencilOpPtr = (GLInterop.glStencilOpFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilOp"), typeof(GLInterop.glStencilOpFunc));
            GLInterop.glDepthFuncPtr = (GLInterop.glDepthFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthFunc"), typeof(GLInterop.glDepthFuncFunc));
            GLInterop.glPixelStorefPtr = (GLInterop.glPixelStorefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelStoref"), typeof(GLInterop.glPixelStorefFunc));
            GLInterop.glPixelStoreiPtr = (GLInterop.glPixelStoreiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelStorei"), typeof(GLInterop.glPixelStoreiFunc));
            GLInterop.glReadBufferPtr = (GLInterop.glReadBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glReadBuffer"), typeof(GLInterop.glReadBufferFunc));
            GLInterop.glReadPixelsPtr = (GLInterop.glReadPixelsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glReadPixels"), typeof(GLInterop.glReadPixelsFunc));
            GLInterop.glGetBooleanvPtr = (GLInterop.glGetBooleanvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBooleanv"), typeof(GLInterop.glGetBooleanvFunc));
            GLInterop.glGetDoublevPtr = (GLInterop.glGetDoublevFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetDoublev"), typeof(GLInterop.glGetDoublevFunc));
            GLInterop.glGetErrorPtr = (GLInterop.glGetErrorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetError"), typeof(GLInterop.glGetErrorFunc));
            GLInterop.glGetFloatvPtr = (GLInterop.glGetFloatvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFloatv"), typeof(GLInterop.glGetFloatvFunc));
            GLInterop.glGetIntegervPtr = (GLInterop.glGetIntegervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetIntegerv"), typeof(GLInterop.glGetIntegervFunc));
            GLInterop.glGetStringPtr = (GLInterop.glGetStringFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetString"), typeof(GLInterop.glGetStringFunc));
            GLInterop.glGetTexImagePtr = (GLInterop.glGetTexImageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexImage"), typeof(GLInterop.glGetTexImageFunc));
            GLInterop.glGetTexParameterfvPtr = (GLInterop.glGetTexParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameterfv"), typeof(GLInterop.glGetTexParameterfvFunc));
            GLInterop.glGetTexParameterivPtr = (GLInterop.glGetTexParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameteriv"), typeof(GLInterop.glGetTexParameterivFunc));
            GLInterop.glGetTexLevelParameterfvPtr = (GLInterop.glGetTexLevelParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexLevelParameterfv"), typeof(GLInterop.glGetTexLevelParameterfvFunc));
            GLInterop.glGetTexLevelParameterivPtr = (GLInterop.glGetTexLevelParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexLevelParameteriv"), typeof(GLInterop.glGetTexLevelParameterivFunc));
            GLInterop.glIsEnabledPtr = (GLInterop.glIsEnabledFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsEnabled"), typeof(GLInterop.glIsEnabledFunc));
            GLInterop.glDepthRangePtr = (GLInterop.glDepthRangeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthRange"), typeof(GLInterop.glDepthRangeFunc));
            GLInterop.glViewportPtr = (GLInterop.glViewportFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glViewport"), typeof(GLInterop.glViewportFunc));
            GLInterop.glNewListPtr = (GLInterop.glNewListFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNewList"), typeof(GLInterop.glNewListFunc));
            GLInterop.glEndListPtr = (GLInterop.glEndListFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEndList"), typeof(GLInterop.glEndListFunc));
            GLInterop.glCallListPtr = (GLInterop.glCallListFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCallList"), typeof(GLInterop.glCallListFunc));
            GLInterop.glCallListsPtr = (GLInterop.glCallListsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCallLists"), typeof(GLInterop.glCallListsFunc));
            GLInterop.glDeleteListsPtr = (GLInterop.glDeleteListsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteLists"), typeof(GLInterop.glDeleteListsFunc));
            GLInterop.glGenListsPtr = (GLInterop.glGenListsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenLists"), typeof(GLInterop.glGenListsFunc));
            GLInterop.glListBasePtr = (GLInterop.glListBaseFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glListBase"), typeof(GLInterop.glListBaseFunc));
            GLInterop.glBeginPtr = (GLInterop.glBeginFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBegin"), typeof(GLInterop.glBeginFunc));
            GLInterop.glBitmapPtr = (GLInterop.glBitmapFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBitmap"), typeof(GLInterop.glBitmapFunc));
            GLInterop.glColor3bPtr = (GLInterop.glColor3bFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3b"), typeof(GLInterop.glColor3bFunc));
            GLInterop.glColor3bvPtr = (GLInterop.glColor3bvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3bv"), typeof(GLInterop.glColor3bvFunc));
            GLInterop.glColor3dPtr = (GLInterop.glColor3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3d"), typeof(GLInterop.glColor3dFunc));
            GLInterop.glColor3dvPtr = (GLInterop.glColor3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3dv"), typeof(GLInterop.glColor3dvFunc));
            GLInterop.glColor3fPtr = (GLInterop.glColor3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3f"), typeof(GLInterop.glColor3fFunc));
            GLInterop.glColor3fvPtr = (GLInterop.glColor3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3fv"), typeof(GLInterop.glColor3fvFunc));
            GLInterop.glColor3iPtr = (GLInterop.glColor3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3i"), typeof(GLInterop.glColor3iFunc));
            GLInterop.glColor3ivPtr = (GLInterop.glColor3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3iv"), typeof(GLInterop.glColor3ivFunc));
            GLInterop.glColor3sPtr = (GLInterop.glColor3sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3s"), typeof(GLInterop.glColor3sFunc));
            GLInterop.glColor3svPtr = (GLInterop.glColor3svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3sv"), typeof(GLInterop.glColor3svFunc));
            GLInterop.glColor3ubPtr = (GLInterop.glColor3ubFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3ub"), typeof(GLInterop.glColor3ubFunc));
            GLInterop.glColor3ubvPtr = (GLInterop.glColor3ubvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3ubv"), typeof(GLInterop.glColor3ubvFunc));
            GLInterop.glColor3uiPtr = (GLInterop.glColor3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3ui"), typeof(GLInterop.glColor3uiFunc));
            GLInterop.glColor3uivPtr = (GLInterop.glColor3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3uiv"), typeof(GLInterop.glColor3uivFunc));
            GLInterop.glColor3usPtr = (GLInterop.glColor3usFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3us"), typeof(GLInterop.glColor3usFunc));
            GLInterop.glColor3usvPtr = (GLInterop.glColor3usvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3usv"), typeof(GLInterop.glColor3usvFunc));
            GLInterop.glColor4bPtr = (GLInterop.glColor4bFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4b"), typeof(GLInterop.glColor4bFunc));
            GLInterop.glColor4bvPtr = (GLInterop.glColor4bvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4bv"), typeof(GLInterop.glColor4bvFunc));
            GLInterop.glColor4dPtr = (GLInterop.glColor4dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4d"), typeof(GLInterop.glColor4dFunc));
            GLInterop.glColor4dvPtr = (GLInterop.glColor4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4dv"), typeof(GLInterop.glColor4dvFunc));
            GLInterop.glColor4fPtr = (GLInterop.glColor4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4f"), typeof(GLInterop.glColor4fFunc));
            GLInterop.glColor4fvPtr = (GLInterop.glColor4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4fv"), typeof(GLInterop.glColor4fvFunc));
            GLInterop.glColor4iPtr = (GLInterop.glColor4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4i"), typeof(GLInterop.glColor4iFunc));
            GLInterop.glColor4ivPtr = (GLInterop.glColor4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4iv"), typeof(GLInterop.glColor4ivFunc));
            GLInterop.glColor4sPtr = (GLInterop.glColor4sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4s"), typeof(GLInterop.glColor4sFunc));
            GLInterop.glColor4svPtr = (GLInterop.glColor4svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4sv"), typeof(GLInterop.glColor4svFunc));
            GLInterop.glColor4ubPtr = (GLInterop.glColor4ubFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4ub"), typeof(GLInterop.glColor4ubFunc));
            GLInterop.glColor4ubvPtr = (GLInterop.glColor4ubvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4ubv"), typeof(GLInterop.glColor4ubvFunc));
            GLInterop.glColor4uiPtr = (GLInterop.glColor4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4ui"), typeof(GLInterop.glColor4uiFunc));
            GLInterop.glColor4uivPtr = (GLInterop.glColor4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4uiv"), typeof(GLInterop.glColor4uivFunc));
            GLInterop.glColor4usPtr = (GLInterop.glColor4usFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4us"), typeof(GLInterop.glColor4usFunc));
            GLInterop.glColor4usvPtr = (GLInterop.glColor4usvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4usv"), typeof(GLInterop.glColor4usvFunc));
            GLInterop.glEdgeFlagPtr = (GLInterop.glEdgeFlagFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEdgeFlag"), typeof(GLInterop.glEdgeFlagFunc));
            GLInterop.glEdgeFlagvPtr = (GLInterop.glEdgeFlagvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEdgeFlagv"), typeof(GLInterop.glEdgeFlagvFunc));
            GLInterop.glEndPtr = (GLInterop.glEndFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnd"), typeof(GLInterop.glEndFunc));
            GLInterop.glIndexdPtr = (GLInterop.glIndexdFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexd"), typeof(GLInterop.glIndexdFunc));
            GLInterop.glIndexdvPtr = (GLInterop.glIndexdvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexdv"), typeof(GLInterop.glIndexdvFunc));
            GLInterop.glIndexfPtr = (GLInterop.glIndexfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexf"), typeof(GLInterop.glIndexfFunc));
            GLInterop.glIndexfvPtr = (GLInterop.glIndexfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexfv"), typeof(GLInterop.glIndexfvFunc));
            GLInterop.glIndexiPtr = (GLInterop.glIndexiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexi"), typeof(GLInterop.glIndexiFunc));
            GLInterop.glIndexivPtr = (GLInterop.glIndexivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexiv"), typeof(GLInterop.glIndexivFunc));
            GLInterop.glIndexsPtr = (GLInterop.glIndexsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexs"), typeof(GLInterop.glIndexsFunc));
            GLInterop.glIndexsvPtr = (GLInterop.glIndexsvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexsv"), typeof(GLInterop.glIndexsvFunc));
            GLInterop.glNormal3bPtr = (GLInterop.glNormal3bFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3b"), typeof(GLInterop.glNormal3bFunc));
            GLInterop.glNormal3bvPtr = (GLInterop.glNormal3bvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3bv"), typeof(GLInterop.glNormal3bvFunc));
            GLInterop.glNormal3dPtr = (GLInterop.glNormal3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3d"), typeof(GLInterop.glNormal3dFunc));
            GLInterop.glNormal3dvPtr = (GLInterop.glNormal3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3dv"), typeof(GLInterop.glNormal3dvFunc));
            GLInterop.glNormal3fPtr = (GLInterop.glNormal3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3f"), typeof(GLInterop.glNormal3fFunc));
            GLInterop.glNormal3fvPtr = (GLInterop.glNormal3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3fv"), typeof(GLInterop.glNormal3fvFunc));
            GLInterop.glNormal3iPtr = (GLInterop.glNormal3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3i"), typeof(GLInterop.glNormal3iFunc));
            GLInterop.glNormal3ivPtr = (GLInterop.glNormal3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3iv"), typeof(GLInterop.glNormal3ivFunc));
            GLInterop.glNormal3sPtr = (GLInterop.glNormal3sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3s"), typeof(GLInterop.glNormal3sFunc));
            GLInterop.glNormal3svPtr = (GLInterop.glNormal3svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3sv"), typeof(GLInterop.glNormal3svFunc));
            GLInterop.glRasterPos2dPtr = (GLInterop.glRasterPos2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos2d"), typeof(GLInterop.glRasterPos2dFunc));
            GLInterop.glRasterPos2dvPtr = (GLInterop.glRasterPos2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos2dv"), typeof(GLInterop.glRasterPos2dvFunc));
            GLInterop.glRasterPos2fPtr = (GLInterop.glRasterPos2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos2f"), typeof(GLInterop.glRasterPos2fFunc));
            GLInterop.glRasterPos2fvPtr = (GLInterop.glRasterPos2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos2fv"), typeof(GLInterop.glRasterPos2fvFunc));
            GLInterop.glRasterPos2iPtr = (GLInterop.glRasterPos2iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos2i"), typeof(GLInterop.glRasterPos2iFunc));
            GLInterop.glRasterPos2ivPtr = (GLInterop.glRasterPos2ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos2iv"), typeof(GLInterop.glRasterPos2ivFunc));
            GLInterop.glRasterPos2sPtr = (GLInterop.glRasterPos2sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos2s"), typeof(GLInterop.glRasterPos2sFunc));
            GLInterop.glRasterPos2svPtr = (GLInterop.glRasterPos2svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos2sv"), typeof(GLInterop.glRasterPos2svFunc));
            GLInterop.glRasterPos3dPtr = (GLInterop.glRasterPos3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos3d"), typeof(GLInterop.glRasterPos3dFunc));
            GLInterop.glRasterPos3dvPtr = (GLInterop.glRasterPos3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos3dv"), typeof(GLInterop.glRasterPos3dvFunc));
            GLInterop.glRasterPos3fPtr = (GLInterop.glRasterPos3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos3f"), typeof(GLInterop.glRasterPos3fFunc));
            GLInterop.glRasterPos3fvPtr = (GLInterop.glRasterPos3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos3fv"), typeof(GLInterop.glRasterPos3fvFunc));
            GLInterop.glRasterPos3iPtr = (GLInterop.glRasterPos3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos3i"), typeof(GLInterop.glRasterPos3iFunc));
            GLInterop.glRasterPos3ivPtr = (GLInterop.glRasterPos3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos3iv"), typeof(GLInterop.glRasterPos3ivFunc));
            GLInterop.glRasterPos3sPtr = (GLInterop.glRasterPos3sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos3s"), typeof(GLInterop.glRasterPos3sFunc));
            GLInterop.glRasterPos3svPtr = (GLInterop.glRasterPos3svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos3sv"), typeof(GLInterop.glRasterPos3svFunc));
            GLInterop.glRasterPos4dPtr = (GLInterop.glRasterPos4dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos4d"), typeof(GLInterop.glRasterPos4dFunc));
            GLInterop.glRasterPos4dvPtr = (GLInterop.glRasterPos4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos4dv"), typeof(GLInterop.glRasterPos4dvFunc));
            GLInterop.glRasterPos4fPtr = (GLInterop.glRasterPos4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos4f"), typeof(GLInterop.glRasterPos4fFunc));
            GLInterop.glRasterPos4fvPtr = (GLInterop.glRasterPos4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos4fv"), typeof(GLInterop.glRasterPos4fvFunc));
            GLInterop.glRasterPos4iPtr = (GLInterop.glRasterPos4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos4i"), typeof(GLInterop.glRasterPos4iFunc));
            GLInterop.glRasterPos4ivPtr = (GLInterop.glRasterPos4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos4iv"), typeof(GLInterop.glRasterPos4ivFunc));
            GLInterop.glRasterPos4sPtr = (GLInterop.glRasterPos4sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos4s"), typeof(GLInterop.glRasterPos4sFunc));
            GLInterop.glRasterPos4svPtr = (GLInterop.glRasterPos4svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos4sv"), typeof(GLInterop.glRasterPos4svFunc));
            GLInterop.glRectdPtr = (GLInterop.glRectdFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRectd"), typeof(GLInterop.glRectdFunc));
            GLInterop.glRectdvPtr = (GLInterop.glRectdvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRectdv"), typeof(GLInterop.glRectdvFunc));
            GLInterop.glRectfPtr = (GLInterop.glRectfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRectf"), typeof(GLInterop.glRectfFunc));
            GLInterop.glRectfvPtr = (GLInterop.glRectfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRectfv"), typeof(GLInterop.glRectfvFunc));
            GLInterop.glRectiPtr = (GLInterop.glRectiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRecti"), typeof(GLInterop.glRectiFunc));
            GLInterop.glRectivPtr = (GLInterop.glRectivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRectiv"), typeof(GLInterop.glRectivFunc));
            GLInterop.glRectsPtr = (GLInterop.glRectsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRects"), typeof(GLInterop.glRectsFunc));
            GLInterop.glRectsvPtr = (GLInterop.glRectsvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRectsv"), typeof(GLInterop.glRectsvFunc));
            GLInterop.glTexCoord1dPtr = (GLInterop.glTexCoord1dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord1d"), typeof(GLInterop.glTexCoord1dFunc));
            GLInterop.glTexCoord1dvPtr = (GLInterop.glTexCoord1dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord1dv"), typeof(GLInterop.glTexCoord1dvFunc));
            GLInterop.glTexCoord1fPtr = (GLInterop.glTexCoord1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord1f"), typeof(GLInterop.glTexCoord1fFunc));
            GLInterop.glTexCoord1fvPtr = (GLInterop.glTexCoord1fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord1fv"), typeof(GLInterop.glTexCoord1fvFunc));
            GLInterop.glTexCoord1iPtr = (GLInterop.glTexCoord1iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord1i"), typeof(GLInterop.glTexCoord1iFunc));
            GLInterop.glTexCoord1ivPtr = (GLInterop.glTexCoord1ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord1iv"), typeof(GLInterop.glTexCoord1ivFunc));
            GLInterop.glTexCoord1sPtr = (GLInterop.glTexCoord1sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord1s"), typeof(GLInterop.glTexCoord1sFunc));
            GLInterop.glTexCoord1svPtr = (GLInterop.glTexCoord1svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord1sv"), typeof(GLInterop.glTexCoord1svFunc));
            GLInterop.glTexCoord2dPtr = (GLInterop.glTexCoord2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord2d"), typeof(GLInterop.glTexCoord2dFunc));
            GLInterop.glTexCoord2dvPtr = (GLInterop.glTexCoord2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord2dv"), typeof(GLInterop.glTexCoord2dvFunc));
            GLInterop.glTexCoord2fPtr = (GLInterop.glTexCoord2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord2f"), typeof(GLInterop.glTexCoord2fFunc));
            GLInterop.glTexCoord2fvPtr = (GLInterop.glTexCoord2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord2fv"), typeof(GLInterop.glTexCoord2fvFunc));
            GLInterop.glTexCoord2iPtr = (GLInterop.glTexCoord2iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord2i"), typeof(GLInterop.glTexCoord2iFunc));
            GLInterop.glTexCoord2ivPtr = (GLInterop.glTexCoord2ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord2iv"), typeof(GLInterop.glTexCoord2ivFunc));
            GLInterop.glTexCoord2sPtr = (GLInterop.glTexCoord2sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord2s"), typeof(GLInterop.glTexCoord2sFunc));
            GLInterop.glTexCoord2svPtr = (GLInterop.glTexCoord2svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord2sv"), typeof(GLInterop.glTexCoord2svFunc));
            GLInterop.glTexCoord3dPtr = (GLInterop.glTexCoord3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord3d"), typeof(GLInterop.glTexCoord3dFunc));
            GLInterop.glTexCoord3dvPtr = (GLInterop.glTexCoord3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord3dv"), typeof(GLInterop.glTexCoord3dvFunc));
            GLInterop.glTexCoord3fPtr = (GLInterop.glTexCoord3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord3f"), typeof(GLInterop.glTexCoord3fFunc));
            GLInterop.glTexCoord3fvPtr = (GLInterop.glTexCoord3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord3fv"), typeof(GLInterop.glTexCoord3fvFunc));
            GLInterop.glTexCoord3iPtr = (GLInterop.glTexCoord3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord3i"), typeof(GLInterop.glTexCoord3iFunc));
            GLInterop.glTexCoord3ivPtr = (GLInterop.glTexCoord3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord3iv"), typeof(GLInterop.glTexCoord3ivFunc));
            GLInterop.glTexCoord3sPtr = (GLInterop.glTexCoord3sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord3s"), typeof(GLInterop.glTexCoord3sFunc));
            GLInterop.glTexCoord3svPtr = (GLInterop.glTexCoord3svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord3sv"), typeof(GLInterop.glTexCoord3svFunc));
            GLInterop.glTexCoord4dPtr = (GLInterop.glTexCoord4dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord4d"), typeof(GLInterop.glTexCoord4dFunc));
            GLInterop.glTexCoord4dvPtr = (GLInterop.glTexCoord4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord4dv"), typeof(GLInterop.glTexCoord4dvFunc));
            GLInterop.glTexCoord4fPtr = (GLInterop.glTexCoord4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord4f"), typeof(GLInterop.glTexCoord4fFunc));
            GLInterop.glTexCoord4fvPtr = (GLInterop.glTexCoord4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord4fv"), typeof(GLInterop.glTexCoord4fvFunc));
            GLInterop.glTexCoord4iPtr = (GLInterop.glTexCoord4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord4i"), typeof(GLInterop.glTexCoord4iFunc));
            GLInterop.glTexCoord4ivPtr = (GLInterop.glTexCoord4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord4iv"), typeof(GLInterop.glTexCoord4ivFunc));
            GLInterop.glTexCoord4sPtr = (GLInterop.glTexCoord4sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord4s"), typeof(GLInterop.glTexCoord4sFunc));
            GLInterop.glTexCoord4svPtr = (GLInterop.glTexCoord4svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord4sv"), typeof(GLInterop.glTexCoord4svFunc));
            GLInterop.glVertex2dPtr = (GLInterop.glVertex2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex2d"), typeof(GLInterop.glVertex2dFunc));
            GLInterop.glVertex2dvPtr = (GLInterop.glVertex2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex2dv"), typeof(GLInterop.glVertex2dvFunc));
            GLInterop.glVertex2fPtr = (GLInterop.glVertex2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex2f"), typeof(GLInterop.glVertex2fFunc));
            GLInterop.glVertex2fvPtr = (GLInterop.glVertex2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex2fv"), typeof(GLInterop.glVertex2fvFunc));
            GLInterop.glVertex2iPtr = (GLInterop.glVertex2iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex2i"), typeof(GLInterop.glVertex2iFunc));
            GLInterop.glVertex2ivPtr = (GLInterop.glVertex2ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex2iv"), typeof(GLInterop.glVertex2ivFunc));
            GLInterop.glVertex2sPtr = (GLInterop.glVertex2sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex2s"), typeof(GLInterop.glVertex2sFunc));
            GLInterop.glVertex2svPtr = (GLInterop.glVertex2svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex2sv"), typeof(GLInterop.glVertex2svFunc));
            GLInterop.glVertex3dPtr = (GLInterop.glVertex3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex3d"), typeof(GLInterop.glVertex3dFunc));
            GLInterop.glVertex3dvPtr = (GLInterop.glVertex3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex3dv"), typeof(GLInterop.glVertex3dvFunc));
            GLInterop.glVertex3fPtr = (GLInterop.glVertex3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex3f"), typeof(GLInterop.glVertex3fFunc));
            GLInterop.glVertex3fvPtr = (GLInterop.glVertex3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex3fv"), typeof(GLInterop.glVertex3fvFunc));
            GLInterop.glVertex3iPtr = (GLInterop.glVertex3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex3i"), typeof(GLInterop.glVertex3iFunc));
            GLInterop.glVertex3ivPtr = (GLInterop.glVertex3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex3iv"), typeof(GLInterop.glVertex3ivFunc));
            GLInterop.glVertex3sPtr = (GLInterop.glVertex3sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex3s"), typeof(GLInterop.glVertex3sFunc));
            GLInterop.glVertex3svPtr = (GLInterop.glVertex3svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex3sv"), typeof(GLInterop.glVertex3svFunc));
            GLInterop.glVertex4dPtr = (GLInterop.glVertex4dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex4d"), typeof(GLInterop.glVertex4dFunc));
            GLInterop.glVertex4dvPtr = (GLInterop.glVertex4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex4dv"), typeof(GLInterop.glVertex4dvFunc));
            GLInterop.glVertex4fPtr = (GLInterop.glVertex4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex4f"), typeof(GLInterop.glVertex4fFunc));
            GLInterop.glVertex4fvPtr = (GLInterop.glVertex4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex4fv"), typeof(GLInterop.glVertex4fvFunc));
            GLInterop.glVertex4iPtr = (GLInterop.glVertex4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex4i"), typeof(GLInterop.glVertex4iFunc));
            GLInterop.glVertex4ivPtr = (GLInterop.glVertex4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex4iv"), typeof(GLInterop.glVertex4ivFunc));
            GLInterop.glVertex4sPtr = (GLInterop.glVertex4sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex4s"), typeof(GLInterop.glVertex4sFunc));
            GLInterop.glVertex4svPtr = (GLInterop.glVertex4svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex4sv"), typeof(GLInterop.glVertex4svFunc));
            GLInterop.glClipPlanePtr = (GLInterop.glClipPlaneFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClipPlane"), typeof(GLInterop.glClipPlaneFunc));
            GLInterop.glColorMaterialPtr = (GLInterop.glColorMaterialFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorMaterial"), typeof(GLInterop.glColorMaterialFunc));
            GLInterop.glFogfPtr = (GLInterop.glFogfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogf"), typeof(GLInterop.glFogfFunc));
            GLInterop.glFogfvPtr = (GLInterop.glFogfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogfv"), typeof(GLInterop.glFogfvFunc));
            GLInterop.glFogiPtr = (GLInterop.glFogiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogi"), typeof(GLInterop.glFogiFunc));
            GLInterop.glFogivPtr = (GLInterop.glFogivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogiv"), typeof(GLInterop.glFogivFunc));
            GLInterop.glLightfPtr = (GLInterop.glLightfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightf"), typeof(GLInterop.glLightfFunc));
            GLInterop.glLightfvPtr = (GLInterop.glLightfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightfv"), typeof(GLInterop.glLightfvFunc));
            GLInterop.glLightiPtr = (GLInterop.glLightiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLighti"), typeof(GLInterop.glLightiFunc));
            GLInterop.glLightivPtr = (GLInterop.glLightivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightiv"), typeof(GLInterop.glLightivFunc));
            GLInterop.glLightModelfPtr = (GLInterop.glLightModelfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightModelf"), typeof(GLInterop.glLightModelfFunc));
            GLInterop.glLightModelfvPtr = (GLInterop.glLightModelfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightModelfv"), typeof(GLInterop.glLightModelfvFunc));
            GLInterop.glLightModeliPtr = (GLInterop.glLightModeliFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightModeli"), typeof(GLInterop.glLightModeliFunc));
            GLInterop.glLightModelivPtr = (GLInterop.glLightModelivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightModeliv"), typeof(GLInterop.glLightModelivFunc));
            GLInterop.glLineStipplePtr = (GLInterop.glLineStippleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLineStipple"), typeof(GLInterop.glLineStippleFunc));
            GLInterop.glMaterialfPtr = (GLInterop.glMaterialfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMaterialf"), typeof(GLInterop.glMaterialfFunc));
            GLInterop.glMaterialfvPtr = (GLInterop.glMaterialfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMaterialfv"), typeof(GLInterop.glMaterialfvFunc));
            GLInterop.glMaterialiPtr = (GLInterop.glMaterialiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMateriali"), typeof(GLInterop.glMaterialiFunc));
            GLInterop.glMaterialivPtr = (GLInterop.glMaterialivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMaterialiv"), typeof(GLInterop.glMaterialivFunc));
            GLInterop.glPolygonStipplePtr = (GLInterop.glPolygonStippleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPolygonStipple"), typeof(GLInterop.glPolygonStippleFunc));
            GLInterop.glShadeModelPtr = (GLInterop.glShadeModelFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glShadeModel"), typeof(GLInterop.glShadeModelFunc));
            GLInterop.glTexEnvfPtr = (GLInterop.glTexEnvfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnvf"), typeof(GLInterop.glTexEnvfFunc));
            GLInterop.glTexEnvfvPtr = (GLInterop.glTexEnvfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnvfv"), typeof(GLInterop.glTexEnvfvFunc));
            GLInterop.glTexEnviPtr = (GLInterop.glTexEnviFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnvi"), typeof(GLInterop.glTexEnviFunc));
            GLInterop.glTexEnvivPtr = (GLInterop.glTexEnvivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnviv"), typeof(GLInterop.glTexEnvivFunc));
            GLInterop.glTexGendPtr = (GLInterop.glTexGendFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexGend"), typeof(GLInterop.glTexGendFunc));
            GLInterop.glTexGendvPtr = (GLInterop.glTexGendvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexGendv"), typeof(GLInterop.glTexGendvFunc));
            GLInterop.glTexGenfPtr = (GLInterop.glTexGenfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexGenf"), typeof(GLInterop.glTexGenfFunc));
            GLInterop.glTexGenfvPtr = (GLInterop.glTexGenfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexGenfv"), typeof(GLInterop.glTexGenfvFunc));
            GLInterop.glTexGeniPtr = (GLInterop.glTexGeniFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexGeni"), typeof(GLInterop.glTexGeniFunc));
            GLInterop.glTexGenivPtr = (GLInterop.glTexGenivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexGeniv"), typeof(GLInterop.glTexGenivFunc));
            GLInterop.glFeedbackBufferPtr = (GLInterop.glFeedbackBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFeedbackBuffer"), typeof(GLInterop.glFeedbackBufferFunc));
            GLInterop.glSelectBufferPtr = (GLInterop.glSelectBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSelectBuffer"), typeof(GLInterop.glSelectBufferFunc));
            GLInterop.glRenderModePtr = (GLInterop.glRenderModeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRenderMode"), typeof(GLInterop.glRenderModeFunc));
            GLInterop.glInitNamesPtr = (GLInterop.glInitNamesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glInitNames"), typeof(GLInterop.glInitNamesFunc));
            GLInterop.glLoadNamePtr = (GLInterop.glLoadNameFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLoadName"), typeof(GLInterop.glLoadNameFunc));
            GLInterop.glPassThroughPtr = (GLInterop.glPassThroughFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPassThrough"), typeof(GLInterop.glPassThroughFunc));
            GLInterop.glPopNamePtr = (GLInterop.glPopNameFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPopName"), typeof(GLInterop.glPopNameFunc));
            GLInterop.glPushNamePtr = (GLInterop.glPushNameFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPushName"), typeof(GLInterop.glPushNameFunc));
            GLInterop.glClearAccumPtr = (GLInterop.glClearAccumFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearAccum"), typeof(GLInterop.glClearAccumFunc));
            GLInterop.glClearIndexPtr = (GLInterop.glClearIndexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearIndex"), typeof(GLInterop.glClearIndexFunc));
            GLInterop.glIndexMaskPtr = (GLInterop.glIndexMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexMask"), typeof(GLInterop.glIndexMaskFunc));
            GLInterop.glAccumPtr = (GLInterop.glAccumFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glAccum"), typeof(GLInterop.glAccumFunc));
            GLInterop.glPopAttribPtr = (GLInterop.glPopAttribFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPopAttrib"), typeof(GLInterop.glPopAttribFunc));
            GLInterop.glPushAttribPtr = (GLInterop.glPushAttribFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPushAttrib"), typeof(GLInterop.glPushAttribFunc));
            GLInterop.glMap1dPtr = (GLInterop.glMap1dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMap1d"), typeof(GLInterop.glMap1dFunc));
            GLInterop.glMap1fPtr = (GLInterop.glMap1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMap1f"), typeof(GLInterop.glMap1fFunc));
            GLInterop.glMap2dPtr = (GLInterop.glMap2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMap2d"), typeof(GLInterop.glMap2dFunc));
            GLInterop.glMap2fPtr = (GLInterop.glMap2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMap2f"), typeof(GLInterop.glMap2fFunc));
            GLInterop.glMapGrid1dPtr = (GLInterop.glMapGrid1dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMapGrid1d"), typeof(GLInterop.glMapGrid1dFunc));
            GLInterop.glMapGrid1fPtr = (GLInterop.glMapGrid1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMapGrid1f"), typeof(GLInterop.glMapGrid1fFunc));
            GLInterop.glMapGrid2dPtr = (GLInterop.glMapGrid2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMapGrid2d"), typeof(GLInterop.glMapGrid2dFunc));
            GLInterop.glMapGrid2fPtr = (GLInterop.glMapGrid2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMapGrid2f"), typeof(GLInterop.glMapGrid2fFunc));
            GLInterop.glEvalCoord1dPtr = (GLInterop.glEvalCoord1dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalCoord1d"), typeof(GLInterop.glEvalCoord1dFunc));
            GLInterop.glEvalCoord1dvPtr = (GLInterop.glEvalCoord1dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalCoord1dv"), typeof(GLInterop.glEvalCoord1dvFunc));
            GLInterop.glEvalCoord1fPtr = (GLInterop.glEvalCoord1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalCoord1f"), typeof(GLInterop.glEvalCoord1fFunc));
            GLInterop.glEvalCoord1fvPtr = (GLInterop.glEvalCoord1fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalCoord1fv"), typeof(GLInterop.glEvalCoord1fvFunc));
            GLInterop.glEvalCoord2dPtr = (GLInterop.glEvalCoord2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalCoord2d"), typeof(GLInterop.glEvalCoord2dFunc));
            GLInterop.glEvalCoord2dvPtr = (GLInterop.glEvalCoord2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalCoord2dv"), typeof(GLInterop.glEvalCoord2dvFunc));
            GLInterop.glEvalCoord2fPtr = (GLInterop.glEvalCoord2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalCoord2f"), typeof(GLInterop.glEvalCoord2fFunc));
            GLInterop.glEvalCoord2fvPtr = (GLInterop.glEvalCoord2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalCoord2fv"), typeof(GLInterop.glEvalCoord2fvFunc));
            GLInterop.glEvalMesh1Ptr = (GLInterop.glEvalMesh1Func)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalMesh1"), typeof(GLInterop.glEvalMesh1Func));
            GLInterop.glEvalPoint1Ptr = (GLInterop.glEvalPoint1Func)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalPoint1"), typeof(GLInterop.glEvalPoint1Func));
            GLInterop.glEvalMesh2Ptr = (GLInterop.glEvalMesh2Func)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalMesh2"), typeof(GLInterop.glEvalMesh2Func));
            GLInterop.glEvalPoint2Ptr = (GLInterop.glEvalPoint2Func)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalPoint2"), typeof(GLInterop.glEvalPoint2Func));
            GLInterop.glAlphaFuncPtr = (GLInterop.glAlphaFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glAlphaFunc"), typeof(GLInterop.glAlphaFuncFunc));
            GLInterop.glPixelZoomPtr = (GLInterop.glPixelZoomFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelZoom"), typeof(GLInterop.glPixelZoomFunc));
            GLInterop.glPixelTransferfPtr = (GLInterop.glPixelTransferfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelTransferf"), typeof(GLInterop.glPixelTransferfFunc));
            GLInterop.glPixelTransferiPtr = (GLInterop.glPixelTransferiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelTransferi"), typeof(GLInterop.glPixelTransferiFunc));
            GLInterop.glPixelMapfvPtr = (GLInterop.glPixelMapfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelMapfv"), typeof(GLInterop.glPixelMapfvFunc));
            GLInterop.glPixelMapuivPtr = (GLInterop.glPixelMapuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelMapuiv"), typeof(GLInterop.glPixelMapuivFunc));
            GLInterop.glPixelMapusvPtr = (GLInterop.glPixelMapusvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelMapusv"), typeof(GLInterop.glPixelMapusvFunc));
            GLInterop.glCopyPixelsPtr = (GLInterop.glCopyPixelsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyPixels"), typeof(GLInterop.glCopyPixelsFunc));
            GLInterop.glDrawPixelsPtr = (GLInterop.glDrawPixelsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawPixels"), typeof(GLInterop.glDrawPixelsFunc));
            GLInterop.glGetClipPlanePtr = (GLInterop.glGetClipPlaneFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetClipPlane"), typeof(GLInterop.glGetClipPlaneFunc));
            GLInterop.glGetLightfvPtr = (GLInterop.glGetLightfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetLightfv"), typeof(GLInterop.glGetLightfvFunc));
            GLInterop.glGetLightivPtr = (GLInterop.glGetLightivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetLightiv"), typeof(GLInterop.glGetLightivFunc));
            GLInterop.glGetMapdvPtr = (GLInterop.glGetMapdvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetMapdv"), typeof(GLInterop.glGetMapdvFunc));
            GLInterop.glGetMapfvPtr = (GLInterop.glGetMapfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetMapfv"), typeof(GLInterop.glGetMapfvFunc));
            GLInterop.glGetMapivPtr = (GLInterop.glGetMapivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetMapiv"), typeof(GLInterop.glGetMapivFunc));
            GLInterop.glGetMaterialfvPtr = (GLInterop.glGetMaterialfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetMaterialfv"), typeof(GLInterop.glGetMaterialfvFunc));
            GLInterop.glGetMaterialivPtr = (GLInterop.glGetMaterialivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetMaterialiv"), typeof(GLInterop.glGetMaterialivFunc));
            GLInterop.glGetPixelMapfvPtr = (GLInterop.glGetPixelMapfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetPixelMapfv"), typeof(GLInterop.glGetPixelMapfvFunc));
            GLInterop.glGetPixelMapuivPtr = (GLInterop.glGetPixelMapuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetPixelMapuiv"), typeof(GLInterop.glGetPixelMapuivFunc));
            GLInterop.glGetPixelMapusvPtr = (GLInterop.glGetPixelMapusvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetPixelMapusv"), typeof(GLInterop.glGetPixelMapusvFunc));
            GLInterop.glGetPolygonStipplePtr = (GLInterop.glGetPolygonStippleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetPolygonStipple"), typeof(GLInterop.glGetPolygonStippleFunc));
            GLInterop.glGetTexEnvfvPtr = (GLInterop.glGetTexEnvfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexEnvfv"), typeof(GLInterop.glGetTexEnvfvFunc));
            GLInterop.glGetTexEnvivPtr = (GLInterop.glGetTexEnvivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexEnviv"), typeof(GLInterop.glGetTexEnvivFunc));
            GLInterop.glGetTexGendvPtr = (GLInterop.glGetTexGendvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexGendv"), typeof(GLInterop.glGetTexGendvFunc));
            GLInterop.glGetTexGenfvPtr = (GLInterop.glGetTexGenfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexGenfv"), typeof(GLInterop.glGetTexGenfvFunc));
            GLInterop.glGetTexGenivPtr = (GLInterop.glGetTexGenivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexGeniv"), typeof(GLInterop.glGetTexGenivFunc));
            GLInterop.glIsListPtr = (GLInterop.glIsListFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsList"), typeof(GLInterop.glIsListFunc));
            GLInterop.glFrustumPtr = (GLInterop.glFrustumFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFrustum"), typeof(GLInterop.glFrustumFunc));
            GLInterop.glLoadIdentityPtr = (GLInterop.glLoadIdentityFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLoadIdentity"), typeof(GLInterop.glLoadIdentityFunc));
            GLInterop.glLoadMatrixfPtr = (GLInterop.glLoadMatrixfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLoadMatrixf"), typeof(GLInterop.glLoadMatrixfFunc));
            GLInterop.glLoadMatrixdPtr = (GLInterop.glLoadMatrixdFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLoadMatrixd"), typeof(GLInterop.glLoadMatrixdFunc));
            GLInterop.glMatrixModePtr = (GLInterop.glMatrixModeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMatrixMode"), typeof(GLInterop.glMatrixModeFunc));
            GLInterop.glMultMatrixfPtr = (GLInterop.glMultMatrixfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultMatrixf"), typeof(GLInterop.glMultMatrixfFunc));
            GLInterop.glMultMatrixdPtr = (GLInterop.glMultMatrixdFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultMatrixd"), typeof(GLInterop.glMultMatrixdFunc));
            GLInterop.glOrthoPtr = (GLInterop.glOrthoFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glOrtho"), typeof(GLInterop.glOrthoFunc));
            GLInterop.glPopMatrixPtr = (GLInterop.glPopMatrixFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPopMatrix"), typeof(GLInterop.glPopMatrixFunc));
            GLInterop.glPushMatrixPtr = (GLInterop.glPushMatrixFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPushMatrix"), typeof(GLInterop.glPushMatrixFunc));
            GLInterop.glRotatedPtr = (GLInterop.glRotatedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRotated"), typeof(GLInterop.glRotatedFunc));
            GLInterop.glRotatefPtr = (GLInterop.glRotatefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRotatef"), typeof(GLInterop.glRotatefFunc));
            GLInterop.glScaledPtr = (GLInterop.glScaledFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScaled"), typeof(GLInterop.glScaledFunc));
            GLInterop.glScalefPtr = (GLInterop.glScalefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScalef"), typeof(GLInterop.glScalefFunc));
            GLInterop.glTranslatedPtr = (GLInterop.glTranslatedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTranslated"), typeof(GLInterop.glTranslatedFunc));
            GLInterop.glTranslatefPtr = (GLInterop.glTranslatefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTranslatef"), typeof(GLInterop.glTranslatefFunc));
            GLInterop.glDrawArraysPtr = (GLInterop.glDrawArraysFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawArrays"), typeof(GLInterop.glDrawArraysFunc));
            GLInterop.glDrawElementsPtr = (GLInterop.glDrawElementsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElements"), typeof(GLInterop.glDrawElementsFunc));
            GLInterop.glGetPointervPtr = (GLInterop.glGetPointervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetPointerv"), typeof(GLInterop.glGetPointervFunc));
            GLInterop.glPolygonOffsetPtr = (GLInterop.glPolygonOffsetFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPolygonOffset"), typeof(GLInterop.glPolygonOffsetFunc));
            GLInterop.glCopyTexImage1DPtr = (GLInterop.glCopyTexImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexImage1D"), typeof(GLInterop.glCopyTexImage1DFunc));
            GLInterop.glCopyTexImage2DPtr = (GLInterop.glCopyTexImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexImage2D"), typeof(GLInterop.glCopyTexImage2DFunc));
            GLInterop.glCopyTexSubImage1DPtr = (GLInterop.glCopyTexSubImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexSubImage1D"), typeof(GLInterop.glCopyTexSubImage1DFunc));
            GLInterop.glCopyTexSubImage2DPtr = (GLInterop.glCopyTexSubImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexSubImage2D"), typeof(GLInterop.glCopyTexSubImage2DFunc));
            GLInterop.glTexSubImage1DPtr = (GLInterop.glTexSubImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexSubImage1D"), typeof(GLInterop.glTexSubImage1DFunc));
            GLInterop.glTexSubImage2DPtr = (GLInterop.glTexSubImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexSubImage2D"), typeof(GLInterop.glTexSubImage2DFunc));
            GLInterop.glBindTexturePtr = (GLInterop.glBindTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindTexture"), typeof(GLInterop.glBindTextureFunc));
            GLInterop.glDeleteTexturesPtr = (GLInterop.glDeleteTexturesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteTextures"), typeof(GLInterop.glDeleteTexturesFunc));
            GLInterop.glGenTexturesPtr = (GLInterop.glGenTexturesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenTextures"), typeof(GLInterop.glGenTexturesFunc));
            GLInterop.glIsTexturePtr = (GLInterop.glIsTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsTexture"), typeof(GLInterop.glIsTextureFunc));
            GLInterop.glArrayElementPtr = (GLInterop.glArrayElementFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glArrayElement"), typeof(GLInterop.glArrayElementFunc));
            GLInterop.glColorPointerPtr = (GLInterop.glColorPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorPointer"), typeof(GLInterop.glColorPointerFunc));
            GLInterop.glDisableClientStatePtr = (GLInterop.glDisableClientStateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDisableClientState"), typeof(GLInterop.glDisableClientStateFunc));
            GLInterop.glEdgeFlagPointerPtr = (GLInterop.glEdgeFlagPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEdgeFlagPointer"), typeof(GLInterop.glEdgeFlagPointerFunc));
            GLInterop.glEnableClientStatePtr = (GLInterop.glEnableClientStateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnableClientState"), typeof(GLInterop.glEnableClientStateFunc));
            GLInterop.glIndexPointerPtr = (GLInterop.glIndexPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexPointer"), typeof(GLInterop.glIndexPointerFunc));
            GLInterop.glInterleavedArraysPtr = (GLInterop.glInterleavedArraysFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glInterleavedArrays"), typeof(GLInterop.glInterleavedArraysFunc));
            GLInterop.glNormalPointerPtr = (GLInterop.glNormalPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormalPointer"), typeof(GLInterop.glNormalPointerFunc));
            GLInterop.glTexCoordPointerPtr = (GLInterop.glTexCoordPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordPointer"), typeof(GLInterop.glTexCoordPointerFunc));
            GLInterop.glVertexPointerPtr = (GLInterop.glVertexPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexPointer"), typeof(GLInterop.glVertexPointerFunc));
            GLInterop.glAreTexturesResidentPtr = (GLInterop.glAreTexturesResidentFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glAreTexturesResident"), typeof(GLInterop.glAreTexturesResidentFunc));
            GLInterop.glPrioritizeTexturesPtr = (GLInterop.glPrioritizeTexturesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPrioritizeTextures"), typeof(GLInterop.glPrioritizeTexturesFunc));
            GLInterop.glIndexubPtr = (GLInterop.glIndexubFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexub"), typeof(GLInterop.glIndexubFunc));
            GLInterop.glIndexubvPtr = (GLInterop.glIndexubvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexubv"), typeof(GLInterop.glIndexubvFunc));
            GLInterop.glPopClientAttribPtr = (GLInterop.glPopClientAttribFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPopClientAttrib"), typeof(GLInterop.glPopClientAttribFunc));
            GLInterop.glPushClientAttribPtr = (GLInterop.glPushClientAttribFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPushClientAttrib"), typeof(GLInterop.glPushClientAttribFunc));
            GLInterop.glDrawRangeElementsPtr = (GLInterop.glDrawRangeElementsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawRangeElements"), typeof(GLInterop.glDrawRangeElementsFunc));
            GLInterop.glTexImage3DPtr = (GLInterop.glTexImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage3D"), typeof(GLInterop.glTexImage3DFunc));
            GLInterop.glTexSubImage3DPtr = (GLInterop.glTexSubImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexSubImage3D"), typeof(GLInterop.glTexSubImage3DFunc));
            GLInterop.glCopyTexSubImage3DPtr = (GLInterop.glCopyTexSubImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexSubImage3D"), typeof(GLInterop.glCopyTexSubImage3DFunc));
            GLInterop.glActiveTexturePtr = (GLInterop.glActiveTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glActiveTexture"), typeof(GLInterop.glActiveTextureFunc));
            GLInterop.glSampleCoveragePtr = (GLInterop.glSampleCoverageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSampleCoverage"), typeof(GLInterop.glSampleCoverageFunc));
            GLInterop.glCompressedTexImage3DPtr = (GLInterop.glCompressedTexImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexImage3D"), typeof(GLInterop.glCompressedTexImage3DFunc));
            GLInterop.glCompressedTexImage2DPtr = (GLInterop.glCompressedTexImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexImage2D"), typeof(GLInterop.glCompressedTexImage2DFunc));
            GLInterop.glCompressedTexImage1DPtr = (GLInterop.glCompressedTexImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexImage1D"), typeof(GLInterop.glCompressedTexImage1DFunc));
            GLInterop.glCompressedTexSubImage3DPtr = (GLInterop.glCompressedTexSubImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexSubImage3D"), typeof(GLInterop.glCompressedTexSubImage3DFunc));
            GLInterop.glCompressedTexSubImage2DPtr = (GLInterop.glCompressedTexSubImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexSubImage2D"), typeof(GLInterop.glCompressedTexSubImage2DFunc));
            GLInterop.glCompressedTexSubImage1DPtr = (GLInterop.glCompressedTexSubImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexSubImage1D"), typeof(GLInterop.glCompressedTexSubImage1DFunc));
            GLInterop.glGetCompressedTexImagePtr = (GLInterop.glGetCompressedTexImageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetCompressedTexImage"), typeof(GLInterop.glGetCompressedTexImageFunc));
            GLInterop.glClientActiveTexturePtr = (GLInterop.glClientActiveTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClientActiveTexture"), typeof(GLInterop.glClientActiveTextureFunc));
            GLInterop.glMultiTexCoord1dPtr = (GLInterop.glMultiTexCoord1dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord1d"), typeof(GLInterop.glMultiTexCoord1dFunc));
            GLInterop.glMultiTexCoord1dvPtr = (GLInterop.glMultiTexCoord1dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord1dv"), typeof(GLInterop.glMultiTexCoord1dvFunc));
            GLInterop.glMultiTexCoord1fPtr = (GLInterop.glMultiTexCoord1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord1f"), typeof(GLInterop.glMultiTexCoord1fFunc));
            GLInterop.glMultiTexCoord1fvPtr = (GLInterop.glMultiTexCoord1fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord1fv"), typeof(GLInterop.glMultiTexCoord1fvFunc));
            GLInterop.glMultiTexCoord1iPtr = (GLInterop.glMultiTexCoord1iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord1i"), typeof(GLInterop.glMultiTexCoord1iFunc));
            GLInterop.glMultiTexCoord1ivPtr = (GLInterop.glMultiTexCoord1ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord1iv"), typeof(GLInterop.glMultiTexCoord1ivFunc));
            GLInterop.glMultiTexCoord1sPtr = (GLInterop.glMultiTexCoord1sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord1s"), typeof(GLInterop.glMultiTexCoord1sFunc));
            GLInterop.glMultiTexCoord1svPtr = (GLInterop.glMultiTexCoord1svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord1sv"), typeof(GLInterop.glMultiTexCoord1svFunc));
            GLInterop.glMultiTexCoord2dPtr = (GLInterop.glMultiTexCoord2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord2d"), typeof(GLInterop.glMultiTexCoord2dFunc));
            GLInterop.glMultiTexCoord2dvPtr = (GLInterop.glMultiTexCoord2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord2dv"), typeof(GLInterop.glMultiTexCoord2dvFunc));
            GLInterop.glMultiTexCoord2fPtr = (GLInterop.glMultiTexCoord2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord2f"), typeof(GLInterop.glMultiTexCoord2fFunc));
            GLInterop.glMultiTexCoord2fvPtr = (GLInterop.glMultiTexCoord2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord2fv"), typeof(GLInterop.glMultiTexCoord2fvFunc));
            GLInterop.glMultiTexCoord2iPtr = (GLInterop.glMultiTexCoord2iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord2i"), typeof(GLInterop.glMultiTexCoord2iFunc));
            GLInterop.glMultiTexCoord2ivPtr = (GLInterop.glMultiTexCoord2ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord2iv"), typeof(GLInterop.glMultiTexCoord2ivFunc));
            GLInterop.glMultiTexCoord2sPtr = (GLInterop.glMultiTexCoord2sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord2s"), typeof(GLInterop.glMultiTexCoord2sFunc));
            GLInterop.glMultiTexCoord2svPtr = (GLInterop.glMultiTexCoord2svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord2sv"), typeof(GLInterop.glMultiTexCoord2svFunc));
            GLInterop.glMultiTexCoord3dPtr = (GLInterop.glMultiTexCoord3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord3d"), typeof(GLInterop.glMultiTexCoord3dFunc));
            GLInterop.glMultiTexCoord3dvPtr = (GLInterop.glMultiTexCoord3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord3dv"), typeof(GLInterop.glMultiTexCoord3dvFunc));
            GLInterop.glMultiTexCoord3fPtr = (GLInterop.glMultiTexCoord3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord3f"), typeof(GLInterop.glMultiTexCoord3fFunc));
            GLInterop.glMultiTexCoord3fvPtr = (GLInterop.glMultiTexCoord3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord3fv"), typeof(GLInterop.glMultiTexCoord3fvFunc));
            GLInterop.glMultiTexCoord3iPtr = (GLInterop.glMultiTexCoord3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord3i"), typeof(GLInterop.glMultiTexCoord3iFunc));
            GLInterop.glMultiTexCoord3ivPtr = (GLInterop.glMultiTexCoord3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord3iv"), typeof(GLInterop.glMultiTexCoord3ivFunc));
            GLInterop.glMultiTexCoord3sPtr = (GLInterop.glMultiTexCoord3sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord3s"), typeof(GLInterop.glMultiTexCoord3sFunc));
            GLInterop.glMultiTexCoord3svPtr = (GLInterop.glMultiTexCoord3svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord3sv"), typeof(GLInterop.glMultiTexCoord3svFunc));
            GLInterop.glMultiTexCoord4dPtr = (GLInterop.glMultiTexCoord4dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord4d"), typeof(GLInterop.glMultiTexCoord4dFunc));
            GLInterop.glMultiTexCoord4dvPtr = (GLInterop.glMultiTexCoord4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord4dv"), typeof(GLInterop.glMultiTexCoord4dvFunc));
            GLInterop.glMultiTexCoord4fPtr = (GLInterop.glMultiTexCoord4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord4f"), typeof(GLInterop.glMultiTexCoord4fFunc));
            GLInterop.glMultiTexCoord4fvPtr = (GLInterop.glMultiTexCoord4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord4fv"), typeof(GLInterop.glMultiTexCoord4fvFunc));
            GLInterop.glMultiTexCoord4iPtr = (GLInterop.glMultiTexCoord4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord4i"), typeof(GLInterop.glMultiTexCoord4iFunc));
            GLInterop.glMultiTexCoord4ivPtr = (GLInterop.glMultiTexCoord4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord4iv"), typeof(GLInterop.glMultiTexCoord4ivFunc));
            GLInterop.glMultiTexCoord4sPtr = (GLInterop.glMultiTexCoord4sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord4s"), typeof(GLInterop.glMultiTexCoord4sFunc));
            GLInterop.glMultiTexCoord4svPtr = (GLInterop.glMultiTexCoord4svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord4sv"), typeof(GLInterop.glMultiTexCoord4svFunc));
            GLInterop.glLoadTransposeMatrixfPtr = (GLInterop.glLoadTransposeMatrixfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLoadTransposeMatrixf"), typeof(GLInterop.glLoadTransposeMatrixfFunc));
            GLInterop.glLoadTransposeMatrixdPtr = (GLInterop.glLoadTransposeMatrixdFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLoadTransposeMatrixd"), typeof(GLInterop.glLoadTransposeMatrixdFunc));
            GLInterop.glMultTransposeMatrixfPtr = (GLInterop.glMultTransposeMatrixfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultTransposeMatrixf"), typeof(GLInterop.glMultTransposeMatrixfFunc));
            GLInterop.glMultTransposeMatrixdPtr = (GLInterop.glMultTransposeMatrixdFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultTransposeMatrixd"), typeof(GLInterop.glMultTransposeMatrixdFunc));
            GLInterop.glBlendFuncSeparatePtr = (GLInterop.glBlendFuncSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendFuncSeparate"), typeof(GLInterop.glBlendFuncSeparateFunc));
            GLInterop.glMultiDrawArraysPtr = (GLInterop.glMultiDrawArraysFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiDrawArrays"), typeof(GLInterop.glMultiDrawArraysFunc));
            GLInterop.glMultiDrawElementsPtr = (GLInterop.glMultiDrawElementsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiDrawElements"), typeof(GLInterop.glMultiDrawElementsFunc));
            GLInterop.glPointParameterfPtr = (GLInterop.glPointParameterfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameterf"), typeof(GLInterop.glPointParameterfFunc));
            GLInterop.glPointParameterfvPtr = (GLInterop.glPointParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameterfv"), typeof(GLInterop.glPointParameterfvFunc));
            GLInterop.glPointParameteriPtr = (GLInterop.glPointParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameteri"), typeof(GLInterop.glPointParameteriFunc));
            GLInterop.glPointParameterivPtr = (GLInterop.glPointParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameteriv"), typeof(GLInterop.glPointParameterivFunc));
            GLInterop.glFogCoordfPtr = (GLInterop.glFogCoordfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogCoordf"), typeof(GLInterop.glFogCoordfFunc));
            GLInterop.glFogCoordfvPtr = (GLInterop.glFogCoordfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogCoordfv"), typeof(GLInterop.glFogCoordfvFunc));
            GLInterop.glFogCoorddPtr = (GLInterop.glFogCoorddFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogCoordd"), typeof(GLInterop.glFogCoorddFunc));
            GLInterop.glFogCoorddvPtr = (GLInterop.glFogCoorddvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogCoorddv"), typeof(GLInterop.glFogCoorddvFunc));
            GLInterop.glFogCoordPointerPtr = (GLInterop.glFogCoordPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogCoordPointer"), typeof(GLInterop.glFogCoordPointerFunc));
            GLInterop.glSecondaryColor3bPtr = (GLInterop.glSecondaryColor3bFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3b"), typeof(GLInterop.glSecondaryColor3bFunc));
            GLInterop.glSecondaryColor3bvPtr = (GLInterop.glSecondaryColor3bvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3bv"), typeof(GLInterop.glSecondaryColor3bvFunc));
            GLInterop.glSecondaryColor3dPtr = (GLInterop.glSecondaryColor3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3d"), typeof(GLInterop.glSecondaryColor3dFunc));
            GLInterop.glSecondaryColor3dvPtr = (GLInterop.glSecondaryColor3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3dv"), typeof(GLInterop.glSecondaryColor3dvFunc));
            GLInterop.glSecondaryColor3fPtr = (GLInterop.glSecondaryColor3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3f"), typeof(GLInterop.glSecondaryColor3fFunc));
            GLInterop.glSecondaryColor3fvPtr = (GLInterop.glSecondaryColor3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3fv"), typeof(GLInterop.glSecondaryColor3fvFunc));
            GLInterop.glSecondaryColor3iPtr = (GLInterop.glSecondaryColor3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3i"), typeof(GLInterop.glSecondaryColor3iFunc));
            GLInterop.glSecondaryColor3ivPtr = (GLInterop.glSecondaryColor3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3iv"), typeof(GLInterop.glSecondaryColor3ivFunc));
            GLInterop.glSecondaryColor3sPtr = (GLInterop.glSecondaryColor3sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3s"), typeof(GLInterop.glSecondaryColor3sFunc));
            GLInterop.glSecondaryColor3svPtr = (GLInterop.glSecondaryColor3svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3sv"), typeof(GLInterop.glSecondaryColor3svFunc));
            GLInterop.glSecondaryColor3ubPtr = (GLInterop.glSecondaryColor3ubFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3ub"), typeof(GLInterop.glSecondaryColor3ubFunc));
            GLInterop.glSecondaryColor3ubvPtr = (GLInterop.glSecondaryColor3ubvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3ubv"), typeof(GLInterop.glSecondaryColor3ubvFunc));
            GLInterop.glSecondaryColor3uiPtr = (GLInterop.glSecondaryColor3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3ui"), typeof(GLInterop.glSecondaryColor3uiFunc));
            GLInterop.glSecondaryColor3uivPtr = (GLInterop.glSecondaryColor3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3uiv"), typeof(GLInterop.glSecondaryColor3uivFunc));
            GLInterop.glSecondaryColor3usPtr = (GLInterop.glSecondaryColor3usFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3us"), typeof(GLInterop.glSecondaryColor3usFunc));
            GLInterop.glSecondaryColor3usvPtr = (GLInterop.glSecondaryColor3usvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColor3usv"), typeof(GLInterop.glSecondaryColor3usvFunc));
            GLInterop.glSecondaryColorPointerPtr = (GLInterop.glSecondaryColorPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColorPointer"), typeof(GLInterop.glSecondaryColorPointerFunc));
            GLInterop.glWindowPos2dPtr = (GLInterop.glWindowPos2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos2d"), typeof(GLInterop.glWindowPos2dFunc));
            GLInterop.glWindowPos2dvPtr = (GLInterop.glWindowPos2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos2dv"), typeof(GLInterop.glWindowPos2dvFunc));
            GLInterop.glWindowPos2fPtr = (GLInterop.glWindowPos2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos2f"), typeof(GLInterop.glWindowPos2fFunc));
            GLInterop.glWindowPos2fvPtr = (GLInterop.glWindowPos2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos2fv"), typeof(GLInterop.glWindowPos2fvFunc));
            GLInterop.glWindowPos2iPtr = (GLInterop.glWindowPos2iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos2i"), typeof(GLInterop.glWindowPos2iFunc));
            GLInterop.glWindowPos2ivPtr = (GLInterop.glWindowPos2ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos2iv"), typeof(GLInterop.glWindowPos2ivFunc));
            GLInterop.glWindowPos2sPtr = (GLInterop.glWindowPos2sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos2s"), typeof(GLInterop.glWindowPos2sFunc));
            GLInterop.glWindowPos2svPtr = (GLInterop.glWindowPos2svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos2sv"), typeof(GLInterop.glWindowPos2svFunc));
            GLInterop.glWindowPos3dPtr = (GLInterop.glWindowPos3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos3d"), typeof(GLInterop.glWindowPos3dFunc));
            GLInterop.glWindowPos3dvPtr = (GLInterop.glWindowPos3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos3dv"), typeof(GLInterop.glWindowPos3dvFunc));
            GLInterop.glWindowPos3fPtr = (GLInterop.glWindowPos3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos3f"), typeof(GLInterop.glWindowPos3fFunc));
            GLInterop.glWindowPos3fvPtr = (GLInterop.glWindowPos3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos3fv"), typeof(GLInterop.glWindowPos3fvFunc));
            GLInterop.glWindowPos3iPtr = (GLInterop.glWindowPos3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos3i"), typeof(GLInterop.glWindowPos3iFunc));
            GLInterop.glWindowPos3ivPtr = (GLInterop.glWindowPos3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos3iv"), typeof(GLInterop.glWindowPos3ivFunc));
            GLInterop.glWindowPos3sPtr = (GLInterop.glWindowPos3sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos3s"), typeof(GLInterop.glWindowPos3sFunc));
            GLInterop.glWindowPos3svPtr = (GLInterop.glWindowPos3svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWindowPos3sv"), typeof(GLInterop.glWindowPos3svFunc));
            GLInterop.glBlendColorPtr = (GLInterop.glBlendColorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendColor"), typeof(GLInterop.glBlendColorFunc));
            GLInterop.glBlendEquationPtr = (GLInterop.glBlendEquationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendEquation"), typeof(GLInterop.glBlendEquationFunc));
            GLInterop.glGenQueriesPtr = (GLInterop.glGenQueriesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenQueries"), typeof(GLInterop.glGenQueriesFunc));
            GLInterop.glDeleteQueriesPtr = (GLInterop.glDeleteQueriesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteQueries"), typeof(GLInterop.glDeleteQueriesFunc));
            GLInterop.glIsQueryPtr = (GLInterop.glIsQueryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsQuery"), typeof(GLInterop.glIsQueryFunc));
            GLInterop.glBeginQueryPtr = (GLInterop.glBeginQueryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBeginQuery"), typeof(GLInterop.glBeginQueryFunc));
            GLInterop.glEndQueryPtr = (GLInterop.glEndQueryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEndQuery"), typeof(GLInterop.glEndQueryFunc));
            GLInterop.glGetQueryivPtr = (GLInterop.glGetQueryivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetQueryiv"), typeof(GLInterop.glGetQueryivFunc));
            GLInterop.glGetQueryObjectivPtr = (GLInterop.glGetQueryObjectivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetQueryObjectiv"), typeof(GLInterop.glGetQueryObjectivFunc));
            GLInterop.glGetQueryObjectuivPtr = (GLInterop.glGetQueryObjectuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetQueryObjectuiv"), typeof(GLInterop.glGetQueryObjectuivFunc));
            GLInterop.glBindBufferPtr = (GLInterop.glBindBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindBuffer"), typeof(GLInterop.glBindBufferFunc));
            GLInterop.glDeleteBuffersPtr = (GLInterop.glDeleteBuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteBuffers"), typeof(GLInterop.glDeleteBuffersFunc));
            GLInterop.glGenBuffersPtr = (GLInterop.glGenBuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenBuffers"), typeof(GLInterop.glGenBuffersFunc));
            GLInterop.glIsBufferPtr = (GLInterop.glIsBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsBuffer"), typeof(GLInterop.glIsBufferFunc));
            GLInterop.glBufferDataPtr = (GLInterop.glBufferDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBufferData"), typeof(GLInterop.glBufferDataFunc));
            GLInterop.glBufferSubDataPtr = (GLInterop.glBufferSubDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBufferSubData"), typeof(GLInterop.glBufferSubDataFunc));
            GLInterop.glGetBufferSubDataPtr = (GLInterop.glGetBufferSubDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBufferSubData"), typeof(GLInterop.glGetBufferSubDataFunc));
            GLInterop.glMapBufferPtr = (GLInterop.glMapBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMapBuffer"), typeof(GLInterop.glMapBufferFunc));
            GLInterop.glUnmapBufferPtr = (GLInterop.glUnmapBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUnmapBuffer"), typeof(GLInterop.glUnmapBufferFunc));
            GLInterop.glGetBufferParameterivPtr = (GLInterop.glGetBufferParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBufferParameteriv"), typeof(GLInterop.glGetBufferParameterivFunc));
            GLInterop.glGetBufferPointervPtr = (GLInterop.glGetBufferPointervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBufferPointerv"), typeof(GLInterop.glGetBufferPointervFunc));
            GLInterop.glBlendEquationSeparatePtr = (GLInterop.glBlendEquationSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendEquationSeparate"), typeof(GLInterop.glBlendEquationSeparateFunc));
            GLInterop.glDrawBuffersPtr = (GLInterop.glDrawBuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawBuffers"), typeof(GLInterop.glDrawBuffersFunc));
            GLInterop.glStencilOpSeparatePtr = (GLInterop.glStencilOpSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilOpSeparate"), typeof(GLInterop.glStencilOpSeparateFunc));
            GLInterop.glStencilFuncSeparatePtr = (GLInterop.glStencilFuncSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilFuncSeparate"), typeof(GLInterop.glStencilFuncSeparateFunc));
            GLInterop.glStencilMaskSeparatePtr = (GLInterop.glStencilMaskSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilMaskSeparate"), typeof(GLInterop.glStencilMaskSeparateFunc));
            GLInterop.glAttachShaderPtr = (GLInterop.glAttachShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glAttachShader"), typeof(GLInterop.glAttachShaderFunc));
            GLInterop.glBindAttribLocationPtr = (GLInterop.glBindAttribLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindAttribLocation"), typeof(GLInterop.glBindAttribLocationFunc));
            GLInterop.glCompileShaderPtr = (GLInterop.glCompileShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompileShader"), typeof(GLInterop.glCompileShaderFunc));
            GLInterop.glCreateProgramPtr = (GLInterop.glCreateProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCreateProgram"), typeof(GLInterop.glCreateProgramFunc));
            GLInterop.glCreateShaderPtr = (GLInterop.glCreateShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCreateShader"), typeof(GLInterop.glCreateShaderFunc));
            GLInterop.glDeleteProgramPtr = (GLInterop.glDeleteProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteProgram"), typeof(GLInterop.glDeleteProgramFunc));
            GLInterop.glDeleteShaderPtr = (GLInterop.glDeleteShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteShader"), typeof(GLInterop.glDeleteShaderFunc));
            GLInterop.glDetachShaderPtr = (GLInterop.glDetachShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDetachShader"), typeof(GLInterop.glDetachShaderFunc));
            GLInterop.glDisableVertexAttribArrayPtr = (GLInterop.glDisableVertexAttribArrayFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDisableVertexAttribArray"), typeof(GLInterop.glDisableVertexAttribArrayFunc));
            GLInterop.glEnableVertexAttribArrayPtr = (GLInterop.glEnableVertexAttribArrayFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnableVertexAttribArray"), typeof(GLInterop.glEnableVertexAttribArrayFunc));
            GLInterop.glGetActiveAttribPtr = (GLInterop.glGetActiveAttribFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveAttrib"), typeof(GLInterop.glGetActiveAttribFunc));
            GLInterop.glGetActiveUniformPtr = (GLInterop.glGetActiveUniformFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveUniform"), typeof(GLInterop.glGetActiveUniformFunc));
            GLInterop.glGetAttachedShadersPtr = (GLInterop.glGetAttachedShadersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetAttachedShaders"), typeof(GLInterop.glGetAttachedShadersFunc));
            GLInterop.glGetAttribLocationPtr = (GLInterop.glGetAttribLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetAttribLocation"), typeof(GLInterop.glGetAttribLocationFunc));
            GLInterop.glGetProgramivPtr = (GLInterop.glGetProgramivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramiv"), typeof(GLInterop.glGetProgramivFunc));
            GLInterop.glGetProgramInfoLogPtr = (GLInterop.glGetProgramInfoLogFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramInfoLog"), typeof(GLInterop.glGetProgramInfoLogFunc));
            GLInterop.glGetShaderivPtr = (GLInterop.glGetShaderivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetShaderiv"), typeof(GLInterop.glGetShaderivFunc));
            GLInterop.glGetShaderInfoLogPtr = (GLInterop.glGetShaderInfoLogFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetShaderInfoLog"), typeof(GLInterop.glGetShaderInfoLogFunc));
            GLInterop.glGetShaderSourcePtr = (GLInterop.glGetShaderSourceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetShaderSource"), typeof(GLInterop.glGetShaderSourceFunc));
            GLInterop.glGetUniformLocationPtr = (GLInterop.glGetUniformLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformLocation"), typeof(GLInterop.glGetUniformLocationFunc));
            GLInterop.glGetUniformfvPtr = (GLInterop.glGetUniformfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformfv"), typeof(GLInterop.glGetUniformfvFunc));
            GLInterop.glGetUniformivPtr = (GLInterop.glGetUniformivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformiv"), typeof(GLInterop.glGetUniformivFunc));
            GLInterop.glGetVertexAttribdvPtr = (GLInterop.glGetVertexAttribdvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribdv"), typeof(GLInterop.glGetVertexAttribdvFunc));
            GLInterop.glGetVertexAttribfvPtr = (GLInterop.glGetVertexAttribfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribfv"), typeof(GLInterop.glGetVertexAttribfvFunc));
            GLInterop.glGetVertexAttribivPtr = (GLInterop.glGetVertexAttribivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribiv"), typeof(GLInterop.glGetVertexAttribivFunc));
            GLInterop.glGetVertexAttribPointervPtr = (GLInterop.glGetVertexAttribPointervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribPointerv"), typeof(GLInterop.glGetVertexAttribPointervFunc));
            GLInterop.glIsProgramPtr = (GLInterop.glIsProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsProgram"), typeof(GLInterop.glIsProgramFunc));
            GLInterop.glIsShaderPtr = (GLInterop.glIsShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsShader"), typeof(GLInterop.glIsShaderFunc));
            GLInterop.glLinkProgramPtr = (GLInterop.glLinkProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLinkProgram"), typeof(GLInterop.glLinkProgramFunc));
            GLInterop.glShaderSourcePtr = (GLInterop.glShaderSourceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glShaderSource"), typeof(GLInterop.glShaderSourceFunc));
            GLInterop.glUseProgramPtr = (GLInterop.glUseProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUseProgram"), typeof(GLInterop.glUseProgramFunc));
            GLInterop.glUniform1fPtr = (GLInterop.glUniform1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1f"), typeof(GLInterop.glUniform1fFunc));
            GLInterop.glUniform2fPtr = (GLInterop.glUniform2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2f"), typeof(GLInterop.glUniform2fFunc));
            GLInterop.glUniform3fPtr = (GLInterop.glUniform3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3f"), typeof(GLInterop.glUniform3fFunc));
            GLInterop.glUniform4fPtr = (GLInterop.glUniform4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4f"), typeof(GLInterop.glUniform4fFunc));
            GLInterop.glUniform1iPtr = (GLInterop.glUniform1iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1i"), typeof(GLInterop.glUniform1iFunc));
            GLInterop.glUniform2iPtr = (GLInterop.glUniform2iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2i"), typeof(GLInterop.glUniform2iFunc));
            GLInterop.glUniform3iPtr = (GLInterop.glUniform3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3i"), typeof(GLInterop.glUniform3iFunc));
            GLInterop.glUniform4iPtr = (GLInterop.glUniform4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4i"), typeof(GLInterop.glUniform4iFunc));
            GLInterop.glUniform1fvPtr = (GLInterop.glUniform1fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1fv"), typeof(GLInterop.glUniform1fvFunc));
            GLInterop.glUniform2fvPtr = (GLInterop.glUniform2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2fv"), typeof(GLInterop.glUniform2fvFunc));
            GLInterop.glUniform3fvPtr = (GLInterop.glUniform3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3fv"), typeof(GLInterop.glUniform3fvFunc));
            GLInterop.glUniform4fvPtr = (GLInterop.glUniform4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4fv"), typeof(GLInterop.glUniform4fvFunc));
            GLInterop.glUniform1ivPtr = (GLInterop.glUniform1ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1iv"), typeof(GLInterop.glUniform1ivFunc));
            GLInterop.glUniform2ivPtr = (GLInterop.glUniform2ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2iv"), typeof(GLInterop.glUniform2ivFunc));
            GLInterop.glUniform3ivPtr = (GLInterop.glUniform3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3iv"), typeof(GLInterop.glUniform3ivFunc));
            GLInterop.glUniform4ivPtr = (GLInterop.glUniform4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4iv"), typeof(GLInterop.glUniform4ivFunc));
            GLInterop.glUniformMatrix2fvPtr = (GLInterop.glUniformMatrix2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix2fv"), typeof(GLInterop.glUniformMatrix2fvFunc));
            GLInterop.glUniformMatrix3fvPtr = (GLInterop.glUniformMatrix3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix3fv"), typeof(GLInterop.glUniformMatrix3fvFunc));
            GLInterop.glUniformMatrix4fvPtr = (GLInterop.glUniformMatrix4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix4fv"), typeof(GLInterop.glUniformMatrix4fvFunc));
            GLInterop.glValidateProgramPtr = (GLInterop.glValidateProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glValidateProgram"), typeof(GLInterop.glValidateProgramFunc));
            GLInterop.glVertexAttrib1dPtr = (GLInterop.glVertexAttrib1dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1d"), typeof(GLInterop.glVertexAttrib1dFunc));
            GLInterop.glVertexAttrib1dvPtr = (GLInterop.glVertexAttrib1dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1dv"), typeof(GLInterop.glVertexAttrib1dvFunc));
            GLInterop.glVertexAttrib1fPtr = (GLInterop.glVertexAttrib1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1f"), typeof(GLInterop.glVertexAttrib1fFunc));
            GLInterop.glVertexAttrib1fvPtr = (GLInterop.glVertexAttrib1fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1fv"), typeof(GLInterop.glVertexAttrib1fvFunc));
            GLInterop.glVertexAttrib1sPtr = (GLInterop.glVertexAttrib1sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1s"), typeof(GLInterop.glVertexAttrib1sFunc));
            GLInterop.glVertexAttrib1svPtr = (GLInterop.glVertexAttrib1svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1sv"), typeof(GLInterop.glVertexAttrib1svFunc));
            GLInterop.glVertexAttrib2dPtr = (GLInterop.glVertexAttrib2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2d"), typeof(GLInterop.glVertexAttrib2dFunc));
            GLInterop.glVertexAttrib2dvPtr = (GLInterop.glVertexAttrib2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2dv"), typeof(GLInterop.glVertexAttrib2dvFunc));
            GLInterop.glVertexAttrib2fPtr = (GLInterop.glVertexAttrib2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2f"), typeof(GLInterop.glVertexAttrib2fFunc));
            GLInterop.glVertexAttrib2fvPtr = (GLInterop.glVertexAttrib2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2fv"), typeof(GLInterop.glVertexAttrib2fvFunc));
            GLInterop.glVertexAttrib2sPtr = (GLInterop.glVertexAttrib2sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2s"), typeof(GLInterop.glVertexAttrib2sFunc));
            GLInterop.glVertexAttrib2svPtr = (GLInterop.glVertexAttrib2svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2sv"), typeof(GLInterop.glVertexAttrib2svFunc));
            GLInterop.glVertexAttrib3dPtr = (GLInterop.glVertexAttrib3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3d"), typeof(GLInterop.glVertexAttrib3dFunc));
            GLInterop.glVertexAttrib3dvPtr = (GLInterop.glVertexAttrib3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3dv"), typeof(GLInterop.glVertexAttrib3dvFunc));
            GLInterop.glVertexAttrib3fPtr = (GLInterop.glVertexAttrib3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3f"), typeof(GLInterop.glVertexAttrib3fFunc));
            GLInterop.glVertexAttrib3fvPtr = (GLInterop.glVertexAttrib3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3fv"), typeof(GLInterop.glVertexAttrib3fvFunc));
            GLInterop.glVertexAttrib3sPtr = (GLInterop.glVertexAttrib3sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3s"), typeof(GLInterop.glVertexAttrib3sFunc));
            GLInterop.glVertexAttrib3svPtr = (GLInterop.glVertexAttrib3svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3sv"), typeof(GLInterop.glVertexAttrib3svFunc));
            GLInterop.glVertexAttrib4NbvPtr = (GLInterop.glVertexAttrib4NbvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Nbv"), typeof(GLInterop.glVertexAttrib4NbvFunc));
            GLInterop.glVertexAttrib4NivPtr = (GLInterop.glVertexAttrib4NivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Niv"), typeof(GLInterop.glVertexAttrib4NivFunc));
            GLInterop.glVertexAttrib4NsvPtr = (GLInterop.glVertexAttrib4NsvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Nsv"), typeof(GLInterop.glVertexAttrib4NsvFunc));
            GLInterop.glVertexAttrib4NubPtr = (GLInterop.glVertexAttrib4NubFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Nub"), typeof(GLInterop.glVertexAttrib4NubFunc));
            GLInterop.glVertexAttrib4NubvPtr = (GLInterop.glVertexAttrib4NubvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Nubv"), typeof(GLInterop.glVertexAttrib4NubvFunc));
            GLInterop.glVertexAttrib4NuivPtr = (GLInterop.glVertexAttrib4NuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Nuiv"), typeof(GLInterop.glVertexAttrib4NuivFunc));
            GLInterop.glVertexAttrib4NusvPtr = (GLInterop.glVertexAttrib4NusvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Nusv"), typeof(GLInterop.glVertexAttrib4NusvFunc));
            GLInterop.glVertexAttrib4bvPtr = (GLInterop.glVertexAttrib4bvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4bv"), typeof(GLInterop.glVertexAttrib4bvFunc));
            GLInterop.glVertexAttrib4dPtr = (GLInterop.glVertexAttrib4dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4d"), typeof(GLInterop.glVertexAttrib4dFunc));
            GLInterop.glVertexAttrib4dvPtr = (GLInterop.glVertexAttrib4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4dv"), typeof(GLInterop.glVertexAttrib4dvFunc));
            GLInterop.glVertexAttrib4fPtr = (GLInterop.glVertexAttrib4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4f"), typeof(GLInterop.glVertexAttrib4fFunc));
            GLInterop.glVertexAttrib4fvPtr = (GLInterop.glVertexAttrib4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4fv"), typeof(GLInterop.glVertexAttrib4fvFunc));
            GLInterop.glVertexAttrib4ivPtr = (GLInterop.glVertexAttrib4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4iv"), typeof(GLInterop.glVertexAttrib4ivFunc));
            GLInterop.glVertexAttrib4sPtr = (GLInterop.glVertexAttrib4sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4s"), typeof(GLInterop.glVertexAttrib4sFunc));
            GLInterop.glVertexAttrib4svPtr = (GLInterop.glVertexAttrib4svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4sv"), typeof(GLInterop.glVertexAttrib4svFunc));
            GLInterop.glVertexAttrib4ubvPtr = (GLInterop.glVertexAttrib4ubvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4ubv"), typeof(GLInterop.glVertexAttrib4ubvFunc));
            GLInterop.glVertexAttrib4uivPtr = (GLInterop.glVertexAttrib4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4uiv"), typeof(GLInterop.glVertexAttrib4uivFunc));
            GLInterop.glVertexAttrib4usvPtr = (GLInterop.glVertexAttrib4usvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4usv"), typeof(GLInterop.glVertexAttrib4usvFunc));
            GLInterop.glVertexAttribPointerPtr = (GLInterop.glVertexAttribPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribPointer"), typeof(GLInterop.glVertexAttribPointerFunc));
            GLInterop.glUniformMatrix2x3fvPtr = (GLInterop.glUniformMatrix2x3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix2x3fv"), typeof(GLInterop.glUniformMatrix2x3fvFunc));
            GLInterop.glUniformMatrix3x2fvPtr = (GLInterop.glUniformMatrix3x2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix3x2fv"), typeof(GLInterop.glUniformMatrix3x2fvFunc));
            GLInterop.glUniformMatrix2x4fvPtr = (GLInterop.glUniformMatrix2x4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix2x4fv"), typeof(GLInterop.glUniformMatrix2x4fvFunc));
            GLInterop.glUniformMatrix4x2fvPtr = (GLInterop.glUniformMatrix4x2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix4x2fv"), typeof(GLInterop.glUniformMatrix4x2fvFunc));
            GLInterop.glUniformMatrix3x4fvPtr = (GLInterop.glUniformMatrix3x4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix3x4fv"), typeof(GLInterop.glUniformMatrix3x4fvFunc));
            GLInterop.glUniformMatrix4x3fvPtr = (GLInterop.glUniformMatrix4x3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix4x3fv"), typeof(GLInterop.glUniformMatrix4x3fvFunc));
            GLInterop.glColorMaskiPtr = (GLInterop.glColorMaskiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorMaski"), typeof(GLInterop.glColorMaskiFunc));
            GLInterop.glGetBooleani_vPtr = (GLInterop.glGetBooleani_vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBooleani_v"), typeof(GLInterop.glGetBooleani_vFunc));
            GLInterop.glGetIntegeri_vPtr = (GLInterop.glGetIntegeri_vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetIntegeri_v"), typeof(GLInterop.glGetIntegeri_vFunc));
            GLInterop.glEnableiPtr = (GLInterop.glEnableiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnablei"), typeof(GLInterop.glEnableiFunc));
            GLInterop.glDisableiPtr = (GLInterop.glDisableiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDisablei"), typeof(GLInterop.glDisableiFunc));
            GLInterop.glIsEnablediPtr = (GLInterop.glIsEnablediFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsEnabledi"), typeof(GLInterop.glIsEnablediFunc));
            GLInterop.glBeginTransformFeedbackPtr = (GLInterop.glBeginTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBeginTransformFeedback"), typeof(GLInterop.glBeginTransformFeedbackFunc));
            GLInterop.glEndTransformFeedbackPtr = (GLInterop.glEndTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEndTransformFeedback"), typeof(GLInterop.glEndTransformFeedbackFunc));
            GLInterop.glBindBufferRangePtr = (GLInterop.glBindBufferRangeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindBufferRange"), typeof(GLInterop.glBindBufferRangeFunc));
            GLInterop.glBindBufferBasePtr = (GLInterop.glBindBufferBaseFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindBufferBase"), typeof(GLInterop.glBindBufferBaseFunc));
            GLInterop.glTransformFeedbackVaryingsPtr = (GLInterop.glTransformFeedbackVaryingsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTransformFeedbackVaryings"), typeof(GLInterop.glTransformFeedbackVaryingsFunc));
            GLInterop.glGetTransformFeedbackVaryingPtr = (GLInterop.glGetTransformFeedbackVaryingFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTransformFeedbackVarying"), typeof(GLInterop.glGetTransformFeedbackVaryingFunc));
            GLInterop.glClampColorPtr = (GLInterop.glClampColorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClampColor"), typeof(GLInterop.glClampColorFunc));
            GLInterop.glBeginConditionalRenderPtr = (GLInterop.glBeginConditionalRenderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBeginConditionalRender"), typeof(GLInterop.glBeginConditionalRenderFunc));
            GLInterop.glEndConditionalRenderPtr = (GLInterop.glEndConditionalRenderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEndConditionalRender"), typeof(GLInterop.glEndConditionalRenderFunc));
            GLInterop.glVertexAttribIPointerPtr = (GLInterop.glVertexAttribIPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribIPointer"), typeof(GLInterop.glVertexAttribIPointerFunc));
            GLInterop.glGetVertexAttribIivPtr = (GLInterop.glGetVertexAttribIivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribIiv"), typeof(GLInterop.glGetVertexAttribIivFunc));
            GLInterop.glGetVertexAttribIuivPtr = (GLInterop.glGetVertexAttribIuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribIuiv"), typeof(GLInterop.glGetVertexAttribIuivFunc));
            GLInterop.glVertexAttribI1iPtr = (GLInterop.glVertexAttribI1iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI1i"), typeof(GLInterop.glVertexAttribI1iFunc));
            GLInterop.glVertexAttribI2iPtr = (GLInterop.glVertexAttribI2iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI2i"), typeof(GLInterop.glVertexAttribI2iFunc));
            GLInterop.glVertexAttribI3iPtr = (GLInterop.glVertexAttribI3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI3i"), typeof(GLInterop.glVertexAttribI3iFunc));
            GLInterop.glVertexAttribI4iPtr = (GLInterop.glVertexAttribI4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4i"), typeof(GLInterop.glVertexAttribI4iFunc));
            GLInterop.glVertexAttribI1uiPtr = (GLInterop.glVertexAttribI1uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI1ui"), typeof(GLInterop.glVertexAttribI1uiFunc));
            GLInterop.glVertexAttribI2uiPtr = (GLInterop.glVertexAttribI2uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI2ui"), typeof(GLInterop.glVertexAttribI2uiFunc));
            GLInterop.glVertexAttribI3uiPtr = (GLInterop.glVertexAttribI3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI3ui"), typeof(GLInterop.glVertexAttribI3uiFunc));
            GLInterop.glVertexAttribI4uiPtr = (GLInterop.glVertexAttribI4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4ui"), typeof(GLInterop.glVertexAttribI4uiFunc));
            GLInterop.glVertexAttribI1ivPtr = (GLInterop.glVertexAttribI1ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI1iv"), typeof(GLInterop.glVertexAttribI1ivFunc));
            GLInterop.glVertexAttribI2ivPtr = (GLInterop.glVertexAttribI2ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI2iv"), typeof(GLInterop.glVertexAttribI2ivFunc));
            GLInterop.glVertexAttribI3ivPtr = (GLInterop.glVertexAttribI3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI3iv"), typeof(GLInterop.glVertexAttribI3ivFunc));
            GLInterop.glVertexAttribI4ivPtr = (GLInterop.glVertexAttribI4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4iv"), typeof(GLInterop.glVertexAttribI4ivFunc));
            GLInterop.glVertexAttribI1uivPtr = (GLInterop.glVertexAttribI1uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI1uiv"), typeof(GLInterop.glVertexAttribI1uivFunc));
            GLInterop.glVertexAttribI2uivPtr = (GLInterop.glVertexAttribI2uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI2uiv"), typeof(GLInterop.glVertexAttribI2uivFunc));
            GLInterop.glVertexAttribI3uivPtr = (GLInterop.glVertexAttribI3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI3uiv"), typeof(GLInterop.glVertexAttribI3uivFunc));
            GLInterop.glVertexAttribI4uivPtr = (GLInterop.glVertexAttribI4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4uiv"), typeof(GLInterop.glVertexAttribI4uivFunc));
            GLInterop.glVertexAttribI4bvPtr = (GLInterop.glVertexAttribI4bvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4bv"), typeof(GLInterop.glVertexAttribI4bvFunc));
            GLInterop.glVertexAttribI4svPtr = (GLInterop.glVertexAttribI4svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4sv"), typeof(GLInterop.glVertexAttribI4svFunc));
            GLInterop.glVertexAttribI4ubvPtr = (GLInterop.glVertexAttribI4ubvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4ubv"), typeof(GLInterop.glVertexAttribI4ubvFunc));
            GLInterop.glVertexAttribI4usvPtr = (GLInterop.glVertexAttribI4usvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4usv"), typeof(GLInterop.glVertexAttribI4usvFunc));
            GLInterop.glGetUniformuivPtr = (GLInterop.glGetUniformuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformuiv"), typeof(GLInterop.glGetUniformuivFunc));
            GLInterop.glBindFragDataLocationPtr = (GLInterop.glBindFragDataLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindFragDataLocation"), typeof(GLInterop.glBindFragDataLocationFunc));
            GLInterop.glGetFragDataLocationPtr = (GLInterop.glGetFragDataLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFragDataLocation"), typeof(GLInterop.glGetFragDataLocationFunc));
            GLInterop.glUniform1uiPtr = (GLInterop.glUniform1uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1ui"), typeof(GLInterop.glUniform1uiFunc));
            GLInterop.glUniform2uiPtr = (GLInterop.glUniform2uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2ui"), typeof(GLInterop.glUniform2uiFunc));
            GLInterop.glUniform3uiPtr = (GLInterop.glUniform3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3ui"), typeof(GLInterop.glUniform3uiFunc));
            GLInterop.glUniform4uiPtr = (GLInterop.glUniform4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4ui"), typeof(GLInterop.glUniform4uiFunc));
            GLInterop.glUniform1uivPtr = (GLInterop.glUniform1uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1uiv"), typeof(GLInterop.glUniform1uivFunc));
            GLInterop.glUniform2uivPtr = (GLInterop.glUniform2uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2uiv"), typeof(GLInterop.glUniform2uivFunc));
            GLInterop.glUniform3uivPtr = (GLInterop.glUniform3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3uiv"), typeof(GLInterop.glUniform3uivFunc));
            GLInterop.glUniform4uivPtr = (GLInterop.glUniform4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4uiv"), typeof(GLInterop.glUniform4uivFunc));
            GLInterop.glTexParameterIivPtr = (GLInterop.glTexParameterIivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterIiv"), typeof(GLInterop.glTexParameterIivFunc));
            GLInterop.glTexParameterIuivPtr = (GLInterop.glTexParameterIuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterIuiv"), typeof(GLInterop.glTexParameterIuivFunc));
            GLInterop.glGetTexParameterIivPtr = (GLInterop.glGetTexParameterIivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameterIiv"), typeof(GLInterop.glGetTexParameterIivFunc));
            GLInterop.glGetTexParameterIuivPtr = (GLInterop.glGetTexParameterIuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameterIuiv"), typeof(GLInterop.glGetTexParameterIuivFunc));
            GLInterop.glClearBufferivPtr = (GLInterop.glClearBufferivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearBufferiv"), typeof(GLInterop.glClearBufferivFunc));
            GLInterop.glClearBufferuivPtr = (GLInterop.glClearBufferuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearBufferuiv"), typeof(GLInterop.glClearBufferuivFunc));
            GLInterop.glClearBufferfvPtr = (GLInterop.glClearBufferfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearBufferfv"), typeof(GLInterop.glClearBufferfvFunc));
            GLInterop.glClearBufferfiPtr = (GLInterop.glClearBufferfiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearBufferfi"), typeof(GLInterop.glClearBufferfiFunc));
            GLInterop.glGetStringiPtr = (GLInterop.glGetStringiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetStringi"), typeof(GLInterop.glGetStringiFunc));
            GLInterop.glIsRenderbufferPtr = (GLInterop.glIsRenderbufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsRenderbuffer"), typeof(GLInterop.glIsRenderbufferFunc));
            GLInterop.glBindRenderbufferPtr = (GLInterop.glBindRenderbufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindRenderbuffer"), typeof(GLInterop.glBindRenderbufferFunc));
            GLInterop.glDeleteRenderbuffersPtr = (GLInterop.glDeleteRenderbuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteRenderbuffers"), typeof(GLInterop.glDeleteRenderbuffersFunc));
            GLInterop.glGenRenderbuffersPtr = (GLInterop.glGenRenderbuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenRenderbuffers"), typeof(GLInterop.glGenRenderbuffersFunc));
            GLInterop.glRenderbufferStoragePtr = (GLInterop.glRenderbufferStorageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRenderbufferStorage"), typeof(GLInterop.glRenderbufferStorageFunc));
            GLInterop.glGetRenderbufferParameterivPtr = (GLInterop.glGetRenderbufferParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetRenderbufferParameteriv"), typeof(GLInterop.glGetRenderbufferParameterivFunc));
            GLInterop.glIsFramebufferPtr = (GLInterop.glIsFramebufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsFramebuffer"), typeof(GLInterop.glIsFramebufferFunc));
            GLInterop.glBindFramebufferPtr = (GLInterop.glBindFramebufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindFramebuffer"), typeof(GLInterop.glBindFramebufferFunc));
            GLInterop.glDeleteFramebuffersPtr = (GLInterop.glDeleteFramebuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteFramebuffers"), typeof(GLInterop.glDeleteFramebuffersFunc));
            GLInterop.glGenFramebuffersPtr = (GLInterop.glGenFramebuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenFramebuffers"), typeof(GLInterop.glGenFramebuffersFunc));
            GLInterop.glCheckFramebufferStatusPtr = (GLInterop.glCheckFramebufferStatusFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCheckFramebufferStatus"), typeof(GLInterop.glCheckFramebufferStatusFunc));
            GLInterop.glFramebufferTexture1DPtr = (GLInterop.glFramebufferTexture1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferTexture1D"), typeof(GLInterop.glFramebufferTexture1DFunc));
            GLInterop.glFramebufferTexture2DPtr = (GLInterop.glFramebufferTexture2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferTexture2D"), typeof(GLInterop.glFramebufferTexture2DFunc));
            GLInterop.glFramebufferTexture3DPtr = (GLInterop.glFramebufferTexture3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferTexture3D"), typeof(GLInterop.glFramebufferTexture3DFunc));
            GLInterop.glFramebufferRenderbufferPtr = (GLInterop.glFramebufferRenderbufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferRenderbuffer"), typeof(GLInterop.glFramebufferRenderbufferFunc));
            GLInterop.glGetFramebufferAttachmentParameterivPtr = (GLInterop.glGetFramebufferAttachmentParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFramebufferAttachmentParameteriv"), typeof(GLInterop.glGetFramebufferAttachmentParameterivFunc));
            GLInterop.glGenerateMipmapPtr = (GLInterop.glGenerateMipmapFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenerateMipmap"), typeof(GLInterop.glGenerateMipmapFunc));
            GLInterop.glBlitFramebufferPtr = (GLInterop.glBlitFramebufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlitFramebuffer"), typeof(GLInterop.glBlitFramebufferFunc));
            GLInterop.glRenderbufferStorageMultisamplePtr = (GLInterop.glRenderbufferStorageMultisampleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRenderbufferStorageMultisample"), typeof(GLInterop.glRenderbufferStorageMultisampleFunc));
            GLInterop.glFramebufferTextureLayerPtr = (GLInterop.glFramebufferTextureLayerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferTextureLayer"), typeof(GLInterop.glFramebufferTextureLayerFunc));
            GLInterop.glMapBufferRangePtr = (GLInterop.glMapBufferRangeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMapBufferRange"), typeof(GLInterop.glMapBufferRangeFunc));
            GLInterop.glFlushMappedBufferRangePtr = (GLInterop.glFlushMappedBufferRangeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFlushMappedBufferRange"), typeof(GLInterop.glFlushMappedBufferRangeFunc));
            GLInterop.glBindVertexArrayPtr = (GLInterop.glBindVertexArrayFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindVertexArray"), typeof(GLInterop.glBindVertexArrayFunc));
            GLInterop.glDeleteVertexArraysPtr = (GLInterop.glDeleteVertexArraysFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteVertexArrays"), typeof(GLInterop.glDeleteVertexArraysFunc));
            GLInterop.glGenVertexArraysPtr = (GLInterop.glGenVertexArraysFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenVertexArrays"), typeof(GLInterop.glGenVertexArraysFunc));
            GLInterop.glIsVertexArrayPtr = (GLInterop.glIsVertexArrayFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsVertexArray"), typeof(GLInterop.glIsVertexArrayFunc));
            GLInterop.glDrawArraysInstancedPtr = (GLInterop.glDrawArraysInstancedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawArraysInstanced"), typeof(GLInterop.glDrawArraysInstancedFunc));
            GLInterop.glDrawElementsInstancedPtr = (GLInterop.glDrawElementsInstancedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElementsInstanced"), typeof(GLInterop.glDrawElementsInstancedFunc));
            GLInterop.glTexBufferPtr = (GLInterop.glTexBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexBuffer"), typeof(GLInterop.glTexBufferFunc));
            GLInterop.glPrimitiveRestartIndexPtr = (GLInterop.glPrimitiveRestartIndexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPrimitiveRestartIndex"), typeof(GLInterop.glPrimitiveRestartIndexFunc));
            GLInterop.glCopyBufferSubDataPtr = (GLInterop.glCopyBufferSubDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyBufferSubData"), typeof(GLInterop.glCopyBufferSubDataFunc));
            GLInterop.glGetUniformIndicesPtr = (GLInterop.glGetUniformIndicesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformIndices"), typeof(GLInterop.glGetUniformIndicesFunc));
            GLInterop.glGetActiveUniformsivPtr = (GLInterop.glGetActiveUniformsivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveUniformsiv"), typeof(GLInterop.glGetActiveUniformsivFunc));
            GLInterop.glGetActiveUniformNamePtr = (GLInterop.glGetActiveUniformNameFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveUniformName"), typeof(GLInterop.glGetActiveUniformNameFunc));
            GLInterop.glGetUniformBlockIndexPtr = (GLInterop.glGetUniformBlockIndexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformBlockIndex"), typeof(GLInterop.glGetUniformBlockIndexFunc));
            GLInterop.glGetActiveUniformBlockivPtr = (GLInterop.glGetActiveUniformBlockivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveUniformBlockiv"), typeof(GLInterop.glGetActiveUniformBlockivFunc));
            GLInterop.glGetActiveUniformBlockNamePtr = (GLInterop.glGetActiveUniformBlockNameFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveUniformBlockName"), typeof(GLInterop.glGetActiveUniformBlockNameFunc));
            GLInterop.glUniformBlockBindingPtr = (GLInterop.glUniformBlockBindingFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformBlockBinding"), typeof(GLInterop.glUniformBlockBindingFunc));
            GLInterop.glDrawElementsBaseVertexPtr = (GLInterop.glDrawElementsBaseVertexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElementsBaseVertex"), typeof(GLInterop.glDrawElementsBaseVertexFunc));
            GLInterop.glDrawRangeElementsBaseVertexPtr = (GLInterop.glDrawRangeElementsBaseVertexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawRangeElementsBaseVertex"), typeof(GLInterop.glDrawRangeElementsBaseVertexFunc));
            GLInterop.glDrawElementsInstancedBaseVertexPtr = (GLInterop.glDrawElementsInstancedBaseVertexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElementsInstancedBaseVertex"), typeof(GLInterop.glDrawElementsInstancedBaseVertexFunc));
            GLInterop.glMultiDrawElementsBaseVertexPtr = (GLInterop.glMultiDrawElementsBaseVertexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiDrawElementsBaseVertex"), typeof(GLInterop.glMultiDrawElementsBaseVertexFunc));
            GLInterop.glProvokingVertexPtr = (GLInterop.glProvokingVertexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProvokingVertex"), typeof(GLInterop.glProvokingVertexFunc));
            GLInterop.glFenceSyncPtr = (GLInterop.glFenceSyncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFenceSync"), typeof(GLInterop.glFenceSyncFunc));
            GLInterop.glIsSyncPtr = (GLInterop.glIsSyncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsSync"), typeof(GLInterop.glIsSyncFunc));
            GLInterop.glDeleteSyncPtr = (GLInterop.glDeleteSyncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteSync"), typeof(GLInterop.glDeleteSyncFunc));
            GLInterop.glClientWaitSyncPtr = (GLInterop.glClientWaitSyncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClientWaitSync"), typeof(GLInterop.glClientWaitSyncFunc));
            GLInterop.glWaitSyncPtr = (GLInterop.glWaitSyncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWaitSync"), typeof(GLInterop.glWaitSyncFunc));
            GLInterop.glGetInteger64vPtr = (GLInterop.glGetInteger64vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetInteger64v"), typeof(GLInterop.glGetInteger64vFunc));
            GLInterop.glGetSyncivPtr = (GLInterop.glGetSyncivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetSynciv"), typeof(GLInterop.glGetSyncivFunc));
            GLInterop.glGetInteger64i_vPtr = (GLInterop.glGetInteger64i_vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetInteger64i_v"), typeof(GLInterop.glGetInteger64i_vFunc));
            GLInterop.glGetBufferParameteri64vPtr = (GLInterop.glGetBufferParameteri64vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBufferParameteri64v"), typeof(GLInterop.glGetBufferParameteri64vFunc));
            GLInterop.glFramebufferTexturePtr = (GLInterop.glFramebufferTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferTexture"), typeof(GLInterop.glFramebufferTextureFunc));
            GLInterop.glTexImage2DMultisamplePtr = (GLInterop.glTexImage2DMultisampleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage2DMultisample"), typeof(GLInterop.glTexImage2DMultisampleFunc));
            GLInterop.glTexImage3DMultisamplePtr = (GLInterop.glTexImage3DMultisampleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage3DMultisample"), typeof(GLInterop.glTexImage3DMultisampleFunc));
            GLInterop.glGetMultisamplefvPtr = (GLInterop.glGetMultisamplefvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetMultisamplefv"), typeof(GLInterop.glGetMultisamplefvFunc));
            GLInterop.glSampleMaskiPtr = (GLInterop.glSampleMaskiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSampleMaski"), typeof(GLInterop.glSampleMaskiFunc));
            GLInterop.glBindFragDataLocationIndexedPtr = (GLInterop.glBindFragDataLocationIndexedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindFragDataLocationIndexed"), typeof(GLInterop.glBindFragDataLocationIndexedFunc));
            GLInterop.glGetFragDataIndexPtr = (GLInterop.glGetFragDataIndexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFragDataIndex"), typeof(GLInterop.glGetFragDataIndexFunc));
            GLInterop.glGenSamplersPtr = (GLInterop.glGenSamplersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenSamplers"), typeof(GLInterop.glGenSamplersFunc));
            GLInterop.glDeleteSamplersPtr = (GLInterop.glDeleteSamplersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteSamplers"), typeof(GLInterop.glDeleteSamplersFunc));
            GLInterop.glIsSamplerPtr = (GLInterop.glIsSamplerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsSampler"), typeof(GLInterop.glIsSamplerFunc));
            GLInterop.glBindSamplerPtr = (GLInterop.glBindSamplerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindSampler"), typeof(GLInterop.glBindSamplerFunc));
            GLInterop.glSamplerParameteriPtr = (GLInterop.glSamplerParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSamplerParameteri"), typeof(GLInterop.glSamplerParameteriFunc));
            GLInterop.glSamplerParameterivPtr = (GLInterop.glSamplerParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSamplerParameteriv"), typeof(GLInterop.glSamplerParameterivFunc));
            GLInterop.glSamplerParameterfPtr = (GLInterop.glSamplerParameterfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSamplerParameterf"), typeof(GLInterop.glSamplerParameterfFunc));
            GLInterop.glSamplerParameterfvPtr = (GLInterop.glSamplerParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSamplerParameterfv"), typeof(GLInterop.glSamplerParameterfvFunc));
            GLInterop.glSamplerParameterIivPtr = (GLInterop.glSamplerParameterIivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSamplerParameterIiv"), typeof(GLInterop.glSamplerParameterIivFunc));
            GLInterop.glSamplerParameterIuivPtr = (GLInterop.glSamplerParameterIuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSamplerParameterIuiv"), typeof(GLInterop.glSamplerParameterIuivFunc));
            GLInterop.glGetSamplerParameterivPtr = (GLInterop.glGetSamplerParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetSamplerParameteriv"), typeof(GLInterop.glGetSamplerParameterivFunc));
            GLInterop.glGetSamplerParameterIivPtr = (GLInterop.glGetSamplerParameterIivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetSamplerParameterIiv"), typeof(GLInterop.glGetSamplerParameterIivFunc));
            GLInterop.glGetSamplerParameterfvPtr = (GLInterop.glGetSamplerParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetSamplerParameterfv"), typeof(GLInterop.glGetSamplerParameterfvFunc));
            GLInterop.glGetSamplerParameterIuivPtr = (GLInterop.glGetSamplerParameterIuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetSamplerParameterIuiv"), typeof(GLInterop.glGetSamplerParameterIuivFunc));
            GLInterop.glQueryCounterPtr = (GLInterop.glQueryCounterFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glQueryCounter"), typeof(GLInterop.glQueryCounterFunc));
            GLInterop.glGetQueryObjecti64vPtr = (GLInterop.glGetQueryObjecti64vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetQueryObjecti64v"), typeof(GLInterop.glGetQueryObjecti64vFunc));
            GLInterop.glGetQueryObjectui64vPtr = (GLInterop.glGetQueryObjectui64vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetQueryObjectui64v"), typeof(GLInterop.glGetQueryObjectui64vFunc));
            GLInterop.glVertexAttribDivisorPtr = (GLInterop.glVertexAttribDivisorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribDivisor"), typeof(GLInterop.glVertexAttribDivisorFunc));
            GLInterop.glVertexAttribP1uiPtr = (GLInterop.glVertexAttribP1uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribP1ui"), typeof(GLInterop.glVertexAttribP1uiFunc));
            GLInterop.glVertexAttribP1uivPtr = (GLInterop.glVertexAttribP1uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribP1uiv"), typeof(GLInterop.glVertexAttribP1uivFunc));
            GLInterop.glVertexAttribP2uiPtr = (GLInterop.glVertexAttribP2uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribP2ui"), typeof(GLInterop.glVertexAttribP2uiFunc));
            GLInterop.glVertexAttribP2uivPtr = (GLInterop.glVertexAttribP2uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribP2uiv"), typeof(GLInterop.glVertexAttribP2uivFunc));
            GLInterop.glVertexAttribP3uiPtr = (GLInterop.glVertexAttribP3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribP3ui"), typeof(GLInterop.glVertexAttribP3uiFunc));
            GLInterop.glVertexAttribP3uivPtr = (GLInterop.glVertexAttribP3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribP3uiv"), typeof(GLInterop.glVertexAttribP3uivFunc));
            GLInterop.glVertexAttribP4uiPtr = (GLInterop.glVertexAttribP4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribP4ui"), typeof(GLInterop.glVertexAttribP4uiFunc));
            GLInterop.glVertexAttribP4uivPtr = (GLInterop.glVertexAttribP4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribP4uiv"), typeof(GLInterop.glVertexAttribP4uivFunc));
            GLInterop.glVertexP2uiPtr = (GLInterop.glVertexP2uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexP2ui"), typeof(GLInterop.glVertexP2uiFunc));
            GLInterop.glVertexP2uivPtr = (GLInterop.glVertexP2uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexP2uiv"), typeof(GLInterop.glVertexP2uivFunc));
            GLInterop.glVertexP3uiPtr = (GLInterop.glVertexP3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexP3ui"), typeof(GLInterop.glVertexP3uiFunc));
            GLInterop.glVertexP3uivPtr = (GLInterop.glVertexP3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexP3uiv"), typeof(GLInterop.glVertexP3uivFunc));
            GLInterop.glVertexP4uiPtr = (GLInterop.glVertexP4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexP4ui"), typeof(GLInterop.glVertexP4uiFunc));
            GLInterop.glVertexP4uivPtr = (GLInterop.glVertexP4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexP4uiv"), typeof(GLInterop.glVertexP4uivFunc));
            GLInterop.glTexCoordP1uiPtr = (GLInterop.glTexCoordP1uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordP1ui"), typeof(GLInterop.glTexCoordP1uiFunc));
            GLInterop.glTexCoordP1uivPtr = (GLInterop.glTexCoordP1uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordP1uiv"), typeof(GLInterop.glTexCoordP1uivFunc));
            GLInterop.glTexCoordP2uiPtr = (GLInterop.glTexCoordP2uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordP2ui"), typeof(GLInterop.glTexCoordP2uiFunc));
            GLInterop.glTexCoordP2uivPtr = (GLInterop.glTexCoordP2uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordP2uiv"), typeof(GLInterop.glTexCoordP2uivFunc));
            GLInterop.glTexCoordP3uiPtr = (GLInterop.glTexCoordP3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordP3ui"), typeof(GLInterop.glTexCoordP3uiFunc));
            GLInterop.glTexCoordP3uivPtr = (GLInterop.glTexCoordP3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordP3uiv"), typeof(GLInterop.glTexCoordP3uivFunc));
            GLInterop.glTexCoordP4uiPtr = (GLInterop.glTexCoordP4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordP4ui"), typeof(GLInterop.glTexCoordP4uiFunc));
            GLInterop.glTexCoordP4uivPtr = (GLInterop.glTexCoordP4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordP4uiv"), typeof(GLInterop.glTexCoordP4uivFunc));
            GLInterop.glMultiTexCoordP1uiPtr = (GLInterop.glMultiTexCoordP1uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoordP1ui"), typeof(GLInterop.glMultiTexCoordP1uiFunc));
            GLInterop.glMultiTexCoordP1uivPtr = (GLInterop.glMultiTexCoordP1uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoordP1uiv"), typeof(GLInterop.glMultiTexCoordP1uivFunc));
            GLInterop.glMultiTexCoordP2uiPtr = (GLInterop.glMultiTexCoordP2uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoordP2ui"), typeof(GLInterop.glMultiTexCoordP2uiFunc));
            GLInterop.glMultiTexCoordP2uivPtr = (GLInterop.glMultiTexCoordP2uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoordP2uiv"), typeof(GLInterop.glMultiTexCoordP2uivFunc));
            GLInterop.glMultiTexCoordP3uiPtr = (GLInterop.glMultiTexCoordP3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoordP3ui"), typeof(GLInterop.glMultiTexCoordP3uiFunc));
            GLInterop.glMultiTexCoordP3uivPtr = (GLInterop.glMultiTexCoordP3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoordP3uiv"), typeof(GLInterop.glMultiTexCoordP3uivFunc));
            GLInterop.glMultiTexCoordP4uiPtr = (GLInterop.glMultiTexCoordP4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoordP4ui"), typeof(GLInterop.glMultiTexCoordP4uiFunc));
            GLInterop.glMultiTexCoordP4uivPtr = (GLInterop.glMultiTexCoordP4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoordP4uiv"), typeof(GLInterop.glMultiTexCoordP4uivFunc));
            GLInterop.glNormalP3uiPtr = (GLInterop.glNormalP3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormalP3ui"), typeof(GLInterop.glNormalP3uiFunc));
            GLInterop.glNormalP3uivPtr = (GLInterop.glNormalP3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormalP3uiv"), typeof(GLInterop.glNormalP3uivFunc));
            GLInterop.glColorP3uiPtr = (GLInterop.glColorP3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorP3ui"), typeof(GLInterop.glColorP3uiFunc));
            GLInterop.glColorP3uivPtr = (GLInterop.glColorP3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorP3uiv"), typeof(GLInterop.glColorP3uivFunc));
            GLInterop.glColorP4uiPtr = (GLInterop.glColorP4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorP4ui"), typeof(GLInterop.glColorP4uiFunc));
            GLInterop.glColorP4uivPtr = (GLInterop.glColorP4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorP4uiv"), typeof(GLInterop.glColorP4uivFunc));
            GLInterop.glSecondaryColorP3uiPtr = (GLInterop.glSecondaryColorP3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColorP3ui"), typeof(GLInterop.glSecondaryColorP3uiFunc));
            GLInterop.glSecondaryColorP3uivPtr = (GLInterop.glSecondaryColorP3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSecondaryColorP3uiv"), typeof(GLInterop.glSecondaryColorP3uivFunc));
            GLInterop.glMinSampleShadingPtr = (GLInterop.glMinSampleShadingFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMinSampleShading"), typeof(GLInterop.glMinSampleShadingFunc));
            GLInterop.glBlendEquationiPtr = (GLInterop.glBlendEquationiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendEquationi"), typeof(GLInterop.glBlendEquationiFunc));
            GLInterop.glBlendEquationSeparateiPtr = (GLInterop.glBlendEquationSeparateiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendEquationSeparatei"), typeof(GLInterop.glBlendEquationSeparateiFunc));
            GLInterop.glBlendFunciPtr = (GLInterop.glBlendFunciFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendFunci"), typeof(GLInterop.glBlendFunciFunc));
            GLInterop.glBlendFuncSeparateiPtr = (GLInterop.glBlendFuncSeparateiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendFuncSeparatei"), typeof(GLInterop.glBlendFuncSeparateiFunc));
            GLInterop.glDrawArraysIndirectPtr = (GLInterop.glDrawArraysIndirectFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawArraysIndirect"), typeof(GLInterop.glDrawArraysIndirectFunc));
            GLInterop.glDrawElementsIndirectPtr = (GLInterop.glDrawElementsIndirectFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElementsIndirect"), typeof(GLInterop.glDrawElementsIndirectFunc));
            GLInterop.glUniform1dPtr = (GLInterop.glUniform1dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1d"), typeof(GLInterop.glUniform1dFunc));
            GLInterop.glUniform2dPtr = (GLInterop.glUniform2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2d"), typeof(GLInterop.glUniform2dFunc));
            GLInterop.glUniform3dPtr = (GLInterop.glUniform3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3d"), typeof(GLInterop.glUniform3dFunc));
            GLInterop.glUniform4dPtr = (GLInterop.glUniform4dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4d"), typeof(GLInterop.glUniform4dFunc));
            GLInterop.glUniform1dvPtr = (GLInterop.glUniform1dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1dv"), typeof(GLInterop.glUniform1dvFunc));
            GLInterop.glUniform2dvPtr = (GLInterop.glUniform2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2dv"), typeof(GLInterop.glUniform2dvFunc));
            GLInterop.glUniform3dvPtr = (GLInterop.glUniform3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3dv"), typeof(GLInterop.glUniform3dvFunc));
            GLInterop.glUniform4dvPtr = (GLInterop.glUniform4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4dv"), typeof(GLInterop.glUniform4dvFunc));
            GLInterop.glUniformMatrix2dvPtr = (GLInterop.glUniformMatrix2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix2dv"), typeof(GLInterop.glUniformMatrix2dvFunc));
            GLInterop.glUniformMatrix3dvPtr = (GLInterop.glUniformMatrix3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix3dv"), typeof(GLInterop.glUniformMatrix3dvFunc));
            GLInterop.glUniformMatrix4dvPtr = (GLInterop.glUniformMatrix4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix4dv"), typeof(GLInterop.glUniformMatrix4dvFunc));
            GLInterop.glUniformMatrix2x3dvPtr = (GLInterop.glUniformMatrix2x3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix2x3dv"), typeof(GLInterop.glUniformMatrix2x3dvFunc));
            GLInterop.glUniformMatrix2x4dvPtr = (GLInterop.glUniformMatrix2x4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix2x4dv"), typeof(GLInterop.glUniformMatrix2x4dvFunc));
            GLInterop.glUniformMatrix3x2dvPtr = (GLInterop.glUniformMatrix3x2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix3x2dv"), typeof(GLInterop.glUniformMatrix3x2dvFunc));
            GLInterop.glUniformMatrix3x4dvPtr = (GLInterop.glUniformMatrix3x4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix3x4dv"), typeof(GLInterop.glUniformMatrix3x4dvFunc));
            GLInterop.glUniformMatrix4x2dvPtr = (GLInterop.glUniformMatrix4x2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix4x2dv"), typeof(GLInterop.glUniformMatrix4x2dvFunc));
            GLInterop.glUniformMatrix4x3dvPtr = (GLInterop.glUniformMatrix4x3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix4x3dv"), typeof(GLInterop.glUniformMatrix4x3dvFunc));
            GLInterop.glGetUniformdvPtr = (GLInterop.glGetUniformdvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformdv"), typeof(GLInterop.glGetUniformdvFunc));
            GLInterop.glGetSubroutineUniformLocationPtr = (GLInterop.glGetSubroutineUniformLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetSubroutineUniformLocation"), typeof(GLInterop.glGetSubroutineUniformLocationFunc));
            GLInterop.glGetSubroutineIndexPtr = (GLInterop.glGetSubroutineIndexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetSubroutineIndex"), typeof(GLInterop.glGetSubroutineIndexFunc));
            GLInterop.glGetActiveSubroutineUniformivPtr = (GLInterop.glGetActiveSubroutineUniformivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveSubroutineUniformiv"), typeof(GLInterop.glGetActiveSubroutineUniformivFunc));
            GLInterop.glGetActiveSubroutineUniformNamePtr = (GLInterop.glGetActiveSubroutineUniformNameFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveSubroutineUniformName"), typeof(GLInterop.glGetActiveSubroutineUniformNameFunc));
            GLInterop.glGetActiveSubroutineNamePtr = (GLInterop.glGetActiveSubroutineNameFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveSubroutineName"), typeof(GLInterop.glGetActiveSubroutineNameFunc));
            GLInterop.glUniformSubroutinesuivPtr = (GLInterop.glUniformSubroutinesuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformSubroutinesuiv"), typeof(GLInterop.glUniformSubroutinesuivFunc));
            GLInterop.glGetUniformSubroutineuivPtr = (GLInterop.glGetUniformSubroutineuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformSubroutineuiv"), typeof(GLInterop.glGetUniformSubroutineuivFunc));
            GLInterop.glGetProgramStageivPtr = (GLInterop.glGetProgramStageivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramStageiv"), typeof(GLInterop.glGetProgramStageivFunc));
            GLInterop.glPatchParameteriPtr = (GLInterop.glPatchParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPatchParameteri"), typeof(GLInterop.glPatchParameteriFunc));
            GLInterop.glPatchParameterfvPtr = (GLInterop.glPatchParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPatchParameterfv"), typeof(GLInterop.glPatchParameterfvFunc));
            GLInterop.glBindTransformFeedbackPtr = (GLInterop.glBindTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindTransformFeedback"), typeof(GLInterop.glBindTransformFeedbackFunc));
            GLInterop.glDeleteTransformFeedbacksPtr = (GLInterop.glDeleteTransformFeedbacksFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteTransformFeedbacks"), typeof(GLInterop.glDeleteTransformFeedbacksFunc));
            GLInterop.glGenTransformFeedbacksPtr = (GLInterop.glGenTransformFeedbacksFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenTransformFeedbacks"), typeof(GLInterop.glGenTransformFeedbacksFunc));
            GLInterop.glIsTransformFeedbackPtr = (GLInterop.glIsTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsTransformFeedback"), typeof(GLInterop.glIsTransformFeedbackFunc));
            GLInterop.glPauseTransformFeedbackPtr = (GLInterop.glPauseTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPauseTransformFeedback"), typeof(GLInterop.glPauseTransformFeedbackFunc));
            GLInterop.glResumeTransformFeedbackPtr = (GLInterop.glResumeTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glResumeTransformFeedback"), typeof(GLInterop.glResumeTransformFeedbackFunc));
            GLInterop.glDrawTransformFeedbackPtr = (GLInterop.glDrawTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawTransformFeedback"), typeof(GLInterop.glDrawTransformFeedbackFunc));
            GLInterop.glDrawTransformFeedbackStreamPtr = (GLInterop.glDrawTransformFeedbackStreamFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawTransformFeedbackStream"), typeof(GLInterop.glDrawTransformFeedbackStreamFunc));
            GLInterop.glBeginQueryIndexedPtr = (GLInterop.glBeginQueryIndexedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBeginQueryIndexed"), typeof(GLInterop.glBeginQueryIndexedFunc));
            GLInterop.glEndQueryIndexedPtr = (GLInterop.glEndQueryIndexedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEndQueryIndexed"), typeof(GLInterop.glEndQueryIndexedFunc));
            GLInterop.glGetQueryIndexedivPtr = (GLInterop.glGetQueryIndexedivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetQueryIndexediv"), typeof(GLInterop.glGetQueryIndexedivFunc));
            GLInterop.glReleaseShaderCompilerPtr = (GLInterop.glReleaseShaderCompilerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glReleaseShaderCompiler"), typeof(GLInterop.glReleaseShaderCompilerFunc));
            GLInterop.glShaderBinaryPtr = (GLInterop.glShaderBinaryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glShaderBinary"), typeof(GLInterop.glShaderBinaryFunc));
            GLInterop.glGetShaderPrecisionFormatPtr = (GLInterop.glGetShaderPrecisionFormatFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetShaderPrecisionFormat"), typeof(GLInterop.glGetShaderPrecisionFormatFunc));
            GLInterop.glDepthRangefPtr = (GLInterop.glDepthRangefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthRangef"), typeof(GLInterop.glDepthRangefFunc));
            GLInterop.glClearDepthfPtr = (GLInterop.glClearDepthfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearDepthf"), typeof(GLInterop.glClearDepthfFunc));
            GLInterop.glGetProgramBinaryPtr = (GLInterop.glGetProgramBinaryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramBinary"), typeof(GLInterop.glGetProgramBinaryFunc));
            GLInterop.glProgramBinaryPtr = (GLInterop.glProgramBinaryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramBinary"), typeof(GLInterop.glProgramBinaryFunc));
            GLInterop.glProgramParameteriPtr = (GLInterop.glProgramParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramParameteri"), typeof(GLInterop.glProgramParameteriFunc));
            GLInterop.glUseProgramStagesPtr = (GLInterop.glUseProgramStagesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUseProgramStages"), typeof(GLInterop.glUseProgramStagesFunc));
            GLInterop.glActiveShaderProgramPtr = (GLInterop.glActiveShaderProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glActiveShaderProgram"), typeof(GLInterop.glActiveShaderProgramFunc));
            GLInterop.glCreateShaderProgramvPtr = (GLInterop.glCreateShaderProgramvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCreateShaderProgramv"), typeof(GLInterop.glCreateShaderProgramvFunc));
            GLInterop.glBindProgramPipelinePtr = (GLInterop.glBindProgramPipelineFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindProgramPipeline"), typeof(GLInterop.glBindProgramPipelineFunc));
            GLInterop.glDeleteProgramPipelinesPtr = (GLInterop.glDeleteProgramPipelinesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteProgramPipelines"), typeof(GLInterop.glDeleteProgramPipelinesFunc));
            GLInterop.glGenProgramPipelinesPtr = (GLInterop.glGenProgramPipelinesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenProgramPipelines"), typeof(GLInterop.glGenProgramPipelinesFunc));
            GLInterop.glIsProgramPipelinePtr = (GLInterop.glIsProgramPipelineFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsProgramPipeline"), typeof(GLInterop.glIsProgramPipelineFunc));
            GLInterop.glGetProgramPipelineivPtr = (GLInterop.glGetProgramPipelineivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramPipelineiv"), typeof(GLInterop.glGetProgramPipelineivFunc));
            GLInterop.glProgramUniform1iPtr = (GLInterop.glProgramUniform1iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform1i"), typeof(GLInterop.glProgramUniform1iFunc));
            GLInterop.glProgramUniform1ivPtr = (GLInterop.glProgramUniform1ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform1iv"), typeof(GLInterop.glProgramUniform1ivFunc));
            GLInterop.glProgramUniform1fPtr = (GLInterop.glProgramUniform1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform1f"), typeof(GLInterop.glProgramUniform1fFunc));
            GLInterop.glProgramUniform1fvPtr = (GLInterop.glProgramUniform1fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform1fv"), typeof(GLInterop.glProgramUniform1fvFunc));
            GLInterop.glProgramUniform1dPtr = (GLInterop.glProgramUniform1dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform1d"), typeof(GLInterop.glProgramUniform1dFunc));
            GLInterop.glProgramUniform1dvPtr = (GLInterop.glProgramUniform1dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform1dv"), typeof(GLInterop.glProgramUniform1dvFunc));
            GLInterop.glProgramUniform1uiPtr = (GLInterop.glProgramUniform1uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform1ui"), typeof(GLInterop.glProgramUniform1uiFunc));
            GLInterop.glProgramUniform1uivPtr = (GLInterop.glProgramUniform1uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform1uiv"), typeof(GLInterop.glProgramUniform1uivFunc));
            GLInterop.glProgramUniform2iPtr = (GLInterop.glProgramUniform2iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform2i"), typeof(GLInterop.glProgramUniform2iFunc));
            GLInterop.glProgramUniform2ivPtr = (GLInterop.glProgramUniform2ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform2iv"), typeof(GLInterop.glProgramUniform2ivFunc));
            GLInterop.glProgramUniform2fPtr = (GLInterop.glProgramUniform2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform2f"), typeof(GLInterop.glProgramUniform2fFunc));
            GLInterop.glProgramUniform2fvPtr = (GLInterop.glProgramUniform2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform2fv"), typeof(GLInterop.glProgramUniform2fvFunc));
            GLInterop.glProgramUniform2dPtr = (GLInterop.glProgramUniform2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform2d"), typeof(GLInterop.glProgramUniform2dFunc));
            GLInterop.glProgramUniform2dvPtr = (GLInterop.glProgramUniform2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform2dv"), typeof(GLInterop.glProgramUniform2dvFunc));
            GLInterop.glProgramUniform2uiPtr = (GLInterop.glProgramUniform2uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform2ui"), typeof(GLInterop.glProgramUniform2uiFunc));
            GLInterop.glProgramUniform2uivPtr = (GLInterop.glProgramUniform2uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform2uiv"), typeof(GLInterop.glProgramUniform2uivFunc));
            GLInterop.glProgramUniform3iPtr = (GLInterop.glProgramUniform3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform3i"), typeof(GLInterop.glProgramUniform3iFunc));
            GLInterop.glProgramUniform3ivPtr = (GLInterop.glProgramUniform3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform3iv"), typeof(GLInterop.glProgramUniform3ivFunc));
            GLInterop.glProgramUniform3fPtr = (GLInterop.glProgramUniform3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform3f"), typeof(GLInterop.glProgramUniform3fFunc));
            GLInterop.glProgramUniform3fvPtr = (GLInterop.glProgramUniform3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform3fv"), typeof(GLInterop.glProgramUniform3fvFunc));
            GLInterop.glProgramUniform3dPtr = (GLInterop.glProgramUniform3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform3d"), typeof(GLInterop.glProgramUniform3dFunc));
            GLInterop.glProgramUniform3dvPtr = (GLInterop.glProgramUniform3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform3dv"), typeof(GLInterop.glProgramUniform3dvFunc));
            GLInterop.glProgramUniform3uiPtr = (GLInterop.glProgramUniform3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform3ui"), typeof(GLInterop.glProgramUniform3uiFunc));
            GLInterop.glProgramUniform3uivPtr = (GLInterop.glProgramUniform3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform3uiv"), typeof(GLInterop.glProgramUniform3uivFunc));
            GLInterop.glProgramUniform4iPtr = (GLInterop.glProgramUniform4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform4i"), typeof(GLInterop.glProgramUniform4iFunc));
            GLInterop.glProgramUniform4ivPtr = (GLInterop.glProgramUniform4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform4iv"), typeof(GLInterop.glProgramUniform4ivFunc));
            GLInterop.glProgramUniform4fPtr = (GLInterop.glProgramUniform4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform4f"), typeof(GLInterop.glProgramUniform4fFunc));
            GLInterop.glProgramUniform4fvPtr = (GLInterop.glProgramUniform4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform4fv"), typeof(GLInterop.glProgramUniform4fvFunc));
            GLInterop.glProgramUniform4dPtr = (GLInterop.glProgramUniform4dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform4d"), typeof(GLInterop.glProgramUniform4dFunc));
            GLInterop.glProgramUniform4dvPtr = (GLInterop.glProgramUniform4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform4dv"), typeof(GLInterop.glProgramUniform4dvFunc));
            GLInterop.glProgramUniform4uiPtr = (GLInterop.glProgramUniform4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform4ui"), typeof(GLInterop.glProgramUniform4uiFunc));
            GLInterop.glProgramUniform4uivPtr = (GLInterop.glProgramUniform4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniform4uiv"), typeof(GLInterop.glProgramUniform4uivFunc));
            GLInterop.glProgramUniformMatrix2fvPtr = (GLInterop.glProgramUniformMatrix2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix2fv"), typeof(GLInterop.glProgramUniformMatrix2fvFunc));
            GLInterop.glProgramUniformMatrix3fvPtr = (GLInterop.glProgramUniformMatrix3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix3fv"), typeof(GLInterop.glProgramUniformMatrix3fvFunc));
            GLInterop.glProgramUniformMatrix4fvPtr = (GLInterop.glProgramUniformMatrix4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix4fv"), typeof(GLInterop.glProgramUniformMatrix4fvFunc));
            GLInterop.glProgramUniformMatrix2dvPtr = (GLInterop.glProgramUniformMatrix2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix2dv"), typeof(GLInterop.glProgramUniformMatrix2dvFunc));
            GLInterop.glProgramUniformMatrix3dvPtr = (GLInterop.glProgramUniformMatrix3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix3dv"), typeof(GLInterop.glProgramUniformMatrix3dvFunc));
            GLInterop.glProgramUniformMatrix4dvPtr = (GLInterop.glProgramUniformMatrix4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix4dv"), typeof(GLInterop.glProgramUniformMatrix4dvFunc));
            GLInterop.glProgramUniformMatrix2x3fvPtr = (GLInterop.glProgramUniformMatrix2x3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix2x3fv"), typeof(GLInterop.glProgramUniformMatrix2x3fvFunc));
            GLInterop.glProgramUniformMatrix3x2fvPtr = (GLInterop.glProgramUniformMatrix3x2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix3x2fv"), typeof(GLInterop.glProgramUniformMatrix3x2fvFunc));
            GLInterop.glProgramUniformMatrix2x4fvPtr = (GLInterop.glProgramUniformMatrix2x4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix2x4fv"), typeof(GLInterop.glProgramUniformMatrix2x4fvFunc));
            GLInterop.glProgramUniformMatrix4x2fvPtr = (GLInterop.glProgramUniformMatrix4x2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix4x2fv"), typeof(GLInterop.glProgramUniformMatrix4x2fvFunc));
            GLInterop.glProgramUniformMatrix3x4fvPtr = (GLInterop.glProgramUniformMatrix3x4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix3x4fv"), typeof(GLInterop.glProgramUniformMatrix3x4fvFunc));
            GLInterop.glProgramUniformMatrix4x3fvPtr = (GLInterop.glProgramUniformMatrix4x3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix4x3fv"), typeof(GLInterop.glProgramUniformMatrix4x3fvFunc));
            GLInterop.glProgramUniformMatrix2x3dvPtr = (GLInterop.glProgramUniformMatrix2x3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix2x3dv"), typeof(GLInterop.glProgramUniformMatrix2x3dvFunc));
            GLInterop.glProgramUniformMatrix3x2dvPtr = (GLInterop.glProgramUniformMatrix3x2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix3x2dv"), typeof(GLInterop.glProgramUniformMatrix3x2dvFunc));
            GLInterop.glProgramUniformMatrix2x4dvPtr = (GLInterop.glProgramUniformMatrix2x4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix2x4dv"), typeof(GLInterop.glProgramUniformMatrix2x4dvFunc));
            GLInterop.glProgramUniformMatrix4x2dvPtr = (GLInterop.glProgramUniformMatrix4x2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix4x2dv"), typeof(GLInterop.glProgramUniformMatrix4x2dvFunc));
            GLInterop.glProgramUniformMatrix3x4dvPtr = (GLInterop.glProgramUniformMatrix3x4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix3x4dv"), typeof(GLInterop.glProgramUniformMatrix3x4dvFunc));
            GLInterop.glProgramUniformMatrix4x3dvPtr = (GLInterop.glProgramUniformMatrix4x3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProgramUniformMatrix4x3dv"), typeof(GLInterop.glProgramUniformMatrix4x3dvFunc));
            GLInterop.glValidateProgramPipelinePtr = (GLInterop.glValidateProgramPipelineFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glValidateProgramPipeline"), typeof(GLInterop.glValidateProgramPipelineFunc));
            GLInterop.glGetProgramPipelineInfoLogPtr = (GLInterop.glGetProgramPipelineInfoLogFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramPipelineInfoLog"), typeof(GLInterop.glGetProgramPipelineInfoLogFunc));
            GLInterop.glVertexAttribL1dPtr = (GLInterop.glVertexAttribL1dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribL1d"), typeof(GLInterop.glVertexAttribL1dFunc));
            GLInterop.glVertexAttribL2dPtr = (GLInterop.glVertexAttribL2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribL2d"), typeof(GLInterop.glVertexAttribL2dFunc));
            GLInterop.glVertexAttribL3dPtr = (GLInterop.glVertexAttribL3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribL3d"), typeof(GLInterop.glVertexAttribL3dFunc));
            GLInterop.glVertexAttribL4dPtr = (GLInterop.glVertexAttribL4dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribL4d"), typeof(GLInterop.glVertexAttribL4dFunc));
            GLInterop.glVertexAttribL1dvPtr = (GLInterop.glVertexAttribL1dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribL1dv"), typeof(GLInterop.glVertexAttribL1dvFunc));
            GLInterop.glVertexAttribL2dvPtr = (GLInterop.glVertexAttribL2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribL2dv"), typeof(GLInterop.glVertexAttribL2dvFunc));
            GLInterop.glVertexAttribL3dvPtr = (GLInterop.glVertexAttribL3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribL3dv"), typeof(GLInterop.glVertexAttribL3dvFunc));
            GLInterop.glVertexAttribL4dvPtr = (GLInterop.glVertexAttribL4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribL4dv"), typeof(GLInterop.glVertexAttribL4dvFunc));
            GLInterop.glVertexAttribLPointerPtr = (GLInterop.glVertexAttribLPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribLPointer"), typeof(GLInterop.glVertexAttribLPointerFunc));
            GLInterop.glGetVertexAttribLdvPtr = (GLInterop.glGetVertexAttribLdvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribLdv"), typeof(GLInterop.glGetVertexAttribLdvFunc));
            GLInterop.glViewportArrayvPtr = (GLInterop.glViewportArrayvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glViewportArrayv"), typeof(GLInterop.glViewportArrayvFunc));
            GLInterop.glViewportIndexedfPtr = (GLInterop.glViewportIndexedfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glViewportIndexedf"), typeof(GLInterop.glViewportIndexedfFunc));
            GLInterop.glViewportIndexedfvPtr = (GLInterop.glViewportIndexedfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glViewportIndexedfv"), typeof(GLInterop.glViewportIndexedfvFunc));
            GLInterop.glScissorArrayvPtr = (GLInterop.glScissorArrayvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScissorArrayv"), typeof(GLInterop.glScissorArrayvFunc));
            GLInterop.glScissorIndexedPtr = (GLInterop.glScissorIndexedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScissorIndexed"), typeof(GLInterop.glScissorIndexedFunc));
            GLInterop.glScissorIndexedvPtr = (GLInterop.glScissorIndexedvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScissorIndexedv"), typeof(GLInterop.glScissorIndexedvFunc));
            GLInterop.glDepthRangeArrayvPtr = (GLInterop.glDepthRangeArrayvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthRangeArrayv"), typeof(GLInterop.glDepthRangeArrayvFunc));
            GLInterop.glDepthRangeIndexedPtr = (GLInterop.glDepthRangeIndexedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthRangeIndexed"), typeof(GLInterop.glDepthRangeIndexedFunc));
            GLInterop.glGetFloati_vPtr = (GLInterop.glGetFloati_vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFloati_v"), typeof(GLInterop.glGetFloati_vFunc));
            GLInterop.glGetDoublei_vPtr = (GLInterop.glGetDoublei_vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetDoublei_v"), typeof(GLInterop.glGetDoublei_vFunc));
            GLInterop.glDrawArraysInstancedBaseInstancePtr = (GLInterop.glDrawArraysInstancedBaseInstanceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawArraysInstancedBaseInstance"), typeof(GLInterop.glDrawArraysInstancedBaseInstanceFunc));
            GLInterop.glDrawElementsInstancedBaseInstancePtr = (GLInterop.glDrawElementsInstancedBaseInstanceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElementsInstancedBaseInstance"), typeof(GLInterop.glDrawElementsInstancedBaseInstanceFunc));
            GLInterop.glDrawElementsInstancedBaseVertexBaseInstancePtr = (GLInterop.glDrawElementsInstancedBaseVertexBaseInstanceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElementsInstancedBaseVertexBaseInstance"), typeof(GLInterop.glDrawElementsInstancedBaseVertexBaseInstanceFunc));
            GLInterop.glGetInternalformativPtr = (GLInterop.glGetInternalformativFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetInternalformativ"), typeof(GLInterop.glGetInternalformativFunc));
            GLInterop.glGetActiveAtomicCounterBufferivPtr = (GLInterop.glGetActiveAtomicCounterBufferivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveAtomicCounterBufferiv"), typeof(GLInterop.glGetActiveAtomicCounterBufferivFunc));
            GLInterop.glBindImageTexturePtr = (GLInterop.glBindImageTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindImageTexture"), typeof(GLInterop.glBindImageTextureFunc));
            GLInterop.glMemoryBarrierPtr = (GLInterop.glMemoryBarrierFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMemoryBarrier"), typeof(GLInterop.glMemoryBarrierFunc));
            GLInterop.glTexStorage1DPtr = (GLInterop.glTexStorage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexStorage1D"), typeof(GLInterop.glTexStorage1DFunc));
            GLInterop.glTexStorage2DPtr = (GLInterop.glTexStorage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexStorage2D"), typeof(GLInterop.glTexStorage2DFunc));
            GLInterop.glTexStorage3DPtr = (GLInterop.glTexStorage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexStorage3D"), typeof(GLInterop.glTexStorage3DFunc));
            GLInterop.glDrawTransformFeedbackInstancedPtr = (GLInterop.glDrawTransformFeedbackInstancedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawTransformFeedbackInstanced"), typeof(GLInterop.glDrawTransformFeedbackInstancedFunc));
            GLInterop.glDrawTransformFeedbackStreamInstancedPtr = (GLInterop.glDrawTransformFeedbackStreamInstancedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawTransformFeedbackStreamInstanced"), typeof(GLInterop.glDrawTransformFeedbackStreamInstancedFunc));
            GLInterop.glClearBufferDataPtr = (GLInterop.glClearBufferDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearBufferData"), typeof(GLInterop.glClearBufferDataFunc));
            GLInterop.glClearBufferSubDataPtr = (GLInterop.glClearBufferSubDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearBufferSubData"), typeof(GLInterop.glClearBufferSubDataFunc));
            GLInterop.glDispatchComputePtr = (GLInterop.glDispatchComputeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDispatchCompute"), typeof(GLInterop.glDispatchComputeFunc));
            GLInterop.glDispatchComputeIndirectPtr = (GLInterop.glDispatchComputeIndirectFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDispatchComputeIndirect"), typeof(GLInterop.glDispatchComputeIndirectFunc));
            GLInterop.glCopyImageSubDataPtr = (GLInterop.glCopyImageSubDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyImageSubData"), typeof(GLInterop.glCopyImageSubDataFunc));
            GLInterop.glFramebufferParameteriPtr = (GLInterop.glFramebufferParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferParameteri"), typeof(GLInterop.glFramebufferParameteriFunc));
            GLInterop.glGetFramebufferParameterivPtr = (GLInterop.glGetFramebufferParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFramebufferParameteriv"), typeof(GLInterop.glGetFramebufferParameterivFunc));
            GLInterop.glGetInternalformati64vPtr = (GLInterop.glGetInternalformati64vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetInternalformati64v"), typeof(GLInterop.glGetInternalformati64vFunc));
            GLInterop.glInvalidateTexSubImagePtr = (GLInterop.glInvalidateTexSubImageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glInvalidateTexSubImage"), typeof(GLInterop.glInvalidateTexSubImageFunc));
            GLInterop.glInvalidateTexImagePtr = (GLInterop.glInvalidateTexImageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glInvalidateTexImage"), typeof(GLInterop.glInvalidateTexImageFunc));
            GLInterop.glInvalidateBufferSubDataPtr = (GLInterop.glInvalidateBufferSubDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glInvalidateBufferSubData"), typeof(GLInterop.glInvalidateBufferSubDataFunc));
            GLInterop.glInvalidateBufferDataPtr = (GLInterop.glInvalidateBufferDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glInvalidateBufferData"), typeof(GLInterop.glInvalidateBufferDataFunc));
            GLInterop.glInvalidateFramebufferPtr = (GLInterop.glInvalidateFramebufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glInvalidateFramebuffer"), typeof(GLInterop.glInvalidateFramebufferFunc));
            GLInterop.glInvalidateSubFramebufferPtr = (GLInterop.glInvalidateSubFramebufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glInvalidateSubFramebuffer"), typeof(GLInterop.glInvalidateSubFramebufferFunc));
            GLInterop.glMultiDrawArraysIndirectPtr = (GLInterop.glMultiDrawArraysIndirectFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiDrawArraysIndirect"), typeof(GLInterop.glMultiDrawArraysIndirectFunc));
            GLInterop.glMultiDrawElementsIndirectPtr = (GLInterop.glMultiDrawElementsIndirectFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiDrawElementsIndirect"), typeof(GLInterop.glMultiDrawElementsIndirectFunc));
            GLInterop.glGetProgramInterfaceivPtr = (GLInterop.glGetProgramInterfaceivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramInterfaceiv"), typeof(GLInterop.glGetProgramInterfaceivFunc));
            GLInterop.glGetProgramResourceIndexPtr = (GLInterop.glGetProgramResourceIndexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramResourceIndex"), typeof(GLInterop.glGetProgramResourceIndexFunc));
            GLInterop.glGetProgramResourceNamePtr = (GLInterop.glGetProgramResourceNameFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramResourceName"), typeof(GLInterop.glGetProgramResourceNameFunc));
            GLInterop.glGetProgramResourceivPtr = (GLInterop.glGetProgramResourceivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramResourceiv"), typeof(GLInterop.glGetProgramResourceivFunc));
            GLInterop.glGetProgramResourceLocationPtr = (GLInterop.glGetProgramResourceLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramResourceLocation"), typeof(GLInterop.glGetProgramResourceLocationFunc));
            GLInterop.glGetProgramResourceLocationIndexPtr = (GLInterop.glGetProgramResourceLocationIndexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramResourceLocationIndex"), typeof(GLInterop.glGetProgramResourceLocationIndexFunc));
            GLInterop.glShaderStorageBlockBindingPtr = (GLInterop.glShaderStorageBlockBindingFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glShaderStorageBlockBinding"), typeof(GLInterop.glShaderStorageBlockBindingFunc));
            GLInterop.glTexBufferRangePtr = (GLInterop.glTexBufferRangeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexBufferRange"), typeof(GLInterop.glTexBufferRangeFunc));
            GLInterop.glTexStorage2DMultisamplePtr = (GLInterop.glTexStorage2DMultisampleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexStorage2DMultisample"), typeof(GLInterop.glTexStorage2DMultisampleFunc));
            GLInterop.glTexStorage3DMultisamplePtr = (GLInterop.glTexStorage3DMultisampleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexStorage3DMultisample"), typeof(GLInterop.glTexStorage3DMultisampleFunc));
            GLInterop.glTextureViewPtr = (GLInterop.glTextureViewFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTextureView"), typeof(GLInterop.glTextureViewFunc));
            GLInterop.glBindVertexBufferPtr = (GLInterop.glBindVertexBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindVertexBuffer"), typeof(GLInterop.glBindVertexBufferFunc));
            GLInterop.glVertexAttribFormatPtr = (GLInterop.glVertexAttribFormatFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribFormat"), typeof(GLInterop.glVertexAttribFormatFunc));
            GLInterop.glVertexAttribIFormatPtr = (GLInterop.glVertexAttribIFormatFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribIFormat"), typeof(GLInterop.glVertexAttribIFormatFunc));
            GLInterop.glVertexAttribLFormatPtr = (GLInterop.glVertexAttribLFormatFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribLFormat"), typeof(GLInterop.glVertexAttribLFormatFunc));
            GLInterop.glVertexAttribBindingPtr = (GLInterop.glVertexAttribBindingFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribBinding"), typeof(GLInterop.glVertexAttribBindingFunc));
            GLInterop.glVertexBindingDivisorPtr = (GLInterop.glVertexBindingDivisorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexBindingDivisor"), typeof(GLInterop.glVertexBindingDivisorFunc));
            GLInterop.glDebugMessageControlPtr = (GLInterop.glDebugMessageControlFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDebugMessageControl"), typeof(GLInterop.glDebugMessageControlFunc));
            GLInterop.glDebugMessageInsertPtr = (GLInterop.glDebugMessageInsertFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDebugMessageInsert"), typeof(GLInterop.glDebugMessageInsertFunc));
            GLInterop.glDebugMessageCallbackPtr = (GLInterop.glDebugMessageCallbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDebugMessageCallback"), typeof(GLInterop.glDebugMessageCallbackFunc));
            GLInterop.glGetDebugMessageLogPtr = (GLInterop.glGetDebugMessageLogFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetDebugMessageLog"), typeof(GLInterop.glGetDebugMessageLogFunc));
            GLInterop.glPushDebugGroupPtr = (GLInterop.glPushDebugGroupFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPushDebugGroup"), typeof(GLInterop.glPushDebugGroupFunc));
            GLInterop.glPopDebugGroupPtr = (GLInterop.glPopDebugGroupFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPopDebugGroup"), typeof(GLInterop.glPopDebugGroupFunc));
            GLInterop.glObjectLabelPtr = (GLInterop.glObjectLabelFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glObjectLabel"), typeof(GLInterop.glObjectLabelFunc));
            GLInterop.glGetObjectLabelPtr = (GLInterop.glGetObjectLabelFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetObjectLabel"), typeof(GLInterop.glGetObjectLabelFunc));
            GLInterop.glObjectPtrLabelPtr = (GLInterop.glObjectPtrLabelFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glObjectPtrLabel"), typeof(GLInterop.glObjectPtrLabelFunc));
            GLInterop.glGetObjectPtrLabelPtr = (GLInterop.glGetObjectPtrLabelFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetObjectPtrLabel"), typeof(GLInterop.glGetObjectPtrLabelFunc));
        }

        public static void LoadFunction(string name)
        {
            var memberInfo = typeof(GLInterop).GetField(name + "Ptr", BindingFlags.Public | BindingFlags.Static);
            memberInfo.SetValue(null, Marshal.GetDelegateForFunctionPointer(GetProcAddress(name), memberInfo.FieldType));
        }
        #endregion
    }
}
