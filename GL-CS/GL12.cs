// This file was autogenerated by GLCSGen on 11/5/2013 3:46:03 PM UTC
// Original copyright from gl.xml:
// 
// Copyright (c) 2013 The Khronos Group Inc.
// 
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
// 
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
// 
// ------------------------------------------------------------------------
// 
// This file, gl.xml, is the OpenGL and OpenGL API Registry. The older
// ".spec" file format has been retired and will no longer be updated with
// new extensions and API versions. The canonical version of the registry,
// together with documentation, schema, and Python generator scripts used
// to generate C header files for OpenGL and OpenGL ES, can always be found
// in the Khronos Registry at
//         http://www.opengl.org/registry/
//     

using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.InteropServices;

namespace OpenGL
{
    public static class GL12
    {
        #region Enums
        public static uint GL_BACK = 0x0405;
        public static uint GL_FRONT = 0x0404;
        public static uint GL_FRONT_AND_BACK = 0x0408;
        public static uint GL_CCW = 0x0901;
        public static uint GL_CW = 0x0900;
        public static uint GL_ALLOW_DRAW_FRG_HINT_PGI = 0x1A210;
        public static uint GL_ALLOW_DRAW_MEM_HINT_PGI = 0x1A211;
        public static uint GL_ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E;
        public static uint GL_ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F;
        public static uint GL_ALWAYS_FAST_HINT_PGI = 0x1A20C;
        public static uint GL_ALWAYS_SOFT_HINT_PGI = 0x1A20D;
        public static uint GL_BACK_NORMALS_HINT_PGI = 0x1A223;
        public static uint GL_BINNING_CONTROL_HINT_QCOM = 0x8FB0;
        public static uint GL_CLIP_FAR_HINT_PGI = 0x1A221;
        public static uint GL_CLIP_NEAR_HINT_PGI = 0x1A220;
        public static uint GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0;
        public static uint GL_CONSERVE_MEMORY_HINT_PGI = 0x1A1FD;
        public static uint GL_CONVOLUTION_HINT_SGIX = 0x8316;
        public static uint GL_FOG_HINT = 0x0C54;
        public static uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
        public static uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B;
        public static uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES = 0x8B8B;
        public static uint GL_FULL_STIPPLE_HINT_PGI = 0x1A219;
        public static uint GL_GENERATE_MIPMAP_HINT = 0x8192;
        public static uint GL_GENERATE_MIPMAP_HINT_SGIS = 0x8192;
        public static uint GL_LINE_QUALITY_HINT_SGIX = 0x835B;
        public static uint GL_LINE_SMOOTH_HINT = 0x0C52;
        public static uint GL_MATERIAL_SIDE_HINT_PGI = 0x1A22C;
        public static uint GL_MAX_VERTEX_HINT_PGI = 0x1A22D;
        public static uint GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534;
        public static uint GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203;
        public static uint GL_NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204;
        public static uint GL_PACK_CMYK_HINT_EXT = 0x800E;
        public static uint GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
        public static uint GL_PHONG_HINT_WIN = 0x80EB;
        public static uint GL_POINT_SMOOTH_HINT = 0x0C51;
        public static uint GL_POLYGON_SMOOTH_HINT = 0x0C53;
        public static uint GL_PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8;
        public static uint GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
        public static uint GL_RECLAIM_MEMORY_HINT_PGI = 0x1A1FE;
        public static uint GL_SCALEBIAS_HINT_SGIX = 0x8322;
        public static uint GL_STRICT_DEPTHFUNC_HINT_PGI = 0x1A216;
        public static uint GL_STRICT_LIGHTING_HINT_PGI = 0x1A217;
        public static uint GL_STRICT_SCISSOR_HINT_PGI = 0x1A218;
        public static uint GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
        public static uint GL_TEXTURE_COMPRESSION_HINT_ARB = 0x84EF;
        public static uint GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E;
        public static uint GL_TEXTURE_STORAGE_HINT_APPLE = 0x85BC;
        public static uint GL_TRANSFORM_HINT_APPLE = 0x85B1;
        public static uint GL_UNPACK_CMYK_HINT_EXT = 0x800F;
        public static uint GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F;
        public static uint GL_VERTEX_CONSISTENT_HINT_PGI = 0x1A22B;
        public static uint GL_VERTEX_DATA_HINT_PGI = 0x1A22A;
        public static uint GL_VERTEX_PRECLIP_HINT_SGIX = 0x83EF;
        public static uint GL_VERTEX_PRECLIP_SGIX = 0x83EE;
        public static uint GL_WIDE_LINE_HINT_PGI = 0x1A222;
        public static uint GL_DONT_CARE = 0x1100;
        public static uint GL_FASTEST = 0x1101;
        public static uint GL_NICEST = 0x1102;
        public static uint GL_FILL = 0x1B02;
        public static uint GL_LINE = 0x1B01;
        public static uint GL_POINT = 0x1B00;
        public static uint GL_DETAIL_TEXTURE_2D_SGIS = 0x8095;
        public static uint GL_PROXY_TEXTURE_1D = 0x8063;
        public static uint GL_PROXY_TEXTURE_1D_EXT = 0x8063;
        public static uint GL_PROXY_TEXTURE_2D = 0x8064;
        public static uint GL_PROXY_TEXTURE_2D_EXT = 0x8064;
        public static uint GL_PROXY_TEXTURE_3D = 0x8070;
        public static uint GL_PROXY_TEXTURE_3D_EXT = 0x8070;
        public static uint GL_PROXY_TEXTURE_4D_SGIS = 0x8135;
        public static uint GL_TEXTURE_1D = 0x0DE0;
        public static uint GL_TEXTURE_2D = 0x0DE1;
        public static uint GL_TEXTURE_3D = 0x806F;
        public static uint GL_TEXTURE_3D_EXT = 0x806F;
        public static uint GL_TEXTURE_3D_OES = 0x806F;
        public static uint GL_TEXTURE_4D_SGIS = 0x8134;
        public static uint GL_TEXTURE_BASE_LEVEL = 0x813C;
        public static uint GL_TEXTURE_BASE_LEVEL_SGIS = 0x813C;
        public static uint GL_TEXTURE_MAX_LEVEL = 0x813D;
        public static uint GL_TEXTURE_MAX_LEVEL_SGIS = 0x813D;
        public static uint GL_TEXTURE_MAX_LOD = 0x813B;
        public static uint GL_TEXTURE_MAX_LOD_SGIS = 0x813B;
        public static uint GL_TEXTURE_MIN_LOD = 0x813A;
        public static uint GL_TEXTURE_MIN_LOD_SGIS = 0x813A;
        public static uint GL_DETAIL_TEXTURE_LEVEL_SGIS = 0x809A;
        public static uint GL_DETAIL_TEXTURE_MODE_SGIS = 0x809B;
        public static uint GL_DUAL_TEXTURE_SELECT_SGIS = 0x8124;
        public static uint GL_GENERATE_MIPMAP = 0x8191;
        public static uint GL_GENERATE_MIPMAP_SGIS = 0x8191;
        public static uint GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179;
        public static uint GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A;
        public static uint GL_QUAD_TEXTURE_SELECT_SGIS = 0x8125;
        public static uint GL_SHADOW_AMBIENT_SGIX = 0x80BF;
        public static uint GL_TEXTURE_BORDER_COLOR = 0x1004;
        public static uint GL_TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171;
        public static uint GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176;
        public static uint GL_TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172;
        public static uint GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175;
        public static uint GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173;
        public static uint GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174;
        public static uint GL_TEXTURE_COMPARE_SGIX = 0x819A;
        public static uint GL_TEXTURE_LOD_BIAS_R_SGIX = 0x8190;
        public static uint GL_TEXTURE_LOD_BIAS_S_SGIX = 0x818E;
        public static uint GL_TEXTURE_LOD_BIAS_T_SGIX = 0x818F;
        public static uint GL_TEXTURE_MAG_FILTER = 0x2800;
        public static uint GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x836B;
        public static uint GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x8369;
        public static uint GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x836A;
        public static uint GL_TEXTURE_MIN_FILTER = 0x2801;
        public static uint GL_TEXTURE_PRIORITY = 0x8066;
        public static uint GL_TEXTURE_PRIORITY_EXT = 0x8066;
        public static uint GL_TEXTURE_WRAP_Q_SGIS = 0x8137;
        public static uint GL_TEXTURE_WRAP_R = 0x8072;
        public static uint GL_TEXTURE_WRAP_R_EXT = 0x8072;
        public static uint GL_TEXTURE_WRAP_R_OES = 0x8072;
        public static uint GL_TEXTURE_WRAP_S = 0x2802;
        public static uint GL_TEXTURE_WRAP_T = 0x2803;
        public static uint GL_ABGR_EXT = 0x8000;
        public static uint GL_ALPHA = 0x1906;
        public static uint GL_BLUE = 0x1905;
        public static uint GL_CMYKA_EXT = 0x800D;
        public static uint GL_CMYK_EXT = 0x800C;
        public static uint GL_COLOR_INDEX = 0x1900;
        public static uint GL_DEPTH_COMPONENT = 0x1902;
        public static uint GL_GREEN = 0x1904;
        public static uint GL_LUMINANCE = 0x1909;
        public static uint GL_LUMINANCE_ALPHA = 0x190A;
        public static uint GL_RED = 0x1903;
        public static uint GL_RED_EXT = 0x1903;
        public static uint GL_RGB = 0x1907;
        public static uint GL_RGBA = 0x1908;
        public static uint GL_STENCIL_INDEX = 0x1901;
        public static uint GL_UNSIGNED_INT = 0x1405;
        public static uint GL_UNSIGNED_SHORT = 0x1403;
        public static uint GL_YCRCB_422_SGIX = 0x81BB;
        public static uint GL_YCRCB_444_SGIX = 0x81BC;
        public static uint GL_BITMAP = 0x1A00;
        public static uint GL_BYTE = 0x1400;
        public static uint GL_FLOAT = 0x1406;
        public static uint GL_INT = 0x1404;
        public static uint GL_SHORT = 0x1402;
        public static uint GL_UNSIGNED_BYTE = 0x1401;
        public static uint GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
        public static uint GL_UNSIGNED_BYTE_3_3_2_EXT = 0x8032;
        public static uint GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
        public static uint GL_UNSIGNED_INT_10_10_10_2_EXT = 0x8036;
        public static uint GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
        public static uint GL_UNSIGNED_INT_8_8_8_8_EXT = 0x8035;
        public static uint GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
        public static uint GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033;
        public static uint GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
        public static uint GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034;
        public static uint GL_AUX0 = 0x0409;
        public static uint GL_AUX1 = 0x040A;
        public static uint GL_AUX2 = 0x040B;
        public static uint GL_AUX3 = 0x040C;
        public static uint GL_BACK_LEFT = 0x0402;
        public static uint GL_BACK_RIGHT = 0x0403;
        public static uint GL_FRONT_LEFT = 0x0400;
        public static uint GL_FRONT_RIGHT = 0x0401;
        public static uint GL_LEFT = 0x0406;
        public static uint GL_NONE = 0;
        public static uint GL_NONE_OES = 0;
        public static uint GL_RIGHT = 0x0407;
        public static uint GL_ACCUM_BUFFER_BIT = 0x00000200;
        public static uint GL_COLOR_BUFFER_BIT = 0x00004000;
        public static uint GL_COVERAGE_BUFFER_BIT_NV = 0x00008000;
        public static uint GL_DEPTH_BUFFER_BIT = 0x00000100;
        public static uint GL_STENCIL_BUFFER_BIT = 0x00000400;
        public static uint GL_FALSE = 0;
        public static uint GL_TRUE = 1;
        public static uint GL_ALPHA_TEST = 0x0BC0;
        public static uint GL_ASYNC_DRAW_PIXELS_SGIX = 0x835D;
        public static uint GL_ASYNC_HISTOGRAM_SGIX = 0x832C;
        public static uint GL_ASYNC_READ_PIXELS_SGIX = 0x835E;
        public static uint GL_ASYNC_TEX_IMAGE_SGIX = 0x835C;
        public static uint GL_AUTO_NORMAL = 0x0D80;
        public static uint GL_BLEND = 0x0BE2;
        public static uint GL_CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183;
        public static uint GL_CLIP_PLANE0 = 0x3000;
        public static uint GL_CLIP_PLANE1 = 0x3001;
        public static uint GL_CLIP_PLANE2 = 0x3002;
        public static uint GL_CLIP_PLANE3 = 0x3003;
        public static uint GL_CLIP_PLANE4 = 0x3004;
        public static uint GL_CLIP_PLANE5 = 0x3005;
        public static uint GL_COLOR_ARRAY = 0x8076;
        public static uint GL_COLOR_LOGIC_OP = 0x0BF2;
        public static uint GL_COLOR_MATERIAL = 0x0B57;
        public static uint GL_COLOR_TABLE_SGI = 0x80D0;
        public static uint GL_CONVOLUTION_1D_EXT = 0x8010;
        public static uint GL_CONVOLUTION_2D_EXT = 0x8011;
        public static uint GL_CULL_FACE = 0x0B44;
        public static uint GL_DEPTH_TEST = 0x0B71;
        public static uint GL_DITHER = 0x0BD0;
        public static uint GL_EDGE_FLAG_ARRAY = 0x8079;
        public static uint GL_FOG = 0x0B60;
        public static uint GL_FOG_OFFSET_SGIX = 0x8198;
        public static uint GL_FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401;
        public static uint GL_FRAGMENT_LIGHT0_SGIX = 0x840C;
        public static uint GL_FRAGMENT_LIGHT1_SGIX = 0x840D;
        public static uint GL_FRAGMENT_LIGHT2_SGIX = 0x840E;
        public static uint GL_FRAGMENT_LIGHT3_SGIX = 0x840F;
        public static uint GL_FRAGMENT_LIGHT4_SGIX = 0x8410;
        public static uint GL_FRAGMENT_LIGHT5_SGIX = 0x8411;
        public static uint GL_FRAGMENT_LIGHT6_SGIX = 0x8412;
        public static uint GL_FRAGMENT_LIGHT7_SGIX = 0x8413;
        public static uint GL_FRAGMENT_LIGHTING_SGIX = 0x8400;
        public static uint GL_FRAMEZOOM_SGIX = 0x818B;
        public static uint GL_HISTOGRAM_EXT = 0x8024;
        public static uint GL_INDEX_ARRAY = 0x8077;
        public static uint GL_INDEX_LOGIC_OP = 0x0BF1;
        public static uint GL_INTERLACE_SGIX = 0x8094;
        public static uint GL_IR_INSTRUMENT1_SGIX = 0x817F;
        public static uint GL_LIGHT0 = 0x4000;
        public static uint GL_LIGHT1 = 0x4001;
        public static uint GL_LIGHT2 = 0x4002;
        public static uint GL_LIGHT3 = 0x4003;
        public static uint GL_LIGHT4 = 0x4004;
        public static uint GL_LIGHT5 = 0x4005;
        public static uint GL_LIGHT6 = 0x4006;
        public static uint GL_LIGHT7 = 0x4007;
        public static uint GL_LIGHTING = 0x0B50;
        public static uint GL_LINE_SMOOTH = 0x0B20;
        public static uint GL_LINE_STIPPLE = 0x0B24;
        public static uint GL_MAP1_COLOR_4 = 0x0D90;
        public static uint GL_MAP1_INDEX = 0x0D91;
        public static uint GL_MAP1_NORMAL = 0x0D92;
        public static uint GL_MAP1_TEXTURE_COORD_1 = 0x0D93;
        public static uint GL_MAP1_TEXTURE_COORD_2 = 0x0D94;
        public static uint GL_MAP1_TEXTURE_COORD_3 = 0x0D95;
        public static uint GL_MAP1_TEXTURE_COORD_4 = 0x0D96;
        public static uint GL_MAP1_VERTEX_3 = 0x0D97;
        public static uint GL_MAP1_VERTEX_4 = 0x0D98;
        public static uint GL_MAP2_COLOR_4 = 0x0DB0;
        public static uint GL_MAP2_INDEX = 0x0DB1;
        public static uint GL_MAP2_NORMAL = 0x0DB2;
        public static uint GL_MAP2_TEXTURE_COORD_1 = 0x0DB3;
        public static uint GL_MAP2_TEXTURE_COORD_2 = 0x0DB4;
        public static uint GL_MAP2_TEXTURE_COORD_3 = 0x0DB5;
        public static uint GL_MAP2_TEXTURE_COORD_4 = 0x0DB6;
        public static uint GL_MAP2_VERTEX_3 = 0x0DB7;
        public static uint GL_MAP2_VERTEX_4 = 0x0DB8;
        public static uint GL_MINMAX_EXT = 0x802E;
        public static uint GL_MULTISAMPLE_SGIS = 0x809D;
        public static uint GL_NORMALIZE = 0x0BA1;
        public static uint GL_NORMAL_ARRAY = 0x8075;
        public static uint GL_PIXEL_TEXTURE_SGIS = 0x8353;
        public static uint GL_PIXEL_TEX_GEN_SGIX = 0x8139;
        public static uint GL_POINT_SMOOTH = 0x0B10;
        public static uint GL_POLYGON_OFFSET_FILL = 0x8037;
        public static uint GL_POLYGON_OFFSET_LINE = 0x2A02;
        public static uint GL_POLYGON_OFFSET_POINT = 0x2A01;
        public static uint GL_POLYGON_SMOOTH = 0x0B41;
        public static uint GL_POLYGON_STIPPLE = 0x0B42;
        public static uint GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2;
        public static uint GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1;
        public static uint GL_REFERENCE_PLANE_SGIX = 0x817D;
        public static uint GL_RESCALE_NORMAL_EXT = 0x803A;
        public static uint GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E;
        public static uint GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F;
        public static uint GL_SAMPLE_MASK_SGIS = 0x80A0;
        public static uint GL_SCISSOR_TEST = 0x0C11;
        public static uint GL_SEPARABLE_2D_EXT = 0x8012;
        public static uint GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB;
        public static uint GL_SPRITE_SGIX = 0x8148;
        public static uint GL_STENCIL_TEST = 0x0B90;
        public static uint GL_TEXTURE_COLOR_TABLE_SGI = 0x80BC;
        public static uint GL_TEXTURE_COORD_ARRAY = 0x8078;
        public static uint GL_TEXTURE_GEN_Q = 0x0C63;
        public static uint GL_TEXTURE_GEN_R = 0x0C62;
        public static uint GL_TEXTURE_GEN_S = 0x0C60;
        public static uint GL_TEXTURE_GEN_T = 0x0C61;
        public static uint GL_VERTEX_ARRAY = 0x8074;
        public static uint GL_CONSTANT_ALPHA_EXT = 0x8003;
        public static uint GL_CONSTANT_COLOR_EXT = 0x8001;
        public static uint GL_DST_ALPHA = 0x0304;
        public static uint GL_DST_COLOR = 0x0306;
        public static uint GL_ONE = 1;
        public static uint GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004;
        public static uint GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002;
        public static uint GL_ONE_MINUS_DST_ALPHA = 0x0305;
        public static uint GL_ONE_MINUS_DST_COLOR = 0x0307;
        public static uint GL_ONE_MINUS_SRC_ALPHA = 0x0303;
        public static uint GL_SRC_ALPHA = 0x0302;
        public static uint GL_SRC_ALPHA_SATURATE = 0x0308;
        public static uint GL_ZERO = 0;
        public static uint GL_ONE_MINUS_SRC_COLOR = 0x0301;
        public static uint GL_SRC_COLOR = 0x0300;
        public static uint GL_AND = 0x1501;
        public static uint GL_AND_INVERTED = 0x1504;
        public static uint GL_AND_REVERSE = 0x1502;
        public static uint GL_CLEAR = 0x1500;
        public static uint GL_COPY = 0x1503;
        public static uint GL_COPY_INVERTED = 0x150C;
        public static uint GL_EQUIV = 0x1509;
        public static uint GL_INVERT = 0x150A;
        public static uint GL_NAND = 0x150E;
        public static uint GL_NOOP = 0x1505;
        public static uint GL_NOR = 0x1508;
        public static uint GL_OR = 0x1507;
        public static uint GL_OR_INVERTED = 0x150D;
        public static uint GL_OR_REVERSE = 0x150B;
        public static uint GL_SET = 0x150F;
        public static uint GL_XOR = 0x1506;
        public static uint GL_ALWAYS = 0x0207;
        public static uint GL_EQUAL = 0x0202;
        public static uint GL_GEQUAL = 0x0206;
        public static uint GL_GREATER = 0x0204;
        public static uint GL_LEQUAL = 0x0203;
        public static uint GL_LESS = 0x0201;
        public static uint GL_NEVER = 0x0200;
        public static uint GL_NOTEQUAL = 0x0205;
        public static uint GL_DECR = 0x1E03;
        public static uint GL_INCR = 0x1E02;
        public static uint GL_KEEP = 0x1E00;
        public static uint GL_REPLACE = 0x1E01;
        public static uint GL_PACK_ALIGNMENT = 0x0D05;
        public static uint GL_PACK_IMAGE_DEPTH_SGIS = 0x8131;
        public static uint GL_PACK_IMAGE_HEIGHT = 0x806C;
        public static uint GL_PACK_IMAGE_HEIGHT_EXT = 0x806C;
        public static uint GL_PACK_LSB_FIRST = 0x0D01;
        public static uint GL_PACK_RESAMPLE_OML = 0x8984;
        public static uint GL_PACK_RESAMPLE_SGIX = 0x842C;
        public static uint GL_PACK_ROW_LENGTH = 0x0D02;
        public static uint GL_PACK_SKIP_IMAGES = 0x806B;
        public static uint GL_PACK_SKIP_IMAGES_EXT = 0x806B;
        public static uint GL_PACK_SKIP_PIXELS = 0x0D04;
        public static uint GL_PACK_SKIP_ROWS = 0x0D03;
        public static uint GL_PACK_SKIP_VOLUMES_SGIS = 0x8130;
        public static uint GL_PACK_SUBSAMPLE_RATE_SGIX = 0x85A0;
        public static uint GL_PACK_SWAP_BYTES = 0x0D00;
        public static uint GL_PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145;
        public static uint GL_PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144;
        public static uint GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143;
        public static uint GL_PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142;
        public static uint GL_PIXEL_TILE_HEIGHT_SGIX = 0x8141;
        public static uint GL_PIXEL_TILE_WIDTH_SGIX = 0x8140;
        public static uint GL_UNPACK_ALIGNMENT = 0x0CF5;
        public static uint GL_UNPACK_IMAGE_DEPTH_SGIS = 0x8133;
        public static uint GL_UNPACK_IMAGE_HEIGHT = 0x806E;
        public static uint GL_UNPACK_IMAGE_HEIGHT_EXT = 0x806E;
        public static uint GL_UNPACK_LSB_FIRST = 0x0CF1;
        public static uint GL_UNPACK_RESAMPLE_OML = 0x8985;
        public static uint GL_UNPACK_RESAMPLE_SGIX = 0x842D;
        public static uint GL_UNPACK_ROW_LENGTH = 0x0CF2;
        public static uint GL_UNPACK_ROW_LENGTH_EXT = 0x0CF2;
        public static uint GL_UNPACK_SKIP_IMAGES = 0x806D;
        public static uint GL_UNPACK_SKIP_IMAGES_EXT = 0x806D;
        public static uint GL_UNPACK_SKIP_PIXELS = 0x0CF4;
        public static uint GL_UNPACK_SKIP_PIXELS_EXT = 0x0CF4;
        public static uint GL_UNPACK_SKIP_ROWS = 0x0CF3;
        public static uint GL_UNPACK_SKIP_ROWS_EXT = 0x0CF3;
        public static uint GL_UNPACK_SKIP_VOLUMES_SGIS = 0x8132;
        public static uint GL_UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1;
        public static uint GL_UNPACK_SWAP_BYTES = 0x0CF0;
        public static uint GL_ACCUM_ALPHA_BITS = 0x0D5B;
        public static uint GL_ACCUM_BLUE_BITS = 0x0D5A;
        public static uint GL_ACCUM_CLEAR_VALUE = 0x0B80;
        public static uint GL_ACCUM_GREEN_BITS = 0x0D59;
        public static uint GL_ACCUM_RED_BITS = 0x0D58;
        public static uint GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
        public static uint GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
        public static uint GL_ALPHA_BIAS = 0x0D1D;
        public static uint GL_ALPHA_BITS = 0x0D55;
        public static uint GL_ALPHA_SCALE = 0x0D1C;
        public static uint GL_ALPHA_TEST_FUNC = 0x0BC1;
        public static uint GL_ALPHA_TEST_FUNC_QCOM = 0x0BC1;
        public static uint GL_ALPHA_TEST_QCOM = 0x0BC0;
        public static uint GL_ALPHA_TEST_REF = 0x0BC2;
        public static uint GL_ALPHA_TEST_REF_QCOM = 0x0BC2;
        public static uint GL_ASYNC_MARKER_SGIX = 0x8329;
        public static uint GL_ATTRIB_STACK_DEPTH = 0x0BB0;
        public static uint GL_AUX_BUFFERS = 0x0C00;
        public static uint GL_BLEND_COLOR_EXT = 0x8005;
        public static uint GL_BLEND_DST = 0x0BE0;
        public static uint GL_BLEND_EQUATION_EXT = 0x8009;
        public static uint GL_BLEND_SRC = 0x0BE1;
        public static uint GL_BLUE_BIAS = 0x0D1B;
        public static uint GL_BLUE_BITS = 0x0D54;
        public static uint GL_BLUE_SCALE = 0x0D1A;
        public static uint GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
        public static uint GL_COLOR_ARRAY_COUNT_EXT = 0x8084;
        public static uint GL_COLOR_ARRAY_SIZE = 0x8081;
        public static uint GL_COLOR_ARRAY_STRIDE = 0x8083;
        public static uint GL_COLOR_ARRAY_TYPE = 0x8082;
        public static uint GL_COLOR_CLEAR_VALUE = 0x0C22;
        public static uint GL_COLOR_MATERIAL_FACE = 0x0B55;
        public static uint GL_COLOR_MATERIAL_PARAMETER = 0x0B56;
        public static uint GL_COLOR_MATRIX_SGI = 0x80B1;
        public static uint GL_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2;
        public static uint GL_COLOR_WRITEMASK = 0x0C23;
        public static uint GL_CULL_FACE_MODE = 0x0B45;
        public static uint GL_CURRENT_COLOR = 0x0B00;
        public static uint GL_CURRENT_INDEX = 0x0B01;
        public static uint GL_CURRENT_NORMAL = 0x0B02;
        public static uint GL_CURRENT_RASTER_COLOR = 0x0B04;
        public static uint GL_CURRENT_RASTER_DISTANCE = 0x0B09;
        public static uint GL_CURRENT_RASTER_INDEX = 0x0B05;
        public static uint GL_CURRENT_RASTER_POSITION = 0x0B07;
        public static uint GL_CURRENT_RASTER_POSITION_VALID = 0x0B08;
        public static uint GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
        public static uint GL_CURRENT_TEXTURE_COORDS = 0x0B03;
        public static uint GL_DEFORMATIONS_MASK_SGIX = 0x8196;
        public static uint GL_DEPTH_BIAS = 0x0D1F;
        public static uint GL_DEPTH_BITS = 0x0D56;
        public static uint GL_DEPTH_CLEAR_VALUE = 0x0B73;
        public static uint GL_DEPTH_FUNC = 0x0B74;
        public static uint GL_DEPTH_RANGE = 0x0B70;
        public static uint GL_DEPTH_SCALE = 0x0D1E;
        public static uint GL_DEPTH_WRITEMASK = 0x0B72;
        public static uint GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096;
        public static uint GL_DISTANCE_ATTENUATION_SGIS = 0x8129;
        public static uint GL_DOUBLEBUFFER = 0x0C32;
        public static uint GL_DRAW_BUFFER = 0x0C01;
        public static uint GL_DRAW_BUFFER_EXT = 0x0C01;
        public static uint GL_EDGE_FLAG = 0x0B43;
        public static uint GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D;
        public static uint GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C;
        public static uint GL_FEEDBACK_BUFFER_SIZE = 0x0DF1;
        public static uint GL_FEEDBACK_BUFFER_TYPE = 0x0DF2;
        public static uint GL_FOG_COLOR = 0x0B66;
        public static uint GL_FOG_DENSITY = 0x0B62;
        public static uint GL_FOG_END = 0x0B64;
        public static uint GL_FOG_FUNC_POINTS_SGIS = 0x812B;
        public static uint GL_FOG_INDEX = 0x0B61;
        public static uint GL_FOG_MODE = 0x0B65;
        public static uint GL_FOG_OFFSET_VALUE_SGIX = 0x8199;
        public static uint GL_FOG_START = 0x0B63;
        public static uint GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402;
        public static uint GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403;
        public static uint GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A;
        public static uint GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408;
        public static uint GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B;
        public static uint GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409;
        public static uint GL_FRAMEZOOM_FACTOR_SGIX = 0x818C;
        public static uint GL_FRONT_FACE = 0x0B46;
        public static uint GL_GREEN_BIAS = 0x0D19;
        public static uint GL_GREEN_BITS = 0x0D53;
        public static uint GL_GREEN_SCALE = 0x0D18;
        public static uint GL_INDEX_ARRAY_COUNT_EXT = 0x8087;
        public static uint GL_INDEX_ARRAY_STRIDE = 0x8086;
        public static uint GL_INDEX_ARRAY_TYPE = 0x8085;
        public static uint GL_INDEX_BITS = 0x0D51;
        public static uint GL_INDEX_CLEAR_VALUE = 0x0C20;
        public static uint GL_INDEX_MODE = 0x0C30;
        public static uint GL_INDEX_OFFSET = 0x0D13;
        public static uint GL_INDEX_SHIFT = 0x0D12;
        public static uint GL_INDEX_WRITEMASK = 0x0C21;
        public static uint GL_INSTRUMENT_MEASUREMENTS_SGIX = 0x8181;
        public static uint GL_LIGHT_ENV_MODE_SGIX = 0x8407;
        public static uint GL_LIGHT_MODEL_AMBIENT = 0x0B53;
        public static uint GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
        public static uint GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
        public static uint GL_LIGHT_MODEL_TWO_SIDE = 0x0B52;
        public static uint GL_LINE_STIPPLE_PATTERN = 0x0B25;
        public static uint GL_LINE_STIPPLE_REPEAT = 0x0B26;
        public static uint GL_LINE_WIDTH = 0x0B21;
        public static uint GL_LINE_WIDTH_GRANULARITY = 0x0B23;
        public static uint GL_LINE_WIDTH_RANGE = 0x0B22;
        public static uint GL_LIST_BASE = 0x0B32;
        public static uint GL_LIST_INDEX = 0x0B33;
        public static uint GL_LIST_MODE = 0x0B30;
        public static uint GL_LOGIC_OP = 0x0BF1;
        public static uint GL_LOGIC_OP_MODE = 0x0BF0;
        public static uint GL_MAP1_GRID_DOMAIN = 0x0DD0;
        public static uint GL_MAP1_GRID_SEGMENTS = 0x0DD1;
        public static uint GL_MAP2_GRID_DOMAIN = 0x0DD2;
        public static uint GL_MAP2_GRID_SEGMENTS = 0x0DD3;
        public static uint GL_MAP_COLOR = 0x0D10;
        public static uint GL_MAP_STENCIL = 0x0D11;
        public static uint GL_MATRIX_MODE = 0x0BA0;
        public static uint GL_MAX_3D_TEXTURE_SIZE_EXT = 0x8073;
        public static uint GL_MAX_4D_TEXTURE_SIZE_SGIS = 0x8138;
        public static uint GL_MAX_ACTIVE_LIGHTS_SGIX = 0x8405;
        public static uint GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360;
        public static uint GL_MAX_ASYNC_HISTOGRAM_SGIX = 0x832D;
        public static uint GL_MAX_ASYNC_READ_PIXELS_SGIX = 0x8361;
        public static uint GL_MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F;
        public static uint GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35;
        public static uint GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
        public static uint GL_MAX_CLIPMAP_DEPTH_SGIX = 0x8177;
        public static uint GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178;
        public static uint GL_MAX_CLIP_DISTANCES = 0x0D32;
        public static uint GL_MAX_CLIP_PLANES = 0x0D32;
        public static uint GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3;
        public static uint GL_MAX_EVAL_ORDER = 0x0D30;
        public static uint GL_MAX_FOG_FUNC_POINTS_SGIS = 0x812C;
        public static uint GL_MAX_FRAGMENT_LIGHTS_SGIX = 0x8404;
        public static uint GL_MAX_FRAMEZOOM_FACTOR_SGIX = 0x818D;
        public static uint GL_MAX_LIGHTS = 0x0D31;
        public static uint GL_MAX_LIST_NESTING = 0x0B31;
        public static uint GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
        public static uint GL_MAX_NAME_STACK_DEPTH = 0x0D37;
        public static uint GL_MAX_PIXEL_MAP_TABLE = 0x0D34;
        public static uint GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38;
        public static uint GL_MAX_TEXTURE_SIZE = 0x0D33;
        public static uint GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39;
        public static uint GL_MAX_VIEWPORT_DIMS = 0x0D3A;
        public static uint GL_MODELVIEW0_MATRIX_EXT = 0x0BA6;
        public static uint GL_MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3;
        public static uint GL_MODELVIEW_MATRIX = 0x0BA6;
        public static uint GL_MODELVIEW_STACK_DEPTH = 0x0BA3;
        public static uint GL_NAME_STACK_DEPTH = 0x0D70;
        public static uint GL_NORMAL_ARRAY_COUNT_EXT = 0x8080;
        public static uint GL_NORMAL_ARRAY_STRIDE = 0x807F;
        public static uint GL_NORMAL_ARRAY_TYPE = 0x807E;
        public static uint GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
        public static uint GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
        public static uint GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
        public static uint GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
        public static uint GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
        public static uint GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
        public static uint GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
        public static uint GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
        public static uint GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
        public static uint GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
        public static uint GL_PIXEL_TEX_GEN_MODE_SGIX = 0x832B;
        public static uint GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E;
        public static uint GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F;
        public static uint GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128;
        public static uint GL_POINT_SIZE = 0x0B11;
        public static uint GL_POINT_SIZE_GRANULARITY = 0x0B13;
        public static uint GL_POINT_SIZE_MAX_SGIS = 0x8127;
        public static uint GL_POINT_SIZE_MIN_SGIS = 0x8126;
        public static uint GL_POINT_SIZE_RANGE = 0x0B12;
        public static uint GL_POLYGON_MODE = 0x0B40;
        public static uint GL_POLYGON_OFFSET_BIAS_EXT = 0x8039;
        public static uint GL_POLYGON_OFFSET_FACTOR = 0x8038;
        public static uint GL_POLYGON_OFFSET_UNITS = 0x2A00;
        public static uint GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB;
        public static uint GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7;
        public static uint GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA;
        public static uint GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6;
        public static uint GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9;
        public static uint GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5;
        public static uint GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8;
        public static uint GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4;
        public static uint GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023;
        public static uint GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F;
        public static uint GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022;
        public static uint GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E;
        public static uint GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021;
        public static uint GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D;
        public static uint GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x8020;
        public static uint GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x801C;
        public static uint GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B;
        public static uint GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C;
        public static uint GL_PROJECTION_MATRIX = 0x0BA7;
        public static uint GL_PROJECTION_STACK_DEPTH = 0x0BA4;
        public static uint GL_READ_BUFFER = 0x0C02;
        public static uint GL_READ_BUFFER_EXT = 0x0C02;
        public static uint GL_READ_BUFFER_NV = 0x0C02;
        public static uint GL_RED_BIAS = 0x0D15;
        public static uint GL_RED_BITS = 0x0D52;
        public static uint GL_RED_SCALE = 0x0D14;
        public static uint GL_REFERENCE_PLANE_EQUATION_SGIX = 0x817E;
        public static uint GL_RENDER_MODE = 0x0C40;
        public static uint GL_RGBA_MODE = 0x0C31;
        public static uint GL_SAMPLES_SGIS = 0x80A9;
        public static uint GL_SAMPLE_BUFFERS_SGIS = 0x80A8;
        public static uint GL_SAMPLE_MASK_INVERT_SGIS = 0x80AB;
        public static uint GL_SAMPLE_MASK_VALUE_SGIS = 0x80AA;
        public static uint GL_SAMPLE_PATTERN_SGIS = 0x80AC;
        public static uint GL_SCISSOR_BOX = 0x0C10;
        public static uint GL_SELECTION_BUFFER_SIZE = 0x0DF4;
        public static uint GL_SHADE_MODEL = 0x0B54;
        public static uint GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
        public static uint GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
        public static uint GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
        public static uint GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
        public static uint GL_SPRITE_AXIS_SGIX = 0x814A;
        public static uint GL_SPRITE_MODE_SGIX = 0x8149;
        public static uint GL_SPRITE_TRANSLATION_SGIX = 0x814B;
        public static uint GL_STENCIL_BITS = 0x0D57;
        public static uint GL_STENCIL_CLEAR_VALUE = 0x0B91;
        public static uint GL_STENCIL_FAIL = 0x0B94;
        public static uint GL_STENCIL_FUNC = 0x0B92;
        public static uint GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
        public static uint GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
        public static uint GL_STENCIL_REF = 0x0B97;
        public static uint GL_STENCIL_VALUE_MASK = 0x0B93;
        public static uint GL_STENCIL_WRITEMASK = 0x0B98;
        public static uint GL_STEREO = 0x0C33;
        public static uint GL_SUBPIXEL_BITS = 0x0D50;
        public static uint GL_TEXTURE_3D_BINDING_EXT = 0x806A;
        public static uint GL_TEXTURE_4D_BINDING_SGIS = 0x814F;
        public static uint GL_TEXTURE_BINDING_1D = 0x8068;
        public static uint GL_TEXTURE_BINDING_2D = 0x8069;
        public static uint GL_TEXTURE_BINDING_3D = 0x806A;
        public static uint GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B;
        public static uint GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088;
        public static uint GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
        public static uint GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089;
        public static uint GL_TEXTURE_MATRIX = 0x0BA8;
        public static uint GL_TEXTURE_STACK_DEPTH = 0x0BA5;
        public static uint GL_VERTEX_ARRAY_COUNT_EXT = 0x807D;
        public static uint GL_VERTEX_ARRAY_SIZE = 0x807A;
        public static uint GL_VERTEX_ARRAY_STRIDE = 0x807C;
        public static uint GL_VERTEX_ARRAY_TYPE = 0x807B;
        public static uint GL_VIEWPORT = 0x0BA2;
        public static uint GL_ZOOM_X = 0x0D16;
        public static uint GL_ZOOM_Y = 0x0D17;
        public static uint GL_EXTENSIONS = 0x1F03;
        public static uint GL_RENDERER = 0x1F01;
        public static uint GL_VENDOR = 0x1F00;
        public static uint GL_VERSION = 0x1F02;
        public static uint GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C;
        public static uint GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0;
        public static uint GL_TEXTURE_4DSIZE_SGIS = 0x8136;
        public static uint GL_TEXTURE_ALPHA_SIZE = 0x805F;
        public static uint GL_TEXTURE_BLUE_SIZE = 0x805E;
        public static uint GL_TEXTURE_BORDER = 0x1005;
        public static uint GL_TEXTURE_BORDER_COLOR_NV = 0x1004;
        public static uint GL_TEXTURE_COMPARE_OPERATOR_SGIX = 0x819B;
        public static uint GL_TEXTURE_COMPONENTS = 0x1003;
        public static uint GL_TEXTURE_DEPTH_EXT = 0x8071;
        public static uint GL_TEXTURE_FILTER4_SIZE_SGIS = 0x8147;
        public static uint GL_TEXTURE_GEQUAL_R_SGIX = 0x819D;
        public static uint GL_TEXTURE_GREEN_SIZE = 0x805D;
        public static uint GL_TEXTURE_HEIGHT = 0x1001;
        public static uint GL_TEXTURE_INTENSITY_SIZE = 0x8061;
        public static uint GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
        public static uint GL_TEXTURE_LEQUAL_R_SGIX = 0x819C;
        public static uint GL_TEXTURE_LUMINANCE_SIZE = 0x8060;
        public static uint GL_TEXTURE_RED_SIZE = 0x805C;
        public static uint GL_TEXTURE_RESIDENT = 0x8067;
        public static uint GL_TEXTURE_WIDTH = 0x1000;
        public static uint GL_COMPILE = 0x1300;
        public static uint GL_COMPILE_AND_EXECUTE = 0x1301;
        public static uint GL_2_BYTES = 0x1407;
        public static uint GL_3_BYTES = 0x1408;
        public static uint GL_4_BYTES = 0x1409;
        public static uint GL_LINES = 0x0001;
        public static uint GL_LINES_ADJACENCY = 0x000A;
        public static uint GL_LINES_ADJACENCY_ARB = 0x000A;
        public static uint GL_LINES_ADJACENCY_EXT = 0x000A;
        public static uint GL_LINE_LOOP = 0x0002;
        public static uint GL_LINE_STRIP = 0x0003;
        public static uint GL_LINE_STRIP_ADJACENCY = 0x000B;
        public static uint GL_LINE_STRIP_ADJACENCY_ARB = 0x000B;
        public static uint GL_LINE_STRIP_ADJACENCY_EXT = 0x000B;
        public static uint GL_PATCHES = 0x000E;
        public static uint GL_POINTS = 0x0000;
        public static uint GL_POLYGON = 0x0009;
        public static uint GL_QUADS = 0x0007;
        public static uint GL_QUAD_STRIP = 0x0008;
        public static uint GL_TRIANGLES = 0x0004;
        public static uint GL_TRIANGLES_ADJACENCY = 0x000C;
        public static uint GL_TRIANGLES_ADJACENCY_ARB = 0x000C;
        public static uint GL_TRIANGLES_ADJACENCY_EXT = 0x000C;
        public static uint GL_TRIANGLE_FAN = 0x0006;
        public static uint GL_TRIANGLE_STRIP = 0x0005;
        public static uint GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
        public static uint GL_TRIANGLE_STRIP_ADJACENCY_ARB = 0x000D;
        public static uint GL_TRIANGLE_STRIP_ADJACENCY_EXT = 0x000D;
        public static uint GL_CLIP_DISTANCE0 = 0x3000;
        public static uint GL_CLIP_DISTANCE1 = 0x3001;
        public static uint GL_CLIP_DISTANCE2 = 0x3002;
        public static uint GL_CLIP_DISTANCE3 = 0x3003;
        public static uint GL_CLIP_DISTANCE4 = 0x3004;
        public static uint GL_CLIP_DISTANCE5 = 0x3005;
        public static uint GL_CLIP_DISTANCE6 = 0x3006;
        public static uint GL_CLIP_DISTANCE7 = 0x3007;
        public static uint GL_AMBIENT = 0x1200;
        public static uint GL_AMBIENT_AND_DIFFUSE = 0x1602;
        public static uint GL_DIFFUSE = 0x1201;
        public static uint GL_EMISSION = 0x1600;
        public static uint GL_SPECULAR = 0x1202;
        public static uint GL_CONSTANT_ATTENUATION = 0x1207;
        public static uint GL_LINEAR_ATTENUATION = 0x1208;
        public static uint GL_POSITION = 0x1203;
        public static uint GL_QUADRATIC_ATTENUATION = 0x1209;
        public static uint GL_SPOT_CUTOFF = 0x1206;
        public static uint GL_SPOT_DIRECTION = 0x1204;
        public static uint GL_SPOT_EXPONENT = 0x1205;
        public static uint GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8;
        public static uint GL_COLOR_INDEXES = 0x1603;
        public static uint GL_SHININESS = 0x1601;
        public static uint GL_FLAT = 0x1D00;
        public static uint GL_SMOOTH = 0x1D01;
        public static uint GL_TEXTURE_ENV = 0x2300;
        public static uint GL_TEXTURE_ENV_COLOR = 0x2201;
        public static uint GL_TEXTURE_ENV_MODE = 0x2200;
        public static uint GL_S = 0x2000;
        public static uint GL_T = 0x2001;
        public static uint GL_R = 0x2002;
        public static uint GL_Q = 0x2003;
        public static uint GL_EYE_LINE_SGIS = 0x81F6;
        public static uint GL_EYE_PLANE = 0x2502;
        public static uint GL_EYE_POINT_SGIS = 0x81F4;
        public static uint GL_OBJECT_LINE_SGIS = 0x81F7;
        public static uint GL_OBJECT_PLANE = 0x2501;
        public static uint GL_OBJECT_POINT_SGIS = 0x81F5;
        public static uint GL_TEXTURE_GEN_MODE = 0x2500;
        public static uint GL_2D = 0x0600;
        public static uint GL_3D = 0x0601;
        public static uint GL_3D_COLOR = 0x0602;
        public static uint GL_3D_COLOR_TEXTURE = 0x0603;
        public static uint GL_4D_COLOR_TEXTURE = 0x0604;
        public static uint GL_FEEDBACK = 0x1C01;
        public static uint GL_RENDER = 0x1C00;
        public static uint GL_SELECT = 0x1C02;
        public static uint GL_ACCUM = 0x0100;
        public static uint GL_LOAD = 0x0101;
        public static uint GL_RETURN = 0x0102;
        public static uint GL_MULT = 0x0103;
        public static uint GL_ADD = 0x0104;
        public static uint GL_ALL_ATTRIB_BITS = 0xFFFFFFFF;
        public static uint GL_CURRENT_BIT = 0x00000001;
        public static uint GL_ENABLE_BIT = 0x00002000;
        public static uint GL_EVAL_BIT = 0x00010000;
        public static uint GL_FOG_BIT = 0x00000080;
        public static uint GL_HINT_BIT = 0x00008000;
        public static uint GL_LIGHTING_BIT = 0x00000040;
        public static uint GL_LINE_BIT = 0x00000004;
        public static uint GL_LIST_BIT = 0x00020000;
        public static uint GL_MULTISAMPLE_BIT = 0x20000000;
        public static uint GL_MULTISAMPLE_BIT_3DFX = 0x20000000;
        public static uint GL_MULTISAMPLE_BIT_ARB = 0x20000000;
        public static uint GL_MULTISAMPLE_BIT_EXT = 0x20000000;
        public static uint GL_PIXEL_MODE_BIT = 0x00000020;
        public static uint GL_POINT_BIT = 0x00000002;
        public static uint GL_POLYGON_BIT = 0x00000008;
        public static uint GL_POLYGON_STIPPLE_BIT = 0x00000010;
        public static uint GL_SCISSOR_BIT = 0x00080000;
        public static uint GL_TEXTURE_BIT = 0x00040000;
        public static uint GL_TRANSFORM_BIT = 0x00001000;
        public static uint GL_VIEWPORT_BIT = 0x00000800;
        public static uint GL_GEOMETRY_DEFORMATION_SGIX = 0x8194;
        public static uint GL_TEXTURE_DEFORMATION_SGIX = 0x8195;
        public static uint GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB;
        public static uint GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7;
        public static uint GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA;
        public static uint GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6;
        public static uint GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9;
        public static uint GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5;
        public static uint GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8;
        public static uint GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4;
        public static uint GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023;
        public static uint GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F;
        public static uint GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022;
        public static uint GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E;
        public static uint GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021;
        public static uint GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D;
        public static uint GL_POST_CONVOLUTION_RED_BIAS = 0x8020;
        public static uint GL_POST_CONVOLUTION_RED_SCALE = 0x801C;
        public static uint GL_PIXEL_MAP_A_TO_A = 0x0C79;
        public static uint GL_PIXEL_MAP_B_TO_B = 0x0C78;
        public static uint GL_PIXEL_MAP_G_TO_G = 0x0C77;
        public static uint GL_PIXEL_MAP_I_TO_A = 0x0C75;
        public static uint GL_PIXEL_MAP_I_TO_B = 0x0C74;
        public static uint GL_PIXEL_MAP_I_TO_G = 0x0C73;
        public static uint GL_PIXEL_MAP_I_TO_I = 0x0C70;
        public static uint GL_PIXEL_MAP_I_TO_R = 0x0C72;
        public static uint GL_PIXEL_MAP_R_TO_R = 0x0C76;
        public static uint GL_PIXEL_MAP_S_TO_S = 0x0C71;
        public static uint GL_COLOR = 0x1800;
        public static uint GL_COLOR_EXT = 0x1800;
        public static uint GL_DEPTH = 0x1801;
        public static uint GL_DEPTH_EXT = 0x1801;
        public static uint GL_STENCIL = 0x1802;
        public static uint GL_STENCIL_EXT = 0x1802;
        public static uint GL_COEFF = 0x0A00;
        public static uint GL_DOMAIN = 0x0A02;
        public static uint GL_ORDER = 0x0A01;
        public static uint GL_MODELVIEW = 0x1700;
        public static uint GL_MODELVIEW0_EXT = 0x1700;
        public static uint GL_PROJECTION = 0x1701;
        public static uint GL_TEXTURE = 0x1702;
        public static uint GL_NO_ERROR = 0;
        public static uint GL_INVALID_ENUM = 0x0500;
        public static uint GL_INVALID_VALUE = 0x0501;
        public static uint GL_INVALID_OPERATION = 0x0502;
        public static uint GL_OUT_OF_MEMORY = 0x0505;
        public static uint GL_DOUBLE = 0x140A;
        public static uint GL_STACK_OVERFLOW = 0x0503;
        public static uint GL_STACK_UNDERFLOW = 0x0504;
        public static uint GL_NEAREST = 0x2600;
        public static uint GL_LINEAR = 0x2601;
        public static uint GL_NEAREST_MIPMAP_NEAREST = 0x2700;
        public static uint GL_LINEAR_MIPMAP_NEAREST = 0x2701;
        public static uint GL_NEAREST_MIPMAP_LINEAR = 0x2702;
        public static uint GL_LINEAR_MIPMAP_LINEAR = 0x2703;
        public static uint GL_REPEAT = 0x2901;
        public static uint GL_R3_G3_B2 = 0x2A10;
        public static uint GL_RGB4 = 0x804F;
        public static uint GL_RGB5 = 0x8050;
        public static uint GL_RGB8 = 0x8051;
        public static uint GL_RGB10 = 0x8052;
        public static uint GL_RGB12 = 0x8053;
        public static uint GL_RGB16 = 0x8054;
        public static uint GL_RGBA2 = 0x8055;
        public static uint GL_RGBA4 = 0x8056;
        public static uint GL_RGB5_A1 = 0x8057;
        public static uint GL_RGBA8 = 0x8058;
        public static uint GL_RGB10_A2 = 0x8059;
        public static uint GL_RGBA12 = 0x805A;
        public static uint GL_RGBA16 = 0x805B;
        public static uint GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
        public static uint GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
        public static uint GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF;
        public static uint GL_PASS_THROUGH_TOKEN = 0x0700;
        public static uint GL_POINT_TOKEN = 0x0701;
        public static uint GL_LINE_TOKEN = 0x0702;
        public static uint GL_POLYGON_TOKEN = 0x0703;
        public static uint GL_BITMAP_TOKEN = 0x0704;
        public static uint GL_DRAW_PIXEL_TOKEN = 0x0705;
        public static uint GL_COPY_PIXEL_TOKEN = 0x0706;
        public static uint GL_LINE_RESET_TOKEN = 0x0707;
        public static uint GL_EXP = 0x0800;
        public static uint GL_EXP2 = 0x0801;
        public static uint GL_VERTEX_ARRAY_POINTER = 0x808E;
        public static uint GL_NORMAL_ARRAY_POINTER = 0x808F;
        public static uint GL_COLOR_ARRAY_POINTER = 0x8090;
        public static uint GL_INDEX_ARRAY_POINTER = 0x8091;
        public static uint GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092;
        public static uint GL_EDGE_FLAG_ARRAY_POINTER = 0x8093;
        public static uint GL_FEEDBACK_BUFFER_POINTER = 0x0DF0;
        public static uint GL_SELECTION_BUFFER_POINTER = 0x0DF3;
        public static uint GL_MODULATE = 0x2100;
        public static uint GL_DECAL = 0x2101;
        public static uint GL_EYE_LINEAR = 0x2400;
        public static uint GL_OBJECT_LINEAR = 0x2401;
        public static uint GL_SPHERE_MAP = 0x2402;
        public static uint GL_CLAMP = 0x2900;
        public static uint GL_ALPHA4 = 0x803B;
        public static uint GL_ALPHA8 = 0x803C;
        public static uint GL_ALPHA12 = 0x803D;
        public static uint GL_ALPHA16 = 0x803E;
        public static uint GL_LUMINANCE4 = 0x803F;
        public static uint GL_LUMINANCE8 = 0x8040;
        public static uint GL_LUMINANCE12 = 0x8041;
        public static uint GL_LUMINANCE16 = 0x8042;
        public static uint GL_LUMINANCE4_ALPHA4 = 0x8043;
        public static uint GL_LUMINANCE6_ALPHA2 = 0x8044;
        public static uint GL_LUMINANCE8_ALPHA8 = 0x8045;
        public static uint GL_LUMINANCE12_ALPHA4 = 0x8046;
        public static uint GL_LUMINANCE12_ALPHA12 = 0x8047;
        public static uint GL_LUMINANCE16_ALPHA16 = 0x8048;
        public static uint GL_INTENSITY = 0x8049;
        public static uint GL_INTENSITY4 = 0x804A;
        public static uint GL_INTENSITY8 = 0x804B;
        public static uint GL_INTENSITY12 = 0x804C;
        public static uint GL_INTENSITY16 = 0x804D;
        public static uint GL_V2F = 0x2A20;
        public static uint GL_V3F = 0x2A21;
        public static uint GL_C4UB_V2F = 0x2A22;
        public static uint GL_C4UB_V3F = 0x2A23;
        public static uint GL_C3F_V3F = 0x2A24;
        public static uint GL_N3F_V3F = 0x2A25;
        public static uint GL_C4F_N3F_V3F = 0x2A26;
        public static uint GL_T2F_V3F = 0x2A27;
        public static uint GL_T4F_V4F = 0x2A28;
        public static uint GL_T2F_C4UB_V3F = 0x2A29;
        public static uint GL_T2F_C3F_V3F = 0x2A2A;
        public static uint GL_T2F_N3F_V3F = 0x2A2B;
        public static uint GL_T2F_C4F_N3F_V3F = 0x2A2C;
        public static uint GL_T4F_C4F_N3F_V4F = 0x2A2D;
        public static uint GL_TEXTURE_DEPTH = 0x8071;
        public static uint GL_MAX_3D_TEXTURE_SIZE = 0x8073;
        public static uint GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
        public static uint GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
        public static uint GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
        public static uint GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
        public static uint GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
        public static uint GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
        public static uint GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
        public static uint GL_BGR = 0x80E0;
        public static uint GL_BGRA = 0x80E1;
        public static uint GL_MAX_ELEMENTS_VERTICES = 0x80E8;
        public static uint GL_MAX_ELEMENTS_INDICES = 0x80E9;
        public static uint GL_CLAMP_TO_EDGE = 0x812F;
        public static uint GL_RESCALE_NORMAL = 0x803A;
        public static uint GL_SINGLE_COLOR = 0x81F9;
        public static uint GL_SEPARATE_SPECULAR_COLOR = 0x81FA;
        #endregion

        #region Commands
        public static void glCullFace(uint mode)
        {
            GLInterop.glCullFacePtr(mode);
        }
        public static void glFrontFace(uint mode)
        {
            GLInterop.glFrontFacePtr(mode);
        }
        public static void glHint(uint target, uint mode)
        {
            GLInterop.glHintPtr(target, mode);
        }
        public static void glLineWidth(float width)
        {
            GLInterop.glLineWidthPtr(width);
        }
        public static void glPointSize(float size)
        {
            GLInterop.glPointSizePtr(size);
        }
        public static void glPolygonMode(uint face, uint mode)
        {
            GLInterop.glPolygonModePtr(face, mode);
        }
        public static void glScissor(int x, int y, int width, int height)
        {
            GLInterop.glScissorPtr(x, y, width, height);
        }
        public static void glTexParameterf(uint target, uint pname, float param)
        {
            GLInterop.glTexParameterfPtr(target, pname, param);
        }
        public static void glTexParameterfv(uint target, uint pname, IntPtr @params)
        {
            GLInterop.glTexParameterfvPtr(target, pname, @params);
        }
        public static void glTexParameteri(uint target, uint pname, int param)
        {
            GLInterop.glTexParameteriPtr(target, pname, param);
        }
        public static void glTexParameteriv(uint target, uint pname, IntPtr @params)
        {
            GLInterop.glTexParameterivPtr(target, pname, @params);
        }
        public static void glTexImage1D(uint target, int level, int internalformat, int width, int border, uint format, uint type, IntPtr pixels)
        {
            GLInterop.glTexImage1DPtr(target, level, internalformat, width, border, format, type, pixels);
        }
        public static void glTexImage2D(uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, IntPtr pixels)
        {
            GLInterop.glTexImage2DPtr(target, level, internalformat, width, height, border, format, type, pixels);
        }
        public static void glDrawBuffer(uint mode)
        {
            GLInterop.glDrawBufferPtr(mode);
        }
        public static void glClear(uint mask)
        {
            GLInterop.glClearPtr(mask);
        }
        public static void glClearColor(float red, float green, float blue, float alpha)
        {
            GLInterop.glClearColorPtr(red, green, blue, alpha);
        }
        public static void glClearStencil(int s)
        {
            GLInterop.glClearStencilPtr(s);
        }
        public static void glClearDepth(double depth)
        {
            GLInterop.glClearDepthPtr(depth);
        }
        public static void glStencilMask(uint mask)
        {
            GLInterop.glStencilMaskPtr(mask);
        }
        public static void glColorMask(bool red, bool green, bool blue, bool alpha)
        {
            GLInterop.glColorMaskPtr(red, green, blue, alpha);
        }
        public static void glDepthMask(bool flag)
        {
            GLInterop.glDepthMaskPtr(flag);
        }
        public static void glDisable(uint cap)
        {
            GLInterop.glDisablePtr(cap);
        }
        public static void glEnable(uint cap)
        {
            GLInterop.glEnablePtr(cap);
        }
        public static void glFinish()
        {
            GLInterop.glFinishPtr();
        }
        public static void glFlush()
        {
            GLInterop.glFlushPtr();
        }
        public static void glBlendFunc(uint sfactor, uint dfactor)
        {
            GLInterop.glBlendFuncPtr(sfactor, dfactor);
        }
        public static void glLogicOp(uint opcode)
        {
            GLInterop.glLogicOpPtr(opcode);
        }
        public static void glStencilFunc(uint func, int @ref, uint mask)
        {
            GLInterop.glStencilFuncPtr(func, @ref, mask);
        }
        public static void glStencilOp(uint fail, uint zfail, uint zpass)
        {
            GLInterop.glStencilOpPtr(fail, zfail, zpass);
        }
        public static void glDepthFunc(uint func)
        {
            GLInterop.glDepthFuncPtr(func);
        }
        public static void glPixelStoref(uint pname, float param)
        {
            GLInterop.glPixelStorefPtr(pname, param);
        }
        public static void glPixelStorei(uint pname, int param)
        {
            GLInterop.glPixelStoreiPtr(pname, param);
        }
        public static void glReadBuffer(uint mode)
        {
            GLInterop.glReadBufferPtr(mode);
        }
        public static void glReadPixels(int x, int y, int width, int height, uint format, uint type, IntPtr pixels)
        {
            GLInterop.glReadPixelsPtr(x, y, width, height, format, type, pixels);
        }
        public static void glGetBooleanv(uint pname, IntPtr data)
        {
            GLInterop.glGetBooleanvPtr(pname, data);
        }
        public static void glGetDoublev(uint pname, IntPtr data)
        {
            GLInterop.glGetDoublevPtr(pname, data);
        }
        public static uint glGetError()
        {
            return GLInterop.glGetErrorPtr();
        }
        public static void glGetFloatv(uint pname, IntPtr data)
        {
            GLInterop.glGetFloatvPtr(pname, data);
        }
        public static void glGetIntegerv(uint pname, IntPtr data)
        {
            GLInterop.glGetIntegervPtr(pname, data);
        }
        public static IntPtr glGetString(uint name)
        {
            return GLInterop.glGetStringPtr(name);
        }
        public static void glGetTexImage(uint target, int level, uint format, uint type, IntPtr pixels)
        {
            GLInterop.glGetTexImagePtr(target, level, format, type, pixels);
        }
        public static void glGetTexParameterfv(uint target, uint pname, IntPtr @params)
        {
            GLInterop.glGetTexParameterfvPtr(target, pname, @params);
        }
        public static void glGetTexParameteriv(uint target, uint pname, IntPtr @params)
        {
            GLInterop.glGetTexParameterivPtr(target, pname, @params);
        }
        public static void glGetTexLevelParameterfv(uint target, int level, uint pname, IntPtr @params)
        {
            GLInterop.glGetTexLevelParameterfvPtr(target, level, pname, @params);
        }
        public static void glGetTexLevelParameteriv(uint target, int level, uint pname, IntPtr @params)
        {
            GLInterop.glGetTexLevelParameterivPtr(target, level, pname, @params);
        }
        public static bool glIsEnabled(uint cap)
        {
            return GLInterop.glIsEnabledPtr(cap);
        }
        public static void glDepthRange(double near, double far)
        {
            GLInterop.glDepthRangePtr(near, far);
        }
        public static void glViewport(int x, int y, int width, int height)
        {
            GLInterop.glViewportPtr(x, y, width, height);
        }
        public static void glNewList(uint list, uint mode)
        {
            GLInterop.glNewListPtr(list, mode);
        }
        public static void glEndList()
        {
            GLInterop.glEndListPtr();
        }
        public static void glCallList(uint list)
        {
            GLInterop.glCallListPtr(list);
        }
        public static void glCallLists(int n, uint type, IntPtr lists)
        {
            GLInterop.glCallListsPtr(n, type, lists);
        }
        public static void glDeleteLists(uint list, int range)
        {
            GLInterop.glDeleteListsPtr(list, range);
        }
        public static uint glGenLists(int range)
        {
            return GLInterop.glGenListsPtr(range);
        }
        public static void glListBase(uint @base)
        {
            GLInterop.glListBasePtr(@base);
        }
        public static void glBegin(uint mode)
        {
            GLInterop.glBeginPtr(mode);
        }
        public static void glBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, IntPtr bitmap)
        {
            GLInterop.glBitmapPtr(width, height, xorig, yorig, xmove, ymove, bitmap);
        }
        public static void glColor3b(sbyte red, sbyte green, sbyte blue)
        {
            GLInterop.glColor3bPtr(red, green, blue);
        }
        public static void glColor3bv(IntPtr v)
        {
            GLInterop.glColor3bvPtr(v);
        }
        public static void glColor3d(double red, double green, double blue)
        {
            GLInterop.glColor3dPtr(red, green, blue);
        }
        public static void glColor3dv(IntPtr v)
        {
            GLInterop.glColor3dvPtr(v);
        }
        public static void glColor3f(float red, float green, float blue)
        {
            GLInterop.glColor3fPtr(red, green, blue);
        }
        public static void glColor3fv(IntPtr v)
        {
            GLInterop.glColor3fvPtr(v);
        }
        public static void glColor3i(int red, int green, int blue)
        {
            GLInterop.glColor3iPtr(red, green, blue);
        }
        public static void glColor3iv(IntPtr v)
        {
            GLInterop.glColor3ivPtr(v);
        }
        public static void glColor3s(short red, short green, short blue)
        {
            GLInterop.glColor3sPtr(red, green, blue);
        }
        public static void glColor3sv(IntPtr v)
        {
            GLInterop.glColor3svPtr(v);
        }
        public static void glColor3ub(byte red, byte green, byte blue)
        {
            GLInterop.glColor3ubPtr(red, green, blue);
        }
        public static void glColor3ubv(IntPtr v)
        {
            GLInterop.glColor3ubvPtr(v);
        }
        public static void glColor3ui(uint red, uint green, uint blue)
        {
            GLInterop.glColor3uiPtr(red, green, blue);
        }
        public static void glColor3uiv(IntPtr v)
        {
            GLInterop.glColor3uivPtr(v);
        }
        public static void glColor3us(ushort red, ushort green, ushort blue)
        {
            GLInterop.glColor3usPtr(red, green, blue);
        }
        public static void glColor3usv(IntPtr v)
        {
            GLInterop.glColor3usvPtr(v);
        }
        public static void glColor4b(sbyte red, sbyte green, sbyte blue, sbyte alpha)
        {
            GLInterop.glColor4bPtr(red, green, blue, alpha);
        }
        public static void glColor4bv(IntPtr v)
        {
            GLInterop.glColor4bvPtr(v);
        }
        public static void glColor4d(double red, double green, double blue, double alpha)
        {
            GLInterop.glColor4dPtr(red, green, blue, alpha);
        }
        public static void glColor4dv(IntPtr v)
        {
            GLInterop.glColor4dvPtr(v);
        }
        public static void glColor4f(float red, float green, float blue, float alpha)
        {
            GLInterop.glColor4fPtr(red, green, blue, alpha);
        }
        public static void glColor4fv(IntPtr v)
        {
            GLInterop.glColor4fvPtr(v);
        }
        public static void glColor4i(int red, int green, int blue, int alpha)
        {
            GLInterop.glColor4iPtr(red, green, blue, alpha);
        }
        public static void glColor4iv(IntPtr v)
        {
            GLInterop.glColor4ivPtr(v);
        }
        public static void glColor4s(short red, short green, short blue, short alpha)
        {
            GLInterop.glColor4sPtr(red, green, blue, alpha);
        }
        public static void glColor4sv(IntPtr v)
        {
            GLInterop.glColor4svPtr(v);
        }
        public static void glColor4ub(byte red, byte green, byte blue, byte alpha)
        {
            GLInterop.glColor4ubPtr(red, green, blue, alpha);
        }
        public static void glColor4ubv(IntPtr v)
        {
            GLInterop.glColor4ubvPtr(v);
        }
        public static void glColor4ui(uint red, uint green, uint blue, uint alpha)
        {
            GLInterop.glColor4uiPtr(red, green, blue, alpha);
        }
        public static void glColor4uiv(IntPtr v)
        {
            GLInterop.glColor4uivPtr(v);
        }
        public static void glColor4us(ushort red, ushort green, ushort blue, ushort alpha)
        {
            GLInterop.glColor4usPtr(red, green, blue, alpha);
        }
        public static void glColor4usv(IntPtr v)
        {
            GLInterop.glColor4usvPtr(v);
        }
        public static void glEdgeFlag(bool flag)
        {
            GLInterop.glEdgeFlagPtr(flag);
        }
        public static void glEdgeFlagv(IntPtr flag)
        {
            GLInterop.glEdgeFlagvPtr(flag);
        }
        public static void glEnd()
        {
            GLInterop.glEndPtr();
        }
        public static void glIndexd(double c)
        {
            GLInterop.glIndexdPtr(c);
        }
        public static void glIndexdv(IntPtr c)
        {
            GLInterop.glIndexdvPtr(c);
        }
        public static void glIndexf(float c)
        {
            GLInterop.glIndexfPtr(c);
        }
        public static void glIndexfv(IntPtr c)
        {
            GLInterop.glIndexfvPtr(c);
        }
        public static void glIndexi(int c)
        {
            GLInterop.glIndexiPtr(c);
        }
        public static void glIndexiv(IntPtr c)
        {
            GLInterop.glIndexivPtr(c);
        }
        public static void glIndexs(short c)
        {
            GLInterop.glIndexsPtr(c);
        }
        public static void glIndexsv(IntPtr c)
        {
            GLInterop.glIndexsvPtr(c);
        }
        public static void glNormal3b(sbyte nx, sbyte ny, sbyte nz)
        {
            GLInterop.glNormal3bPtr(nx, ny, nz);
        }
        public static void glNormal3bv(IntPtr v)
        {
            GLInterop.glNormal3bvPtr(v);
        }
        public static void glNormal3d(double nx, double ny, double nz)
        {
            GLInterop.glNormal3dPtr(nx, ny, nz);
        }
        public static void glNormal3dv(IntPtr v)
        {
            GLInterop.glNormal3dvPtr(v);
        }
        public static void glNormal3f(float nx, float ny, float nz)
        {
            GLInterop.glNormal3fPtr(nx, ny, nz);
        }
        public static void glNormal3fv(IntPtr v)
        {
            GLInterop.glNormal3fvPtr(v);
        }
        public static void glNormal3i(int nx, int ny, int nz)
        {
            GLInterop.glNormal3iPtr(nx, ny, nz);
        }
        public static void glNormal3iv(IntPtr v)
        {
            GLInterop.glNormal3ivPtr(v);
        }
        public static void glNormal3s(short nx, short ny, short nz)
        {
            GLInterop.glNormal3sPtr(nx, ny, nz);
        }
        public static void glNormal3sv(IntPtr v)
        {
            GLInterop.glNormal3svPtr(v);
        }
        public static void glRasterPos2d(double x, double y)
        {
            GLInterop.glRasterPos2dPtr(x, y);
        }
        public static void glRasterPos2dv(IntPtr v)
        {
            GLInterop.glRasterPos2dvPtr(v);
        }
        public static void glRasterPos2f(float x, float y)
        {
            GLInterop.glRasterPos2fPtr(x, y);
        }
        public static void glRasterPos2fv(IntPtr v)
        {
            GLInterop.glRasterPos2fvPtr(v);
        }
        public static void glRasterPos2i(int x, int y)
        {
            GLInterop.glRasterPos2iPtr(x, y);
        }
        public static void glRasterPos2iv(IntPtr v)
        {
            GLInterop.glRasterPos2ivPtr(v);
        }
        public static void glRasterPos2s(short x, short y)
        {
            GLInterop.glRasterPos2sPtr(x, y);
        }
        public static void glRasterPos2sv(IntPtr v)
        {
            GLInterop.glRasterPos2svPtr(v);
        }
        public static void glRasterPos3d(double x, double y, double z)
        {
            GLInterop.glRasterPos3dPtr(x, y, z);
        }
        public static void glRasterPos3dv(IntPtr v)
        {
            GLInterop.glRasterPos3dvPtr(v);
        }
        public static void glRasterPos3f(float x, float y, float z)
        {
            GLInterop.glRasterPos3fPtr(x, y, z);
        }
        public static void glRasterPos3fv(IntPtr v)
        {
            GLInterop.glRasterPos3fvPtr(v);
        }
        public static void glRasterPos3i(int x, int y, int z)
        {
            GLInterop.glRasterPos3iPtr(x, y, z);
        }
        public static void glRasterPos3iv(IntPtr v)
        {
            GLInterop.glRasterPos3ivPtr(v);
        }
        public static void glRasterPos3s(short x, short y, short z)
        {
            GLInterop.glRasterPos3sPtr(x, y, z);
        }
        public static void glRasterPos3sv(IntPtr v)
        {
            GLInterop.glRasterPos3svPtr(v);
        }
        public static void glRasterPos4d(double x, double y, double z, double w)
        {
            GLInterop.glRasterPos4dPtr(x, y, z, w);
        }
        public static void glRasterPos4dv(IntPtr v)
        {
            GLInterop.glRasterPos4dvPtr(v);
        }
        public static void glRasterPos4f(float x, float y, float z, float w)
        {
            GLInterop.glRasterPos4fPtr(x, y, z, w);
        }
        public static void glRasterPos4fv(IntPtr v)
        {
            GLInterop.glRasterPos4fvPtr(v);
        }
        public static void glRasterPos4i(int x, int y, int z, int w)
        {
            GLInterop.glRasterPos4iPtr(x, y, z, w);
        }
        public static void glRasterPos4iv(IntPtr v)
        {
            GLInterop.glRasterPos4ivPtr(v);
        }
        public static void glRasterPos4s(short x, short y, short z, short w)
        {
            GLInterop.glRasterPos4sPtr(x, y, z, w);
        }
        public static void glRasterPos4sv(IntPtr v)
        {
            GLInterop.glRasterPos4svPtr(v);
        }
        public static void glRectd(double x1, double y1, double x2, double y2)
        {
            GLInterop.glRectdPtr(x1, y1, x2, y2);
        }
        public static void glRectdv(IntPtr v1, IntPtr v2)
        {
            GLInterop.glRectdvPtr(v1, v2);
        }
        public static void glRectf(float x1, float y1, float x2, float y2)
        {
            GLInterop.glRectfPtr(x1, y1, x2, y2);
        }
        public static void glRectfv(IntPtr v1, IntPtr v2)
        {
            GLInterop.glRectfvPtr(v1, v2);
        }
        public static void glRecti(int x1, int y1, int x2, int y2)
        {
            GLInterop.glRectiPtr(x1, y1, x2, y2);
        }
        public static void glRectiv(IntPtr v1, IntPtr v2)
        {
            GLInterop.glRectivPtr(v1, v2);
        }
        public static void glRects(short x1, short y1, short x2, short y2)
        {
            GLInterop.glRectsPtr(x1, y1, x2, y2);
        }
        public static void glRectsv(IntPtr v1, IntPtr v2)
        {
            GLInterop.glRectsvPtr(v1, v2);
        }
        public static void glTexCoord1d(double s)
        {
            GLInterop.glTexCoord1dPtr(s);
        }
        public static void glTexCoord1dv(IntPtr v)
        {
            GLInterop.glTexCoord1dvPtr(v);
        }
        public static void glTexCoord1f(float s)
        {
            GLInterop.glTexCoord1fPtr(s);
        }
        public static void glTexCoord1fv(IntPtr v)
        {
            GLInterop.glTexCoord1fvPtr(v);
        }
        public static void glTexCoord1i(int s)
        {
            GLInterop.glTexCoord1iPtr(s);
        }
        public static void glTexCoord1iv(IntPtr v)
        {
            GLInterop.glTexCoord1ivPtr(v);
        }
        public static void glTexCoord1s(short s)
        {
            GLInterop.glTexCoord1sPtr(s);
        }
        public static void glTexCoord1sv(IntPtr v)
        {
            GLInterop.glTexCoord1svPtr(v);
        }
        public static void glTexCoord2d(double s, double t)
        {
            GLInterop.glTexCoord2dPtr(s, t);
        }
        public static void glTexCoord2dv(IntPtr v)
        {
            GLInterop.glTexCoord2dvPtr(v);
        }
        public static void glTexCoord2f(float s, float t)
        {
            GLInterop.glTexCoord2fPtr(s, t);
        }
        public static void glTexCoord2fv(IntPtr v)
        {
            GLInterop.glTexCoord2fvPtr(v);
        }
        public static void glTexCoord2i(int s, int t)
        {
            GLInterop.glTexCoord2iPtr(s, t);
        }
        public static void glTexCoord2iv(IntPtr v)
        {
            GLInterop.glTexCoord2ivPtr(v);
        }
        public static void glTexCoord2s(short s, short t)
        {
            GLInterop.glTexCoord2sPtr(s, t);
        }
        public static void glTexCoord2sv(IntPtr v)
        {
            GLInterop.glTexCoord2svPtr(v);
        }
        public static void glTexCoord3d(double s, double t, double r)
        {
            GLInterop.glTexCoord3dPtr(s, t, r);
        }
        public static void glTexCoord3dv(IntPtr v)
        {
            GLInterop.glTexCoord3dvPtr(v);
        }
        public static void glTexCoord3f(float s, float t, float r)
        {
            GLInterop.glTexCoord3fPtr(s, t, r);
        }
        public static void glTexCoord3fv(IntPtr v)
        {
            GLInterop.glTexCoord3fvPtr(v);
        }
        public static void glTexCoord3i(int s, int t, int r)
        {
            GLInterop.glTexCoord3iPtr(s, t, r);
        }
        public static void glTexCoord3iv(IntPtr v)
        {
            GLInterop.glTexCoord3ivPtr(v);
        }
        public static void glTexCoord3s(short s, short t, short r)
        {
            GLInterop.glTexCoord3sPtr(s, t, r);
        }
        public static void glTexCoord3sv(IntPtr v)
        {
            GLInterop.glTexCoord3svPtr(v);
        }
        public static void glTexCoord4d(double s, double t, double r, double q)
        {
            GLInterop.glTexCoord4dPtr(s, t, r, q);
        }
        public static void glTexCoord4dv(IntPtr v)
        {
            GLInterop.glTexCoord4dvPtr(v);
        }
        public static void glTexCoord4f(float s, float t, float r, float q)
        {
            GLInterop.glTexCoord4fPtr(s, t, r, q);
        }
        public static void glTexCoord4fv(IntPtr v)
        {
            GLInterop.glTexCoord4fvPtr(v);
        }
        public static void glTexCoord4i(int s, int t, int r, int q)
        {
            GLInterop.glTexCoord4iPtr(s, t, r, q);
        }
        public static void glTexCoord4iv(IntPtr v)
        {
            GLInterop.glTexCoord4ivPtr(v);
        }
        public static void glTexCoord4s(short s, short t, short r, short q)
        {
            GLInterop.glTexCoord4sPtr(s, t, r, q);
        }
        public static void glTexCoord4sv(IntPtr v)
        {
            GLInterop.glTexCoord4svPtr(v);
        }
        public static void glVertex2d(double x, double y)
        {
            GLInterop.glVertex2dPtr(x, y);
        }
        public static void glVertex2dv(IntPtr v)
        {
            GLInterop.glVertex2dvPtr(v);
        }
        public static void glVertex2f(float x, float y)
        {
            GLInterop.glVertex2fPtr(x, y);
        }
        public static void glVertex2fv(IntPtr v)
        {
            GLInterop.glVertex2fvPtr(v);
        }
        public static void glVertex2i(int x, int y)
        {
            GLInterop.glVertex2iPtr(x, y);
        }
        public static void glVertex2iv(IntPtr v)
        {
            GLInterop.glVertex2ivPtr(v);
        }
        public static void glVertex2s(short x, short y)
        {
            GLInterop.glVertex2sPtr(x, y);
        }
        public static void glVertex2sv(IntPtr v)
        {
            GLInterop.glVertex2svPtr(v);
        }
        public static void glVertex3d(double x, double y, double z)
        {
            GLInterop.glVertex3dPtr(x, y, z);
        }
        public static void glVertex3dv(IntPtr v)
        {
            GLInterop.glVertex3dvPtr(v);
        }
        public static void glVertex3f(float x, float y, float z)
        {
            GLInterop.glVertex3fPtr(x, y, z);
        }
        public static void glVertex3fv(IntPtr v)
        {
            GLInterop.glVertex3fvPtr(v);
        }
        public static void glVertex3i(int x, int y, int z)
        {
            GLInterop.glVertex3iPtr(x, y, z);
        }
        public static void glVertex3iv(IntPtr v)
        {
            GLInterop.glVertex3ivPtr(v);
        }
        public static void glVertex3s(short x, short y, short z)
        {
            GLInterop.glVertex3sPtr(x, y, z);
        }
        public static void glVertex3sv(IntPtr v)
        {
            GLInterop.glVertex3svPtr(v);
        }
        public static void glVertex4d(double x, double y, double z, double w)
        {
            GLInterop.glVertex4dPtr(x, y, z, w);
        }
        public static void glVertex4dv(IntPtr v)
        {
            GLInterop.glVertex4dvPtr(v);
        }
        public static void glVertex4f(float x, float y, float z, float w)
        {
            GLInterop.glVertex4fPtr(x, y, z, w);
        }
        public static void glVertex4fv(IntPtr v)
        {
            GLInterop.glVertex4fvPtr(v);
        }
        public static void glVertex4i(int x, int y, int z, int w)
        {
            GLInterop.glVertex4iPtr(x, y, z, w);
        }
        public static void glVertex4iv(IntPtr v)
        {
            GLInterop.glVertex4ivPtr(v);
        }
        public static void glVertex4s(short x, short y, short z, short w)
        {
            GLInterop.glVertex4sPtr(x, y, z, w);
        }
        public static void glVertex4sv(IntPtr v)
        {
            GLInterop.glVertex4svPtr(v);
        }
        public static void glClipPlane(uint plane, IntPtr equation)
        {
            GLInterop.glClipPlanePtr(plane, equation);
        }
        public static void glColorMaterial(uint face, uint mode)
        {
            GLInterop.glColorMaterialPtr(face, mode);
        }
        public static void glFogf(uint pname, float param)
        {
            GLInterop.glFogfPtr(pname, param);
        }
        public static void glFogfv(uint pname, IntPtr @params)
        {
            GLInterop.glFogfvPtr(pname, @params);
        }
        public static void glFogi(uint pname, int param)
        {
            GLInterop.glFogiPtr(pname, param);
        }
        public static void glFogiv(uint pname, IntPtr @params)
        {
            GLInterop.glFogivPtr(pname, @params);
        }
        public static void glLightf(uint light, uint pname, float param)
        {
            GLInterop.glLightfPtr(light, pname, param);
        }
        public static void glLightfv(uint light, uint pname, IntPtr @params)
        {
            GLInterop.glLightfvPtr(light, pname, @params);
        }
        public static void glLighti(uint light, uint pname, int param)
        {
            GLInterop.glLightiPtr(light, pname, param);
        }
        public static void glLightiv(uint light, uint pname, IntPtr @params)
        {
            GLInterop.glLightivPtr(light, pname, @params);
        }
        public static void glLightModelf(uint pname, float param)
        {
            GLInterop.glLightModelfPtr(pname, param);
        }
        public static void glLightModelfv(uint pname, IntPtr @params)
        {
            GLInterop.glLightModelfvPtr(pname, @params);
        }
        public static void glLightModeli(uint pname, int param)
        {
            GLInterop.glLightModeliPtr(pname, param);
        }
        public static void glLightModeliv(uint pname, IntPtr @params)
        {
            GLInterop.glLightModelivPtr(pname, @params);
        }
        public static void glLineStipple(int factor, ushort pattern)
        {
            GLInterop.glLineStipplePtr(factor, pattern);
        }
        public static void glMaterialf(uint face, uint pname, float param)
        {
            GLInterop.glMaterialfPtr(face, pname, param);
        }
        public static void glMaterialfv(uint face, uint pname, IntPtr @params)
        {
            GLInterop.glMaterialfvPtr(face, pname, @params);
        }
        public static void glMateriali(uint face, uint pname, int param)
        {
            GLInterop.glMaterialiPtr(face, pname, param);
        }
        public static void glMaterialiv(uint face, uint pname, IntPtr @params)
        {
            GLInterop.glMaterialivPtr(face, pname, @params);
        }
        public static void glPolygonStipple(IntPtr mask)
        {
            GLInterop.glPolygonStipplePtr(mask);
        }
        public static void glShadeModel(uint mode)
        {
            GLInterop.glShadeModelPtr(mode);
        }
        public static void glTexEnvf(uint target, uint pname, float param)
        {
            GLInterop.glTexEnvfPtr(target, pname, param);
        }
        public static void glTexEnvfv(uint target, uint pname, IntPtr @params)
        {
            GLInterop.glTexEnvfvPtr(target, pname, @params);
        }
        public static void glTexEnvi(uint target, uint pname, int param)
        {
            GLInterop.glTexEnviPtr(target, pname, param);
        }
        public static void glTexEnviv(uint target, uint pname, IntPtr @params)
        {
            GLInterop.glTexEnvivPtr(target, pname, @params);
        }
        public static void glTexGend(uint coord, uint pname, double param)
        {
            GLInterop.glTexGendPtr(coord, pname, param);
        }
        public static void glTexGendv(uint coord, uint pname, IntPtr @params)
        {
            GLInterop.glTexGendvPtr(coord, pname, @params);
        }
        public static void glTexGenf(uint coord, uint pname, float param)
        {
            GLInterop.glTexGenfPtr(coord, pname, param);
        }
        public static void glTexGenfv(uint coord, uint pname, IntPtr @params)
        {
            GLInterop.glTexGenfvPtr(coord, pname, @params);
        }
        public static void glTexGeni(uint coord, uint pname, int param)
        {
            GLInterop.glTexGeniPtr(coord, pname, param);
        }
        public static void glTexGeniv(uint coord, uint pname, IntPtr @params)
        {
            GLInterop.glTexGenivPtr(coord, pname, @params);
        }
        public static void glFeedbackBuffer(int size, uint type, IntPtr buffer)
        {
            GLInterop.glFeedbackBufferPtr(size, type, buffer);
        }
        public static void glSelectBuffer(int size, IntPtr buffer)
        {
            GLInterop.glSelectBufferPtr(size, buffer);
        }
        public static int glRenderMode(uint mode)
        {
            return GLInterop.glRenderModePtr(mode);
        }
        public static void glInitNames()
        {
            GLInterop.glInitNamesPtr();
        }
        public static void glLoadName(uint name)
        {
            GLInterop.glLoadNamePtr(name);
        }
        public static void glPassThrough(float token)
        {
            GLInterop.glPassThroughPtr(token);
        }
        public static void glPopName()
        {
            GLInterop.glPopNamePtr();
        }
        public static void glPushName(uint name)
        {
            GLInterop.glPushNamePtr(name);
        }
        public static void glClearAccum(float red, float green, float blue, float alpha)
        {
            GLInterop.glClearAccumPtr(red, green, blue, alpha);
        }
        public static void glClearIndex(float c)
        {
            GLInterop.glClearIndexPtr(c);
        }
        public static void glIndexMask(uint mask)
        {
            GLInterop.glIndexMaskPtr(mask);
        }
        public static void glAccum(uint op, float value)
        {
            GLInterop.glAccumPtr(op, value);
        }
        public static void glPopAttrib()
        {
            GLInterop.glPopAttribPtr();
        }
        public static void glPushAttrib(uint mask)
        {
            GLInterop.glPushAttribPtr(mask);
        }
        public static void glMap1d(uint target, double u1, double u2, int stride, int order, IntPtr points)
        {
            GLInterop.glMap1dPtr(target, u1, u2, stride, order, points);
        }
        public static void glMap1f(uint target, float u1, float u2, int stride, int order, IntPtr points)
        {
            GLInterop.glMap1fPtr(target, u1, u2, stride, order, points);
        }
        public static void glMap2d(uint target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, IntPtr points)
        {
            GLInterop.glMap2dPtr(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        public static void glMap2f(uint target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, IntPtr points)
        {
            GLInterop.glMap2fPtr(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        public static void glMapGrid1d(int un, double u1, double u2)
        {
            GLInterop.glMapGrid1dPtr(un, u1, u2);
        }
        public static void glMapGrid1f(int un, float u1, float u2)
        {
            GLInterop.glMapGrid1fPtr(un, u1, u2);
        }
        public static void glMapGrid2d(int un, double u1, double u2, int vn, double v1, double v2)
        {
            GLInterop.glMapGrid2dPtr(un, u1, u2, vn, v1, v2);
        }
        public static void glMapGrid2f(int un, float u1, float u2, int vn, float v1, float v2)
        {
            GLInterop.glMapGrid2fPtr(un, u1, u2, vn, v1, v2);
        }
        public static void glEvalCoord1d(double u)
        {
            GLInterop.glEvalCoord1dPtr(u);
        }
        public static void glEvalCoord1dv(IntPtr u)
        {
            GLInterop.glEvalCoord1dvPtr(u);
        }
        public static void glEvalCoord1f(float u)
        {
            GLInterop.glEvalCoord1fPtr(u);
        }
        public static void glEvalCoord1fv(IntPtr u)
        {
            GLInterop.glEvalCoord1fvPtr(u);
        }
        public static void glEvalCoord2d(double u, double v)
        {
            GLInterop.glEvalCoord2dPtr(u, v);
        }
        public static void glEvalCoord2dv(IntPtr u)
        {
            GLInterop.glEvalCoord2dvPtr(u);
        }
        public static void glEvalCoord2f(float u, float v)
        {
            GLInterop.glEvalCoord2fPtr(u, v);
        }
        public static void glEvalCoord2fv(IntPtr u)
        {
            GLInterop.glEvalCoord2fvPtr(u);
        }
        public static void glEvalMesh1(uint mode, int i1, int i2)
        {
            GLInterop.glEvalMesh1Ptr(mode, i1, i2);
        }
        public static void glEvalPoint1(int i)
        {
            GLInterop.glEvalPoint1Ptr(i);
        }
        public static void glEvalMesh2(uint mode, int i1, int i2, int j1, int j2)
        {
            GLInterop.glEvalMesh2Ptr(mode, i1, i2, j1, j2);
        }
        public static void glEvalPoint2(int i, int j)
        {
            GLInterop.glEvalPoint2Ptr(i, j);
        }
        public static void glAlphaFunc(uint func, float @ref)
        {
            GLInterop.glAlphaFuncPtr(func, @ref);
        }
        public static void glPixelZoom(float xfactor, float yfactor)
        {
            GLInterop.glPixelZoomPtr(xfactor, yfactor);
        }
        public static void glPixelTransferf(uint pname, float param)
        {
            GLInterop.glPixelTransferfPtr(pname, param);
        }
        public static void glPixelTransferi(uint pname, int param)
        {
            GLInterop.glPixelTransferiPtr(pname, param);
        }
        public static void glPixelMapfv(uint map, int mapsize, IntPtr values)
        {
            GLInterop.glPixelMapfvPtr(map, mapsize, values);
        }
        public static void glPixelMapuiv(uint map, int mapsize, IntPtr values)
        {
            GLInterop.glPixelMapuivPtr(map, mapsize, values);
        }
        public static void glPixelMapusv(uint map, int mapsize, IntPtr values)
        {
            GLInterop.glPixelMapusvPtr(map, mapsize, values);
        }
        public static void glCopyPixels(int x, int y, int width, int height, uint type)
        {
            GLInterop.glCopyPixelsPtr(x, y, width, height, type);
        }
        public static void glDrawPixels(int width, int height, uint format, uint type, IntPtr pixels)
        {
            GLInterop.glDrawPixelsPtr(width, height, format, type, pixels);
        }
        public static void glGetClipPlane(uint plane, IntPtr equation)
        {
            GLInterop.glGetClipPlanePtr(plane, equation);
        }
        public static void glGetLightfv(uint light, uint pname, IntPtr @params)
        {
            GLInterop.glGetLightfvPtr(light, pname, @params);
        }
        public static void glGetLightiv(uint light, uint pname, IntPtr @params)
        {
            GLInterop.glGetLightivPtr(light, pname, @params);
        }
        public static void glGetMapdv(uint target, uint query, IntPtr v)
        {
            GLInterop.glGetMapdvPtr(target, query, v);
        }
        public static void glGetMapfv(uint target, uint query, IntPtr v)
        {
            GLInterop.glGetMapfvPtr(target, query, v);
        }
        public static void glGetMapiv(uint target, uint query, IntPtr v)
        {
            GLInterop.glGetMapivPtr(target, query, v);
        }
        public static void glGetMaterialfv(uint face, uint pname, IntPtr @params)
        {
            GLInterop.glGetMaterialfvPtr(face, pname, @params);
        }
        public static void glGetMaterialiv(uint face, uint pname, IntPtr @params)
        {
            GLInterop.glGetMaterialivPtr(face, pname, @params);
        }
        public static void glGetPixelMapfv(uint map, IntPtr values)
        {
            GLInterop.glGetPixelMapfvPtr(map, values);
        }
        public static void glGetPixelMapuiv(uint map, IntPtr values)
        {
            GLInterop.glGetPixelMapuivPtr(map, values);
        }
        public static void glGetPixelMapusv(uint map, IntPtr values)
        {
            GLInterop.glGetPixelMapusvPtr(map, values);
        }
        public static void glGetPolygonStipple(IntPtr mask)
        {
            GLInterop.glGetPolygonStipplePtr(mask);
        }
        public static void glGetTexEnvfv(uint target, uint pname, IntPtr @params)
        {
            GLInterop.glGetTexEnvfvPtr(target, pname, @params);
        }
        public static void glGetTexEnviv(uint target, uint pname, IntPtr @params)
        {
            GLInterop.glGetTexEnvivPtr(target, pname, @params);
        }
        public static void glGetTexGendv(uint coord, uint pname, IntPtr @params)
        {
            GLInterop.glGetTexGendvPtr(coord, pname, @params);
        }
        public static void glGetTexGenfv(uint coord, uint pname, IntPtr @params)
        {
            GLInterop.glGetTexGenfvPtr(coord, pname, @params);
        }
        public static void glGetTexGeniv(uint coord, uint pname, IntPtr @params)
        {
            GLInterop.glGetTexGenivPtr(coord, pname, @params);
        }
        public static bool glIsList(uint list)
        {
            return GLInterop.glIsListPtr(list);
        }
        public static void glFrustum(double left, double right, double bottom, double top, double zNear, double zFar)
        {
            GLInterop.glFrustumPtr(left, right, bottom, top, zNear, zFar);
        }
        public static void glLoadIdentity()
        {
            GLInterop.glLoadIdentityPtr();
        }
        public static void glLoadMatrixf(IntPtr m)
        {
            GLInterop.glLoadMatrixfPtr(m);
        }
        public static void glLoadMatrixd(IntPtr m)
        {
            GLInterop.glLoadMatrixdPtr(m);
        }
        public static void glMatrixMode(uint mode)
        {
            GLInterop.glMatrixModePtr(mode);
        }
        public static void glMultMatrixf(IntPtr m)
        {
            GLInterop.glMultMatrixfPtr(m);
        }
        public static void glMultMatrixd(IntPtr m)
        {
            GLInterop.glMultMatrixdPtr(m);
        }
        public static void glOrtho(double left, double right, double bottom, double top, double zNear, double zFar)
        {
            GLInterop.glOrthoPtr(left, right, bottom, top, zNear, zFar);
        }
        public static void glPopMatrix()
        {
            GLInterop.glPopMatrixPtr();
        }
        public static void glPushMatrix()
        {
            GLInterop.glPushMatrixPtr();
        }
        public static void glRotated(double angle, double x, double y, double z)
        {
            GLInterop.glRotatedPtr(angle, x, y, z);
        }
        public static void glRotatef(float angle, float x, float y, float z)
        {
            GLInterop.glRotatefPtr(angle, x, y, z);
        }
        public static void glScaled(double x, double y, double z)
        {
            GLInterop.glScaledPtr(x, y, z);
        }
        public static void glScalef(float x, float y, float z)
        {
            GLInterop.glScalefPtr(x, y, z);
        }
        public static void glTranslated(double x, double y, double z)
        {
            GLInterop.glTranslatedPtr(x, y, z);
        }
        public static void glTranslatef(float x, float y, float z)
        {
            GLInterop.glTranslatefPtr(x, y, z);
        }
        public static void glDrawArrays(uint mode, int first, int count)
        {
            GLInterop.glDrawArraysPtr(mode, first, count);
        }
        public static void glDrawElements(uint mode, int count, uint type, IntPtr indices)
        {
            GLInterop.glDrawElementsPtr(mode, count, type, indices);
        }
        public static void glGetPointerv(uint pname, IntPtr @params)
        {
            GLInterop.glGetPointervPtr(pname, @params);
        }
        public static void glPolygonOffset(float factor, float units)
        {
            GLInterop.glPolygonOffsetPtr(factor, units);
        }
        public static void glCopyTexImage1D(uint target, int level, uint internalformat, int x, int y, int width, int border)
        {
            GLInterop.glCopyTexImage1DPtr(target, level, internalformat, x, y, width, border);
        }
        public static void glCopyTexImage2D(uint target, int level, uint internalformat, int x, int y, int width, int height, int border)
        {
            GLInterop.glCopyTexImage2DPtr(target, level, internalformat, x, y, width, height, border);
        }
        public static void glCopyTexSubImage1D(uint target, int level, int xoffset, int x, int y, int width)
        {
            GLInterop.glCopyTexSubImage1DPtr(target, level, xoffset, x, y, width);
        }
        public static void glCopyTexSubImage2D(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            GLInterop.glCopyTexSubImage2DPtr(target, level, xoffset, yoffset, x, y, width, height);
        }
        public static void glTexSubImage1D(uint target, int level, int xoffset, int width, uint format, uint type, IntPtr pixels)
        {
            GLInterop.glTexSubImage1DPtr(target, level, xoffset, width, format, type, pixels);
        }
        public static void glTexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, IntPtr pixels)
        {
            GLInterop.glTexSubImage2DPtr(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }
        public static void glBindTexture(uint target, uint texture)
        {
            GLInterop.glBindTexturePtr(target, texture);
        }
        public static void glDeleteTextures(int n, IntPtr textures)
        {
            GLInterop.glDeleteTexturesPtr(n, textures);
        }
        public static void glGenTextures(int n, IntPtr textures)
        {
            GLInterop.glGenTexturesPtr(n, textures);
        }
        public static bool glIsTexture(uint texture)
        {
            return GLInterop.glIsTexturePtr(texture);
        }
        public static void glArrayElement(int i)
        {
            GLInterop.glArrayElementPtr(i);
        }
        public static void glColorPointer(int size, uint type, int stride, IntPtr pointer)
        {
            GLInterop.glColorPointerPtr(size, type, stride, pointer);
        }
        public static void glDisableClientState(uint array)
        {
            GLInterop.glDisableClientStatePtr(array);
        }
        public static void glEdgeFlagPointer(int stride, IntPtr pointer)
        {
            GLInterop.glEdgeFlagPointerPtr(stride, pointer);
        }
        public static void glEnableClientState(uint array)
        {
            GLInterop.glEnableClientStatePtr(array);
        }
        public static void glIndexPointer(uint type, int stride, IntPtr pointer)
        {
            GLInterop.glIndexPointerPtr(type, stride, pointer);
        }
        public static void glInterleavedArrays(uint format, int stride, IntPtr pointer)
        {
            GLInterop.glInterleavedArraysPtr(format, stride, pointer);
        }
        public static void glNormalPointer(uint type, int stride, IntPtr pointer)
        {
            GLInterop.glNormalPointerPtr(type, stride, pointer);
        }
        public static void glTexCoordPointer(int size, uint type, int stride, IntPtr pointer)
        {
            GLInterop.glTexCoordPointerPtr(size, type, stride, pointer);
        }
        public static void glVertexPointer(int size, uint type, int stride, IntPtr pointer)
        {
            GLInterop.glVertexPointerPtr(size, type, stride, pointer);
        }
        public static bool glAreTexturesResident(int n, IntPtr textures, IntPtr residences)
        {
            return GLInterop.glAreTexturesResidentPtr(n, textures, residences);
        }
        public static void glPrioritizeTextures(int n, IntPtr textures, IntPtr priorities)
        {
            GLInterop.glPrioritizeTexturesPtr(n, textures, priorities);
        }
        public static void glIndexub(byte c)
        {
            GLInterop.glIndexubPtr(c);
        }
        public static void glIndexubv(IntPtr c)
        {
            GLInterop.glIndexubvPtr(c);
        }
        public static void glPopClientAttrib()
        {
            GLInterop.glPopClientAttribPtr();
        }
        public static void glPushClientAttrib(uint mask)
        {
            GLInterop.glPushClientAttribPtr(mask);
        }
        public static void glDrawRangeElements(uint mode, uint start, uint end, int count, uint type, IntPtr indices)
        {
            GLInterop.glDrawRangeElementsPtr(mode, start, end, count, type, indices);
        }
        public static void glTexImage3D(uint target, int level, int internalformat, int width, int height, int depth, int border, uint format, uint type, IntPtr pixels)
        {
            GLInterop.glTexImage3DPtr(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }
        public static void glTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, IntPtr pixels)
        {
            GLInterop.glTexSubImage3DPtr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        public static void glCopyTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            GLInterop.glCopyTexSubImage3DPtr(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        #endregion

        #region Interop
        public static Func<string, IntPtr> GetProcAddress = null;

        public static void LoadAllFunctions()
        {
            try { GLInterop.glCullFacePtr = (GLInterop.glCullFaceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCullFace"), typeof(GLInterop.glCullFaceFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glCullFace'."); }
            try { GLInterop.glFrontFacePtr = (GLInterop.glFrontFaceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFrontFace"), typeof(GLInterop.glFrontFaceFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glFrontFace'."); }
            try { GLInterop.glHintPtr = (GLInterop.glHintFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glHint"), typeof(GLInterop.glHintFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glHint'."); }
            try { GLInterop.glLineWidthPtr = (GLInterop.glLineWidthFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLineWidth"), typeof(GLInterop.glLineWidthFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glLineWidth'."); }
            try { GLInterop.glPointSizePtr = (GLInterop.glPointSizeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointSize"), typeof(GLInterop.glPointSizeFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glPointSize'."); }
            try { GLInterop.glPolygonModePtr = (GLInterop.glPolygonModeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPolygonMode"), typeof(GLInterop.glPolygonModeFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glPolygonMode'."); }
            try { GLInterop.glScissorPtr = (GLInterop.glScissorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScissor"), typeof(GLInterop.glScissorFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glScissor'."); }
            try { GLInterop.glTexParameterfPtr = (GLInterop.glTexParameterfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterf"), typeof(GLInterop.glTexParameterfFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexParameterf'."); }
            try { GLInterop.glTexParameterfvPtr = (GLInterop.glTexParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterfv"), typeof(GLInterop.glTexParameterfvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexParameterfv'."); }
            try { GLInterop.glTexParameteriPtr = (GLInterop.glTexParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameteri"), typeof(GLInterop.glTexParameteriFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexParameteri'."); }
            try { GLInterop.glTexParameterivPtr = (GLInterop.glTexParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameteriv"), typeof(GLInterop.glTexParameterivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexParameteriv'."); }
            try { GLInterop.glTexImage1DPtr = (GLInterop.glTexImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage1D"), typeof(GLInterop.glTexImage1DFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexImage1D'."); }
            try { GLInterop.glTexImage2DPtr = (GLInterop.glTexImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage2D"), typeof(GLInterop.glTexImage2DFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexImage2D'."); }
            try { GLInterop.glDrawBufferPtr = (GLInterop.glDrawBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawBuffer"), typeof(GLInterop.glDrawBufferFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glDrawBuffer'."); }
            try { GLInterop.glClearPtr = (GLInterop.glClearFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClear"), typeof(GLInterop.glClearFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glClear'."); }
            try { GLInterop.glClearColorPtr = (GLInterop.glClearColorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearColor"), typeof(GLInterop.glClearColorFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glClearColor'."); }
            try { GLInterop.glClearStencilPtr = (GLInterop.glClearStencilFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearStencil"), typeof(GLInterop.glClearStencilFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glClearStencil'."); }
            try { GLInterop.glClearDepthPtr = (GLInterop.glClearDepthFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearDepth"), typeof(GLInterop.glClearDepthFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glClearDepth'."); }
            try { GLInterop.glStencilMaskPtr = (GLInterop.glStencilMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilMask"), typeof(GLInterop.glStencilMaskFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glStencilMask'."); }
            try { GLInterop.glColorMaskPtr = (GLInterop.glColorMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorMask"), typeof(GLInterop.glColorMaskFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColorMask'."); }
            try { GLInterop.glDepthMaskPtr = (GLInterop.glDepthMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthMask"), typeof(GLInterop.glDepthMaskFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glDepthMask'."); }
            try { GLInterop.glDisablePtr = (GLInterop.glDisableFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDisable"), typeof(GLInterop.glDisableFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glDisable'."); }
            try { GLInterop.glEnablePtr = (GLInterop.glEnableFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnable"), typeof(GLInterop.glEnableFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glEnable'."); }
            try { GLInterop.glFinishPtr = (GLInterop.glFinishFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFinish"), typeof(GLInterop.glFinishFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glFinish'."); }
            try { GLInterop.glFlushPtr = (GLInterop.glFlushFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFlush"), typeof(GLInterop.glFlushFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glFlush'."); }
            try { GLInterop.glBlendFuncPtr = (GLInterop.glBlendFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendFunc"), typeof(GLInterop.glBlendFuncFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glBlendFunc'."); }
            try { GLInterop.glLogicOpPtr = (GLInterop.glLogicOpFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLogicOp"), typeof(GLInterop.glLogicOpFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glLogicOp'."); }
            try { GLInterop.glStencilFuncPtr = (GLInterop.glStencilFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilFunc"), typeof(GLInterop.glStencilFuncFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glStencilFunc'."); }
            try { GLInterop.glStencilOpPtr = (GLInterop.glStencilOpFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilOp"), typeof(GLInterop.glStencilOpFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glStencilOp'."); }
            try { GLInterop.glDepthFuncPtr = (GLInterop.glDepthFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthFunc"), typeof(GLInterop.glDepthFuncFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glDepthFunc'."); }
            try { GLInterop.glPixelStorefPtr = (GLInterop.glPixelStorefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelStoref"), typeof(GLInterop.glPixelStorefFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glPixelStoref'."); }
            try { GLInterop.glPixelStoreiPtr = (GLInterop.glPixelStoreiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelStorei"), typeof(GLInterop.glPixelStoreiFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glPixelStorei'."); }
            try { GLInterop.glReadBufferPtr = (GLInterop.glReadBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glReadBuffer"), typeof(GLInterop.glReadBufferFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glReadBuffer'."); }
            try { GLInterop.glReadPixelsPtr = (GLInterop.glReadPixelsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glReadPixels"), typeof(GLInterop.glReadPixelsFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glReadPixels'."); }
            try { GLInterop.glGetBooleanvPtr = (GLInterop.glGetBooleanvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBooleanv"), typeof(GLInterop.glGetBooleanvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetBooleanv'."); }
            try { GLInterop.glGetDoublevPtr = (GLInterop.glGetDoublevFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetDoublev"), typeof(GLInterop.glGetDoublevFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetDoublev'."); }
            try { GLInterop.glGetErrorPtr = (GLInterop.glGetErrorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetError"), typeof(GLInterop.glGetErrorFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetError'."); }
            try { GLInterop.glGetFloatvPtr = (GLInterop.glGetFloatvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFloatv"), typeof(GLInterop.glGetFloatvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetFloatv'."); }
            try { GLInterop.glGetIntegervPtr = (GLInterop.glGetIntegervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetIntegerv"), typeof(GLInterop.glGetIntegervFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetIntegerv'."); }
            try { GLInterop.glGetStringPtr = (GLInterop.glGetStringFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetString"), typeof(GLInterop.glGetStringFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetString'."); }
            try { GLInterop.glGetTexImagePtr = (GLInterop.glGetTexImageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexImage"), typeof(GLInterop.glGetTexImageFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetTexImage'."); }
            try { GLInterop.glGetTexParameterfvPtr = (GLInterop.glGetTexParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameterfv"), typeof(GLInterop.glGetTexParameterfvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetTexParameterfv'."); }
            try { GLInterop.glGetTexParameterivPtr = (GLInterop.glGetTexParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameteriv"), typeof(GLInterop.glGetTexParameterivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetTexParameteriv'."); }
            try { GLInterop.glGetTexLevelParameterfvPtr = (GLInterop.glGetTexLevelParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexLevelParameterfv"), typeof(GLInterop.glGetTexLevelParameterfvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetTexLevelParameterfv'."); }
            try { GLInterop.glGetTexLevelParameterivPtr = (GLInterop.glGetTexLevelParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexLevelParameteriv"), typeof(GLInterop.glGetTexLevelParameterivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetTexLevelParameteriv'."); }
            try { GLInterop.glIsEnabledPtr = (GLInterop.glIsEnabledFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsEnabled"), typeof(GLInterop.glIsEnabledFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glIsEnabled'."); }
            try { GLInterop.glDepthRangePtr = (GLInterop.glDepthRangeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthRange"), typeof(GLInterop.glDepthRangeFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glDepthRange'."); }
            try { GLInterop.glViewportPtr = (GLInterop.glViewportFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glViewport"), typeof(GLInterop.glViewportFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glViewport'."); }
            try { GLInterop.glNewListPtr = (GLInterop.glNewListFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNewList"), typeof(GLInterop.glNewListFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glNewList'."); }
            try { GLInterop.glEndListPtr = (GLInterop.glEndListFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEndList"), typeof(GLInterop.glEndListFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glEndList'."); }
            try { GLInterop.glCallListPtr = (GLInterop.glCallListFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCallList"), typeof(GLInterop.glCallListFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glCallList'."); }
            try { GLInterop.glCallListsPtr = (GLInterop.glCallListsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCallLists"), typeof(GLInterop.glCallListsFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glCallLists'."); }
            try { GLInterop.glDeleteListsPtr = (GLInterop.glDeleteListsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteLists"), typeof(GLInterop.glDeleteListsFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glDeleteLists'."); }
            try { GLInterop.glGenListsPtr = (GLInterop.glGenListsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenLists"), typeof(GLInterop.glGenListsFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGenLists'."); }
            try { GLInterop.glListBasePtr = (GLInterop.glListBaseFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glListBase"), typeof(GLInterop.glListBaseFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glListBase'."); }
            try { GLInterop.glBeginPtr = (GLInterop.glBeginFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBegin"), typeof(GLInterop.glBeginFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glBegin'."); }
            try { GLInterop.glBitmapPtr = (GLInterop.glBitmapFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBitmap"), typeof(GLInterop.glBitmapFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glBitmap'."); }
            try { GLInterop.glColor3bPtr = (GLInterop.glColor3bFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3b"), typeof(GLInterop.glColor3bFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor3b'."); }
            try { GLInterop.glColor3bvPtr = (GLInterop.glColor3bvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3bv"), typeof(GLInterop.glColor3bvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor3bv'."); }
            try { GLInterop.glColor3dPtr = (GLInterop.glColor3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3d"), typeof(GLInterop.glColor3dFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor3d'."); }
            try { GLInterop.glColor3dvPtr = (GLInterop.glColor3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3dv"), typeof(GLInterop.glColor3dvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor3dv'."); }
            try { GLInterop.glColor3fPtr = (GLInterop.glColor3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3f"), typeof(GLInterop.glColor3fFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor3f'."); }
            try { GLInterop.glColor3fvPtr = (GLInterop.glColor3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3fv"), typeof(GLInterop.glColor3fvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor3fv'."); }
            try { GLInterop.glColor3iPtr = (GLInterop.glColor3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3i"), typeof(GLInterop.glColor3iFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor3i'."); }
            try { GLInterop.glColor3ivPtr = (GLInterop.glColor3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3iv"), typeof(GLInterop.glColor3ivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor3iv'."); }
            try { GLInterop.glColor3sPtr = (GLInterop.glColor3sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3s"), typeof(GLInterop.glColor3sFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor3s'."); }
            try { GLInterop.glColor3svPtr = (GLInterop.glColor3svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3sv"), typeof(GLInterop.glColor3svFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor3sv'."); }
            try { GLInterop.glColor3ubPtr = (GLInterop.glColor3ubFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3ub"), typeof(GLInterop.glColor3ubFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor3ub'."); }
            try { GLInterop.glColor3ubvPtr = (GLInterop.glColor3ubvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3ubv"), typeof(GLInterop.glColor3ubvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor3ubv'."); }
            try { GLInterop.glColor3uiPtr = (GLInterop.glColor3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3ui"), typeof(GLInterop.glColor3uiFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor3ui'."); }
            try { GLInterop.glColor3uivPtr = (GLInterop.glColor3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3uiv"), typeof(GLInterop.glColor3uivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor3uiv'."); }
            try { GLInterop.glColor3usPtr = (GLInterop.glColor3usFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3us"), typeof(GLInterop.glColor3usFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor3us'."); }
            try { GLInterop.glColor3usvPtr = (GLInterop.glColor3usvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor3usv"), typeof(GLInterop.glColor3usvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor3usv'."); }
            try { GLInterop.glColor4bPtr = (GLInterop.glColor4bFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4b"), typeof(GLInterop.glColor4bFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor4b'."); }
            try { GLInterop.glColor4bvPtr = (GLInterop.glColor4bvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4bv"), typeof(GLInterop.glColor4bvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor4bv'."); }
            try { GLInterop.glColor4dPtr = (GLInterop.glColor4dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4d"), typeof(GLInterop.glColor4dFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor4d'."); }
            try { GLInterop.glColor4dvPtr = (GLInterop.glColor4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4dv"), typeof(GLInterop.glColor4dvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor4dv'."); }
            try { GLInterop.glColor4fPtr = (GLInterop.glColor4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4f"), typeof(GLInterop.glColor4fFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor4f'."); }
            try { GLInterop.glColor4fvPtr = (GLInterop.glColor4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4fv"), typeof(GLInterop.glColor4fvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor4fv'."); }
            try { GLInterop.glColor4iPtr = (GLInterop.glColor4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4i"), typeof(GLInterop.glColor4iFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor4i'."); }
            try { GLInterop.glColor4ivPtr = (GLInterop.glColor4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4iv"), typeof(GLInterop.glColor4ivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor4iv'."); }
            try { GLInterop.glColor4sPtr = (GLInterop.glColor4sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4s"), typeof(GLInterop.glColor4sFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor4s'."); }
            try { GLInterop.glColor4svPtr = (GLInterop.glColor4svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4sv"), typeof(GLInterop.glColor4svFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor4sv'."); }
            try { GLInterop.glColor4ubPtr = (GLInterop.glColor4ubFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4ub"), typeof(GLInterop.glColor4ubFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor4ub'."); }
            try { GLInterop.glColor4ubvPtr = (GLInterop.glColor4ubvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4ubv"), typeof(GLInterop.glColor4ubvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor4ubv'."); }
            try { GLInterop.glColor4uiPtr = (GLInterop.glColor4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4ui"), typeof(GLInterop.glColor4uiFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor4ui'."); }
            try { GLInterop.glColor4uivPtr = (GLInterop.glColor4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4uiv"), typeof(GLInterop.glColor4uivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor4uiv'."); }
            try { GLInterop.glColor4usPtr = (GLInterop.glColor4usFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4us"), typeof(GLInterop.glColor4usFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor4us'."); }
            try { GLInterop.glColor4usvPtr = (GLInterop.glColor4usvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4usv"), typeof(GLInterop.glColor4usvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColor4usv'."); }
            try { GLInterop.glEdgeFlagPtr = (GLInterop.glEdgeFlagFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEdgeFlag"), typeof(GLInterop.glEdgeFlagFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glEdgeFlag'."); }
            try { GLInterop.glEdgeFlagvPtr = (GLInterop.glEdgeFlagvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEdgeFlagv"), typeof(GLInterop.glEdgeFlagvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glEdgeFlagv'."); }
            try { GLInterop.glEndPtr = (GLInterop.glEndFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnd"), typeof(GLInterop.glEndFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glEnd'."); }
            try { GLInterop.glIndexdPtr = (GLInterop.glIndexdFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexd"), typeof(GLInterop.glIndexdFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glIndexd'."); }
            try { GLInterop.glIndexdvPtr = (GLInterop.glIndexdvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexdv"), typeof(GLInterop.glIndexdvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glIndexdv'."); }
            try { GLInterop.glIndexfPtr = (GLInterop.glIndexfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexf"), typeof(GLInterop.glIndexfFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glIndexf'."); }
            try { GLInterop.glIndexfvPtr = (GLInterop.glIndexfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexfv"), typeof(GLInterop.glIndexfvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glIndexfv'."); }
            try { GLInterop.glIndexiPtr = (GLInterop.glIndexiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexi"), typeof(GLInterop.glIndexiFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glIndexi'."); }
            try { GLInterop.glIndexivPtr = (GLInterop.glIndexivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexiv"), typeof(GLInterop.glIndexivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glIndexiv'."); }
            try { GLInterop.glIndexsPtr = (GLInterop.glIndexsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexs"), typeof(GLInterop.glIndexsFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glIndexs'."); }
            try { GLInterop.glIndexsvPtr = (GLInterop.glIndexsvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexsv"), typeof(GLInterop.glIndexsvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glIndexsv'."); }
            try { GLInterop.glNormal3bPtr = (GLInterop.glNormal3bFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3b"), typeof(GLInterop.glNormal3bFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glNormal3b'."); }
            try { GLInterop.glNormal3bvPtr = (GLInterop.glNormal3bvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3bv"), typeof(GLInterop.glNormal3bvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glNormal3bv'."); }
            try { GLInterop.glNormal3dPtr = (GLInterop.glNormal3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3d"), typeof(GLInterop.glNormal3dFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glNormal3d'."); }
            try { GLInterop.glNormal3dvPtr = (GLInterop.glNormal3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3dv"), typeof(GLInterop.glNormal3dvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glNormal3dv'."); }
            try { GLInterop.glNormal3fPtr = (GLInterop.glNormal3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3f"), typeof(GLInterop.glNormal3fFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glNormal3f'."); }
            try { GLInterop.glNormal3fvPtr = (GLInterop.glNormal3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3fv"), typeof(GLInterop.glNormal3fvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glNormal3fv'."); }
            try { GLInterop.glNormal3iPtr = (GLInterop.glNormal3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3i"), typeof(GLInterop.glNormal3iFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glNormal3i'."); }
            try { GLInterop.glNormal3ivPtr = (GLInterop.glNormal3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3iv"), typeof(GLInterop.glNormal3ivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glNormal3iv'."); }
            try { GLInterop.glNormal3sPtr = (GLInterop.glNormal3sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3s"), typeof(GLInterop.glNormal3sFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glNormal3s'."); }
            try { GLInterop.glNormal3svPtr = (GLInterop.glNormal3svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3sv"), typeof(GLInterop.glNormal3svFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glNormal3sv'."); }
            try { GLInterop.glRasterPos2dPtr = (GLInterop.glRasterPos2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos2d"), typeof(GLInterop.glRasterPos2dFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRasterPos2d'."); }
            try { GLInterop.glRasterPos2dvPtr = (GLInterop.glRasterPos2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos2dv"), typeof(GLInterop.glRasterPos2dvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRasterPos2dv'."); }
            try { GLInterop.glRasterPos2fPtr = (GLInterop.glRasterPos2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos2f"), typeof(GLInterop.glRasterPos2fFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRasterPos2f'."); }
            try { GLInterop.glRasterPos2fvPtr = (GLInterop.glRasterPos2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos2fv"), typeof(GLInterop.glRasterPos2fvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRasterPos2fv'."); }
            try { GLInterop.glRasterPos2iPtr = (GLInterop.glRasterPos2iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos2i"), typeof(GLInterop.glRasterPos2iFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRasterPos2i'."); }
            try { GLInterop.glRasterPos2ivPtr = (GLInterop.glRasterPos2ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos2iv"), typeof(GLInterop.glRasterPos2ivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRasterPos2iv'."); }
            try { GLInterop.glRasterPos2sPtr = (GLInterop.glRasterPos2sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos2s"), typeof(GLInterop.glRasterPos2sFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRasterPos2s'."); }
            try { GLInterop.glRasterPos2svPtr = (GLInterop.glRasterPos2svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos2sv"), typeof(GLInterop.glRasterPos2svFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRasterPos2sv'."); }
            try { GLInterop.glRasterPos3dPtr = (GLInterop.glRasterPos3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos3d"), typeof(GLInterop.glRasterPos3dFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRasterPos3d'."); }
            try { GLInterop.glRasterPos3dvPtr = (GLInterop.glRasterPos3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos3dv"), typeof(GLInterop.glRasterPos3dvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRasterPos3dv'."); }
            try { GLInterop.glRasterPos3fPtr = (GLInterop.glRasterPos3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos3f"), typeof(GLInterop.glRasterPos3fFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRasterPos3f'."); }
            try { GLInterop.glRasterPos3fvPtr = (GLInterop.glRasterPos3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos3fv"), typeof(GLInterop.glRasterPos3fvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRasterPos3fv'."); }
            try { GLInterop.glRasterPos3iPtr = (GLInterop.glRasterPos3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos3i"), typeof(GLInterop.glRasterPos3iFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRasterPos3i'."); }
            try { GLInterop.glRasterPos3ivPtr = (GLInterop.glRasterPos3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos3iv"), typeof(GLInterop.glRasterPos3ivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRasterPos3iv'."); }
            try { GLInterop.glRasterPos3sPtr = (GLInterop.glRasterPos3sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos3s"), typeof(GLInterop.glRasterPos3sFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRasterPos3s'."); }
            try { GLInterop.glRasterPos3svPtr = (GLInterop.glRasterPos3svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos3sv"), typeof(GLInterop.glRasterPos3svFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRasterPos3sv'."); }
            try { GLInterop.glRasterPos4dPtr = (GLInterop.glRasterPos4dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos4d"), typeof(GLInterop.glRasterPos4dFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRasterPos4d'."); }
            try { GLInterop.glRasterPos4dvPtr = (GLInterop.glRasterPos4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos4dv"), typeof(GLInterop.glRasterPos4dvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRasterPos4dv'."); }
            try { GLInterop.glRasterPos4fPtr = (GLInterop.glRasterPos4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos4f"), typeof(GLInterop.glRasterPos4fFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRasterPos4f'."); }
            try { GLInterop.glRasterPos4fvPtr = (GLInterop.glRasterPos4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos4fv"), typeof(GLInterop.glRasterPos4fvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRasterPos4fv'."); }
            try { GLInterop.glRasterPos4iPtr = (GLInterop.glRasterPos4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos4i"), typeof(GLInterop.glRasterPos4iFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRasterPos4i'."); }
            try { GLInterop.glRasterPos4ivPtr = (GLInterop.glRasterPos4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos4iv"), typeof(GLInterop.glRasterPos4ivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRasterPos4iv'."); }
            try { GLInterop.glRasterPos4sPtr = (GLInterop.glRasterPos4sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos4s"), typeof(GLInterop.glRasterPos4sFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRasterPos4s'."); }
            try { GLInterop.glRasterPos4svPtr = (GLInterop.glRasterPos4svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRasterPos4sv"), typeof(GLInterop.glRasterPos4svFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRasterPos4sv'."); }
            try { GLInterop.glRectdPtr = (GLInterop.glRectdFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRectd"), typeof(GLInterop.glRectdFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRectd'."); }
            try { GLInterop.glRectdvPtr = (GLInterop.glRectdvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRectdv"), typeof(GLInterop.glRectdvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRectdv'."); }
            try { GLInterop.glRectfPtr = (GLInterop.glRectfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRectf"), typeof(GLInterop.glRectfFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRectf'."); }
            try { GLInterop.glRectfvPtr = (GLInterop.glRectfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRectfv"), typeof(GLInterop.glRectfvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRectfv'."); }
            try { GLInterop.glRectiPtr = (GLInterop.glRectiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRecti"), typeof(GLInterop.glRectiFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRecti'."); }
            try { GLInterop.glRectivPtr = (GLInterop.glRectivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRectiv"), typeof(GLInterop.glRectivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRectiv'."); }
            try { GLInterop.glRectsPtr = (GLInterop.glRectsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRects"), typeof(GLInterop.glRectsFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRects'."); }
            try { GLInterop.glRectsvPtr = (GLInterop.glRectsvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRectsv"), typeof(GLInterop.glRectsvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRectsv'."); }
            try { GLInterop.glTexCoord1dPtr = (GLInterop.glTexCoord1dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord1d"), typeof(GLInterop.glTexCoord1dFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord1d'."); }
            try { GLInterop.glTexCoord1dvPtr = (GLInterop.glTexCoord1dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord1dv"), typeof(GLInterop.glTexCoord1dvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord1dv'."); }
            try { GLInterop.glTexCoord1fPtr = (GLInterop.glTexCoord1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord1f"), typeof(GLInterop.glTexCoord1fFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord1f'."); }
            try { GLInterop.glTexCoord1fvPtr = (GLInterop.glTexCoord1fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord1fv"), typeof(GLInterop.glTexCoord1fvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord1fv'."); }
            try { GLInterop.glTexCoord1iPtr = (GLInterop.glTexCoord1iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord1i"), typeof(GLInterop.glTexCoord1iFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord1i'."); }
            try { GLInterop.glTexCoord1ivPtr = (GLInterop.glTexCoord1ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord1iv"), typeof(GLInterop.glTexCoord1ivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord1iv'."); }
            try { GLInterop.glTexCoord1sPtr = (GLInterop.glTexCoord1sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord1s"), typeof(GLInterop.glTexCoord1sFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord1s'."); }
            try { GLInterop.glTexCoord1svPtr = (GLInterop.glTexCoord1svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord1sv"), typeof(GLInterop.glTexCoord1svFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord1sv'."); }
            try { GLInterop.glTexCoord2dPtr = (GLInterop.glTexCoord2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord2d"), typeof(GLInterop.glTexCoord2dFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord2d'."); }
            try { GLInterop.glTexCoord2dvPtr = (GLInterop.glTexCoord2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord2dv"), typeof(GLInterop.glTexCoord2dvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord2dv'."); }
            try { GLInterop.glTexCoord2fPtr = (GLInterop.glTexCoord2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord2f"), typeof(GLInterop.glTexCoord2fFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord2f'."); }
            try { GLInterop.glTexCoord2fvPtr = (GLInterop.glTexCoord2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord2fv"), typeof(GLInterop.glTexCoord2fvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord2fv'."); }
            try { GLInterop.glTexCoord2iPtr = (GLInterop.glTexCoord2iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord2i"), typeof(GLInterop.glTexCoord2iFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord2i'."); }
            try { GLInterop.glTexCoord2ivPtr = (GLInterop.glTexCoord2ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord2iv"), typeof(GLInterop.glTexCoord2ivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord2iv'."); }
            try { GLInterop.glTexCoord2sPtr = (GLInterop.glTexCoord2sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord2s"), typeof(GLInterop.glTexCoord2sFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord2s'."); }
            try { GLInterop.glTexCoord2svPtr = (GLInterop.glTexCoord2svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord2sv"), typeof(GLInterop.glTexCoord2svFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord2sv'."); }
            try { GLInterop.glTexCoord3dPtr = (GLInterop.glTexCoord3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord3d"), typeof(GLInterop.glTexCoord3dFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord3d'."); }
            try { GLInterop.glTexCoord3dvPtr = (GLInterop.glTexCoord3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord3dv"), typeof(GLInterop.glTexCoord3dvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord3dv'."); }
            try { GLInterop.glTexCoord3fPtr = (GLInterop.glTexCoord3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord3f"), typeof(GLInterop.glTexCoord3fFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord3f'."); }
            try { GLInterop.glTexCoord3fvPtr = (GLInterop.glTexCoord3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord3fv"), typeof(GLInterop.glTexCoord3fvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord3fv'."); }
            try { GLInterop.glTexCoord3iPtr = (GLInterop.glTexCoord3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord3i"), typeof(GLInterop.glTexCoord3iFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord3i'."); }
            try { GLInterop.glTexCoord3ivPtr = (GLInterop.glTexCoord3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord3iv"), typeof(GLInterop.glTexCoord3ivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord3iv'."); }
            try { GLInterop.glTexCoord3sPtr = (GLInterop.glTexCoord3sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord3s"), typeof(GLInterop.glTexCoord3sFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord3s'."); }
            try { GLInterop.glTexCoord3svPtr = (GLInterop.glTexCoord3svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord3sv"), typeof(GLInterop.glTexCoord3svFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord3sv'."); }
            try { GLInterop.glTexCoord4dPtr = (GLInterop.glTexCoord4dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord4d"), typeof(GLInterop.glTexCoord4dFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord4d'."); }
            try { GLInterop.glTexCoord4dvPtr = (GLInterop.glTexCoord4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord4dv"), typeof(GLInterop.glTexCoord4dvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord4dv'."); }
            try { GLInterop.glTexCoord4fPtr = (GLInterop.glTexCoord4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord4f"), typeof(GLInterop.glTexCoord4fFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord4f'."); }
            try { GLInterop.glTexCoord4fvPtr = (GLInterop.glTexCoord4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord4fv"), typeof(GLInterop.glTexCoord4fvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord4fv'."); }
            try { GLInterop.glTexCoord4iPtr = (GLInterop.glTexCoord4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord4i"), typeof(GLInterop.glTexCoord4iFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord4i'."); }
            try { GLInterop.glTexCoord4ivPtr = (GLInterop.glTexCoord4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord4iv"), typeof(GLInterop.glTexCoord4ivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord4iv'."); }
            try { GLInterop.glTexCoord4sPtr = (GLInterop.glTexCoord4sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord4s"), typeof(GLInterop.glTexCoord4sFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord4s'."); }
            try { GLInterop.glTexCoord4svPtr = (GLInterop.glTexCoord4svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoord4sv"), typeof(GLInterop.glTexCoord4svFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoord4sv'."); }
            try { GLInterop.glVertex2dPtr = (GLInterop.glVertex2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex2d"), typeof(GLInterop.glVertex2dFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glVertex2d'."); }
            try { GLInterop.glVertex2dvPtr = (GLInterop.glVertex2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex2dv"), typeof(GLInterop.glVertex2dvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glVertex2dv'."); }
            try { GLInterop.glVertex2fPtr = (GLInterop.glVertex2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex2f"), typeof(GLInterop.glVertex2fFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glVertex2f'."); }
            try { GLInterop.glVertex2fvPtr = (GLInterop.glVertex2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex2fv"), typeof(GLInterop.glVertex2fvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glVertex2fv'."); }
            try { GLInterop.glVertex2iPtr = (GLInterop.glVertex2iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex2i"), typeof(GLInterop.glVertex2iFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glVertex2i'."); }
            try { GLInterop.glVertex2ivPtr = (GLInterop.glVertex2ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex2iv"), typeof(GLInterop.glVertex2ivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glVertex2iv'."); }
            try { GLInterop.glVertex2sPtr = (GLInterop.glVertex2sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex2s"), typeof(GLInterop.glVertex2sFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glVertex2s'."); }
            try { GLInterop.glVertex2svPtr = (GLInterop.glVertex2svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex2sv"), typeof(GLInterop.glVertex2svFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glVertex2sv'."); }
            try { GLInterop.glVertex3dPtr = (GLInterop.glVertex3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex3d"), typeof(GLInterop.glVertex3dFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glVertex3d'."); }
            try { GLInterop.glVertex3dvPtr = (GLInterop.glVertex3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex3dv"), typeof(GLInterop.glVertex3dvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glVertex3dv'."); }
            try { GLInterop.glVertex3fPtr = (GLInterop.glVertex3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex3f"), typeof(GLInterop.glVertex3fFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glVertex3f'."); }
            try { GLInterop.glVertex3fvPtr = (GLInterop.glVertex3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex3fv"), typeof(GLInterop.glVertex3fvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glVertex3fv'."); }
            try { GLInterop.glVertex3iPtr = (GLInterop.glVertex3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex3i"), typeof(GLInterop.glVertex3iFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glVertex3i'."); }
            try { GLInterop.glVertex3ivPtr = (GLInterop.glVertex3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex3iv"), typeof(GLInterop.glVertex3ivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glVertex3iv'."); }
            try { GLInterop.glVertex3sPtr = (GLInterop.glVertex3sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex3s"), typeof(GLInterop.glVertex3sFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glVertex3s'."); }
            try { GLInterop.glVertex3svPtr = (GLInterop.glVertex3svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex3sv"), typeof(GLInterop.glVertex3svFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glVertex3sv'."); }
            try { GLInterop.glVertex4dPtr = (GLInterop.glVertex4dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex4d"), typeof(GLInterop.glVertex4dFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glVertex4d'."); }
            try { GLInterop.glVertex4dvPtr = (GLInterop.glVertex4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex4dv"), typeof(GLInterop.glVertex4dvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glVertex4dv'."); }
            try { GLInterop.glVertex4fPtr = (GLInterop.glVertex4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex4f"), typeof(GLInterop.glVertex4fFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glVertex4f'."); }
            try { GLInterop.glVertex4fvPtr = (GLInterop.glVertex4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex4fv"), typeof(GLInterop.glVertex4fvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glVertex4fv'."); }
            try { GLInterop.glVertex4iPtr = (GLInterop.glVertex4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex4i"), typeof(GLInterop.glVertex4iFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glVertex4i'."); }
            try { GLInterop.glVertex4ivPtr = (GLInterop.glVertex4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex4iv"), typeof(GLInterop.glVertex4ivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glVertex4iv'."); }
            try { GLInterop.glVertex4sPtr = (GLInterop.glVertex4sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex4s"), typeof(GLInterop.glVertex4sFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glVertex4s'."); }
            try { GLInterop.glVertex4svPtr = (GLInterop.glVertex4svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertex4sv"), typeof(GLInterop.glVertex4svFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glVertex4sv'."); }
            try { GLInterop.glClipPlanePtr = (GLInterop.glClipPlaneFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClipPlane"), typeof(GLInterop.glClipPlaneFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glClipPlane'."); }
            try { GLInterop.glColorMaterialPtr = (GLInterop.glColorMaterialFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorMaterial"), typeof(GLInterop.glColorMaterialFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColorMaterial'."); }
            try { GLInterop.glFogfPtr = (GLInterop.glFogfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogf"), typeof(GLInterop.glFogfFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glFogf'."); }
            try { GLInterop.glFogfvPtr = (GLInterop.glFogfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogfv"), typeof(GLInterop.glFogfvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glFogfv'."); }
            try { GLInterop.glFogiPtr = (GLInterop.glFogiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogi"), typeof(GLInterop.glFogiFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glFogi'."); }
            try { GLInterop.glFogivPtr = (GLInterop.glFogivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogiv"), typeof(GLInterop.glFogivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glFogiv'."); }
            try { GLInterop.glLightfPtr = (GLInterop.glLightfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightf"), typeof(GLInterop.glLightfFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glLightf'."); }
            try { GLInterop.glLightfvPtr = (GLInterop.glLightfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightfv"), typeof(GLInterop.glLightfvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glLightfv'."); }
            try { GLInterop.glLightiPtr = (GLInterop.glLightiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLighti"), typeof(GLInterop.glLightiFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glLighti'."); }
            try { GLInterop.glLightivPtr = (GLInterop.glLightivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightiv"), typeof(GLInterop.glLightivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glLightiv'."); }
            try { GLInterop.glLightModelfPtr = (GLInterop.glLightModelfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightModelf"), typeof(GLInterop.glLightModelfFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glLightModelf'."); }
            try { GLInterop.glLightModelfvPtr = (GLInterop.glLightModelfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightModelfv"), typeof(GLInterop.glLightModelfvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glLightModelfv'."); }
            try { GLInterop.glLightModeliPtr = (GLInterop.glLightModeliFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightModeli"), typeof(GLInterop.glLightModeliFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glLightModeli'."); }
            try { GLInterop.glLightModelivPtr = (GLInterop.glLightModelivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightModeliv"), typeof(GLInterop.glLightModelivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glLightModeliv'."); }
            try { GLInterop.glLineStipplePtr = (GLInterop.glLineStippleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLineStipple"), typeof(GLInterop.glLineStippleFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glLineStipple'."); }
            try { GLInterop.glMaterialfPtr = (GLInterop.glMaterialfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMaterialf"), typeof(GLInterop.glMaterialfFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glMaterialf'."); }
            try { GLInterop.glMaterialfvPtr = (GLInterop.glMaterialfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMaterialfv"), typeof(GLInterop.glMaterialfvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glMaterialfv'."); }
            try { GLInterop.glMaterialiPtr = (GLInterop.glMaterialiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMateriali"), typeof(GLInterop.glMaterialiFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glMateriali'."); }
            try { GLInterop.glMaterialivPtr = (GLInterop.glMaterialivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMaterialiv"), typeof(GLInterop.glMaterialivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glMaterialiv'."); }
            try { GLInterop.glPolygonStipplePtr = (GLInterop.glPolygonStippleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPolygonStipple"), typeof(GLInterop.glPolygonStippleFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glPolygonStipple'."); }
            try { GLInterop.glShadeModelPtr = (GLInterop.glShadeModelFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glShadeModel"), typeof(GLInterop.glShadeModelFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glShadeModel'."); }
            try { GLInterop.glTexEnvfPtr = (GLInterop.glTexEnvfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnvf"), typeof(GLInterop.glTexEnvfFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexEnvf'."); }
            try { GLInterop.glTexEnvfvPtr = (GLInterop.glTexEnvfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnvfv"), typeof(GLInterop.glTexEnvfvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexEnvfv'."); }
            try { GLInterop.glTexEnviPtr = (GLInterop.glTexEnviFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnvi"), typeof(GLInterop.glTexEnviFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexEnvi'."); }
            try { GLInterop.glTexEnvivPtr = (GLInterop.glTexEnvivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnviv"), typeof(GLInterop.glTexEnvivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexEnviv'."); }
            try { GLInterop.glTexGendPtr = (GLInterop.glTexGendFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexGend"), typeof(GLInterop.glTexGendFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexGend'."); }
            try { GLInterop.glTexGendvPtr = (GLInterop.glTexGendvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexGendv"), typeof(GLInterop.glTexGendvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexGendv'."); }
            try { GLInterop.glTexGenfPtr = (GLInterop.glTexGenfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexGenf"), typeof(GLInterop.glTexGenfFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexGenf'."); }
            try { GLInterop.glTexGenfvPtr = (GLInterop.glTexGenfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexGenfv"), typeof(GLInterop.glTexGenfvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexGenfv'."); }
            try { GLInterop.glTexGeniPtr = (GLInterop.glTexGeniFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexGeni"), typeof(GLInterop.glTexGeniFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexGeni'."); }
            try { GLInterop.glTexGenivPtr = (GLInterop.glTexGenivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexGeniv"), typeof(GLInterop.glTexGenivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexGeniv'."); }
            try { GLInterop.glFeedbackBufferPtr = (GLInterop.glFeedbackBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFeedbackBuffer"), typeof(GLInterop.glFeedbackBufferFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glFeedbackBuffer'."); }
            try { GLInterop.glSelectBufferPtr = (GLInterop.glSelectBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSelectBuffer"), typeof(GLInterop.glSelectBufferFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glSelectBuffer'."); }
            try { GLInterop.glRenderModePtr = (GLInterop.glRenderModeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRenderMode"), typeof(GLInterop.glRenderModeFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRenderMode'."); }
            try { GLInterop.glInitNamesPtr = (GLInterop.glInitNamesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glInitNames"), typeof(GLInterop.glInitNamesFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glInitNames'."); }
            try { GLInterop.glLoadNamePtr = (GLInterop.glLoadNameFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLoadName"), typeof(GLInterop.glLoadNameFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glLoadName'."); }
            try { GLInterop.glPassThroughPtr = (GLInterop.glPassThroughFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPassThrough"), typeof(GLInterop.glPassThroughFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glPassThrough'."); }
            try { GLInterop.glPopNamePtr = (GLInterop.glPopNameFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPopName"), typeof(GLInterop.glPopNameFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glPopName'."); }
            try { GLInterop.glPushNamePtr = (GLInterop.glPushNameFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPushName"), typeof(GLInterop.glPushNameFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glPushName'."); }
            try { GLInterop.glClearAccumPtr = (GLInterop.glClearAccumFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearAccum"), typeof(GLInterop.glClearAccumFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glClearAccum'."); }
            try { GLInterop.glClearIndexPtr = (GLInterop.glClearIndexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearIndex"), typeof(GLInterop.glClearIndexFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glClearIndex'."); }
            try { GLInterop.glIndexMaskPtr = (GLInterop.glIndexMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexMask"), typeof(GLInterop.glIndexMaskFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glIndexMask'."); }
            try { GLInterop.glAccumPtr = (GLInterop.glAccumFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glAccum"), typeof(GLInterop.glAccumFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glAccum'."); }
            try { GLInterop.glPopAttribPtr = (GLInterop.glPopAttribFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPopAttrib"), typeof(GLInterop.glPopAttribFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glPopAttrib'."); }
            try { GLInterop.glPushAttribPtr = (GLInterop.glPushAttribFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPushAttrib"), typeof(GLInterop.glPushAttribFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glPushAttrib'."); }
            try { GLInterop.glMap1dPtr = (GLInterop.glMap1dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMap1d"), typeof(GLInterop.glMap1dFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glMap1d'."); }
            try { GLInterop.glMap1fPtr = (GLInterop.glMap1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMap1f"), typeof(GLInterop.glMap1fFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glMap1f'."); }
            try { GLInterop.glMap2dPtr = (GLInterop.glMap2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMap2d"), typeof(GLInterop.glMap2dFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glMap2d'."); }
            try { GLInterop.glMap2fPtr = (GLInterop.glMap2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMap2f"), typeof(GLInterop.glMap2fFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glMap2f'."); }
            try { GLInterop.glMapGrid1dPtr = (GLInterop.glMapGrid1dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMapGrid1d"), typeof(GLInterop.glMapGrid1dFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glMapGrid1d'."); }
            try { GLInterop.glMapGrid1fPtr = (GLInterop.glMapGrid1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMapGrid1f"), typeof(GLInterop.glMapGrid1fFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glMapGrid1f'."); }
            try { GLInterop.glMapGrid2dPtr = (GLInterop.glMapGrid2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMapGrid2d"), typeof(GLInterop.glMapGrid2dFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glMapGrid2d'."); }
            try { GLInterop.glMapGrid2fPtr = (GLInterop.glMapGrid2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMapGrid2f"), typeof(GLInterop.glMapGrid2fFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glMapGrid2f'."); }
            try { GLInterop.glEvalCoord1dPtr = (GLInterop.glEvalCoord1dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalCoord1d"), typeof(GLInterop.glEvalCoord1dFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glEvalCoord1d'."); }
            try { GLInterop.glEvalCoord1dvPtr = (GLInterop.glEvalCoord1dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalCoord1dv"), typeof(GLInterop.glEvalCoord1dvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glEvalCoord1dv'."); }
            try { GLInterop.glEvalCoord1fPtr = (GLInterop.glEvalCoord1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalCoord1f"), typeof(GLInterop.glEvalCoord1fFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glEvalCoord1f'."); }
            try { GLInterop.glEvalCoord1fvPtr = (GLInterop.glEvalCoord1fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalCoord1fv"), typeof(GLInterop.glEvalCoord1fvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glEvalCoord1fv'."); }
            try { GLInterop.glEvalCoord2dPtr = (GLInterop.glEvalCoord2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalCoord2d"), typeof(GLInterop.glEvalCoord2dFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glEvalCoord2d'."); }
            try { GLInterop.glEvalCoord2dvPtr = (GLInterop.glEvalCoord2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalCoord2dv"), typeof(GLInterop.glEvalCoord2dvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glEvalCoord2dv'."); }
            try { GLInterop.glEvalCoord2fPtr = (GLInterop.glEvalCoord2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalCoord2f"), typeof(GLInterop.glEvalCoord2fFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glEvalCoord2f'."); }
            try { GLInterop.glEvalCoord2fvPtr = (GLInterop.glEvalCoord2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalCoord2fv"), typeof(GLInterop.glEvalCoord2fvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glEvalCoord2fv'."); }
            try { GLInterop.glEvalMesh1Ptr = (GLInterop.glEvalMesh1Func)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalMesh1"), typeof(GLInterop.glEvalMesh1Func)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glEvalMesh1'."); }
            try { GLInterop.glEvalPoint1Ptr = (GLInterop.glEvalPoint1Func)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalPoint1"), typeof(GLInterop.glEvalPoint1Func)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glEvalPoint1'."); }
            try { GLInterop.glEvalMesh2Ptr = (GLInterop.glEvalMesh2Func)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalMesh2"), typeof(GLInterop.glEvalMesh2Func)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glEvalMesh2'."); }
            try { GLInterop.glEvalPoint2Ptr = (GLInterop.glEvalPoint2Func)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEvalPoint2"), typeof(GLInterop.glEvalPoint2Func)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glEvalPoint2'."); }
            try { GLInterop.glAlphaFuncPtr = (GLInterop.glAlphaFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glAlphaFunc"), typeof(GLInterop.glAlphaFuncFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glAlphaFunc'."); }
            try { GLInterop.glPixelZoomPtr = (GLInterop.glPixelZoomFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelZoom"), typeof(GLInterop.glPixelZoomFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glPixelZoom'."); }
            try { GLInterop.glPixelTransferfPtr = (GLInterop.glPixelTransferfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelTransferf"), typeof(GLInterop.glPixelTransferfFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glPixelTransferf'."); }
            try { GLInterop.glPixelTransferiPtr = (GLInterop.glPixelTransferiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelTransferi"), typeof(GLInterop.glPixelTransferiFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glPixelTransferi'."); }
            try { GLInterop.glPixelMapfvPtr = (GLInterop.glPixelMapfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelMapfv"), typeof(GLInterop.glPixelMapfvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glPixelMapfv'."); }
            try { GLInterop.glPixelMapuivPtr = (GLInterop.glPixelMapuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelMapuiv"), typeof(GLInterop.glPixelMapuivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glPixelMapuiv'."); }
            try { GLInterop.glPixelMapusvPtr = (GLInterop.glPixelMapusvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelMapusv"), typeof(GLInterop.glPixelMapusvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glPixelMapusv'."); }
            try { GLInterop.glCopyPixelsPtr = (GLInterop.glCopyPixelsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyPixels"), typeof(GLInterop.glCopyPixelsFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glCopyPixels'."); }
            try { GLInterop.glDrawPixelsPtr = (GLInterop.glDrawPixelsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawPixels"), typeof(GLInterop.glDrawPixelsFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glDrawPixels'."); }
            try { GLInterop.glGetClipPlanePtr = (GLInterop.glGetClipPlaneFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetClipPlane"), typeof(GLInterop.glGetClipPlaneFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetClipPlane'."); }
            try { GLInterop.glGetLightfvPtr = (GLInterop.glGetLightfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetLightfv"), typeof(GLInterop.glGetLightfvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetLightfv'."); }
            try { GLInterop.glGetLightivPtr = (GLInterop.glGetLightivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetLightiv"), typeof(GLInterop.glGetLightivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetLightiv'."); }
            try { GLInterop.glGetMapdvPtr = (GLInterop.glGetMapdvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetMapdv"), typeof(GLInterop.glGetMapdvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetMapdv'."); }
            try { GLInterop.glGetMapfvPtr = (GLInterop.glGetMapfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetMapfv"), typeof(GLInterop.glGetMapfvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetMapfv'."); }
            try { GLInterop.glGetMapivPtr = (GLInterop.glGetMapivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetMapiv"), typeof(GLInterop.glGetMapivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetMapiv'."); }
            try { GLInterop.glGetMaterialfvPtr = (GLInterop.glGetMaterialfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetMaterialfv"), typeof(GLInterop.glGetMaterialfvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetMaterialfv'."); }
            try { GLInterop.glGetMaterialivPtr = (GLInterop.glGetMaterialivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetMaterialiv"), typeof(GLInterop.glGetMaterialivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetMaterialiv'."); }
            try { GLInterop.glGetPixelMapfvPtr = (GLInterop.glGetPixelMapfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetPixelMapfv"), typeof(GLInterop.glGetPixelMapfvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetPixelMapfv'."); }
            try { GLInterop.glGetPixelMapuivPtr = (GLInterop.glGetPixelMapuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetPixelMapuiv"), typeof(GLInterop.glGetPixelMapuivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetPixelMapuiv'."); }
            try { GLInterop.glGetPixelMapusvPtr = (GLInterop.glGetPixelMapusvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetPixelMapusv"), typeof(GLInterop.glGetPixelMapusvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetPixelMapusv'."); }
            try { GLInterop.glGetPolygonStipplePtr = (GLInterop.glGetPolygonStippleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetPolygonStipple"), typeof(GLInterop.glGetPolygonStippleFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetPolygonStipple'."); }
            try { GLInterop.glGetTexEnvfvPtr = (GLInterop.glGetTexEnvfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexEnvfv"), typeof(GLInterop.glGetTexEnvfvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetTexEnvfv'."); }
            try { GLInterop.glGetTexEnvivPtr = (GLInterop.glGetTexEnvivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexEnviv"), typeof(GLInterop.glGetTexEnvivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetTexEnviv'."); }
            try { GLInterop.glGetTexGendvPtr = (GLInterop.glGetTexGendvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexGendv"), typeof(GLInterop.glGetTexGendvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetTexGendv'."); }
            try { GLInterop.glGetTexGenfvPtr = (GLInterop.glGetTexGenfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexGenfv"), typeof(GLInterop.glGetTexGenfvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetTexGenfv'."); }
            try { GLInterop.glGetTexGenivPtr = (GLInterop.glGetTexGenivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexGeniv"), typeof(GLInterop.glGetTexGenivFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetTexGeniv'."); }
            try { GLInterop.glIsListPtr = (GLInterop.glIsListFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsList"), typeof(GLInterop.glIsListFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glIsList'."); }
            try { GLInterop.glFrustumPtr = (GLInterop.glFrustumFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFrustum"), typeof(GLInterop.glFrustumFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glFrustum'."); }
            try { GLInterop.glLoadIdentityPtr = (GLInterop.glLoadIdentityFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLoadIdentity"), typeof(GLInterop.glLoadIdentityFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glLoadIdentity'."); }
            try { GLInterop.glLoadMatrixfPtr = (GLInterop.glLoadMatrixfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLoadMatrixf"), typeof(GLInterop.glLoadMatrixfFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glLoadMatrixf'."); }
            try { GLInterop.glLoadMatrixdPtr = (GLInterop.glLoadMatrixdFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLoadMatrixd"), typeof(GLInterop.glLoadMatrixdFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glLoadMatrixd'."); }
            try { GLInterop.glMatrixModePtr = (GLInterop.glMatrixModeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMatrixMode"), typeof(GLInterop.glMatrixModeFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glMatrixMode'."); }
            try { GLInterop.glMultMatrixfPtr = (GLInterop.glMultMatrixfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultMatrixf"), typeof(GLInterop.glMultMatrixfFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glMultMatrixf'."); }
            try { GLInterop.glMultMatrixdPtr = (GLInterop.glMultMatrixdFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultMatrixd"), typeof(GLInterop.glMultMatrixdFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glMultMatrixd'."); }
            try { GLInterop.glOrthoPtr = (GLInterop.glOrthoFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glOrtho"), typeof(GLInterop.glOrthoFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glOrtho'."); }
            try { GLInterop.glPopMatrixPtr = (GLInterop.glPopMatrixFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPopMatrix"), typeof(GLInterop.glPopMatrixFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glPopMatrix'."); }
            try { GLInterop.glPushMatrixPtr = (GLInterop.glPushMatrixFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPushMatrix"), typeof(GLInterop.glPushMatrixFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glPushMatrix'."); }
            try { GLInterop.glRotatedPtr = (GLInterop.glRotatedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRotated"), typeof(GLInterop.glRotatedFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRotated'."); }
            try { GLInterop.glRotatefPtr = (GLInterop.glRotatefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRotatef"), typeof(GLInterop.glRotatefFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glRotatef'."); }
            try { GLInterop.glScaledPtr = (GLInterop.glScaledFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScaled"), typeof(GLInterop.glScaledFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glScaled'."); }
            try { GLInterop.glScalefPtr = (GLInterop.glScalefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScalef"), typeof(GLInterop.glScalefFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glScalef'."); }
            try { GLInterop.glTranslatedPtr = (GLInterop.glTranslatedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTranslated"), typeof(GLInterop.glTranslatedFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTranslated'."); }
            try { GLInterop.glTranslatefPtr = (GLInterop.glTranslatefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTranslatef"), typeof(GLInterop.glTranslatefFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTranslatef'."); }
            try { GLInterop.glDrawArraysPtr = (GLInterop.glDrawArraysFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawArrays"), typeof(GLInterop.glDrawArraysFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glDrawArrays'."); }
            try { GLInterop.glDrawElementsPtr = (GLInterop.glDrawElementsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElements"), typeof(GLInterop.glDrawElementsFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glDrawElements'."); }
            try { GLInterop.glGetPointervPtr = (GLInterop.glGetPointervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetPointerv"), typeof(GLInterop.glGetPointervFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGetPointerv'."); }
            try { GLInterop.glPolygonOffsetPtr = (GLInterop.glPolygonOffsetFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPolygonOffset"), typeof(GLInterop.glPolygonOffsetFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glPolygonOffset'."); }
            try { GLInterop.glCopyTexImage1DPtr = (GLInterop.glCopyTexImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexImage1D"), typeof(GLInterop.glCopyTexImage1DFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glCopyTexImage1D'."); }
            try { GLInterop.glCopyTexImage2DPtr = (GLInterop.glCopyTexImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexImage2D"), typeof(GLInterop.glCopyTexImage2DFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glCopyTexImage2D'."); }
            try { GLInterop.glCopyTexSubImage1DPtr = (GLInterop.glCopyTexSubImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexSubImage1D"), typeof(GLInterop.glCopyTexSubImage1DFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glCopyTexSubImage1D'."); }
            try { GLInterop.glCopyTexSubImage2DPtr = (GLInterop.glCopyTexSubImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexSubImage2D"), typeof(GLInterop.glCopyTexSubImage2DFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glCopyTexSubImage2D'."); }
            try { GLInterop.glTexSubImage1DPtr = (GLInterop.glTexSubImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexSubImage1D"), typeof(GLInterop.glTexSubImage1DFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexSubImage1D'."); }
            try { GLInterop.glTexSubImage2DPtr = (GLInterop.glTexSubImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexSubImage2D"), typeof(GLInterop.glTexSubImage2DFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexSubImage2D'."); }
            try { GLInterop.glBindTexturePtr = (GLInterop.glBindTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindTexture"), typeof(GLInterop.glBindTextureFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glBindTexture'."); }
            try { GLInterop.glDeleteTexturesPtr = (GLInterop.glDeleteTexturesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteTextures"), typeof(GLInterop.glDeleteTexturesFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glDeleteTextures'."); }
            try { GLInterop.glGenTexturesPtr = (GLInterop.glGenTexturesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenTextures"), typeof(GLInterop.glGenTexturesFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glGenTextures'."); }
            try { GLInterop.glIsTexturePtr = (GLInterop.glIsTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsTexture"), typeof(GLInterop.glIsTextureFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glIsTexture'."); }
            try { GLInterop.glArrayElementPtr = (GLInterop.glArrayElementFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glArrayElement"), typeof(GLInterop.glArrayElementFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glArrayElement'."); }
            try { GLInterop.glColorPointerPtr = (GLInterop.glColorPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorPointer"), typeof(GLInterop.glColorPointerFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glColorPointer'."); }
            try { GLInterop.glDisableClientStatePtr = (GLInterop.glDisableClientStateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDisableClientState"), typeof(GLInterop.glDisableClientStateFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glDisableClientState'."); }
            try { GLInterop.glEdgeFlagPointerPtr = (GLInterop.glEdgeFlagPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEdgeFlagPointer"), typeof(GLInterop.glEdgeFlagPointerFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glEdgeFlagPointer'."); }
            try { GLInterop.glEnableClientStatePtr = (GLInterop.glEnableClientStateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnableClientState"), typeof(GLInterop.glEnableClientStateFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glEnableClientState'."); }
            try { GLInterop.glIndexPointerPtr = (GLInterop.glIndexPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexPointer"), typeof(GLInterop.glIndexPointerFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glIndexPointer'."); }
            try { GLInterop.glInterleavedArraysPtr = (GLInterop.glInterleavedArraysFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glInterleavedArrays"), typeof(GLInterop.glInterleavedArraysFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glInterleavedArrays'."); }
            try { GLInterop.glNormalPointerPtr = (GLInterop.glNormalPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormalPointer"), typeof(GLInterop.glNormalPointerFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glNormalPointer'."); }
            try { GLInterop.glTexCoordPointerPtr = (GLInterop.glTexCoordPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordPointer"), typeof(GLInterop.glTexCoordPointerFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexCoordPointer'."); }
            try { GLInterop.glVertexPointerPtr = (GLInterop.glVertexPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexPointer"), typeof(GLInterop.glVertexPointerFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glVertexPointer'."); }
            try { GLInterop.glAreTexturesResidentPtr = (GLInterop.glAreTexturesResidentFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glAreTexturesResident"), typeof(GLInterop.glAreTexturesResidentFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glAreTexturesResident'."); }
            try { GLInterop.glPrioritizeTexturesPtr = (GLInterop.glPrioritizeTexturesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPrioritizeTextures"), typeof(GLInterop.glPrioritizeTexturesFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glPrioritizeTextures'."); }
            try { GLInterop.glIndexubPtr = (GLInterop.glIndexubFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexub"), typeof(GLInterop.glIndexubFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glIndexub'."); }
            try { GLInterop.glIndexubvPtr = (GLInterop.glIndexubvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIndexubv"), typeof(GLInterop.glIndexubvFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glIndexubv'."); }
            try { GLInterop.glPopClientAttribPtr = (GLInterop.glPopClientAttribFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPopClientAttrib"), typeof(GLInterop.glPopClientAttribFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glPopClientAttrib'."); }
            try { GLInterop.glPushClientAttribPtr = (GLInterop.glPushClientAttribFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPushClientAttrib"), typeof(GLInterop.glPushClientAttribFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glPushClientAttrib'."); }
            try { GLInterop.glDrawRangeElementsPtr = (GLInterop.glDrawRangeElementsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawRangeElements"), typeof(GLInterop.glDrawRangeElementsFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glDrawRangeElements'."); }
            try { GLInterop.glTexImage3DPtr = (GLInterop.glTexImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage3D"), typeof(GLInterop.glTexImage3DFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexImage3D'."); }
            try { GLInterop.glTexSubImage3DPtr = (GLInterop.glTexSubImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexSubImage3D"), typeof(GLInterop.glTexSubImage3DFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glTexSubImage3D'."); }
            try { GLInterop.glCopyTexSubImage3DPtr = (GLInterop.glCopyTexSubImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexSubImage3D"), typeof(GLInterop.glCopyTexSubImage3DFunc)); }
            catch { throw new InvalidOperationException("Failed to get function pointer for 'glCopyTexSubImage3D'."); }
        }

        public static void LoadFunction(string name)
        {
            try
            {
                var memberInfo = typeof(GLInterop).GetField(name + "Ptr", BindingFlags.Public | BindingFlags.Static);
                Debug.Assert(memberInfo != null, string.Format("Failed to find function delegate. Ensure '{0}' is a valid OpenGL function.", name));
                var procAddr = GetProcAddress(name);
                Debug.Assert(procAddr != IntPtr.Zero, string.Format("Failed to find function address. Ensure '{0}' is a valid OpenGL function.", name));
                var funcPtr = Marshal.GetDelegateForFunctionPointer(procAddr, memberInfo.FieldType);
                Debug.Assert(funcPtr != null, string.Format("Failed to convert function address to delegate for '{0}'.", name));
                memberInfo.SetValue(null, funcPtr);
            }
            catch
            {
                throw new InvalidOperationException(string.Format("Failed to load function '{0}'.", name));
            }
        }
        #endregion
    }
}
