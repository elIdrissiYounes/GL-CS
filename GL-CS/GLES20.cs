// This file was autogenerated by GLCSGen on 11/4/2013 7:43:37 AM
// Original copyright from gl.xml:
// 
// Copyright (c) 2013 The Khronos Group Inc.
// 
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
// 
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
// 
// ------------------------------------------------------------------------
// 
// This file, gl.xml, is the OpenGL and OpenGL API Registry. The older
// ".spec" file format has been retired and will no longer be updated with
// new extensions and API versions. The canonical version of the registry,
// together with documentation, schema, and Python generator scripts used
// to generate C header files for OpenGL and OpenGL ES, can always be found
// in the Khronos Registry at
//         http://www.opengl.org/registry/
//     

using System;
using System.Reflection;
using System.Runtime.InteropServices;

namespace OpenGL
{
    public static class GLES20
    {
        #region Enums
        public static uint GL_VERSION_ES_CL_1_0 = 1;
        public static uint GL_VERSION_ES_CM_1_1 = 1;
        public static uint GL_VERSION_ES_CL_1_1 = 1;
        public static uint GL_DEPTH_BUFFER_BIT = 0x00000100;
        public static uint GL_STENCIL_BUFFER_BIT = 0x00000400;
        public static uint GL_COLOR_BUFFER_BIT = 0x00004000;
        public static uint GL_FALSE = 0;
        public static uint GL_TRUE = 1;
        public static uint GL_POINTS = 0x0000;
        public static uint GL_LINES = 0x0001;
        public static uint GL_LINE_LOOP = 0x0002;
        public static uint GL_LINE_STRIP = 0x0003;
        public static uint GL_TRIANGLES = 0x0004;
        public static uint GL_TRIANGLE_STRIP = 0x0005;
        public static uint GL_TRIANGLE_FAN = 0x0006;
        public static uint GL_NEVER = 0x0200;
        public static uint GL_LESS = 0x0201;
        public static uint GL_EQUAL = 0x0202;
        public static uint GL_LEQUAL = 0x0203;
        public static uint GL_GREATER = 0x0204;
        public static uint GL_NOTEQUAL = 0x0205;
        public static uint GL_GEQUAL = 0x0206;
        public static uint GL_ALWAYS = 0x0207;
        public static uint GL_ZERO = 0;
        public static uint GL_ONE = 1;
        public static uint GL_SRC_COLOR = 0x0300;
        public static uint GL_ONE_MINUS_SRC_COLOR = 0x0301;
        public static uint GL_SRC_ALPHA = 0x0302;
        public static uint GL_ONE_MINUS_SRC_ALPHA = 0x0303;
        public static uint GL_DST_ALPHA = 0x0304;
        public static uint GL_ONE_MINUS_DST_ALPHA = 0x0305;
        public static uint GL_DST_COLOR = 0x0306;
        public static uint GL_ONE_MINUS_DST_COLOR = 0x0307;
        public static uint GL_SRC_ALPHA_SATURATE = 0x0308;
        public static uint GL_CLIP_PLANE0 = 0x3000;
        public static uint GL_CLIP_PLANE1 = 0x3001;
        public static uint GL_CLIP_PLANE2 = 0x3002;
        public static uint GL_CLIP_PLANE3 = 0x3003;
        public static uint GL_CLIP_PLANE4 = 0x3004;
        public static uint GL_CLIP_PLANE5 = 0x3005;
        public static uint GL_FRONT = 0x0404;
        public static uint GL_BACK = 0x0405;
        public static uint GL_FRONT_AND_BACK = 0x0408;
        public static uint GL_FOG = 0x0B60;
        public static uint GL_LIGHTING = 0x0B50;
        public static uint GL_TEXTURE_2D = 0x0DE1;
        public static uint GL_CULL_FACE = 0x0B44;
        public static uint GL_ALPHA_TEST = 0x0BC0;
        public static uint GL_BLEND = 0x0BE2;
        public static uint GL_COLOR_LOGIC_OP = 0x0BF2;
        public static uint GL_DITHER = 0x0BD0;
        public static uint GL_STENCIL_TEST = 0x0B90;
        public static uint GL_DEPTH_TEST = 0x0B71;
        public static uint GL_POINT_SMOOTH = 0x0B10;
        public static uint GL_LINE_SMOOTH = 0x0B20;
        public static uint GL_SCISSOR_TEST = 0x0C11;
        public static uint GL_COLOR_MATERIAL = 0x0B57;
        public static uint GL_NORMALIZE = 0x0BA1;
        public static uint GL_RESCALE_NORMAL = 0x803A;
        public static uint GL_VERTEX_ARRAY = 0x8074;
        public static uint GL_NORMAL_ARRAY = 0x8075;
        public static uint GL_COLOR_ARRAY = 0x8076;
        public static uint GL_TEXTURE_COORD_ARRAY = 0x8078;
        public static uint GL_MULTISAMPLE = 0x809D;
        public static uint GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
        public static uint GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
        public static uint GL_SAMPLE_COVERAGE = 0x80A0;
        public static uint GL_NO_ERROR = 0;
        public static uint GL_INVALID_ENUM = 0x0500;
        public static uint GL_INVALID_VALUE = 0x0501;
        public static uint GL_INVALID_OPERATION = 0x0502;
        public static uint GL_STACK_OVERFLOW = 0x0503;
        public static uint GL_STACK_UNDERFLOW = 0x0504;
        public static uint GL_OUT_OF_MEMORY = 0x0505;
        public static uint GL_EXP = 0x0800;
        public static uint GL_EXP2 = 0x0801;
        public static uint GL_FOG_DENSITY = 0x0B62;
        public static uint GL_FOG_START = 0x0B63;
        public static uint GL_FOG_END = 0x0B64;
        public static uint GL_FOG_MODE = 0x0B65;
        public static uint GL_FOG_COLOR = 0x0B66;
        public static uint GL_CW = 0x0900;
        public static uint GL_CCW = 0x0901;
        public static uint GL_CURRENT_COLOR = 0x0B00;
        public static uint GL_CURRENT_NORMAL = 0x0B02;
        public static uint GL_CURRENT_TEXTURE_COORDS = 0x0B03;
        public static uint GL_POINT_SIZE = 0x0B11;
        public static uint GL_POINT_SIZE_MIN = 0x8126;
        public static uint GL_POINT_SIZE_MAX = 0x8127;
        public static uint GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
        public static uint GL_POINT_DISTANCE_ATTENUATION = 0x8129;
        public static uint GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
        public static uint GL_LINE_WIDTH = 0x0B21;
        public static uint GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
        public static uint GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
        public static uint GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
        public static uint GL_CULL_FACE_MODE = 0x0B45;
        public static uint GL_FRONT_FACE = 0x0B46;
        public static uint GL_SHADE_MODEL = 0x0B54;
        public static uint GL_DEPTH_RANGE = 0x0B70;
        public static uint GL_DEPTH_WRITEMASK = 0x0B72;
        public static uint GL_DEPTH_CLEAR_VALUE = 0x0B73;
        public static uint GL_DEPTH_FUNC = 0x0B74;
        public static uint GL_STENCIL_CLEAR_VALUE = 0x0B91;
        public static uint GL_STENCIL_FUNC = 0x0B92;
        public static uint GL_STENCIL_VALUE_MASK = 0x0B93;
        public static uint GL_STENCIL_FAIL = 0x0B94;
        public static uint GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
        public static uint GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
        public static uint GL_STENCIL_REF = 0x0B97;
        public static uint GL_STENCIL_WRITEMASK = 0x0B98;
        public static uint GL_MATRIX_MODE = 0x0BA0;
        public static uint GL_VIEWPORT = 0x0BA2;
        public static uint GL_MODELVIEW_STACK_DEPTH = 0x0BA3;
        public static uint GL_PROJECTION_STACK_DEPTH = 0x0BA4;
        public static uint GL_TEXTURE_STACK_DEPTH = 0x0BA5;
        public static uint GL_MODELVIEW_MATRIX = 0x0BA6;
        public static uint GL_PROJECTION_MATRIX = 0x0BA7;
        public static uint GL_TEXTURE_MATRIX = 0x0BA8;
        public static uint GL_ALPHA_TEST_FUNC = 0x0BC1;
        public static uint GL_ALPHA_TEST_REF = 0x0BC2;
        public static uint GL_BLEND_DST = 0x0BE0;
        public static uint GL_BLEND_SRC = 0x0BE1;
        public static uint GL_LOGIC_OP_MODE = 0x0BF0;
        public static uint GL_SCISSOR_BOX = 0x0C10;
        public static uint GL_COLOR_CLEAR_VALUE = 0x0C22;
        public static uint GL_COLOR_WRITEMASK = 0x0C23;
        public static uint GL_MAX_LIGHTS = 0x0D31;
        public static uint GL_MAX_CLIP_PLANES = 0x0D32;
        public static uint GL_MAX_TEXTURE_SIZE = 0x0D33;
        public static uint GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
        public static uint GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38;
        public static uint GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39;
        public static uint GL_MAX_VIEWPORT_DIMS = 0x0D3A;
        public static uint GL_MAX_TEXTURE_UNITS = 0x84E2;
        public static uint GL_SUBPIXEL_BITS = 0x0D50;
        public static uint GL_RED_BITS = 0x0D52;
        public static uint GL_GREEN_BITS = 0x0D53;
        public static uint GL_BLUE_BITS = 0x0D54;
        public static uint GL_ALPHA_BITS = 0x0D55;
        public static uint GL_DEPTH_BITS = 0x0D56;
        public static uint GL_STENCIL_BITS = 0x0D57;
        public static uint GL_POLYGON_OFFSET_UNITS = 0x2A00;
        public static uint GL_POLYGON_OFFSET_FILL = 0x8037;
        public static uint GL_POLYGON_OFFSET_FACTOR = 0x8038;
        public static uint GL_TEXTURE_BINDING_2D = 0x8069;
        public static uint GL_VERTEX_ARRAY_SIZE = 0x807A;
        public static uint GL_VERTEX_ARRAY_TYPE = 0x807B;
        public static uint GL_VERTEX_ARRAY_STRIDE = 0x807C;
        public static uint GL_NORMAL_ARRAY_TYPE = 0x807E;
        public static uint GL_NORMAL_ARRAY_STRIDE = 0x807F;
        public static uint GL_COLOR_ARRAY_SIZE = 0x8081;
        public static uint GL_COLOR_ARRAY_TYPE = 0x8082;
        public static uint GL_COLOR_ARRAY_STRIDE = 0x8083;
        public static uint GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088;
        public static uint GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089;
        public static uint GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
        public static uint GL_VERTEX_ARRAY_POINTER = 0x808E;
        public static uint GL_NORMAL_ARRAY_POINTER = 0x808F;
        public static uint GL_COLOR_ARRAY_POINTER = 0x8090;
        public static uint GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092;
        public static uint GL_SAMPLE_BUFFERS = 0x80A8;
        public static uint GL_SAMPLES = 0x80A9;
        public static uint GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
        public static uint GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
        public static uint GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
        public static uint GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
        public static uint GL_DONT_CARE = 0x1100;
        public static uint GL_FASTEST = 0x1101;
        public static uint GL_NICEST = 0x1102;
        public static uint GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
        public static uint GL_POINT_SMOOTH_HINT = 0x0C51;
        public static uint GL_LINE_SMOOTH_HINT = 0x0C52;
        public static uint GL_FOG_HINT = 0x0C54;
        public static uint GL_GENERATE_MIPMAP_HINT = 0x8192;
        public static uint GL_LIGHT_MODEL_AMBIENT = 0x0B53;
        public static uint GL_LIGHT_MODEL_TWO_SIDE = 0x0B52;
        public static uint GL_AMBIENT = 0x1200;
        public static uint GL_DIFFUSE = 0x1201;
        public static uint GL_SPECULAR = 0x1202;
        public static uint GL_POSITION = 0x1203;
        public static uint GL_SPOT_DIRECTION = 0x1204;
        public static uint GL_SPOT_EXPONENT = 0x1205;
        public static uint GL_SPOT_CUTOFF = 0x1206;
        public static uint GL_CONSTANT_ATTENUATION = 0x1207;
        public static uint GL_LINEAR_ATTENUATION = 0x1208;
        public static uint GL_QUADRATIC_ATTENUATION = 0x1209;
        public static uint GL_BYTE = 0x1400;
        public static uint GL_UNSIGNED_BYTE = 0x1401;
        public static uint GL_SHORT = 0x1402;
        public static uint GL_UNSIGNED_SHORT = 0x1403;
        public static uint GL_FLOAT = 0x1406;
        public static uint GL_FIXED = 0x140C;
        public static uint GL_CLEAR = 0x1500;
        public static uint GL_AND = 0x1501;
        public static uint GL_AND_REVERSE = 0x1502;
        public static uint GL_COPY = 0x1503;
        public static uint GL_AND_INVERTED = 0x1504;
        public static uint GL_NOOP = 0x1505;
        public static uint GL_XOR = 0x1506;
        public static uint GL_OR = 0x1507;
        public static uint GL_NOR = 0x1508;
        public static uint GL_EQUIV = 0x1509;
        public static uint GL_INVERT = 0x150A;
        public static uint GL_OR_REVERSE = 0x150B;
        public static uint GL_COPY_INVERTED = 0x150C;
        public static uint GL_OR_INVERTED = 0x150D;
        public static uint GL_NAND = 0x150E;
        public static uint GL_SET = 0x150F;
        public static uint GL_EMISSION = 0x1600;
        public static uint GL_SHININESS = 0x1601;
        public static uint GL_AMBIENT_AND_DIFFUSE = 0x1602;
        public static uint GL_MODELVIEW = 0x1700;
        public static uint GL_PROJECTION = 0x1701;
        public static uint GL_TEXTURE = 0x1702;
        public static uint GL_ALPHA = 0x1906;
        public static uint GL_RGB = 0x1907;
        public static uint GL_RGBA = 0x1908;
        public static uint GL_LUMINANCE = 0x1909;
        public static uint GL_LUMINANCE_ALPHA = 0x190A;
        public static uint GL_UNPACK_ALIGNMENT = 0x0CF5;
        public static uint GL_PACK_ALIGNMENT = 0x0D05;
        public static uint GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
        public static uint GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
        public static uint GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
        public static uint GL_FLAT = 0x1D00;
        public static uint GL_SMOOTH = 0x1D01;
        public static uint GL_KEEP = 0x1E00;
        public static uint GL_REPLACE = 0x1E01;
        public static uint GL_INCR = 0x1E02;
        public static uint GL_DECR = 0x1E03;
        public static uint GL_VENDOR = 0x1F00;
        public static uint GL_RENDERER = 0x1F01;
        public static uint GL_VERSION = 0x1F02;
        public static uint GL_EXTENSIONS = 0x1F03;
        public static uint GL_MODULATE = 0x2100;
        public static uint GL_DECAL = 0x2101;
        public static uint GL_ADD = 0x0104;
        public static uint GL_TEXTURE_ENV_MODE = 0x2200;
        public static uint GL_TEXTURE_ENV_COLOR = 0x2201;
        public static uint GL_TEXTURE_ENV = 0x2300;
        public static uint GL_NEAREST = 0x2600;
        public static uint GL_LINEAR = 0x2601;
        public static uint GL_NEAREST_MIPMAP_NEAREST = 0x2700;
        public static uint GL_LINEAR_MIPMAP_NEAREST = 0x2701;
        public static uint GL_NEAREST_MIPMAP_LINEAR = 0x2702;
        public static uint GL_LINEAR_MIPMAP_LINEAR = 0x2703;
        public static uint GL_TEXTURE_MAG_FILTER = 0x2800;
        public static uint GL_TEXTURE_MIN_FILTER = 0x2801;
        public static uint GL_TEXTURE_WRAP_S = 0x2802;
        public static uint GL_TEXTURE_WRAP_T = 0x2803;
        public static uint GL_GENERATE_MIPMAP = 0x8191;
        public static uint GL_TEXTURE0 = 0x84C0;
        public static uint GL_TEXTURE1 = 0x84C1;
        public static uint GL_TEXTURE2 = 0x84C2;
        public static uint GL_TEXTURE3 = 0x84C3;
        public static uint GL_TEXTURE4 = 0x84C4;
        public static uint GL_TEXTURE5 = 0x84C5;
        public static uint GL_TEXTURE6 = 0x84C6;
        public static uint GL_TEXTURE7 = 0x84C7;
        public static uint GL_TEXTURE8 = 0x84C8;
        public static uint GL_TEXTURE9 = 0x84C9;
        public static uint GL_TEXTURE10 = 0x84CA;
        public static uint GL_TEXTURE11 = 0x84CB;
        public static uint GL_TEXTURE12 = 0x84CC;
        public static uint GL_TEXTURE13 = 0x84CD;
        public static uint GL_TEXTURE14 = 0x84CE;
        public static uint GL_TEXTURE15 = 0x84CF;
        public static uint GL_TEXTURE16 = 0x84D0;
        public static uint GL_TEXTURE17 = 0x84D1;
        public static uint GL_TEXTURE18 = 0x84D2;
        public static uint GL_TEXTURE19 = 0x84D3;
        public static uint GL_TEXTURE20 = 0x84D4;
        public static uint GL_TEXTURE21 = 0x84D5;
        public static uint GL_TEXTURE22 = 0x84D6;
        public static uint GL_TEXTURE23 = 0x84D7;
        public static uint GL_TEXTURE24 = 0x84D8;
        public static uint GL_TEXTURE25 = 0x84D9;
        public static uint GL_TEXTURE26 = 0x84DA;
        public static uint GL_TEXTURE27 = 0x84DB;
        public static uint GL_TEXTURE28 = 0x84DC;
        public static uint GL_TEXTURE29 = 0x84DD;
        public static uint GL_TEXTURE30 = 0x84DE;
        public static uint GL_TEXTURE31 = 0x84DF;
        public static uint GL_ACTIVE_TEXTURE = 0x84E0;
        public static uint GL_CLIENT_ACTIVE_TEXTURE = 0x84E1;
        public static uint GL_REPEAT = 0x2901;
        public static uint GL_CLAMP_TO_EDGE = 0x812F;
        public static uint GL_LIGHT0 = 0x4000;
        public static uint GL_LIGHT1 = 0x4001;
        public static uint GL_LIGHT2 = 0x4002;
        public static uint GL_LIGHT3 = 0x4003;
        public static uint GL_LIGHT4 = 0x4004;
        public static uint GL_LIGHT5 = 0x4005;
        public static uint GL_LIGHT6 = 0x4006;
        public static uint GL_LIGHT7 = 0x4007;
        public static uint GL_ARRAY_BUFFER = 0x8892;
        public static uint GL_ELEMENT_ARRAY_BUFFER = 0x8893;
        public static uint GL_ARRAY_BUFFER_BINDING = 0x8894;
        public static uint GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
        public static uint GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
        public static uint GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
        public static uint GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898;
        public static uint GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
        public static uint GL_STATIC_DRAW = 0x88E4;
        public static uint GL_DYNAMIC_DRAW = 0x88E8;
        public static uint GL_BUFFER_SIZE = 0x8764;
        public static uint GL_BUFFER_USAGE = 0x8765;
        public static uint GL_SUBTRACT = 0x84E7;
        public static uint GL_COMBINE = 0x8570;
        public static uint GL_COMBINE_RGB = 0x8571;
        public static uint GL_COMBINE_ALPHA = 0x8572;
        public static uint GL_RGB_SCALE = 0x8573;
        public static uint GL_ADD_SIGNED = 0x8574;
        public static uint GL_INTERPOLATE = 0x8575;
        public static uint GL_CONSTANT = 0x8576;
        public static uint GL_PRIMARY_COLOR = 0x8577;
        public static uint GL_PREVIOUS = 0x8578;
        public static uint GL_OPERAND0_RGB = 0x8590;
        public static uint GL_OPERAND1_RGB = 0x8591;
        public static uint GL_OPERAND2_RGB = 0x8592;
        public static uint GL_OPERAND0_ALPHA = 0x8598;
        public static uint GL_OPERAND1_ALPHA = 0x8599;
        public static uint GL_OPERAND2_ALPHA = 0x859A;
        public static uint GL_ALPHA_SCALE = 0x0D1C;
        public static uint GL_SRC0_RGB = 0x8580;
        public static uint GL_SRC1_RGB = 0x8581;
        public static uint GL_SRC2_RGB = 0x8582;
        public static uint GL_SRC0_ALPHA = 0x8588;
        public static uint GL_SRC1_ALPHA = 0x8589;
        public static uint GL_SRC2_ALPHA = 0x858A;
        public static uint GL_DOT3_RGB = 0x86AE;
        public static uint GL_DOT3_RGBA = 0x86AF;
        public static uint GL_FUNC_ADD = 0x8006;
        public static uint GL_BLEND_EQUATION = 0x8009;
        public static uint GL_BLEND_EQUATION_RGB = 0x8009;
        public static uint GL_BLEND_EQUATION_ALPHA = 0x883D;
        public static uint GL_FUNC_SUBTRACT = 0x800A;
        public static uint GL_FUNC_REVERSE_SUBTRACT = 0x800B;
        public static uint GL_BLEND_DST_RGB = 0x80C8;
        public static uint GL_BLEND_SRC_RGB = 0x80C9;
        public static uint GL_BLEND_DST_ALPHA = 0x80CA;
        public static uint GL_BLEND_SRC_ALPHA = 0x80CB;
        public static uint GL_CONSTANT_COLOR = 0x8001;
        public static uint GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
        public static uint GL_CONSTANT_ALPHA = 0x8003;
        public static uint GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
        public static uint GL_BLEND_COLOR = 0x8005;
        public static uint GL_STREAM_DRAW = 0x88E0;
        public static uint GL_CURRENT_VERTEX_ATTRIB = 0x8626;
        public static uint GL_STENCIL_BACK_FUNC = 0x8800;
        public static uint GL_STENCIL_BACK_FAIL = 0x8801;
        public static uint GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
        public static uint GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
        public static uint GL_STENCIL_BACK_REF = 0x8CA3;
        public static uint GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
        public static uint GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
        public static uint GL_INT = 0x1404;
        public static uint GL_UNSIGNED_INT = 0x1405;
        public static uint GL_DEPTH_COMPONENT = 0x1902;
        public static uint GL_FRAGMENT_SHADER = 0x8B30;
        public static uint GL_VERTEX_SHADER = 0x8B31;
        public static uint GL_MAX_VERTEX_ATTRIBS = 0x8869;
        public static uint GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
        public static uint GL_MAX_VARYING_VECTORS = 0x8DFC;
        public static uint GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
        public static uint GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
        public static uint GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
        public static uint GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
        public static uint GL_SHADER_TYPE = 0x8B4F;
        public static uint GL_DELETE_STATUS = 0x8B80;
        public static uint GL_LINK_STATUS = 0x8B82;
        public static uint GL_VALIDATE_STATUS = 0x8B83;
        public static uint GL_ATTACHED_SHADERS = 0x8B85;
        public static uint GL_ACTIVE_UNIFORMS = 0x8B86;
        public static uint GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
        public static uint GL_ACTIVE_ATTRIBUTES = 0x8B89;
        public static uint GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
        public static uint GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
        public static uint GL_CURRENT_PROGRAM = 0x8B8D;
        public static uint GL_INCR_WRAP = 0x8507;
        public static uint GL_DECR_WRAP = 0x8508;
        public static uint GL_TEXTURE_CUBE_MAP = 0x8513;
        public static uint GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
        public static uint GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
        public static uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
        public static uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
        public static uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
        public static uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
        public static uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
        public static uint GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
        public static uint GL_MIRRORED_REPEAT = 0x8370;
        public static uint GL_FLOAT_VEC2 = 0x8B50;
        public static uint GL_FLOAT_VEC3 = 0x8B51;
        public static uint GL_FLOAT_VEC4 = 0x8B52;
        public static uint GL_INT_VEC2 = 0x8B53;
        public static uint GL_INT_VEC3 = 0x8B54;
        public static uint GL_INT_VEC4 = 0x8B55;
        public static uint GL_BOOL = 0x8B56;
        public static uint GL_BOOL_VEC2 = 0x8B57;
        public static uint GL_BOOL_VEC3 = 0x8B58;
        public static uint GL_BOOL_VEC4 = 0x8B59;
        public static uint GL_FLOAT_MAT2 = 0x8B5A;
        public static uint GL_FLOAT_MAT3 = 0x8B5B;
        public static uint GL_FLOAT_MAT4 = 0x8B5C;
        public static uint GL_SAMPLER_2D = 0x8B5E;
        public static uint GL_SAMPLER_CUBE = 0x8B60;
        public static uint GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
        public static uint GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
        public static uint GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
        public static uint GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
        public static uint GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
        public static uint GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
        public static uint GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
        public static uint GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
        public static uint GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
        public static uint GL_COMPILE_STATUS = 0x8B81;
        public static uint GL_INFO_LOG_LENGTH = 0x8B84;
        public static uint GL_SHADER_SOURCE_LENGTH = 0x8B88;
        public static uint GL_SHADER_COMPILER = 0x8DFA;
        public static uint GL_SHADER_BINARY_FORMATS = 0x8DF8;
        public static uint GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
        public static uint GL_LOW_FLOAT = 0x8DF0;
        public static uint GL_MEDIUM_FLOAT = 0x8DF1;
        public static uint GL_HIGH_FLOAT = 0x8DF2;
        public static uint GL_LOW_INT = 0x8DF3;
        public static uint GL_MEDIUM_INT = 0x8DF4;
        public static uint GL_HIGH_INT = 0x8DF5;
        public static uint GL_FRAMEBUFFER = 0x8D40;
        public static uint GL_RENDERBUFFER = 0x8D41;
        public static uint GL_RGBA4 = 0x8056;
        public static uint GL_RGB5_A1 = 0x8057;
        public static uint GL_RGB565 = 0x8D62;
        public static uint GL_DEPTH_COMPONENT16 = 0x81A5;
        public static uint GL_STENCIL_INDEX8 = 0x8D48;
        public static uint GL_RENDERBUFFER_WIDTH = 0x8D42;
        public static uint GL_RENDERBUFFER_HEIGHT = 0x8D43;
        public static uint GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
        public static uint GL_RENDERBUFFER_RED_SIZE = 0x8D50;
        public static uint GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
        public static uint GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
        public static uint GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
        public static uint GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
        public static uint GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
        public static uint GL_COLOR_ATTACHMENT0 = 0x8CE0;
        public static uint GL_DEPTH_ATTACHMENT = 0x8D00;
        public static uint GL_STENCIL_ATTACHMENT = 0x8D20;
        public static uint GL_NONE = 0;
        public static uint GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
        public static uint GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
        public static uint GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
        public static uint GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;
        public static uint GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
        public static uint GL_FRAMEBUFFER_BINDING = 0x8CA6;
        public static uint GL_RENDERBUFFER_BINDING = 0x8CA7;
        public static uint GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
        public static uint GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
        #endregion

        #region Commands
        public static void glAlphaFunc(uint func, float @ref)
        {
            if (glAlphaFuncPtr == null)
            {
                glAlphaFuncPtr = (glAlphaFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glAlphaFunc"), typeof(glAlphaFuncFunc));
            }
            glAlphaFuncPtr(func, @ref);
        }
        public static void glClearColor(float red, float green, float blue, float alpha)
        {
            if (glClearColorPtr == null)
            {
                glClearColorPtr = (glClearColorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearColor"), typeof(glClearColorFunc));
            }
            glClearColorPtr(red, green, blue, alpha);
        }
        public static void glClearDepthf(float d)
        {
            if (glClearDepthfPtr == null)
            {
                glClearDepthfPtr = (glClearDepthfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearDepthf"), typeof(glClearDepthfFunc));
            }
            glClearDepthfPtr(d);
        }
        public static void glClipPlanef(uint p, IntPtr eqn)
        {
            if (glClipPlanefPtr == null)
            {
                glClipPlanefPtr = (glClipPlanefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClipPlanef"), typeof(glClipPlanefFunc));
            }
            glClipPlanefPtr(p, eqn);
        }
        public static void glColor4f(float red, float green, float blue, float alpha)
        {
            if (glColor4fPtr == null)
            {
                glColor4fPtr = (glColor4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4f"), typeof(glColor4fFunc));
            }
            glColor4fPtr(red, green, blue, alpha);
        }
        public static void glDepthRangef(float n, float f)
        {
            if (glDepthRangefPtr == null)
            {
                glDepthRangefPtr = (glDepthRangefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthRangef"), typeof(glDepthRangefFunc));
            }
            glDepthRangefPtr(n, f);
        }
        public static void glFogf(uint pname, float param)
        {
            if (glFogfPtr == null)
            {
                glFogfPtr = (glFogfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogf"), typeof(glFogfFunc));
            }
            glFogfPtr(pname, param);
        }
        public static void glFogfv(uint pname, IntPtr @params)
        {
            if (glFogfvPtr == null)
            {
                glFogfvPtr = (glFogfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogfv"), typeof(glFogfvFunc));
            }
            glFogfvPtr(pname, @params);
        }
        public static void glFrustumf(float l, float r, float b, float t, float n, float f)
        {
            if (glFrustumfPtr == null)
            {
                glFrustumfPtr = (glFrustumfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFrustumf"), typeof(glFrustumfFunc));
            }
            glFrustumfPtr(l, r, b, t, n, f);
        }
        public static void glGetClipPlanef(uint plane, IntPtr equation)
        {
            if (glGetClipPlanefPtr == null)
            {
                glGetClipPlanefPtr = (glGetClipPlanefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetClipPlanef"), typeof(glGetClipPlanefFunc));
            }
            glGetClipPlanefPtr(plane, equation);
        }
        public static void glGetFloatv(uint pname, IntPtr data)
        {
            if (glGetFloatvPtr == null)
            {
                glGetFloatvPtr = (glGetFloatvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFloatv"), typeof(glGetFloatvFunc));
            }
            glGetFloatvPtr(pname, data);
        }
        public static void glGetLightfv(uint light, uint pname, IntPtr @params)
        {
            if (glGetLightfvPtr == null)
            {
                glGetLightfvPtr = (glGetLightfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetLightfv"), typeof(glGetLightfvFunc));
            }
            glGetLightfvPtr(light, pname, @params);
        }
        public static void glGetMaterialfv(uint face, uint pname, IntPtr @params)
        {
            if (glGetMaterialfvPtr == null)
            {
                glGetMaterialfvPtr = (glGetMaterialfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetMaterialfv"), typeof(glGetMaterialfvFunc));
            }
            glGetMaterialfvPtr(face, pname, @params);
        }
        public static void glGetTexEnvfv(uint target, uint pname, IntPtr @params)
        {
            if (glGetTexEnvfvPtr == null)
            {
                glGetTexEnvfvPtr = (glGetTexEnvfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexEnvfv"), typeof(glGetTexEnvfvFunc));
            }
            glGetTexEnvfvPtr(target, pname, @params);
        }
        public static void glGetTexParameterfv(uint target, uint pname, IntPtr @params)
        {
            if (glGetTexParameterfvPtr == null)
            {
                glGetTexParameterfvPtr = (glGetTexParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameterfv"), typeof(glGetTexParameterfvFunc));
            }
            glGetTexParameterfvPtr(target, pname, @params);
        }
        public static void glLightModelf(uint pname, float param)
        {
            if (glLightModelfPtr == null)
            {
                glLightModelfPtr = (glLightModelfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightModelf"), typeof(glLightModelfFunc));
            }
            glLightModelfPtr(pname, param);
        }
        public static void glLightModelfv(uint pname, IntPtr @params)
        {
            if (glLightModelfvPtr == null)
            {
                glLightModelfvPtr = (glLightModelfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightModelfv"), typeof(glLightModelfvFunc));
            }
            glLightModelfvPtr(pname, @params);
        }
        public static void glLightf(uint light, uint pname, float param)
        {
            if (glLightfPtr == null)
            {
                glLightfPtr = (glLightfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightf"), typeof(glLightfFunc));
            }
            glLightfPtr(light, pname, param);
        }
        public static void glLightfv(uint light, uint pname, IntPtr @params)
        {
            if (glLightfvPtr == null)
            {
                glLightfvPtr = (glLightfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightfv"), typeof(glLightfvFunc));
            }
            glLightfvPtr(light, pname, @params);
        }
        public static void glLineWidth(float width)
        {
            if (glLineWidthPtr == null)
            {
                glLineWidthPtr = (glLineWidthFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLineWidth"), typeof(glLineWidthFunc));
            }
            glLineWidthPtr(width);
        }
        public static void glLoadMatrixf(IntPtr m)
        {
            if (glLoadMatrixfPtr == null)
            {
                glLoadMatrixfPtr = (glLoadMatrixfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLoadMatrixf"), typeof(glLoadMatrixfFunc));
            }
            glLoadMatrixfPtr(m);
        }
        public static void glMaterialf(uint face, uint pname, float param)
        {
            if (glMaterialfPtr == null)
            {
                glMaterialfPtr = (glMaterialfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMaterialf"), typeof(glMaterialfFunc));
            }
            glMaterialfPtr(face, pname, param);
        }
        public static void glMaterialfv(uint face, uint pname, IntPtr @params)
        {
            if (glMaterialfvPtr == null)
            {
                glMaterialfvPtr = (glMaterialfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMaterialfv"), typeof(glMaterialfvFunc));
            }
            glMaterialfvPtr(face, pname, @params);
        }
        public static void glMultMatrixf(IntPtr m)
        {
            if (glMultMatrixfPtr == null)
            {
                glMultMatrixfPtr = (glMultMatrixfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultMatrixf"), typeof(glMultMatrixfFunc));
            }
            glMultMatrixfPtr(m);
        }
        public static void glMultiTexCoord4f(uint target, float s, float t, float r, float q)
        {
            if (glMultiTexCoord4fPtr == null)
            {
                glMultiTexCoord4fPtr = (glMultiTexCoord4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord4f"), typeof(glMultiTexCoord4fFunc));
            }
            glMultiTexCoord4fPtr(target, s, t, r, q);
        }
        public static void glNormal3f(float nx, float ny, float nz)
        {
            if (glNormal3fPtr == null)
            {
                glNormal3fPtr = (glNormal3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3f"), typeof(glNormal3fFunc));
            }
            glNormal3fPtr(nx, ny, nz);
        }
        public static void glOrthof(float l, float r, float b, float t, float n, float f)
        {
            if (glOrthofPtr == null)
            {
                glOrthofPtr = (glOrthofFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glOrthof"), typeof(glOrthofFunc));
            }
            glOrthofPtr(l, r, b, t, n, f);
        }
        public static void glPointParameterf(uint pname, float param)
        {
            if (glPointParameterfPtr == null)
            {
                glPointParameterfPtr = (glPointParameterfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameterf"), typeof(glPointParameterfFunc));
            }
            glPointParameterfPtr(pname, param);
        }
        public static void glPointParameterfv(uint pname, IntPtr @params)
        {
            if (glPointParameterfvPtr == null)
            {
                glPointParameterfvPtr = (glPointParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameterfv"), typeof(glPointParameterfvFunc));
            }
            glPointParameterfvPtr(pname, @params);
        }
        public static void glPointSize(float size)
        {
            if (glPointSizePtr == null)
            {
                glPointSizePtr = (glPointSizeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointSize"), typeof(glPointSizeFunc));
            }
            glPointSizePtr(size);
        }
        public static void glPolygonOffset(float factor, float units)
        {
            if (glPolygonOffsetPtr == null)
            {
                glPolygonOffsetPtr = (glPolygonOffsetFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPolygonOffset"), typeof(glPolygonOffsetFunc));
            }
            glPolygonOffsetPtr(factor, units);
        }
        public static void glRotatef(float angle, float x, float y, float z)
        {
            if (glRotatefPtr == null)
            {
                glRotatefPtr = (glRotatefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRotatef"), typeof(glRotatefFunc));
            }
            glRotatefPtr(angle, x, y, z);
        }
        public static void glScalef(float x, float y, float z)
        {
            if (glScalefPtr == null)
            {
                glScalefPtr = (glScalefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScalef"), typeof(glScalefFunc));
            }
            glScalefPtr(x, y, z);
        }
        public static void glTexEnvf(uint target, uint pname, float param)
        {
            if (glTexEnvfPtr == null)
            {
                glTexEnvfPtr = (glTexEnvfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnvf"), typeof(glTexEnvfFunc));
            }
            glTexEnvfPtr(target, pname, param);
        }
        public static void glTexEnvfv(uint target, uint pname, IntPtr @params)
        {
            if (glTexEnvfvPtr == null)
            {
                glTexEnvfvPtr = (glTexEnvfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnvfv"), typeof(glTexEnvfvFunc));
            }
            glTexEnvfvPtr(target, pname, @params);
        }
        public static void glTexParameterf(uint target, uint pname, float param)
        {
            if (glTexParameterfPtr == null)
            {
                glTexParameterfPtr = (glTexParameterfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterf"), typeof(glTexParameterfFunc));
            }
            glTexParameterfPtr(target, pname, param);
        }
        public static void glTexParameterfv(uint target, uint pname, IntPtr @params)
        {
            if (glTexParameterfvPtr == null)
            {
                glTexParameterfvPtr = (glTexParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterfv"), typeof(glTexParameterfvFunc));
            }
            glTexParameterfvPtr(target, pname, @params);
        }
        public static void glTranslatef(float x, float y, float z)
        {
            if (glTranslatefPtr == null)
            {
                glTranslatefPtr = (glTranslatefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTranslatef"), typeof(glTranslatefFunc));
            }
            glTranslatefPtr(x, y, z);
        }
        public static void glActiveTexture(uint texture)
        {
            if (glActiveTexturePtr == null)
            {
                glActiveTexturePtr = (glActiveTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glActiveTexture"), typeof(glActiveTextureFunc));
            }
            glActiveTexturePtr(texture);
        }
        public static void glAlphaFuncx(uint func, int @ref)
        {
            if (glAlphaFuncxPtr == null)
            {
                glAlphaFuncxPtr = (glAlphaFuncxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glAlphaFuncx"), typeof(glAlphaFuncxFunc));
            }
            glAlphaFuncxPtr(func, @ref);
        }
        public static void glBindBuffer(uint target, uint buffer)
        {
            if (glBindBufferPtr == null)
            {
                glBindBufferPtr = (glBindBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindBuffer"), typeof(glBindBufferFunc));
            }
            glBindBufferPtr(target, buffer);
        }
        public static void glBindTexture(uint target, uint texture)
        {
            if (glBindTexturePtr == null)
            {
                glBindTexturePtr = (glBindTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindTexture"), typeof(glBindTextureFunc));
            }
            glBindTexturePtr(target, texture);
        }
        public static void glBlendFunc(uint sfactor, uint dfactor)
        {
            if (glBlendFuncPtr == null)
            {
                glBlendFuncPtr = (glBlendFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendFunc"), typeof(glBlendFuncFunc));
            }
            glBlendFuncPtr(sfactor, dfactor);
        }
        public static void glBufferData(uint target, int size, IntPtr data, uint usage)
        {
            if (glBufferDataPtr == null)
            {
                glBufferDataPtr = (glBufferDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBufferData"), typeof(glBufferDataFunc));
            }
            glBufferDataPtr(target, size, data, usage);
        }
        public static void glBufferSubData(uint target, IntPtr offset, int size, IntPtr data)
        {
            if (glBufferSubDataPtr == null)
            {
                glBufferSubDataPtr = (glBufferSubDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBufferSubData"), typeof(glBufferSubDataFunc));
            }
            glBufferSubDataPtr(target, offset, size, data);
        }
        public static void glClear(uint mask)
        {
            if (glClearPtr == null)
            {
                glClearPtr = (glClearFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClear"), typeof(glClearFunc));
            }
            glClearPtr(mask);
        }
        public static void glClearColorx(int red, int green, int blue, int alpha)
        {
            if (glClearColorxPtr == null)
            {
                glClearColorxPtr = (glClearColorxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearColorx"), typeof(glClearColorxFunc));
            }
            glClearColorxPtr(red, green, blue, alpha);
        }
        public static void glClearDepthx(int depth)
        {
            if (glClearDepthxPtr == null)
            {
                glClearDepthxPtr = (glClearDepthxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearDepthx"), typeof(glClearDepthxFunc));
            }
            glClearDepthxPtr(depth);
        }
        public static void glClearStencil(int s)
        {
            if (glClearStencilPtr == null)
            {
                glClearStencilPtr = (glClearStencilFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearStencil"), typeof(glClearStencilFunc));
            }
            glClearStencilPtr(s);
        }
        public static void glClientActiveTexture(uint texture)
        {
            if (glClientActiveTexturePtr == null)
            {
                glClientActiveTexturePtr = (glClientActiveTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClientActiveTexture"), typeof(glClientActiveTextureFunc));
            }
            glClientActiveTexturePtr(texture);
        }
        public static void glClipPlanex(uint plane, IntPtr equation)
        {
            if (glClipPlanexPtr == null)
            {
                glClipPlanexPtr = (glClipPlanexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClipPlanex"), typeof(glClipPlanexFunc));
            }
            glClipPlanexPtr(plane, equation);
        }
        public static void glColor4ub(byte red, byte green, byte blue, byte alpha)
        {
            if (glColor4ubPtr == null)
            {
                glColor4ubPtr = (glColor4ubFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4ub"), typeof(glColor4ubFunc));
            }
            glColor4ubPtr(red, green, blue, alpha);
        }
        public static void glColor4x(int red, int green, int blue, int alpha)
        {
            if (glColor4xPtr == null)
            {
                glColor4xPtr = (glColor4xFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4x"), typeof(glColor4xFunc));
            }
            glColor4xPtr(red, green, blue, alpha);
        }
        public static void glColorMask(bool red, bool green, bool blue, bool alpha)
        {
            if (glColorMaskPtr == null)
            {
                glColorMaskPtr = (glColorMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorMask"), typeof(glColorMaskFunc));
            }
            glColorMaskPtr(red, green, blue, alpha);
        }
        public static void glColorPointer(int size, uint type, int stride, IntPtr pointer)
        {
            if (glColorPointerPtr == null)
            {
                glColorPointerPtr = (glColorPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorPointer"), typeof(glColorPointerFunc));
            }
            glColorPointerPtr(size, type, stride, pointer);
        }
        public static void glCompressedTexImage2D(uint target, int level, uint internalformat, int width, int height, int border, int imageSize, IntPtr data)
        {
            if (glCompressedTexImage2DPtr == null)
            {
                glCompressedTexImage2DPtr = (glCompressedTexImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexImage2D"), typeof(glCompressedTexImage2DFunc));
            }
            glCompressedTexImage2DPtr(target, level, internalformat, width, height, border, imageSize, data);
        }
        public static void glCompressedTexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, IntPtr data)
        {
            if (glCompressedTexSubImage2DPtr == null)
            {
                glCompressedTexSubImage2DPtr = (glCompressedTexSubImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexSubImage2D"), typeof(glCompressedTexSubImage2DFunc));
            }
            glCompressedTexSubImage2DPtr(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }
        public static void glCopyTexImage2D(uint target, int level, uint internalformat, int x, int y, int width, int height, int border)
        {
            if (glCopyTexImage2DPtr == null)
            {
                glCopyTexImage2DPtr = (glCopyTexImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexImage2D"), typeof(glCopyTexImage2DFunc));
            }
            glCopyTexImage2DPtr(target, level, internalformat, x, y, width, height, border);
        }
        public static void glCopyTexSubImage2D(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            if (glCopyTexSubImage2DPtr == null)
            {
                glCopyTexSubImage2DPtr = (glCopyTexSubImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexSubImage2D"), typeof(glCopyTexSubImage2DFunc));
            }
            glCopyTexSubImage2DPtr(target, level, xoffset, yoffset, x, y, width, height);
        }
        public static void glCullFace(uint mode)
        {
            if (glCullFacePtr == null)
            {
                glCullFacePtr = (glCullFaceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCullFace"), typeof(glCullFaceFunc));
            }
            glCullFacePtr(mode);
        }
        public static void glDeleteBuffers(int n, IntPtr buffers)
        {
            if (glDeleteBuffersPtr == null)
            {
                glDeleteBuffersPtr = (glDeleteBuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteBuffers"), typeof(glDeleteBuffersFunc));
            }
            glDeleteBuffersPtr(n, buffers);
        }
        public static void glDeleteTextures(int n, IntPtr textures)
        {
            if (glDeleteTexturesPtr == null)
            {
                glDeleteTexturesPtr = (glDeleteTexturesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteTextures"), typeof(glDeleteTexturesFunc));
            }
            glDeleteTexturesPtr(n, textures);
        }
        public static void glDepthFunc(uint func)
        {
            if (glDepthFuncPtr == null)
            {
                glDepthFuncPtr = (glDepthFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthFunc"), typeof(glDepthFuncFunc));
            }
            glDepthFuncPtr(func);
        }
        public static void glDepthMask(bool flag)
        {
            if (glDepthMaskPtr == null)
            {
                glDepthMaskPtr = (glDepthMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthMask"), typeof(glDepthMaskFunc));
            }
            glDepthMaskPtr(flag);
        }
        public static void glDepthRangex(int n, int f)
        {
            if (glDepthRangexPtr == null)
            {
                glDepthRangexPtr = (glDepthRangexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthRangex"), typeof(glDepthRangexFunc));
            }
            glDepthRangexPtr(n, f);
        }
        public static void glDisable(uint cap)
        {
            if (glDisablePtr == null)
            {
                glDisablePtr = (glDisableFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDisable"), typeof(glDisableFunc));
            }
            glDisablePtr(cap);
        }
        public static void glDisableClientState(uint array)
        {
            if (glDisableClientStatePtr == null)
            {
                glDisableClientStatePtr = (glDisableClientStateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDisableClientState"), typeof(glDisableClientStateFunc));
            }
            glDisableClientStatePtr(array);
        }
        public static void glDrawArrays(uint mode, int first, int count)
        {
            if (glDrawArraysPtr == null)
            {
                glDrawArraysPtr = (glDrawArraysFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawArrays"), typeof(glDrawArraysFunc));
            }
            glDrawArraysPtr(mode, first, count);
        }
        public static void glDrawElements(uint mode, int count, uint type, IntPtr indices)
        {
            if (glDrawElementsPtr == null)
            {
                glDrawElementsPtr = (glDrawElementsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElements"), typeof(glDrawElementsFunc));
            }
            glDrawElementsPtr(mode, count, type, indices);
        }
        public static void glEnable(uint cap)
        {
            if (glEnablePtr == null)
            {
                glEnablePtr = (glEnableFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnable"), typeof(glEnableFunc));
            }
            glEnablePtr(cap);
        }
        public static void glEnableClientState(uint array)
        {
            if (glEnableClientStatePtr == null)
            {
                glEnableClientStatePtr = (glEnableClientStateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnableClientState"), typeof(glEnableClientStateFunc));
            }
            glEnableClientStatePtr(array);
        }
        public static void glFinish()
        {
            if (glFinishPtr == null)
            {
                glFinishPtr = (glFinishFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFinish"), typeof(glFinishFunc));
            }
            glFinishPtr();
        }
        public static void glFlush()
        {
            if (glFlushPtr == null)
            {
                glFlushPtr = (glFlushFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFlush"), typeof(glFlushFunc));
            }
            glFlushPtr();
        }
        public static void glFogx(uint pname, int param)
        {
            if (glFogxPtr == null)
            {
                glFogxPtr = (glFogxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogx"), typeof(glFogxFunc));
            }
            glFogxPtr(pname, param);
        }
        public static void glFogxv(uint pname, IntPtr param)
        {
            if (glFogxvPtr == null)
            {
                glFogxvPtr = (glFogxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogxv"), typeof(glFogxvFunc));
            }
            glFogxvPtr(pname, param);
        }
        public static void glFrontFace(uint mode)
        {
            if (glFrontFacePtr == null)
            {
                glFrontFacePtr = (glFrontFaceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFrontFace"), typeof(glFrontFaceFunc));
            }
            glFrontFacePtr(mode);
        }
        public static void glFrustumx(int l, int r, int b, int t, int n, int f)
        {
            if (glFrustumxPtr == null)
            {
                glFrustumxPtr = (glFrustumxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFrustumx"), typeof(glFrustumxFunc));
            }
            glFrustumxPtr(l, r, b, t, n, f);
        }
        public static void glGetBooleanv(uint pname, IntPtr data)
        {
            if (glGetBooleanvPtr == null)
            {
                glGetBooleanvPtr = (glGetBooleanvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBooleanv"), typeof(glGetBooleanvFunc));
            }
            glGetBooleanvPtr(pname, data);
        }
        public static void glGetBufferParameteriv(uint target, uint pname, IntPtr @params)
        {
            if (glGetBufferParameterivPtr == null)
            {
                glGetBufferParameterivPtr = (glGetBufferParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBufferParameteriv"), typeof(glGetBufferParameterivFunc));
            }
            glGetBufferParameterivPtr(target, pname, @params);
        }
        public static void glGetClipPlanex(uint plane, IntPtr equation)
        {
            if (glGetClipPlanexPtr == null)
            {
                glGetClipPlanexPtr = (glGetClipPlanexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetClipPlanex"), typeof(glGetClipPlanexFunc));
            }
            glGetClipPlanexPtr(plane, equation);
        }
        public static void glGenBuffers(int n, IntPtr buffers)
        {
            if (glGenBuffersPtr == null)
            {
                glGenBuffersPtr = (glGenBuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenBuffers"), typeof(glGenBuffersFunc));
            }
            glGenBuffersPtr(n, buffers);
        }
        public static void glGenTextures(int n, IntPtr textures)
        {
            if (glGenTexturesPtr == null)
            {
                glGenTexturesPtr = (glGenTexturesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenTextures"), typeof(glGenTexturesFunc));
            }
            glGenTexturesPtr(n, textures);
        }
        public static uint glGetError()
        {
            if (glGetErrorPtr == null)
            {
                glGetErrorPtr = (glGetErrorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetError"), typeof(glGetErrorFunc));
            }
            return glGetErrorPtr();
        }
        public static void glGetFixedv(uint pname, IntPtr @params)
        {
            if (glGetFixedvPtr == null)
            {
                glGetFixedvPtr = (glGetFixedvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFixedv"), typeof(glGetFixedvFunc));
            }
            glGetFixedvPtr(pname, @params);
        }
        public static void glGetIntegerv(uint pname, IntPtr data)
        {
            if (glGetIntegervPtr == null)
            {
                glGetIntegervPtr = (glGetIntegervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetIntegerv"), typeof(glGetIntegervFunc));
            }
            glGetIntegervPtr(pname, data);
        }
        public static void glGetLightxv(uint light, uint pname, IntPtr @params)
        {
            if (glGetLightxvPtr == null)
            {
                glGetLightxvPtr = (glGetLightxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetLightxv"), typeof(glGetLightxvFunc));
            }
            glGetLightxvPtr(light, pname, @params);
        }
        public static void glGetMaterialxv(uint face, uint pname, IntPtr @params)
        {
            if (glGetMaterialxvPtr == null)
            {
                glGetMaterialxvPtr = (glGetMaterialxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetMaterialxv"), typeof(glGetMaterialxvFunc));
            }
            glGetMaterialxvPtr(face, pname, @params);
        }
        public static void glGetPointerv(uint pname, IntPtr @params)
        {
            if (glGetPointervPtr == null)
            {
                glGetPointervPtr = (glGetPointervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetPointerv"), typeof(glGetPointervFunc));
            }
            glGetPointervPtr(pname, @params);
        }
        public static IntPtr glGetString(uint name)
        {
            if (glGetStringPtr == null)
            {
                glGetStringPtr = (glGetStringFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetString"), typeof(glGetStringFunc));
            }
            return glGetStringPtr(name);
        }
        public static void glGetTexEnviv(uint target, uint pname, IntPtr @params)
        {
            if (glGetTexEnvivPtr == null)
            {
                glGetTexEnvivPtr = (glGetTexEnvivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexEnviv"), typeof(glGetTexEnvivFunc));
            }
            glGetTexEnvivPtr(target, pname, @params);
        }
        public static void glGetTexEnvxv(uint target, uint pname, IntPtr @params)
        {
            if (glGetTexEnvxvPtr == null)
            {
                glGetTexEnvxvPtr = (glGetTexEnvxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexEnvxv"), typeof(glGetTexEnvxvFunc));
            }
            glGetTexEnvxvPtr(target, pname, @params);
        }
        public static void glGetTexParameteriv(uint target, uint pname, IntPtr @params)
        {
            if (glGetTexParameterivPtr == null)
            {
                glGetTexParameterivPtr = (glGetTexParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameteriv"), typeof(glGetTexParameterivFunc));
            }
            glGetTexParameterivPtr(target, pname, @params);
        }
        public static void glGetTexParameterxv(uint target, uint pname, IntPtr @params)
        {
            if (glGetTexParameterxvPtr == null)
            {
                glGetTexParameterxvPtr = (glGetTexParameterxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameterxv"), typeof(glGetTexParameterxvFunc));
            }
            glGetTexParameterxvPtr(target, pname, @params);
        }
        public static void glHint(uint target, uint mode)
        {
            if (glHintPtr == null)
            {
                glHintPtr = (glHintFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glHint"), typeof(glHintFunc));
            }
            glHintPtr(target, mode);
        }
        public static bool glIsBuffer(uint buffer)
        {
            if (glIsBufferPtr == null)
            {
                glIsBufferPtr = (glIsBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsBuffer"), typeof(glIsBufferFunc));
            }
            return glIsBufferPtr(buffer);
        }
        public static bool glIsEnabled(uint cap)
        {
            if (glIsEnabledPtr == null)
            {
                glIsEnabledPtr = (glIsEnabledFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsEnabled"), typeof(glIsEnabledFunc));
            }
            return glIsEnabledPtr(cap);
        }
        public static bool glIsTexture(uint texture)
        {
            if (glIsTexturePtr == null)
            {
                glIsTexturePtr = (glIsTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsTexture"), typeof(glIsTextureFunc));
            }
            return glIsTexturePtr(texture);
        }
        public static void glLightModelx(uint pname, int param)
        {
            if (glLightModelxPtr == null)
            {
                glLightModelxPtr = (glLightModelxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightModelx"), typeof(glLightModelxFunc));
            }
            glLightModelxPtr(pname, param);
        }
        public static void glLightModelxv(uint pname, IntPtr param)
        {
            if (glLightModelxvPtr == null)
            {
                glLightModelxvPtr = (glLightModelxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightModelxv"), typeof(glLightModelxvFunc));
            }
            glLightModelxvPtr(pname, param);
        }
        public static void glLightx(uint light, uint pname, int param)
        {
            if (glLightxPtr == null)
            {
                glLightxPtr = (glLightxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightx"), typeof(glLightxFunc));
            }
            glLightxPtr(light, pname, param);
        }
        public static void glLightxv(uint light, uint pname, IntPtr @params)
        {
            if (glLightxvPtr == null)
            {
                glLightxvPtr = (glLightxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightxv"), typeof(glLightxvFunc));
            }
            glLightxvPtr(light, pname, @params);
        }
        public static void glLineWidthx(int width)
        {
            if (glLineWidthxPtr == null)
            {
                glLineWidthxPtr = (glLineWidthxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLineWidthx"), typeof(glLineWidthxFunc));
            }
            glLineWidthxPtr(width);
        }
        public static void glLoadIdentity()
        {
            if (glLoadIdentityPtr == null)
            {
                glLoadIdentityPtr = (glLoadIdentityFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLoadIdentity"), typeof(glLoadIdentityFunc));
            }
            glLoadIdentityPtr();
        }
        public static void glLoadMatrixx(IntPtr m)
        {
            if (glLoadMatrixxPtr == null)
            {
                glLoadMatrixxPtr = (glLoadMatrixxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLoadMatrixx"), typeof(glLoadMatrixxFunc));
            }
            glLoadMatrixxPtr(m);
        }
        public static void glLogicOp(uint opcode)
        {
            if (glLogicOpPtr == null)
            {
                glLogicOpPtr = (glLogicOpFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLogicOp"), typeof(glLogicOpFunc));
            }
            glLogicOpPtr(opcode);
        }
        public static void glMaterialx(uint face, uint pname, int param)
        {
            if (glMaterialxPtr == null)
            {
                glMaterialxPtr = (glMaterialxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMaterialx"), typeof(glMaterialxFunc));
            }
            glMaterialxPtr(face, pname, param);
        }
        public static void glMaterialxv(uint face, uint pname, IntPtr param)
        {
            if (glMaterialxvPtr == null)
            {
                glMaterialxvPtr = (glMaterialxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMaterialxv"), typeof(glMaterialxvFunc));
            }
            glMaterialxvPtr(face, pname, param);
        }
        public static void glMatrixMode(uint mode)
        {
            if (glMatrixModePtr == null)
            {
                glMatrixModePtr = (glMatrixModeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMatrixMode"), typeof(glMatrixModeFunc));
            }
            glMatrixModePtr(mode);
        }
        public static void glMultMatrixx(IntPtr m)
        {
            if (glMultMatrixxPtr == null)
            {
                glMultMatrixxPtr = (glMultMatrixxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultMatrixx"), typeof(glMultMatrixxFunc));
            }
            glMultMatrixxPtr(m);
        }
        public static void glMultiTexCoord4x(uint texture, int s, int t, int r, int q)
        {
            if (glMultiTexCoord4xPtr == null)
            {
                glMultiTexCoord4xPtr = (glMultiTexCoord4xFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord4x"), typeof(glMultiTexCoord4xFunc));
            }
            glMultiTexCoord4xPtr(texture, s, t, r, q);
        }
        public static void glNormal3x(int nx, int ny, int nz)
        {
            if (glNormal3xPtr == null)
            {
                glNormal3xPtr = (glNormal3xFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3x"), typeof(glNormal3xFunc));
            }
            glNormal3xPtr(nx, ny, nz);
        }
        public static void glNormalPointer(uint type, int stride, IntPtr pointer)
        {
            if (glNormalPointerPtr == null)
            {
                glNormalPointerPtr = (glNormalPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormalPointer"), typeof(glNormalPointerFunc));
            }
            glNormalPointerPtr(type, stride, pointer);
        }
        public static void glOrthox(int l, int r, int b, int t, int n, int f)
        {
            if (glOrthoxPtr == null)
            {
                glOrthoxPtr = (glOrthoxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glOrthox"), typeof(glOrthoxFunc));
            }
            glOrthoxPtr(l, r, b, t, n, f);
        }
        public static void glPixelStorei(uint pname, int param)
        {
            if (glPixelStoreiPtr == null)
            {
                glPixelStoreiPtr = (glPixelStoreiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelStorei"), typeof(glPixelStoreiFunc));
            }
            glPixelStoreiPtr(pname, param);
        }
        public static void glPointParameterx(uint pname, int param)
        {
            if (glPointParameterxPtr == null)
            {
                glPointParameterxPtr = (glPointParameterxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameterx"), typeof(glPointParameterxFunc));
            }
            glPointParameterxPtr(pname, param);
        }
        public static void glPointParameterxv(uint pname, IntPtr @params)
        {
            if (glPointParameterxvPtr == null)
            {
                glPointParameterxvPtr = (glPointParameterxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameterxv"), typeof(glPointParameterxvFunc));
            }
            glPointParameterxvPtr(pname, @params);
        }
        public static void glPointSizex(int size)
        {
            if (glPointSizexPtr == null)
            {
                glPointSizexPtr = (glPointSizexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointSizex"), typeof(glPointSizexFunc));
            }
            glPointSizexPtr(size);
        }
        public static void glPolygonOffsetx(int factor, int units)
        {
            if (glPolygonOffsetxPtr == null)
            {
                glPolygonOffsetxPtr = (glPolygonOffsetxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPolygonOffsetx"), typeof(glPolygonOffsetxFunc));
            }
            glPolygonOffsetxPtr(factor, units);
        }
        public static void glPopMatrix()
        {
            if (glPopMatrixPtr == null)
            {
                glPopMatrixPtr = (glPopMatrixFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPopMatrix"), typeof(glPopMatrixFunc));
            }
            glPopMatrixPtr();
        }
        public static void glPushMatrix()
        {
            if (glPushMatrixPtr == null)
            {
                glPushMatrixPtr = (glPushMatrixFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPushMatrix"), typeof(glPushMatrixFunc));
            }
            glPushMatrixPtr();
        }
        public static void glReadPixels(int x, int y, int width, int height, uint format, uint type, IntPtr pixels)
        {
            if (glReadPixelsPtr == null)
            {
                glReadPixelsPtr = (glReadPixelsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glReadPixels"), typeof(glReadPixelsFunc));
            }
            glReadPixelsPtr(x, y, width, height, format, type, pixels);
        }
        public static void glRotatex(int angle, int x, int y, int z)
        {
            if (glRotatexPtr == null)
            {
                glRotatexPtr = (glRotatexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRotatex"), typeof(glRotatexFunc));
            }
            glRotatexPtr(angle, x, y, z);
        }
        public static void glSampleCoverage(float value, bool invert)
        {
            if (glSampleCoveragePtr == null)
            {
                glSampleCoveragePtr = (glSampleCoverageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSampleCoverage"), typeof(glSampleCoverageFunc));
            }
            glSampleCoveragePtr(value, invert);
        }
        public static void glSampleCoveragex(int value, bool invert)
        {
            if (glSampleCoveragexPtr == null)
            {
                glSampleCoveragexPtr = (glSampleCoveragexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSampleCoveragex"), typeof(glSampleCoveragexFunc));
            }
            glSampleCoveragexPtr(value, invert);
        }
        public static void glScalex(int x, int y, int z)
        {
            if (glScalexPtr == null)
            {
                glScalexPtr = (glScalexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScalex"), typeof(glScalexFunc));
            }
            glScalexPtr(x, y, z);
        }
        public static void glScissor(int x, int y, int width, int height)
        {
            if (glScissorPtr == null)
            {
                glScissorPtr = (glScissorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScissor"), typeof(glScissorFunc));
            }
            glScissorPtr(x, y, width, height);
        }
        public static void glShadeModel(uint mode)
        {
            if (glShadeModelPtr == null)
            {
                glShadeModelPtr = (glShadeModelFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glShadeModel"), typeof(glShadeModelFunc));
            }
            glShadeModelPtr(mode);
        }
        public static void glStencilFunc(uint func, int @ref, uint mask)
        {
            if (glStencilFuncPtr == null)
            {
                glStencilFuncPtr = (glStencilFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilFunc"), typeof(glStencilFuncFunc));
            }
            glStencilFuncPtr(func, @ref, mask);
        }
        public static void glStencilMask(uint mask)
        {
            if (glStencilMaskPtr == null)
            {
                glStencilMaskPtr = (glStencilMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilMask"), typeof(glStencilMaskFunc));
            }
            glStencilMaskPtr(mask);
        }
        public static void glStencilOp(uint fail, uint zfail, uint zpass)
        {
            if (glStencilOpPtr == null)
            {
                glStencilOpPtr = (glStencilOpFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilOp"), typeof(glStencilOpFunc));
            }
            glStencilOpPtr(fail, zfail, zpass);
        }
        public static void glTexCoordPointer(int size, uint type, int stride, IntPtr pointer)
        {
            if (glTexCoordPointerPtr == null)
            {
                glTexCoordPointerPtr = (glTexCoordPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordPointer"), typeof(glTexCoordPointerFunc));
            }
            glTexCoordPointerPtr(size, type, stride, pointer);
        }
        public static void glTexEnvi(uint target, uint pname, int param)
        {
            if (glTexEnviPtr == null)
            {
                glTexEnviPtr = (glTexEnviFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnvi"), typeof(glTexEnviFunc));
            }
            glTexEnviPtr(target, pname, param);
        }
        public static void glTexEnvx(uint target, uint pname, int param)
        {
            if (glTexEnvxPtr == null)
            {
                glTexEnvxPtr = (glTexEnvxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnvx"), typeof(glTexEnvxFunc));
            }
            glTexEnvxPtr(target, pname, param);
        }
        public static void glTexEnviv(uint target, uint pname, IntPtr @params)
        {
            if (glTexEnvivPtr == null)
            {
                glTexEnvivPtr = (glTexEnvivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnviv"), typeof(glTexEnvivFunc));
            }
            glTexEnvivPtr(target, pname, @params);
        }
        public static void glTexEnvxv(uint target, uint pname, IntPtr @params)
        {
            if (glTexEnvxvPtr == null)
            {
                glTexEnvxvPtr = (glTexEnvxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnvxv"), typeof(glTexEnvxvFunc));
            }
            glTexEnvxvPtr(target, pname, @params);
        }
        public static void glTexImage2D(uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, IntPtr pixels)
        {
            if (glTexImage2DPtr == null)
            {
                glTexImage2DPtr = (glTexImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage2D"), typeof(glTexImage2DFunc));
            }
            glTexImage2DPtr(target, level, internalformat, width, height, border, format, type, pixels);
        }
        public static void glTexParameteri(uint target, uint pname, int param)
        {
            if (glTexParameteriPtr == null)
            {
                glTexParameteriPtr = (glTexParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameteri"), typeof(glTexParameteriFunc));
            }
            glTexParameteriPtr(target, pname, param);
        }
        public static void glTexParameterx(uint target, uint pname, int param)
        {
            if (glTexParameterxPtr == null)
            {
                glTexParameterxPtr = (glTexParameterxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterx"), typeof(glTexParameterxFunc));
            }
            glTexParameterxPtr(target, pname, param);
        }
        public static void glTexParameteriv(uint target, uint pname, IntPtr @params)
        {
            if (glTexParameterivPtr == null)
            {
                glTexParameterivPtr = (glTexParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameteriv"), typeof(glTexParameterivFunc));
            }
            glTexParameterivPtr(target, pname, @params);
        }
        public static void glTexParameterxv(uint target, uint pname, IntPtr @params)
        {
            if (glTexParameterxvPtr == null)
            {
                glTexParameterxvPtr = (glTexParameterxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterxv"), typeof(glTexParameterxvFunc));
            }
            glTexParameterxvPtr(target, pname, @params);
        }
        public static void glTexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, IntPtr pixels)
        {
            if (glTexSubImage2DPtr == null)
            {
                glTexSubImage2DPtr = (glTexSubImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexSubImage2D"), typeof(glTexSubImage2DFunc));
            }
            glTexSubImage2DPtr(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }
        public static void glTranslatex(int x, int y, int z)
        {
            if (glTranslatexPtr == null)
            {
                glTranslatexPtr = (glTranslatexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTranslatex"), typeof(glTranslatexFunc));
            }
            glTranslatexPtr(x, y, z);
        }
        public static void glVertexPointer(int size, uint type, int stride, IntPtr pointer)
        {
            if (glVertexPointerPtr == null)
            {
                glVertexPointerPtr = (glVertexPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexPointer"), typeof(glVertexPointerFunc));
            }
            glVertexPointerPtr(size, type, stride, pointer);
        }
        public static void glViewport(int x, int y, int width, int height)
        {
            if (glViewportPtr == null)
            {
                glViewportPtr = (glViewportFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glViewport"), typeof(glViewportFunc));
            }
            glViewportPtr(x, y, width, height);
        }
        public static void glAttachShader(uint program, uint shader)
        {
            if (glAttachShaderPtr == null)
            {
                glAttachShaderPtr = (glAttachShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glAttachShader"), typeof(glAttachShaderFunc));
            }
            glAttachShaderPtr(program, shader);
        }
        public static void glBindAttribLocation(uint program, uint index, IntPtr name)
        {
            if (glBindAttribLocationPtr == null)
            {
                glBindAttribLocationPtr = (glBindAttribLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindAttribLocation"), typeof(glBindAttribLocationFunc));
            }
            glBindAttribLocationPtr(program, index, name);
        }
        public static void glBindFramebuffer(uint target, uint framebuffer)
        {
            if (glBindFramebufferPtr == null)
            {
                glBindFramebufferPtr = (glBindFramebufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindFramebuffer"), typeof(glBindFramebufferFunc));
            }
            glBindFramebufferPtr(target, framebuffer);
        }
        public static void glBindRenderbuffer(uint target, uint renderbuffer)
        {
            if (glBindRenderbufferPtr == null)
            {
                glBindRenderbufferPtr = (glBindRenderbufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindRenderbuffer"), typeof(glBindRenderbufferFunc));
            }
            glBindRenderbufferPtr(target, renderbuffer);
        }
        public static void glBlendColor(float red, float green, float blue, float alpha)
        {
            if (glBlendColorPtr == null)
            {
                glBlendColorPtr = (glBlendColorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendColor"), typeof(glBlendColorFunc));
            }
            glBlendColorPtr(red, green, blue, alpha);
        }
        public static void glBlendEquation(uint mode)
        {
            if (glBlendEquationPtr == null)
            {
                glBlendEquationPtr = (glBlendEquationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendEquation"), typeof(glBlendEquationFunc));
            }
            glBlendEquationPtr(mode);
        }
        public static void glBlendEquationSeparate(uint modeRGB, uint modeAlpha)
        {
            if (glBlendEquationSeparatePtr == null)
            {
                glBlendEquationSeparatePtr = (glBlendEquationSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendEquationSeparate"), typeof(glBlendEquationSeparateFunc));
            }
            glBlendEquationSeparatePtr(modeRGB, modeAlpha);
        }
        public static void glBlendFuncSeparate(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha)
        {
            if (glBlendFuncSeparatePtr == null)
            {
                glBlendFuncSeparatePtr = (glBlendFuncSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendFuncSeparate"), typeof(glBlendFuncSeparateFunc));
            }
            glBlendFuncSeparatePtr(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }
        public static uint glCheckFramebufferStatus(uint target)
        {
            if (glCheckFramebufferStatusPtr == null)
            {
                glCheckFramebufferStatusPtr = (glCheckFramebufferStatusFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCheckFramebufferStatus"), typeof(glCheckFramebufferStatusFunc));
            }
            return glCheckFramebufferStatusPtr(target);
        }
        public static void glCompileShader(uint shader)
        {
            if (glCompileShaderPtr == null)
            {
                glCompileShaderPtr = (glCompileShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompileShader"), typeof(glCompileShaderFunc));
            }
            glCompileShaderPtr(shader);
        }
        public static uint glCreateProgram()
        {
            if (glCreateProgramPtr == null)
            {
                glCreateProgramPtr = (glCreateProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCreateProgram"), typeof(glCreateProgramFunc));
            }
            return glCreateProgramPtr();
        }
        public static uint glCreateShader(uint type)
        {
            if (glCreateShaderPtr == null)
            {
                glCreateShaderPtr = (glCreateShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCreateShader"), typeof(glCreateShaderFunc));
            }
            return glCreateShaderPtr(type);
        }
        public static void glDeleteFramebuffers(int n, IntPtr framebuffers)
        {
            if (glDeleteFramebuffersPtr == null)
            {
                glDeleteFramebuffersPtr = (glDeleteFramebuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteFramebuffers"), typeof(glDeleteFramebuffersFunc));
            }
            glDeleteFramebuffersPtr(n, framebuffers);
        }
        public static void glDeleteProgram(uint program)
        {
            if (glDeleteProgramPtr == null)
            {
                glDeleteProgramPtr = (glDeleteProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteProgram"), typeof(glDeleteProgramFunc));
            }
            glDeleteProgramPtr(program);
        }
        public static void glDeleteRenderbuffers(int n, IntPtr renderbuffers)
        {
            if (glDeleteRenderbuffersPtr == null)
            {
                glDeleteRenderbuffersPtr = (glDeleteRenderbuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteRenderbuffers"), typeof(glDeleteRenderbuffersFunc));
            }
            glDeleteRenderbuffersPtr(n, renderbuffers);
        }
        public static void glDeleteShader(uint shader)
        {
            if (glDeleteShaderPtr == null)
            {
                glDeleteShaderPtr = (glDeleteShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteShader"), typeof(glDeleteShaderFunc));
            }
            glDeleteShaderPtr(shader);
        }
        public static void glDetachShader(uint program, uint shader)
        {
            if (glDetachShaderPtr == null)
            {
                glDetachShaderPtr = (glDetachShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDetachShader"), typeof(glDetachShaderFunc));
            }
            glDetachShaderPtr(program, shader);
        }
        public static void glDisableVertexAttribArray(uint index)
        {
            if (glDisableVertexAttribArrayPtr == null)
            {
                glDisableVertexAttribArrayPtr = (glDisableVertexAttribArrayFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDisableVertexAttribArray"), typeof(glDisableVertexAttribArrayFunc));
            }
            glDisableVertexAttribArrayPtr(index);
        }
        public static void glEnableVertexAttribArray(uint index)
        {
            if (glEnableVertexAttribArrayPtr == null)
            {
                glEnableVertexAttribArrayPtr = (glEnableVertexAttribArrayFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnableVertexAttribArray"), typeof(glEnableVertexAttribArrayFunc));
            }
            glEnableVertexAttribArrayPtr(index);
        }
        public static void glFramebufferRenderbuffer(uint target, uint attachment, uint renderbuffertarget, uint renderbuffer)
        {
            if (glFramebufferRenderbufferPtr == null)
            {
                glFramebufferRenderbufferPtr = (glFramebufferRenderbufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferRenderbuffer"), typeof(glFramebufferRenderbufferFunc));
            }
            glFramebufferRenderbufferPtr(target, attachment, renderbuffertarget, renderbuffer);
        }
        public static void glFramebufferTexture2D(uint target, uint attachment, uint textarget, uint texture, int level)
        {
            if (glFramebufferTexture2DPtr == null)
            {
                glFramebufferTexture2DPtr = (glFramebufferTexture2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferTexture2D"), typeof(glFramebufferTexture2DFunc));
            }
            glFramebufferTexture2DPtr(target, attachment, textarget, texture, level);
        }
        public static void glGenerateMipmap(uint target)
        {
            if (glGenerateMipmapPtr == null)
            {
                glGenerateMipmapPtr = (glGenerateMipmapFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenerateMipmap"), typeof(glGenerateMipmapFunc));
            }
            glGenerateMipmapPtr(target);
        }
        public static void glGenFramebuffers(int n, IntPtr framebuffers)
        {
            if (glGenFramebuffersPtr == null)
            {
                glGenFramebuffersPtr = (glGenFramebuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenFramebuffers"), typeof(glGenFramebuffersFunc));
            }
            glGenFramebuffersPtr(n, framebuffers);
        }
        public static void glGenRenderbuffers(int n, IntPtr renderbuffers)
        {
            if (glGenRenderbuffersPtr == null)
            {
                glGenRenderbuffersPtr = (glGenRenderbuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenRenderbuffers"), typeof(glGenRenderbuffersFunc));
            }
            glGenRenderbuffersPtr(n, renderbuffers);
        }
        public static void glGetActiveAttrib(uint program, uint index, int bufSize, IntPtr length, IntPtr size, IntPtr type, IntPtr name)
        {
            if (glGetActiveAttribPtr == null)
            {
                glGetActiveAttribPtr = (glGetActiveAttribFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveAttrib"), typeof(glGetActiveAttribFunc));
            }
            glGetActiveAttribPtr(program, index, bufSize, length, size, type, name);
        }
        public static void glGetActiveUniform(uint program, uint index, int bufSize, IntPtr length, IntPtr size, IntPtr type, IntPtr name)
        {
            if (glGetActiveUniformPtr == null)
            {
                glGetActiveUniformPtr = (glGetActiveUniformFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveUniform"), typeof(glGetActiveUniformFunc));
            }
            glGetActiveUniformPtr(program, index, bufSize, length, size, type, name);
        }
        public static void glGetAttachedShaders(uint program, int maxCount, IntPtr count, IntPtr shaders)
        {
            if (glGetAttachedShadersPtr == null)
            {
                glGetAttachedShadersPtr = (glGetAttachedShadersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetAttachedShaders"), typeof(glGetAttachedShadersFunc));
            }
            glGetAttachedShadersPtr(program, maxCount, count, shaders);
        }
        public static int glGetAttribLocation(uint program, IntPtr name)
        {
            if (glGetAttribLocationPtr == null)
            {
                glGetAttribLocationPtr = (glGetAttribLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetAttribLocation"), typeof(glGetAttribLocationFunc));
            }
            return glGetAttribLocationPtr(program, name);
        }
        public static void glGetFramebufferAttachmentParameteriv(uint target, uint attachment, uint pname, IntPtr @params)
        {
            if (glGetFramebufferAttachmentParameterivPtr == null)
            {
                glGetFramebufferAttachmentParameterivPtr = (glGetFramebufferAttachmentParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFramebufferAttachmentParameteriv"), typeof(glGetFramebufferAttachmentParameterivFunc));
            }
            glGetFramebufferAttachmentParameterivPtr(target, attachment, pname, @params);
        }
        public static void glGetProgramiv(uint program, uint pname, IntPtr @params)
        {
            if (glGetProgramivPtr == null)
            {
                glGetProgramivPtr = (glGetProgramivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramiv"), typeof(glGetProgramivFunc));
            }
            glGetProgramivPtr(program, pname, @params);
        }
        public static void glGetProgramInfoLog(uint program, int bufSize, IntPtr length, IntPtr infoLog)
        {
            if (glGetProgramInfoLogPtr == null)
            {
                glGetProgramInfoLogPtr = (glGetProgramInfoLogFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramInfoLog"), typeof(glGetProgramInfoLogFunc));
            }
            glGetProgramInfoLogPtr(program, bufSize, length, infoLog);
        }
        public static void glGetRenderbufferParameteriv(uint target, uint pname, IntPtr @params)
        {
            if (glGetRenderbufferParameterivPtr == null)
            {
                glGetRenderbufferParameterivPtr = (glGetRenderbufferParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetRenderbufferParameteriv"), typeof(glGetRenderbufferParameterivFunc));
            }
            glGetRenderbufferParameterivPtr(target, pname, @params);
        }
        public static void glGetShaderiv(uint shader, uint pname, IntPtr @params)
        {
            if (glGetShaderivPtr == null)
            {
                glGetShaderivPtr = (glGetShaderivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetShaderiv"), typeof(glGetShaderivFunc));
            }
            glGetShaderivPtr(shader, pname, @params);
        }
        public static void glGetShaderInfoLog(uint shader, int bufSize, IntPtr length, IntPtr infoLog)
        {
            if (glGetShaderInfoLogPtr == null)
            {
                glGetShaderInfoLogPtr = (glGetShaderInfoLogFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetShaderInfoLog"), typeof(glGetShaderInfoLogFunc));
            }
            glGetShaderInfoLogPtr(shader, bufSize, length, infoLog);
        }
        public static void glGetShaderPrecisionFormat(uint shadertype, uint precisiontype, IntPtr range, IntPtr precision)
        {
            if (glGetShaderPrecisionFormatPtr == null)
            {
                glGetShaderPrecisionFormatPtr = (glGetShaderPrecisionFormatFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetShaderPrecisionFormat"), typeof(glGetShaderPrecisionFormatFunc));
            }
            glGetShaderPrecisionFormatPtr(shadertype, precisiontype, range, precision);
        }
        public static void glGetShaderSource(uint shader, int bufSize, IntPtr length, IntPtr source)
        {
            if (glGetShaderSourcePtr == null)
            {
                glGetShaderSourcePtr = (glGetShaderSourceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetShaderSource"), typeof(glGetShaderSourceFunc));
            }
            glGetShaderSourcePtr(shader, bufSize, length, source);
        }
        public static void glGetUniformfv(uint program, int location, IntPtr @params)
        {
            if (glGetUniformfvPtr == null)
            {
                glGetUniformfvPtr = (glGetUniformfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformfv"), typeof(glGetUniformfvFunc));
            }
            glGetUniformfvPtr(program, location, @params);
        }
        public static void glGetUniformiv(uint program, int location, IntPtr @params)
        {
            if (glGetUniformivPtr == null)
            {
                glGetUniformivPtr = (glGetUniformivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformiv"), typeof(glGetUniformivFunc));
            }
            glGetUniformivPtr(program, location, @params);
        }
        public static int glGetUniformLocation(uint program, IntPtr name)
        {
            if (glGetUniformLocationPtr == null)
            {
                glGetUniformLocationPtr = (glGetUniformLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformLocation"), typeof(glGetUniformLocationFunc));
            }
            return glGetUniformLocationPtr(program, name);
        }
        public static void glGetVertexAttribfv(uint index, uint pname, IntPtr @params)
        {
            if (glGetVertexAttribfvPtr == null)
            {
                glGetVertexAttribfvPtr = (glGetVertexAttribfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribfv"), typeof(glGetVertexAttribfvFunc));
            }
            glGetVertexAttribfvPtr(index, pname, @params);
        }
        public static void glGetVertexAttribiv(uint index, uint pname, IntPtr @params)
        {
            if (glGetVertexAttribivPtr == null)
            {
                glGetVertexAttribivPtr = (glGetVertexAttribivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribiv"), typeof(glGetVertexAttribivFunc));
            }
            glGetVertexAttribivPtr(index, pname, @params);
        }
        public static void glGetVertexAttribPointerv(uint index, uint pname, IntPtr pointer)
        {
            if (glGetVertexAttribPointervPtr == null)
            {
                glGetVertexAttribPointervPtr = (glGetVertexAttribPointervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribPointerv"), typeof(glGetVertexAttribPointervFunc));
            }
            glGetVertexAttribPointervPtr(index, pname, pointer);
        }
        public static bool glIsFramebuffer(uint framebuffer)
        {
            if (glIsFramebufferPtr == null)
            {
                glIsFramebufferPtr = (glIsFramebufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsFramebuffer"), typeof(glIsFramebufferFunc));
            }
            return glIsFramebufferPtr(framebuffer);
        }
        public static bool glIsProgram(uint program)
        {
            if (glIsProgramPtr == null)
            {
                glIsProgramPtr = (glIsProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsProgram"), typeof(glIsProgramFunc));
            }
            return glIsProgramPtr(program);
        }
        public static bool glIsRenderbuffer(uint renderbuffer)
        {
            if (glIsRenderbufferPtr == null)
            {
                glIsRenderbufferPtr = (glIsRenderbufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsRenderbuffer"), typeof(glIsRenderbufferFunc));
            }
            return glIsRenderbufferPtr(renderbuffer);
        }
        public static bool glIsShader(uint shader)
        {
            if (glIsShaderPtr == null)
            {
                glIsShaderPtr = (glIsShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsShader"), typeof(glIsShaderFunc));
            }
            return glIsShaderPtr(shader);
        }
        public static void glLinkProgram(uint program)
        {
            if (glLinkProgramPtr == null)
            {
                glLinkProgramPtr = (glLinkProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLinkProgram"), typeof(glLinkProgramFunc));
            }
            glLinkProgramPtr(program);
        }
        public static void glReleaseShaderCompiler()
        {
            if (glReleaseShaderCompilerPtr == null)
            {
                glReleaseShaderCompilerPtr = (glReleaseShaderCompilerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glReleaseShaderCompiler"), typeof(glReleaseShaderCompilerFunc));
            }
            glReleaseShaderCompilerPtr();
        }
        public static void glRenderbufferStorage(uint target, uint internalformat, int width, int height)
        {
            if (glRenderbufferStoragePtr == null)
            {
                glRenderbufferStoragePtr = (glRenderbufferStorageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRenderbufferStorage"), typeof(glRenderbufferStorageFunc));
            }
            glRenderbufferStoragePtr(target, internalformat, width, height);
        }
        public static void glShaderBinary(int count, IntPtr shaders, uint binaryformat, IntPtr binary, int length)
        {
            if (glShaderBinaryPtr == null)
            {
                glShaderBinaryPtr = (glShaderBinaryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glShaderBinary"), typeof(glShaderBinaryFunc));
            }
            glShaderBinaryPtr(count, shaders, binaryformat, binary, length);
        }
        public static void glShaderSource(uint shader, int count, IntPtr @string, IntPtr length)
        {
            if (glShaderSourcePtr == null)
            {
                glShaderSourcePtr = (glShaderSourceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glShaderSource"), typeof(glShaderSourceFunc));
            }
            glShaderSourcePtr(shader, count, @string, length);
        }
        public static void glStencilFuncSeparate(uint face, uint func, int @ref, uint mask)
        {
            if (glStencilFuncSeparatePtr == null)
            {
                glStencilFuncSeparatePtr = (glStencilFuncSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilFuncSeparate"), typeof(glStencilFuncSeparateFunc));
            }
            glStencilFuncSeparatePtr(face, func, @ref, mask);
        }
        public static void glStencilMaskSeparate(uint face, uint mask)
        {
            if (glStencilMaskSeparatePtr == null)
            {
                glStencilMaskSeparatePtr = (glStencilMaskSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilMaskSeparate"), typeof(glStencilMaskSeparateFunc));
            }
            glStencilMaskSeparatePtr(face, mask);
        }
        public static void glStencilOpSeparate(uint face, uint sfail, uint dpfail, uint dppass)
        {
            if (glStencilOpSeparatePtr == null)
            {
                glStencilOpSeparatePtr = (glStencilOpSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilOpSeparate"), typeof(glStencilOpSeparateFunc));
            }
            glStencilOpSeparatePtr(face, sfail, dpfail, dppass);
        }
        public static void glUniform1f(int location, float v0)
        {
            if (glUniform1fPtr == null)
            {
                glUniform1fPtr = (glUniform1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1f"), typeof(glUniform1fFunc));
            }
            glUniform1fPtr(location, v0);
        }
        public static void glUniform1fv(int location, int count, IntPtr value)
        {
            if (glUniform1fvPtr == null)
            {
                glUniform1fvPtr = (glUniform1fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1fv"), typeof(glUniform1fvFunc));
            }
            glUniform1fvPtr(location, count, value);
        }
        public static void glUniform1i(int location, int v0)
        {
            if (glUniform1iPtr == null)
            {
                glUniform1iPtr = (glUniform1iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1i"), typeof(glUniform1iFunc));
            }
            glUniform1iPtr(location, v0);
        }
        public static void glUniform1iv(int location, int count, IntPtr value)
        {
            if (glUniform1ivPtr == null)
            {
                glUniform1ivPtr = (glUniform1ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1iv"), typeof(glUniform1ivFunc));
            }
            glUniform1ivPtr(location, count, value);
        }
        public static void glUniform2f(int location, float v0, float v1)
        {
            if (glUniform2fPtr == null)
            {
                glUniform2fPtr = (glUniform2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2f"), typeof(glUniform2fFunc));
            }
            glUniform2fPtr(location, v0, v1);
        }
        public static void glUniform2fv(int location, int count, IntPtr value)
        {
            if (glUniform2fvPtr == null)
            {
                glUniform2fvPtr = (glUniform2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2fv"), typeof(glUniform2fvFunc));
            }
            glUniform2fvPtr(location, count, value);
        }
        public static void glUniform2i(int location, int v0, int v1)
        {
            if (glUniform2iPtr == null)
            {
                glUniform2iPtr = (glUniform2iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2i"), typeof(glUniform2iFunc));
            }
            glUniform2iPtr(location, v0, v1);
        }
        public static void glUniform2iv(int location, int count, IntPtr value)
        {
            if (glUniform2ivPtr == null)
            {
                glUniform2ivPtr = (glUniform2ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2iv"), typeof(glUniform2ivFunc));
            }
            glUniform2ivPtr(location, count, value);
        }
        public static void glUniform3f(int location, float v0, float v1, float v2)
        {
            if (glUniform3fPtr == null)
            {
                glUniform3fPtr = (glUniform3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3f"), typeof(glUniform3fFunc));
            }
            glUniform3fPtr(location, v0, v1, v2);
        }
        public static void glUniform3fv(int location, int count, IntPtr value)
        {
            if (glUniform3fvPtr == null)
            {
                glUniform3fvPtr = (glUniform3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3fv"), typeof(glUniform3fvFunc));
            }
            glUniform3fvPtr(location, count, value);
        }
        public static void glUniform3i(int location, int v0, int v1, int v2)
        {
            if (glUniform3iPtr == null)
            {
                glUniform3iPtr = (glUniform3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3i"), typeof(glUniform3iFunc));
            }
            glUniform3iPtr(location, v0, v1, v2);
        }
        public static void glUniform3iv(int location, int count, IntPtr value)
        {
            if (glUniform3ivPtr == null)
            {
                glUniform3ivPtr = (glUniform3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3iv"), typeof(glUniform3ivFunc));
            }
            glUniform3ivPtr(location, count, value);
        }
        public static void glUniform4f(int location, float v0, float v1, float v2, float v3)
        {
            if (glUniform4fPtr == null)
            {
                glUniform4fPtr = (glUniform4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4f"), typeof(glUniform4fFunc));
            }
            glUniform4fPtr(location, v0, v1, v2, v3);
        }
        public static void glUniform4fv(int location, int count, IntPtr value)
        {
            if (glUniform4fvPtr == null)
            {
                glUniform4fvPtr = (glUniform4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4fv"), typeof(glUniform4fvFunc));
            }
            glUniform4fvPtr(location, count, value);
        }
        public static void glUniform4i(int location, int v0, int v1, int v2, int v3)
        {
            if (glUniform4iPtr == null)
            {
                glUniform4iPtr = (glUniform4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4i"), typeof(glUniform4iFunc));
            }
            glUniform4iPtr(location, v0, v1, v2, v3);
        }
        public static void glUniform4iv(int location, int count, IntPtr value)
        {
            if (glUniform4ivPtr == null)
            {
                glUniform4ivPtr = (glUniform4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4iv"), typeof(glUniform4ivFunc));
            }
            glUniform4ivPtr(location, count, value);
        }
        public static void glUniformMatrix2fv(int location, int count, bool transpose, IntPtr value)
        {
            if (glUniformMatrix2fvPtr == null)
            {
                glUniformMatrix2fvPtr = (glUniformMatrix2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix2fv"), typeof(glUniformMatrix2fvFunc));
            }
            glUniformMatrix2fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix3fv(int location, int count, bool transpose, IntPtr value)
        {
            if (glUniformMatrix3fvPtr == null)
            {
                glUniformMatrix3fvPtr = (glUniformMatrix3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix3fv"), typeof(glUniformMatrix3fvFunc));
            }
            glUniformMatrix3fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix4fv(int location, int count, bool transpose, IntPtr value)
        {
            if (glUniformMatrix4fvPtr == null)
            {
                glUniformMatrix4fvPtr = (glUniformMatrix4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix4fv"), typeof(glUniformMatrix4fvFunc));
            }
            glUniformMatrix4fvPtr(location, count, transpose, value);
        }
        public static void glUseProgram(uint program)
        {
            if (glUseProgramPtr == null)
            {
                glUseProgramPtr = (glUseProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUseProgram"), typeof(glUseProgramFunc));
            }
            glUseProgramPtr(program);
        }
        public static void glValidateProgram(uint program)
        {
            if (glValidateProgramPtr == null)
            {
                glValidateProgramPtr = (glValidateProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glValidateProgram"), typeof(glValidateProgramFunc));
            }
            glValidateProgramPtr(program);
        }
        public static void glVertexAttrib1f(uint index, float x)
        {
            if (glVertexAttrib1fPtr == null)
            {
                glVertexAttrib1fPtr = (glVertexAttrib1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1f"), typeof(glVertexAttrib1fFunc));
            }
            glVertexAttrib1fPtr(index, x);
        }
        public static void glVertexAttrib1fv(uint index, IntPtr v)
        {
            if (glVertexAttrib1fvPtr == null)
            {
                glVertexAttrib1fvPtr = (glVertexAttrib1fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1fv"), typeof(glVertexAttrib1fvFunc));
            }
            glVertexAttrib1fvPtr(index, v);
        }
        public static void glVertexAttrib2f(uint index, float x, float y)
        {
            if (glVertexAttrib2fPtr == null)
            {
                glVertexAttrib2fPtr = (glVertexAttrib2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2f"), typeof(glVertexAttrib2fFunc));
            }
            glVertexAttrib2fPtr(index, x, y);
        }
        public static void glVertexAttrib2fv(uint index, IntPtr v)
        {
            if (glVertexAttrib2fvPtr == null)
            {
                glVertexAttrib2fvPtr = (glVertexAttrib2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2fv"), typeof(glVertexAttrib2fvFunc));
            }
            glVertexAttrib2fvPtr(index, v);
        }
        public static void glVertexAttrib3f(uint index, float x, float y, float z)
        {
            if (glVertexAttrib3fPtr == null)
            {
                glVertexAttrib3fPtr = (glVertexAttrib3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3f"), typeof(glVertexAttrib3fFunc));
            }
            glVertexAttrib3fPtr(index, x, y, z);
        }
        public static void glVertexAttrib3fv(uint index, IntPtr v)
        {
            if (glVertexAttrib3fvPtr == null)
            {
                glVertexAttrib3fvPtr = (glVertexAttrib3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3fv"), typeof(glVertexAttrib3fvFunc));
            }
            glVertexAttrib3fvPtr(index, v);
        }
        public static void glVertexAttrib4f(uint index, float x, float y, float z, float w)
        {
            if (glVertexAttrib4fPtr == null)
            {
                glVertexAttrib4fPtr = (glVertexAttrib4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4f"), typeof(glVertexAttrib4fFunc));
            }
            glVertexAttrib4fPtr(index, x, y, z, w);
        }
        public static void glVertexAttrib4fv(uint index, IntPtr v)
        {
            if (glVertexAttrib4fvPtr == null)
            {
                glVertexAttrib4fvPtr = (glVertexAttrib4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4fv"), typeof(glVertexAttrib4fvFunc));
            }
            glVertexAttrib4fvPtr(index, v);
        }
        public static void glVertexAttribPointer(uint index, int size, uint type, bool normalized, int stride, IntPtr pointer)
        {
            if (glVertexAttribPointerPtr == null)
            {
                glVertexAttribPointerPtr = (glVertexAttribPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribPointer"), typeof(glVertexAttribPointerFunc));
            }
            glVertexAttribPointerPtr(index, size, type, normalized, stride, pointer);
        }
        #endregion

        #region Command Delegates
        private delegate void glAlphaFuncFunc(uint func, float @ref);
        private static glAlphaFuncFunc glAlphaFuncPtr;
        private delegate void glClearColorFunc(float red, float green, float blue, float alpha);
        private static glClearColorFunc glClearColorPtr;
        private delegate void glClearDepthfFunc(float d);
        private static glClearDepthfFunc glClearDepthfPtr;
        private delegate void glClipPlanefFunc(uint p, IntPtr eqn);
        private static glClipPlanefFunc glClipPlanefPtr;
        private delegate void glColor4fFunc(float red, float green, float blue, float alpha);
        private static glColor4fFunc glColor4fPtr;
        private delegate void glDepthRangefFunc(float n, float f);
        private static glDepthRangefFunc glDepthRangefPtr;
        private delegate void glFogfFunc(uint pname, float param);
        private static glFogfFunc glFogfPtr;
        private delegate void glFogfvFunc(uint pname, IntPtr @params);
        private static glFogfvFunc glFogfvPtr;
        private delegate void glFrustumfFunc(float l, float r, float b, float t, float n, float f);
        private static glFrustumfFunc glFrustumfPtr;
        private delegate void glGetClipPlanefFunc(uint plane, IntPtr equation);
        private static glGetClipPlanefFunc glGetClipPlanefPtr;
        private delegate void glGetFloatvFunc(uint pname, IntPtr data);
        private static glGetFloatvFunc glGetFloatvPtr;
        private delegate void glGetLightfvFunc(uint light, uint pname, IntPtr @params);
        private static glGetLightfvFunc glGetLightfvPtr;
        private delegate void glGetMaterialfvFunc(uint face, uint pname, IntPtr @params);
        private static glGetMaterialfvFunc glGetMaterialfvPtr;
        private delegate void glGetTexEnvfvFunc(uint target, uint pname, IntPtr @params);
        private static glGetTexEnvfvFunc glGetTexEnvfvPtr;
        private delegate void glGetTexParameterfvFunc(uint target, uint pname, IntPtr @params);
        private static glGetTexParameterfvFunc glGetTexParameterfvPtr;
        private delegate void glLightModelfFunc(uint pname, float param);
        private static glLightModelfFunc glLightModelfPtr;
        private delegate void glLightModelfvFunc(uint pname, IntPtr @params);
        private static glLightModelfvFunc glLightModelfvPtr;
        private delegate void glLightfFunc(uint light, uint pname, float param);
        private static glLightfFunc glLightfPtr;
        private delegate void glLightfvFunc(uint light, uint pname, IntPtr @params);
        private static glLightfvFunc glLightfvPtr;
        private delegate void glLineWidthFunc(float width);
        private static glLineWidthFunc glLineWidthPtr;
        private delegate void glLoadMatrixfFunc(IntPtr m);
        private static glLoadMatrixfFunc glLoadMatrixfPtr;
        private delegate void glMaterialfFunc(uint face, uint pname, float param);
        private static glMaterialfFunc glMaterialfPtr;
        private delegate void glMaterialfvFunc(uint face, uint pname, IntPtr @params);
        private static glMaterialfvFunc glMaterialfvPtr;
        private delegate void glMultMatrixfFunc(IntPtr m);
        private static glMultMatrixfFunc glMultMatrixfPtr;
        private delegate void glMultiTexCoord4fFunc(uint target, float s, float t, float r, float q);
        private static glMultiTexCoord4fFunc glMultiTexCoord4fPtr;
        private delegate void glNormal3fFunc(float nx, float ny, float nz);
        private static glNormal3fFunc glNormal3fPtr;
        private delegate void glOrthofFunc(float l, float r, float b, float t, float n, float f);
        private static glOrthofFunc glOrthofPtr;
        private delegate void glPointParameterfFunc(uint pname, float param);
        private static glPointParameterfFunc glPointParameterfPtr;
        private delegate void glPointParameterfvFunc(uint pname, IntPtr @params);
        private static glPointParameterfvFunc glPointParameterfvPtr;
        private delegate void glPointSizeFunc(float size);
        private static glPointSizeFunc glPointSizePtr;
        private delegate void glPolygonOffsetFunc(float factor, float units);
        private static glPolygonOffsetFunc glPolygonOffsetPtr;
        private delegate void glRotatefFunc(float angle, float x, float y, float z);
        private static glRotatefFunc glRotatefPtr;
        private delegate void glScalefFunc(float x, float y, float z);
        private static glScalefFunc glScalefPtr;
        private delegate void glTexEnvfFunc(uint target, uint pname, float param);
        private static glTexEnvfFunc glTexEnvfPtr;
        private delegate void glTexEnvfvFunc(uint target, uint pname, IntPtr @params);
        private static glTexEnvfvFunc glTexEnvfvPtr;
        private delegate void glTexParameterfFunc(uint target, uint pname, float param);
        private static glTexParameterfFunc glTexParameterfPtr;
        private delegate void glTexParameterfvFunc(uint target, uint pname, IntPtr @params);
        private static glTexParameterfvFunc glTexParameterfvPtr;
        private delegate void glTranslatefFunc(float x, float y, float z);
        private static glTranslatefFunc glTranslatefPtr;
        private delegate void glActiveTextureFunc(uint texture);
        private static glActiveTextureFunc glActiveTexturePtr;
        private delegate void glAlphaFuncxFunc(uint func, int @ref);
        private static glAlphaFuncxFunc glAlphaFuncxPtr;
        private delegate void glBindBufferFunc(uint target, uint buffer);
        private static glBindBufferFunc glBindBufferPtr;
        private delegate void glBindTextureFunc(uint target, uint texture);
        private static glBindTextureFunc glBindTexturePtr;
        private delegate void glBlendFuncFunc(uint sfactor, uint dfactor);
        private static glBlendFuncFunc glBlendFuncPtr;
        private delegate void glBufferDataFunc(uint target, int size, IntPtr data, uint usage);
        private static glBufferDataFunc glBufferDataPtr;
        private delegate void glBufferSubDataFunc(uint target, IntPtr offset, int size, IntPtr data);
        private static glBufferSubDataFunc glBufferSubDataPtr;
        private delegate void glClearFunc(uint mask);
        private static glClearFunc glClearPtr;
        private delegate void glClearColorxFunc(int red, int green, int blue, int alpha);
        private static glClearColorxFunc glClearColorxPtr;
        private delegate void glClearDepthxFunc(int depth);
        private static glClearDepthxFunc glClearDepthxPtr;
        private delegate void glClearStencilFunc(int s);
        private static glClearStencilFunc glClearStencilPtr;
        private delegate void glClientActiveTextureFunc(uint texture);
        private static glClientActiveTextureFunc glClientActiveTexturePtr;
        private delegate void glClipPlanexFunc(uint plane, IntPtr equation);
        private static glClipPlanexFunc glClipPlanexPtr;
        private delegate void glColor4ubFunc(byte red, byte green, byte blue, byte alpha);
        private static glColor4ubFunc glColor4ubPtr;
        private delegate void glColor4xFunc(int red, int green, int blue, int alpha);
        private static glColor4xFunc glColor4xPtr;
        private delegate void glColorMaskFunc(bool red, bool green, bool blue, bool alpha);
        private static glColorMaskFunc glColorMaskPtr;
        private delegate void glColorPointerFunc(int size, uint type, int stride, IntPtr pointer);
        private static glColorPointerFunc glColorPointerPtr;
        private delegate void glCompressedTexImage2DFunc(uint target, int level, uint internalformat, int width, int height, int border, int imageSize, IntPtr data);
        private static glCompressedTexImage2DFunc glCompressedTexImage2DPtr;
        private delegate void glCompressedTexSubImage2DFunc(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, IntPtr data);
        private static glCompressedTexSubImage2DFunc glCompressedTexSubImage2DPtr;
        private delegate void glCopyTexImage2DFunc(uint target, int level, uint internalformat, int x, int y, int width, int height, int border);
        private static glCopyTexImage2DFunc glCopyTexImage2DPtr;
        private delegate void glCopyTexSubImage2DFunc(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
        private static glCopyTexSubImage2DFunc glCopyTexSubImage2DPtr;
        private delegate void glCullFaceFunc(uint mode);
        private static glCullFaceFunc glCullFacePtr;
        private delegate void glDeleteBuffersFunc(int n, IntPtr buffers);
        private static glDeleteBuffersFunc glDeleteBuffersPtr;
        private delegate void glDeleteTexturesFunc(int n, IntPtr textures);
        private static glDeleteTexturesFunc glDeleteTexturesPtr;
        private delegate void glDepthFuncFunc(uint func);
        private static glDepthFuncFunc glDepthFuncPtr;
        private delegate void glDepthMaskFunc(bool flag);
        private static glDepthMaskFunc glDepthMaskPtr;
        private delegate void glDepthRangexFunc(int n, int f);
        private static glDepthRangexFunc glDepthRangexPtr;
        private delegate void glDisableFunc(uint cap);
        private static glDisableFunc glDisablePtr;
        private delegate void glDisableClientStateFunc(uint array);
        private static glDisableClientStateFunc glDisableClientStatePtr;
        private delegate void glDrawArraysFunc(uint mode, int first, int count);
        private static glDrawArraysFunc glDrawArraysPtr;
        private delegate void glDrawElementsFunc(uint mode, int count, uint type, IntPtr indices);
        private static glDrawElementsFunc glDrawElementsPtr;
        private delegate void glEnableFunc(uint cap);
        private static glEnableFunc glEnablePtr;
        private delegate void glEnableClientStateFunc(uint array);
        private static glEnableClientStateFunc glEnableClientStatePtr;
        private delegate void glFinishFunc();
        private static glFinishFunc glFinishPtr;
        private delegate void glFlushFunc();
        private static glFlushFunc glFlushPtr;
        private delegate void glFogxFunc(uint pname, int param);
        private static glFogxFunc glFogxPtr;
        private delegate void glFogxvFunc(uint pname, IntPtr param);
        private static glFogxvFunc glFogxvPtr;
        private delegate void glFrontFaceFunc(uint mode);
        private static glFrontFaceFunc glFrontFacePtr;
        private delegate void glFrustumxFunc(int l, int r, int b, int t, int n, int f);
        private static glFrustumxFunc glFrustumxPtr;
        private delegate void glGetBooleanvFunc(uint pname, IntPtr data);
        private static glGetBooleanvFunc glGetBooleanvPtr;
        private delegate void glGetBufferParameterivFunc(uint target, uint pname, IntPtr @params);
        private static glGetBufferParameterivFunc glGetBufferParameterivPtr;
        private delegate void glGetClipPlanexFunc(uint plane, IntPtr equation);
        private static glGetClipPlanexFunc glGetClipPlanexPtr;
        private delegate void glGenBuffersFunc(int n, IntPtr buffers);
        private static glGenBuffersFunc glGenBuffersPtr;
        private delegate void glGenTexturesFunc(int n, IntPtr textures);
        private static glGenTexturesFunc glGenTexturesPtr;
        private delegate uint glGetErrorFunc();
        private static glGetErrorFunc glGetErrorPtr;
        private delegate void glGetFixedvFunc(uint pname, IntPtr @params);
        private static glGetFixedvFunc glGetFixedvPtr;
        private delegate void glGetIntegervFunc(uint pname, IntPtr data);
        private static glGetIntegervFunc glGetIntegervPtr;
        private delegate void glGetLightxvFunc(uint light, uint pname, IntPtr @params);
        private static glGetLightxvFunc glGetLightxvPtr;
        private delegate void glGetMaterialxvFunc(uint face, uint pname, IntPtr @params);
        private static glGetMaterialxvFunc glGetMaterialxvPtr;
        private delegate void glGetPointervFunc(uint pname, IntPtr @params);
        private static glGetPointervFunc glGetPointervPtr;
        private delegate IntPtr glGetStringFunc(uint name);
        private static glGetStringFunc glGetStringPtr;
        private delegate void glGetTexEnvivFunc(uint target, uint pname, IntPtr @params);
        private static glGetTexEnvivFunc glGetTexEnvivPtr;
        private delegate void glGetTexEnvxvFunc(uint target, uint pname, IntPtr @params);
        private static glGetTexEnvxvFunc glGetTexEnvxvPtr;
        private delegate void glGetTexParameterivFunc(uint target, uint pname, IntPtr @params);
        private static glGetTexParameterivFunc glGetTexParameterivPtr;
        private delegate void glGetTexParameterxvFunc(uint target, uint pname, IntPtr @params);
        private static glGetTexParameterxvFunc glGetTexParameterxvPtr;
        private delegate void glHintFunc(uint target, uint mode);
        private static glHintFunc glHintPtr;
        private delegate bool glIsBufferFunc(uint buffer);
        private static glIsBufferFunc glIsBufferPtr;
        private delegate bool glIsEnabledFunc(uint cap);
        private static glIsEnabledFunc glIsEnabledPtr;
        private delegate bool glIsTextureFunc(uint texture);
        private static glIsTextureFunc glIsTexturePtr;
        private delegate void glLightModelxFunc(uint pname, int param);
        private static glLightModelxFunc glLightModelxPtr;
        private delegate void glLightModelxvFunc(uint pname, IntPtr param);
        private static glLightModelxvFunc glLightModelxvPtr;
        private delegate void glLightxFunc(uint light, uint pname, int param);
        private static glLightxFunc glLightxPtr;
        private delegate void glLightxvFunc(uint light, uint pname, IntPtr @params);
        private static glLightxvFunc glLightxvPtr;
        private delegate void glLineWidthxFunc(int width);
        private static glLineWidthxFunc glLineWidthxPtr;
        private delegate void glLoadIdentityFunc();
        private static glLoadIdentityFunc glLoadIdentityPtr;
        private delegate void glLoadMatrixxFunc(IntPtr m);
        private static glLoadMatrixxFunc glLoadMatrixxPtr;
        private delegate void glLogicOpFunc(uint opcode);
        private static glLogicOpFunc glLogicOpPtr;
        private delegate void glMaterialxFunc(uint face, uint pname, int param);
        private static glMaterialxFunc glMaterialxPtr;
        private delegate void glMaterialxvFunc(uint face, uint pname, IntPtr param);
        private static glMaterialxvFunc glMaterialxvPtr;
        private delegate void glMatrixModeFunc(uint mode);
        private static glMatrixModeFunc glMatrixModePtr;
        private delegate void glMultMatrixxFunc(IntPtr m);
        private static glMultMatrixxFunc glMultMatrixxPtr;
        private delegate void glMultiTexCoord4xFunc(uint texture, int s, int t, int r, int q);
        private static glMultiTexCoord4xFunc glMultiTexCoord4xPtr;
        private delegate void glNormal3xFunc(int nx, int ny, int nz);
        private static glNormal3xFunc glNormal3xPtr;
        private delegate void glNormalPointerFunc(uint type, int stride, IntPtr pointer);
        private static glNormalPointerFunc glNormalPointerPtr;
        private delegate void glOrthoxFunc(int l, int r, int b, int t, int n, int f);
        private static glOrthoxFunc glOrthoxPtr;
        private delegate void glPixelStoreiFunc(uint pname, int param);
        private static glPixelStoreiFunc glPixelStoreiPtr;
        private delegate void glPointParameterxFunc(uint pname, int param);
        private static glPointParameterxFunc glPointParameterxPtr;
        private delegate void glPointParameterxvFunc(uint pname, IntPtr @params);
        private static glPointParameterxvFunc glPointParameterxvPtr;
        private delegate void glPointSizexFunc(int size);
        private static glPointSizexFunc glPointSizexPtr;
        private delegate void glPolygonOffsetxFunc(int factor, int units);
        private static glPolygonOffsetxFunc glPolygonOffsetxPtr;
        private delegate void glPopMatrixFunc();
        private static glPopMatrixFunc glPopMatrixPtr;
        private delegate void glPushMatrixFunc();
        private static glPushMatrixFunc glPushMatrixPtr;
        private delegate void glReadPixelsFunc(int x, int y, int width, int height, uint format, uint type, IntPtr pixels);
        private static glReadPixelsFunc glReadPixelsPtr;
        private delegate void glRotatexFunc(int angle, int x, int y, int z);
        private static glRotatexFunc glRotatexPtr;
        private delegate void glSampleCoverageFunc(float value, bool invert);
        private static glSampleCoverageFunc glSampleCoveragePtr;
        private delegate void glSampleCoveragexFunc(int value, bool invert);
        private static glSampleCoveragexFunc glSampleCoveragexPtr;
        private delegate void glScalexFunc(int x, int y, int z);
        private static glScalexFunc glScalexPtr;
        private delegate void glScissorFunc(int x, int y, int width, int height);
        private static glScissorFunc glScissorPtr;
        private delegate void glShadeModelFunc(uint mode);
        private static glShadeModelFunc glShadeModelPtr;
        private delegate void glStencilFuncFunc(uint func, int @ref, uint mask);
        private static glStencilFuncFunc glStencilFuncPtr;
        private delegate void glStencilMaskFunc(uint mask);
        private static glStencilMaskFunc glStencilMaskPtr;
        private delegate void glStencilOpFunc(uint fail, uint zfail, uint zpass);
        private static glStencilOpFunc glStencilOpPtr;
        private delegate void glTexCoordPointerFunc(int size, uint type, int stride, IntPtr pointer);
        private static glTexCoordPointerFunc glTexCoordPointerPtr;
        private delegate void glTexEnviFunc(uint target, uint pname, int param);
        private static glTexEnviFunc glTexEnviPtr;
        private delegate void glTexEnvxFunc(uint target, uint pname, int param);
        private static glTexEnvxFunc glTexEnvxPtr;
        private delegate void glTexEnvivFunc(uint target, uint pname, IntPtr @params);
        private static glTexEnvivFunc glTexEnvivPtr;
        private delegate void glTexEnvxvFunc(uint target, uint pname, IntPtr @params);
        private static glTexEnvxvFunc glTexEnvxvPtr;
        private delegate void glTexImage2DFunc(uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, IntPtr pixels);
        private static glTexImage2DFunc glTexImage2DPtr;
        private delegate void glTexParameteriFunc(uint target, uint pname, int param);
        private static glTexParameteriFunc glTexParameteriPtr;
        private delegate void glTexParameterxFunc(uint target, uint pname, int param);
        private static glTexParameterxFunc glTexParameterxPtr;
        private delegate void glTexParameterivFunc(uint target, uint pname, IntPtr @params);
        private static glTexParameterivFunc glTexParameterivPtr;
        private delegate void glTexParameterxvFunc(uint target, uint pname, IntPtr @params);
        private static glTexParameterxvFunc glTexParameterxvPtr;
        private delegate void glTexSubImage2DFunc(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, IntPtr pixels);
        private static glTexSubImage2DFunc glTexSubImage2DPtr;
        private delegate void glTranslatexFunc(int x, int y, int z);
        private static glTranslatexFunc glTranslatexPtr;
        private delegate void glVertexPointerFunc(int size, uint type, int stride, IntPtr pointer);
        private static glVertexPointerFunc glVertexPointerPtr;
        private delegate void glViewportFunc(int x, int y, int width, int height);
        private static glViewportFunc glViewportPtr;
        private delegate void glAttachShaderFunc(uint program, uint shader);
        private static glAttachShaderFunc glAttachShaderPtr;
        private delegate void glBindAttribLocationFunc(uint program, uint index, IntPtr name);
        private static glBindAttribLocationFunc glBindAttribLocationPtr;
        private delegate void glBindFramebufferFunc(uint target, uint framebuffer);
        private static glBindFramebufferFunc glBindFramebufferPtr;
        private delegate void glBindRenderbufferFunc(uint target, uint renderbuffer);
        private static glBindRenderbufferFunc glBindRenderbufferPtr;
        private delegate void glBlendColorFunc(float red, float green, float blue, float alpha);
        private static glBlendColorFunc glBlendColorPtr;
        private delegate void glBlendEquationFunc(uint mode);
        private static glBlendEquationFunc glBlendEquationPtr;
        private delegate void glBlendEquationSeparateFunc(uint modeRGB, uint modeAlpha);
        private static glBlendEquationSeparateFunc glBlendEquationSeparatePtr;
        private delegate void glBlendFuncSeparateFunc(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha);
        private static glBlendFuncSeparateFunc glBlendFuncSeparatePtr;
        private delegate uint glCheckFramebufferStatusFunc(uint target);
        private static glCheckFramebufferStatusFunc glCheckFramebufferStatusPtr;
        private delegate void glCompileShaderFunc(uint shader);
        private static glCompileShaderFunc glCompileShaderPtr;
        private delegate uint glCreateProgramFunc();
        private static glCreateProgramFunc glCreateProgramPtr;
        private delegate uint glCreateShaderFunc(uint type);
        private static glCreateShaderFunc glCreateShaderPtr;
        private delegate void glDeleteFramebuffersFunc(int n, IntPtr framebuffers);
        private static glDeleteFramebuffersFunc glDeleteFramebuffersPtr;
        private delegate void glDeleteProgramFunc(uint program);
        private static glDeleteProgramFunc glDeleteProgramPtr;
        private delegate void glDeleteRenderbuffersFunc(int n, IntPtr renderbuffers);
        private static glDeleteRenderbuffersFunc glDeleteRenderbuffersPtr;
        private delegate void glDeleteShaderFunc(uint shader);
        private static glDeleteShaderFunc glDeleteShaderPtr;
        private delegate void glDetachShaderFunc(uint program, uint shader);
        private static glDetachShaderFunc glDetachShaderPtr;
        private delegate void glDisableVertexAttribArrayFunc(uint index);
        private static glDisableVertexAttribArrayFunc glDisableVertexAttribArrayPtr;
        private delegate void glEnableVertexAttribArrayFunc(uint index);
        private static glEnableVertexAttribArrayFunc glEnableVertexAttribArrayPtr;
        private delegate void glFramebufferRenderbufferFunc(uint target, uint attachment, uint renderbuffertarget, uint renderbuffer);
        private static glFramebufferRenderbufferFunc glFramebufferRenderbufferPtr;
        private delegate void glFramebufferTexture2DFunc(uint target, uint attachment, uint textarget, uint texture, int level);
        private static glFramebufferTexture2DFunc glFramebufferTexture2DPtr;
        private delegate void glGenerateMipmapFunc(uint target);
        private static glGenerateMipmapFunc glGenerateMipmapPtr;
        private delegate void glGenFramebuffersFunc(int n, IntPtr framebuffers);
        private static glGenFramebuffersFunc glGenFramebuffersPtr;
        private delegate void glGenRenderbuffersFunc(int n, IntPtr renderbuffers);
        private static glGenRenderbuffersFunc glGenRenderbuffersPtr;
        private delegate void glGetActiveAttribFunc(uint program, uint index, int bufSize, IntPtr length, IntPtr size, IntPtr type, IntPtr name);
        private static glGetActiveAttribFunc glGetActiveAttribPtr;
        private delegate void glGetActiveUniformFunc(uint program, uint index, int bufSize, IntPtr length, IntPtr size, IntPtr type, IntPtr name);
        private static glGetActiveUniformFunc glGetActiveUniformPtr;
        private delegate void glGetAttachedShadersFunc(uint program, int maxCount, IntPtr count, IntPtr shaders);
        private static glGetAttachedShadersFunc glGetAttachedShadersPtr;
        private delegate int glGetAttribLocationFunc(uint program, IntPtr name);
        private static glGetAttribLocationFunc glGetAttribLocationPtr;
        private delegate void glGetFramebufferAttachmentParameterivFunc(uint target, uint attachment, uint pname, IntPtr @params);
        private static glGetFramebufferAttachmentParameterivFunc glGetFramebufferAttachmentParameterivPtr;
        private delegate void glGetProgramivFunc(uint program, uint pname, IntPtr @params);
        private static glGetProgramivFunc glGetProgramivPtr;
        private delegate void glGetProgramInfoLogFunc(uint program, int bufSize, IntPtr length, IntPtr infoLog);
        private static glGetProgramInfoLogFunc glGetProgramInfoLogPtr;
        private delegate void glGetRenderbufferParameterivFunc(uint target, uint pname, IntPtr @params);
        private static glGetRenderbufferParameterivFunc glGetRenderbufferParameterivPtr;
        private delegate void glGetShaderivFunc(uint shader, uint pname, IntPtr @params);
        private static glGetShaderivFunc glGetShaderivPtr;
        private delegate void glGetShaderInfoLogFunc(uint shader, int bufSize, IntPtr length, IntPtr infoLog);
        private static glGetShaderInfoLogFunc glGetShaderInfoLogPtr;
        private delegate void glGetShaderPrecisionFormatFunc(uint shadertype, uint precisiontype, IntPtr range, IntPtr precision);
        private static glGetShaderPrecisionFormatFunc glGetShaderPrecisionFormatPtr;
        private delegate void glGetShaderSourceFunc(uint shader, int bufSize, IntPtr length, IntPtr source);
        private static glGetShaderSourceFunc glGetShaderSourcePtr;
        private delegate void glGetUniformfvFunc(uint program, int location, IntPtr @params);
        private static glGetUniformfvFunc glGetUniformfvPtr;
        private delegate void glGetUniformivFunc(uint program, int location, IntPtr @params);
        private static glGetUniformivFunc glGetUniformivPtr;
        private delegate int glGetUniformLocationFunc(uint program, IntPtr name);
        private static glGetUniformLocationFunc glGetUniformLocationPtr;
        private delegate void glGetVertexAttribfvFunc(uint index, uint pname, IntPtr @params);
        private static glGetVertexAttribfvFunc glGetVertexAttribfvPtr;
        private delegate void glGetVertexAttribivFunc(uint index, uint pname, IntPtr @params);
        private static glGetVertexAttribivFunc glGetVertexAttribivPtr;
        private delegate void glGetVertexAttribPointervFunc(uint index, uint pname, IntPtr pointer);
        private static glGetVertexAttribPointervFunc glGetVertexAttribPointervPtr;
        private delegate bool glIsFramebufferFunc(uint framebuffer);
        private static glIsFramebufferFunc glIsFramebufferPtr;
        private delegate bool glIsProgramFunc(uint program);
        private static glIsProgramFunc glIsProgramPtr;
        private delegate bool glIsRenderbufferFunc(uint renderbuffer);
        private static glIsRenderbufferFunc glIsRenderbufferPtr;
        private delegate bool glIsShaderFunc(uint shader);
        private static glIsShaderFunc glIsShaderPtr;
        private delegate void glLinkProgramFunc(uint program);
        private static glLinkProgramFunc glLinkProgramPtr;
        private delegate void glReleaseShaderCompilerFunc();
        private static glReleaseShaderCompilerFunc glReleaseShaderCompilerPtr;
        private delegate void glRenderbufferStorageFunc(uint target, uint internalformat, int width, int height);
        private static glRenderbufferStorageFunc glRenderbufferStoragePtr;
        private delegate void glShaderBinaryFunc(int count, IntPtr shaders, uint binaryformat, IntPtr binary, int length);
        private static glShaderBinaryFunc glShaderBinaryPtr;
        private delegate void glShaderSourceFunc(uint shader, int count, IntPtr @string, IntPtr length);
        private static glShaderSourceFunc glShaderSourcePtr;
        private delegate void glStencilFuncSeparateFunc(uint face, uint func, int @ref, uint mask);
        private static glStencilFuncSeparateFunc glStencilFuncSeparatePtr;
        private delegate void glStencilMaskSeparateFunc(uint face, uint mask);
        private static glStencilMaskSeparateFunc glStencilMaskSeparatePtr;
        private delegate void glStencilOpSeparateFunc(uint face, uint sfail, uint dpfail, uint dppass);
        private static glStencilOpSeparateFunc glStencilOpSeparatePtr;
        private delegate void glUniform1fFunc(int location, float v0);
        private static glUniform1fFunc glUniform1fPtr;
        private delegate void glUniform1fvFunc(int location, int count, IntPtr value);
        private static glUniform1fvFunc glUniform1fvPtr;
        private delegate void glUniform1iFunc(int location, int v0);
        private static glUniform1iFunc glUniform1iPtr;
        private delegate void glUniform1ivFunc(int location, int count, IntPtr value);
        private static glUniform1ivFunc glUniform1ivPtr;
        private delegate void glUniform2fFunc(int location, float v0, float v1);
        private static glUniform2fFunc glUniform2fPtr;
        private delegate void glUniform2fvFunc(int location, int count, IntPtr value);
        private static glUniform2fvFunc glUniform2fvPtr;
        private delegate void glUniform2iFunc(int location, int v0, int v1);
        private static glUniform2iFunc glUniform2iPtr;
        private delegate void glUniform2ivFunc(int location, int count, IntPtr value);
        private static glUniform2ivFunc glUniform2ivPtr;
        private delegate void glUniform3fFunc(int location, float v0, float v1, float v2);
        private static glUniform3fFunc glUniform3fPtr;
        private delegate void glUniform3fvFunc(int location, int count, IntPtr value);
        private static glUniform3fvFunc glUniform3fvPtr;
        private delegate void glUniform3iFunc(int location, int v0, int v1, int v2);
        private static glUniform3iFunc glUniform3iPtr;
        private delegate void glUniform3ivFunc(int location, int count, IntPtr value);
        private static glUniform3ivFunc glUniform3ivPtr;
        private delegate void glUniform4fFunc(int location, float v0, float v1, float v2, float v3);
        private static glUniform4fFunc glUniform4fPtr;
        private delegate void glUniform4fvFunc(int location, int count, IntPtr value);
        private static glUniform4fvFunc glUniform4fvPtr;
        private delegate void glUniform4iFunc(int location, int v0, int v1, int v2, int v3);
        private static glUniform4iFunc glUniform4iPtr;
        private delegate void glUniform4ivFunc(int location, int count, IntPtr value);
        private static glUniform4ivFunc glUniform4ivPtr;
        private delegate void glUniformMatrix2fvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix2fvFunc glUniformMatrix2fvPtr;
        private delegate void glUniformMatrix3fvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix3fvFunc glUniformMatrix3fvPtr;
        private delegate void glUniformMatrix4fvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix4fvFunc glUniformMatrix4fvPtr;
        private delegate void glUseProgramFunc(uint program);
        private static glUseProgramFunc glUseProgramPtr;
        private delegate void glValidateProgramFunc(uint program);
        private static glValidateProgramFunc glValidateProgramPtr;
        private delegate void glVertexAttrib1fFunc(uint index, float x);
        private static glVertexAttrib1fFunc glVertexAttrib1fPtr;
        private delegate void glVertexAttrib1fvFunc(uint index, IntPtr v);
        private static glVertexAttrib1fvFunc glVertexAttrib1fvPtr;
        private delegate void glVertexAttrib2fFunc(uint index, float x, float y);
        private static glVertexAttrib2fFunc glVertexAttrib2fPtr;
        private delegate void glVertexAttrib2fvFunc(uint index, IntPtr v);
        private static glVertexAttrib2fvFunc glVertexAttrib2fvPtr;
        private delegate void glVertexAttrib3fFunc(uint index, float x, float y, float z);
        private static glVertexAttrib3fFunc glVertexAttrib3fPtr;
        private delegate void glVertexAttrib3fvFunc(uint index, IntPtr v);
        private static glVertexAttrib3fvFunc glVertexAttrib3fvPtr;
        private delegate void glVertexAttrib4fFunc(uint index, float x, float y, float z, float w);
        private static glVertexAttrib4fFunc glVertexAttrib4fPtr;
        private delegate void glVertexAttrib4fvFunc(uint index, IntPtr v);
        private static glVertexAttrib4fvFunc glVertexAttrib4fvPtr;
        private delegate void glVertexAttribPointerFunc(uint index, int size, uint type, bool normalized, int stride, IntPtr pointer);
        private static glVertexAttribPointerFunc glVertexAttribPointerPtr;
        #endregion

        #region Interop
        public static Func<string, IntPtr> GetProcAddress = null;

        public static void PreloadAllFunctions()
        {
            glAlphaFuncPtr = (glAlphaFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glAlphaFunc"), typeof(glAlphaFuncFunc));
            glClearColorPtr = (glClearColorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearColor"), typeof(glClearColorFunc));
            glClearDepthfPtr = (glClearDepthfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearDepthf"), typeof(glClearDepthfFunc));
            glClipPlanefPtr = (glClipPlanefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClipPlanef"), typeof(glClipPlanefFunc));
            glColor4fPtr = (glColor4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4f"), typeof(glColor4fFunc));
            glDepthRangefPtr = (glDepthRangefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthRangef"), typeof(glDepthRangefFunc));
            glFogfPtr = (glFogfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogf"), typeof(glFogfFunc));
            glFogfvPtr = (glFogfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogfv"), typeof(glFogfvFunc));
            glFrustumfPtr = (glFrustumfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFrustumf"), typeof(glFrustumfFunc));
            glGetClipPlanefPtr = (glGetClipPlanefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetClipPlanef"), typeof(glGetClipPlanefFunc));
            glGetFloatvPtr = (glGetFloatvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFloatv"), typeof(glGetFloatvFunc));
            glGetLightfvPtr = (glGetLightfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetLightfv"), typeof(glGetLightfvFunc));
            glGetMaterialfvPtr = (glGetMaterialfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetMaterialfv"), typeof(glGetMaterialfvFunc));
            glGetTexEnvfvPtr = (glGetTexEnvfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexEnvfv"), typeof(glGetTexEnvfvFunc));
            glGetTexParameterfvPtr = (glGetTexParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameterfv"), typeof(glGetTexParameterfvFunc));
            glLightModelfPtr = (glLightModelfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightModelf"), typeof(glLightModelfFunc));
            glLightModelfvPtr = (glLightModelfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightModelfv"), typeof(glLightModelfvFunc));
            glLightfPtr = (glLightfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightf"), typeof(glLightfFunc));
            glLightfvPtr = (glLightfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightfv"), typeof(glLightfvFunc));
            glLineWidthPtr = (glLineWidthFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLineWidth"), typeof(glLineWidthFunc));
            glLoadMatrixfPtr = (glLoadMatrixfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLoadMatrixf"), typeof(glLoadMatrixfFunc));
            glMaterialfPtr = (glMaterialfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMaterialf"), typeof(glMaterialfFunc));
            glMaterialfvPtr = (glMaterialfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMaterialfv"), typeof(glMaterialfvFunc));
            glMultMatrixfPtr = (glMultMatrixfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultMatrixf"), typeof(glMultMatrixfFunc));
            glMultiTexCoord4fPtr = (glMultiTexCoord4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord4f"), typeof(glMultiTexCoord4fFunc));
            glNormal3fPtr = (glNormal3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3f"), typeof(glNormal3fFunc));
            glOrthofPtr = (glOrthofFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glOrthof"), typeof(glOrthofFunc));
            glPointParameterfPtr = (glPointParameterfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameterf"), typeof(glPointParameterfFunc));
            glPointParameterfvPtr = (glPointParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameterfv"), typeof(glPointParameterfvFunc));
            glPointSizePtr = (glPointSizeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointSize"), typeof(glPointSizeFunc));
            glPolygonOffsetPtr = (glPolygonOffsetFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPolygonOffset"), typeof(glPolygonOffsetFunc));
            glRotatefPtr = (glRotatefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRotatef"), typeof(glRotatefFunc));
            glScalefPtr = (glScalefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScalef"), typeof(glScalefFunc));
            glTexEnvfPtr = (glTexEnvfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnvf"), typeof(glTexEnvfFunc));
            glTexEnvfvPtr = (glTexEnvfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnvfv"), typeof(glTexEnvfvFunc));
            glTexParameterfPtr = (glTexParameterfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterf"), typeof(glTexParameterfFunc));
            glTexParameterfvPtr = (glTexParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterfv"), typeof(glTexParameterfvFunc));
            glTranslatefPtr = (glTranslatefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTranslatef"), typeof(glTranslatefFunc));
            glActiveTexturePtr = (glActiveTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glActiveTexture"), typeof(glActiveTextureFunc));
            glAlphaFuncxPtr = (glAlphaFuncxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glAlphaFuncx"), typeof(glAlphaFuncxFunc));
            glBindBufferPtr = (glBindBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindBuffer"), typeof(glBindBufferFunc));
            glBindTexturePtr = (glBindTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindTexture"), typeof(glBindTextureFunc));
            glBlendFuncPtr = (glBlendFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendFunc"), typeof(glBlendFuncFunc));
            glBufferDataPtr = (glBufferDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBufferData"), typeof(glBufferDataFunc));
            glBufferSubDataPtr = (glBufferSubDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBufferSubData"), typeof(glBufferSubDataFunc));
            glClearPtr = (glClearFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClear"), typeof(glClearFunc));
            glClearColorxPtr = (glClearColorxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearColorx"), typeof(glClearColorxFunc));
            glClearDepthxPtr = (glClearDepthxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearDepthx"), typeof(glClearDepthxFunc));
            glClearStencilPtr = (glClearStencilFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearStencil"), typeof(glClearStencilFunc));
            glClientActiveTexturePtr = (glClientActiveTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClientActiveTexture"), typeof(glClientActiveTextureFunc));
            glClipPlanexPtr = (glClipPlanexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClipPlanex"), typeof(glClipPlanexFunc));
            glColor4ubPtr = (glColor4ubFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4ub"), typeof(glColor4ubFunc));
            glColor4xPtr = (glColor4xFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColor4x"), typeof(glColor4xFunc));
            glColorMaskPtr = (glColorMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorMask"), typeof(glColorMaskFunc));
            glColorPointerPtr = (glColorPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorPointer"), typeof(glColorPointerFunc));
            glCompressedTexImage2DPtr = (glCompressedTexImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexImage2D"), typeof(glCompressedTexImage2DFunc));
            glCompressedTexSubImage2DPtr = (glCompressedTexSubImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexSubImage2D"), typeof(glCompressedTexSubImage2DFunc));
            glCopyTexImage2DPtr = (glCopyTexImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexImage2D"), typeof(glCopyTexImage2DFunc));
            glCopyTexSubImage2DPtr = (glCopyTexSubImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexSubImage2D"), typeof(glCopyTexSubImage2DFunc));
            glCullFacePtr = (glCullFaceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCullFace"), typeof(glCullFaceFunc));
            glDeleteBuffersPtr = (glDeleteBuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteBuffers"), typeof(glDeleteBuffersFunc));
            glDeleteTexturesPtr = (glDeleteTexturesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteTextures"), typeof(glDeleteTexturesFunc));
            glDepthFuncPtr = (glDepthFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthFunc"), typeof(glDepthFuncFunc));
            glDepthMaskPtr = (glDepthMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthMask"), typeof(glDepthMaskFunc));
            glDepthRangexPtr = (glDepthRangexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthRangex"), typeof(glDepthRangexFunc));
            glDisablePtr = (glDisableFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDisable"), typeof(glDisableFunc));
            glDisableClientStatePtr = (glDisableClientStateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDisableClientState"), typeof(glDisableClientStateFunc));
            glDrawArraysPtr = (glDrawArraysFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawArrays"), typeof(glDrawArraysFunc));
            glDrawElementsPtr = (glDrawElementsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElements"), typeof(glDrawElementsFunc));
            glEnablePtr = (glEnableFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnable"), typeof(glEnableFunc));
            glEnableClientStatePtr = (glEnableClientStateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnableClientState"), typeof(glEnableClientStateFunc));
            glFinishPtr = (glFinishFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFinish"), typeof(glFinishFunc));
            glFlushPtr = (glFlushFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFlush"), typeof(glFlushFunc));
            glFogxPtr = (glFogxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogx"), typeof(glFogxFunc));
            glFogxvPtr = (glFogxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFogxv"), typeof(glFogxvFunc));
            glFrontFacePtr = (glFrontFaceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFrontFace"), typeof(glFrontFaceFunc));
            glFrustumxPtr = (glFrustumxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFrustumx"), typeof(glFrustumxFunc));
            glGetBooleanvPtr = (glGetBooleanvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBooleanv"), typeof(glGetBooleanvFunc));
            glGetBufferParameterivPtr = (glGetBufferParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBufferParameteriv"), typeof(glGetBufferParameterivFunc));
            glGetClipPlanexPtr = (glGetClipPlanexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetClipPlanex"), typeof(glGetClipPlanexFunc));
            glGenBuffersPtr = (glGenBuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenBuffers"), typeof(glGenBuffersFunc));
            glGenTexturesPtr = (glGenTexturesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenTextures"), typeof(glGenTexturesFunc));
            glGetErrorPtr = (glGetErrorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetError"), typeof(glGetErrorFunc));
            glGetFixedvPtr = (glGetFixedvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFixedv"), typeof(glGetFixedvFunc));
            glGetIntegervPtr = (glGetIntegervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetIntegerv"), typeof(glGetIntegervFunc));
            glGetLightxvPtr = (glGetLightxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetLightxv"), typeof(glGetLightxvFunc));
            glGetMaterialxvPtr = (glGetMaterialxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetMaterialxv"), typeof(glGetMaterialxvFunc));
            glGetPointervPtr = (glGetPointervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetPointerv"), typeof(glGetPointervFunc));
            glGetStringPtr = (glGetStringFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetString"), typeof(glGetStringFunc));
            glGetTexEnvivPtr = (glGetTexEnvivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexEnviv"), typeof(glGetTexEnvivFunc));
            glGetTexEnvxvPtr = (glGetTexEnvxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexEnvxv"), typeof(glGetTexEnvxvFunc));
            glGetTexParameterivPtr = (glGetTexParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameteriv"), typeof(glGetTexParameterivFunc));
            glGetTexParameterxvPtr = (glGetTexParameterxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameterxv"), typeof(glGetTexParameterxvFunc));
            glHintPtr = (glHintFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glHint"), typeof(glHintFunc));
            glIsBufferPtr = (glIsBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsBuffer"), typeof(glIsBufferFunc));
            glIsEnabledPtr = (glIsEnabledFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsEnabled"), typeof(glIsEnabledFunc));
            glIsTexturePtr = (glIsTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsTexture"), typeof(glIsTextureFunc));
            glLightModelxPtr = (glLightModelxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightModelx"), typeof(glLightModelxFunc));
            glLightModelxvPtr = (glLightModelxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightModelxv"), typeof(glLightModelxvFunc));
            glLightxPtr = (glLightxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightx"), typeof(glLightxFunc));
            glLightxvPtr = (glLightxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLightxv"), typeof(glLightxvFunc));
            glLineWidthxPtr = (glLineWidthxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLineWidthx"), typeof(glLineWidthxFunc));
            glLoadIdentityPtr = (glLoadIdentityFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLoadIdentity"), typeof(glLoadIdentityFunc));
            glLoadMatrixxPtr = (glLoadMatrixxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLoadMatrixx"), typeof(glLoadMatrixxFunc));
            glLogicOpPtr = (glLogicOpFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLogicOp"), typeof(glLogicOpFunc));
            glMaterialxPtr = (glMaterialxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMaterialx"), typeof(glMaterialxFunc));
            glMaterialxvPtr = (glMaterialxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMaterialxv"), typeof(glMaterialxvFunc));
            glMatrixModePtr = (glMatrixModeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMatrixMode"), typeof(glMatrixModeFunc));
            glMultMatrixxPtr = (glMultMatrixxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultMatrixx"), typeof(glMultMatrixxFunc));
            glMultiTexCoord4xPtr = (glMultiTexCoord4xFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiTexCoord4x"), typeof(glMultiTexCoord4xFunc));
            glNormal3xPtr = (glNormal3xFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormal3x"), typeof(glNormal3xFunc));
            glNormalPointerPtr = (glNormalPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glNormalPointer"), typeof(glNormalPointerFunc));
            glOrthoxPtr = (glOrthoxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glOrthox"), typeof(glOrthoxFunc));
            glPixelStoreiPtr = (glPixelStoreiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelStorei"), typeof(glPixelStoreiFunc));
            glPointParameterxPtr = (glPointParameterxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameterx"), typeof(glPointParameterxFunc));
            glPointParameterxvPtr = (glPointParameterxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameterxv"), typeof(glPointParameterxvFunc));
            glPointSizexPtr = (glPointSizexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointSizex"), typeof(glPointSizexFunc));
            glPolygonOffsetxPtr = (glPolygonOffsetxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPolygonOffsetx"), typeof(glPolygonOffsetxFunc));
            glPopMatrixPtr = (glPopMatrixFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPopMatrix"), typeof(glPopMatrixFunc));
            glPushMatrixPtr = (glPushMatrixFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPushMatrix"), typeof(glPushMatrixFunc));
            glReadPixelsPtr = (glReadPixelsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glReadPixels"), typeof(glReadPixelsFunc));
            glRotatexPtr = (glRotatexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRotatex"), typeof(glRotatexFunc));
            glSampleCoveragePtr = (glSampleCoverageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSampleCoverage"), typeof(glSampleCoverageFunc));
            glSampleCoveragexPtr = (glSampleCoveragexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSampleCoveragex"), typeof(glSampleCoveragexFunc));
            glScalexPtr = (glScalexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScalex"), typeof(glScalexFunc));
            glScissorPtr = (glScissorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScissor"), typeof(glScissorFunc));
            glShadeModelPtr = (glShadeModelFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glShadeModel"), typeof(glShadeModelFunc));
            glStencilFuncPtr = (glStencilFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilFunc"), typeof(glStencilFuncFunc));
            glStencilMaskPtr = (glStencilMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilMask"), typeof(glStencilMaskFunc));
            glStencilOpPtr = (glStencilOpFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilOp"), typeof(glStencilOpFunc));
            glTexCoordPointerPtr = (glTexCoordPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexCoordPointer"), typeof(glTexCoordPointerFunc));
            glTexEnviPtr = (glTexEnviFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnvi"), typeof(glTexEnviFunc));
            glTexEnvxPtr = (glTexEnvxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnvx"), typeof(glTexEnvxFunc));
            glTexEnvivPtr = (glTexEnvivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnviv"), typeof(glTexEnvivFunc));
            glTexEnvxvPtr = (glTexEnvxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexEnvxv"), typeof(glTexEnvxvFunc));
            glTexImage2DPtr = (glTexImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage2D"), typeof(glTexImage2DFunc));
            glTexParameteriPtr = (glTexParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameteri"), typeof(glTexParameteriFunc));
            glTexParameterxPtr = (glTexParameterxFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterx"), typeof(glTexParameterxFunc));
            glTexParameterivPtr = (glTexParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameteriv"), typeof(glTexParameterivFunc));
            glTexParameterxvPtr = (glTexParameterxvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterxv"), typeof(glTexParameterxvFunc));
            glTexSubImage2DPtr = (glTexSubImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexSubImage2D"), typeof(glTexSubImage2DFunc));
            glTranslatexPtr = (glTranslatexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTranslatex"), typeof(glTranslatexFunc));
            glVertexPointerPtr = (glVertexPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexPointer"), typeof(glVertexPointerFunc));
            glViewportPtr = (glViewportFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glViewport"), typeof(glViewportFunc));
            glAttachShaderPtr = (glAttachShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glAttachShader"), typeof(glAttachShaderFunc));
            glBindAttribLocationPtr = (glBindAttribLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindAttribLocation"), typeof(glBindAttribLocationFunc));
            glBindFramebufferPtr = (glBindFramebufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindFramebuffer"), typeof(glBindFramebufferFunc));
            glBindRenderbufferPtr = (glBindRenderbufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindRenderbuffer"), typeof(glBindRenderbufferFunc));
            glBlendColorPtr = (glBlendColorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendColor"), typeof(glBlendColorFunc));
            glBlendEquationPtr = (glBlendEquationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendEquation"), typeof(glBlendEquationFunc));
            glBlendEquationSeparatePtr = (glBlendEquationSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendEquationSeparate"), typeof(glBlendEquationSeparateFunc));
            glBlendFuncSeparatePtr = (glBlendFuncSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendFuncSeparate"), typeof(glBlendFuncSeparateFunc));
            glCheckFramebufferStatusPtr = (glCheckFramebufferStatusFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCheckFramebufferStatus"), typeof(glCheckFramebufferStatusFunc));
            glCompileShaderPtr = (glCompileShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompileShader"), typeof(glCompileShaderFunc));
            glCreateProgramPtr = (glCreateProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCreateProgram"), typeof(glCreateProgramFunc));
            glCreateShaderPtr = (glCreateShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCreateShader"), typeof(glCreateShaderFunc));
            glDeleteFramebuffersPtr = (glDeleteFramebuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteFramebuffers"), typeof(glDeleteFramebuffersFunc));
            glDeleteProgramPtr = (glDeleteProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteProgram"), typeof(glDeleteProgramFunc));
            glDeleteRenderbuffersPtr = (glDeleteRenderbuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteRenderbuffers"), typeof(glDeleteRenderbuffersFunc));
            glDeleteShaderPtr = (glDeleteShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteShader"), typeof(glDeleteShaderFunc));
            glDetachShaderPtr = (glDetachShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDetachShader"), typeof(glDetachShaderFunc));
            glDisableVertexAttribArrayPtr = (glDisableVertexAttribArrayFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDisableVertexAttribArray"), typeof(glDisableVertexAttribArrayFunc));
            glEnableVertexAttribArrayPtr = (glEnableVertexAttribArrayFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnableVertexAttribArray"), typeof(glEnableVertexAttribArrayFunc));
            glFramebufferRenderbufferPtr = (glFramebufferRenderbufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferRenderbuffer"), typeof(glFramebufferRenderbufferFunc));
            glFramebufferTexture2DPtr = (glFramebufferTexture2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferTexture2D"), typeof(glFramebufferTexture2DFunc));
            glGenerateMipmapPtr = (glGenerateMipmapFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenerateMipmap"), typeof(glGenerateMipmapFunc));
            glGenFramebuffersPtr = (glGenFramebuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenFramebuffers"), typeof(glGenFramebuffersFunc));
            glGenRenderbuffersPtr = (glGenRenderbuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenRenderbuffers"), typeof(glGenRenderbuffersFunc));
            glGetActiveAttribPtr = (glGetActiveAttribFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveAttrib"), typeof(glGetActiveAttribFunc));
            glGetActiveUniformPtr = (glGetActiveUniformFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveUniform"), typeof(glGetActiveUniformFunc));
            glGetAttachedShadersPtr = (glGetAttachedShadersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetAttachedShaders"), typeof(glGetAttachedShadersFunc));
            glGetAttribLocationPtr = (glGetAttribLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetAttribLocation"), typeof(glGetAttribLocationFunc));
            glGetFramebufferAttachmentParameterivPtr = (glGetFramebufferAttachmentParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFramebufferAttachmentParameteriv"), typeof(glGetFramebufferAttachmentParameterivFunc));
            glGetProgramivPtr = (glGetProgramivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramiv"), typeof(glGetProgramivFunc));
            glGetProgramInfoLogPtr = (glGetProgramInfoLogFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramInfoLog"), typeof(glGetProgramInfoLogFunc));
            glGetRenderbufferParameterivPtr = (glGetRenderbufferParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetRenderbufferParameteriv"), typeof(glGetRenderbufferParameterivFunc));
            glGetShaderivPtr = (glGetShaderivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetShaderiv"), typeof(glGetShaderivFunc));
            glGetShaderInfoLogPtr = (glGetShaderInfoLogFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetShaderInfoLog"), typeof(glGetShaderInfoLogFunc));
            glGetShaderPrecisionFormatPtr = (glGetShaderPrecisionFormatFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetShaderPrecisionFormat"), typeof(glGetShaderPrecisionFormatFunc));
            glGetShaderSourcePtr = (glGetShaderSourceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetShaderSource"), typeof(glGetShaderSourceFunc));
            glGetUniformfvPtr = (glGetUniformfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformfv"), typeof(glGetUniformfvFunc));
            glGetUniformivPtr = (glGetUniformivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformiv"), typeof(glGetUniformivFunc));
            glGetUniformLocationPtr = (glGetUniformLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformLocation"), typeof(glGetUniformLocationFunc));
            glGetVertexAttribfvPtr = (glGetVertexAttribfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribfv"), typeof(glGetVertexAttribfvFunc));
            glGetVertexAttribivPtr = (glGetVertexAttribivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribiv"), typeof(glGetVertexAttribivFunc));
            glGetVertexAttribPointervPtr = (glGetVertexAttribPointervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribPointerv"), typeof(glGetVertexAttribPointervFunc));
            glIsFramebufferPtr = (glIsFramebufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsFramebuffer"), typeof(glIsFramebufferFunc));
            glIsProgramPtr = (glIsProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsProgram"), typeof(glIsProgramFunc));
            glIsRenderbufferPtr = (glIsRenderbufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsRenderbuffer"), typeof(glIsRenderbufferFunc));
            glIsShaderPtr = (glIsShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsShader"), typeof(glIsShaderFunc));
            glLinkProgramPtr = (glLinkProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLinkProgram"), typeof(glLinkProgramFunc));
            glReleaseShaderCompilerPtr = (glReleaseShaderCompilerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glReleaseShaderCompiler"), typeof(glReleaseShaderCompilerFunc));
            glRenderbufferStoragePtr = (glRenderbufferStorageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRenderbufferStorage"), typeof(glRenderbufferStorageFunc));
            glShaderBinaryPtr = (glShaderBinaryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glShaderBinary"), typeof(glShaderBinaryFunc));
            glShaderSourcePtr = (glShaderSourceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glShaderSource"), typeof(glShaderSourceFunc));
            glStencilFuncSeparatePtr = (glStencilFuncSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilFuncSeparate"), typeof(glStencilFuncSeparateFunc));
            glStencilMaskSeparatePtr = (glStencilMaskSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilMaskSeparate"), typeof(glStencilMaskSeparateFunc));
            glStencilOpSeparatePtr = (glStencilOpSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilOpSeparate"), typeof(glStencilOpSeparateFunc));
            glUniform1fPtr = (glUniform1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1f"), typeof(glUniform1fFunc));
            glUniform1fvPtr = (glUniform1fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1fv"), typeof(glUniform1fvFunc));
            glUniform1iPtr = (glUniform1iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1i"), typeof(glUniform1iFunc));
            glUniform1ivPtr = (glUniform1ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1iv"), typeof(glUniform1ivFunc));
            glUniform2fPtr = (glUniform2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2f"), typeof(glUniform2fFunc));
            glUniform2fvPtr = (glUniform2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2fv"), typeof(glUniform2fvFunc));
            glUniform2iPtr = (glUniform2iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2i"), typeof(glUniform2iFunc));
            glUniform2ivPtr = (glUniform2ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2iv"), typeof(glUniform2ivFunc));
            glUniform3fPtr = (glUniform3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3f"), typeof(glUniform3fFunc));
            glUniform3fvPtr = (glUniform3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3fv"), typeof(glUniform3fvFunc));
            glUniform3iPtr = (glUniform3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3i"), typeof(glUniform3iFunc));
            glUniform3ivPtr = (glUniform3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3iv"), typeof(glUniform3ivFunc));
            glUniform4fPtr = (glUniform4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4f"), typeof(glUniform4fFunc));
            glUniform4fvPtr = (glUniform4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4fv"), typeof(glUniform4fvFunc));
            glUniform4iPtr = (glUniform4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4i"), typeof(glUniform4iFunc));
            glUniform4ivPtr = (glUniform4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4iv"), typeof(glUniform4ivFunc));
            glUniformMatrix2fvPtr = (glUniformMatrix2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix2fv"), typeof(glUniformMatrix2fvFunc));
            glUniformMatrix3fvPtr = (glUniformMatrix3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix3fv"), typeof(glUniformMatrix3fvFunc));
            glUniformMatrix4fvPtr = (glUniformMatrix4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix4fv"), typeof(glUniformMatrix4fvFunc));
            glUseProgramPtr = (glUseProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUseProgram"), typeof(glUseProgramFunc));
            glValidateProgramPtr = (glValidateProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glValidateProgram"), typeof(glValidateProgramFunc));
            glVertexAttrib1fPtr = (glVertexAttrib1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1f"), typeof(glVertexAttrib1fFunc));
            glVertexAttrib1fvPtr = (glVertexAttrib1fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1fv"), typeof(glVertexAttrib1fvFunc));
            glVertexAttrib2fPtr = (glVertexAttrib2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2f"), typeof(glVertexAttrib2fFunc));
            glVertexAttrib2fvPtr = (glVertexAttrib2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2fv"), typeof(glVertexAttrib2fvFunc));
            glVertexAttrib3fPtr = (glVertexAttrib3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3f"), typeof(glVertexAttrib3fFunc));
            glVertexAttrib3fvPtr = (glVertexAttrib3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3fv"), typeof(glVertexAttrib3fvFunc));
            glVertexAttrib4fPtr = (glVertexAttrib4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4f"), typeof(glVertexAttrib4fFunc));
            glVertexAttrib4fvPtr = (glVertexAttrib4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4fv"), typeof(glVertexAttrib4fvFunc));
            glVertexAttribPointerPtr = (glVertexAttribPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribPointer"), typeof(glVertexAttribPointerFunc));
        }

        public static void PreloadFunction(string name)
        {
            var memberInfo = typeof(GLES20).GetField(name + "Ptr", BindingFlags.NonPublic | BindingFlags.Static);
            memberInfo.SetValue(null, Marshal.GetDelegateForFunctionPointer(GetProcAddress(name), memberInfo.FieldType));
        }
        #endregion
    }
}
