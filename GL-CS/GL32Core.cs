// This file was autogenerated by GLCSGen on 11/4/2013 8:49:49 AM
// Original copyright from gl.xml:
// 
// Copyright (c) 2013 The Khronos Group Inc.
// 
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
// 
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
// 
// ------------------------------------------------------------------------
// 
// This file, gl.xml, is the OpenGL and OpenGL API Registry. The older
// ".spec" file format has been retired and will no longer be updated with
// new extensions and API versions. The canonical version of the registry,
// together with documentation, schema, and Python generator scripts used
// to generate C header files for OpenGL and OpenGL ES, can always be found
// in the Khronos Registry at
//         http://www.opengl.org/registry/
//     

using System;
using System.Reflection;
using System.Runtime.InteropServices;

namespace OpenGL
{
    public static class GL32Core
    {
        #region Enums
        public static uint GL_BACK = 0x0405;
        public static uint GL_FRONT = 0x0404;
        public static uint GL_FRONT_AND_BACK = 0x0408;
        public static uint GL_CCW = 0x0901;
        public static uint GL_CW = 0x0900;
        public static uint GL_ALLOW_DRAW_FRG_HINT_PGI = 0x1A210;
        public static uint GL_ALLOW_DRAW_MEM_HINT_PGI = 0x1A211;
        public static uint GL_ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E;
        public static uint GL_ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F;
        public static uint GL_ALWAYS_FAST_HINT_PGI = 0x1A20C;
        public static uint GL_ALWAYS_SOFT_HINT_PGI = 0x1A20D;
        public static uint GL_BACK_NORMALS_HINT_PGI = 0x1A223;
        public static uint GL_BINNING_CONTROL_HINT_QCOM = 0x8FB0;
        public static uint GL_CLIP_FAR_HINT_PGI = 0x1A221;
        public static uint GL_CLIP_NEAR_HINT_PGI = 0x1A220;
        public static uint GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0;
        public static uint GL_CONSERVE_MEMORY_HINT_PGI = 0x1A1FD;
        public static uint GL_CONVOLUTION_HINT_SGIX = 0x8316;
        public static uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
        public static uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B;
        public static uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES = 0x8B8B;
        public static uint GL_FULL_STIPPLE_HINT_PGI = 0x1A219;
        public static uint GL_GENERATE_MIPMAP_HINT_SGIS = 0x8192;
        public static uint GL_LINE_QUALITY_HINT_SGIX = 0x835B;
        public static uint GL_LINE_SMOOTH_HINT = 0x0C52;
        public static uint GL_MATERIAL_SIDE_HINT_PGI = 0x1A22C;
        public static uint GL_MAX_VERTEX_HINT_PGI = 0x1A22D;
        public static uint GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534;
        public static uint GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203;
        public static uint GL_NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204;
        public static uint GL_PACK_CMYK_HINT_EXT = 0x800E;
        public static uint GL_PHONG_HINT_WIN = 0x80EB;
        public static uint GL_POLYGON_SMOOTH_HINT = 0x0C53;
        public static uint GL_PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8;
        public static uint GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
        public static uint GL_RECLAIM_MEMORY_HINT_PGI = 0x1A1FE;
        public static uint GL_SCALEBIAS_HINT_SGIX = 0x8322;
        public static uint GL_STRICT_DEPTHFUNC_HINT_PGI = 0x1A216;
        public static uint GL_STRICT_LIGHTING_HINT_PGI = 0x1A217;
        public static uint GL_STRICT_SCISSOR_HINT_PGI = 0x1A218;
        public static uint GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
        public static uint GL_TEXTURE_COMPRESSION_HINT_ARB = 0x84EF;
        public static uint GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E;
        public static uint GL_TEXTURE_STORAGE_HINT_APPLE = 0x85BC;
        public static uint GL_TRANSFORM_HINT_APPLE = 0x85B1;
        public static uint GL_UNPACK_CMYK_HINT_EXT = 0x800F;
        public static uint GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F;
        public static uint GL_VERTEX_CONSISTENT_HINT_PGI = 0x1A22B;
        public static uint GL_VERTEX_DATA_HINT_PGI = 0x1A22A;
        public static uint GL_VERTEX_PRECLIP_HINT_SGIX = 0x83EF;
        public static uint GL_VERTEX_PRECLIP_SGIX = 0x83EE;
        public static uint GL_WIDE_LINE_HINT_PGI = 0x1A222;
        public static uint GL_DONT_CARE = 0x1100;
        public static uint GL_FASTEST = 0x1101;
        public static uint GL_NICEST = 0x1102;
        public static uint GL_FILL = 0x1B02;
        public static uint GL_LINE = 0x1B01;
        public static uint GL_POINT = 0x1B00;
        public static uint GL_DETAIL_TEXTURE_2D_SGIS = 0x8095;
        public static uint GL_PROXY_TEXTURE_1D = 0x8063;
        public static uint GL_PROXY_TEXTURE_1D_EXT = 0x8063;
        public static uint GL_PROXY_TEXTURE_2D = 0x8064;
        public static uint GL_PROXY_TEXTURE_2D_EXT = 0x8064;
        public static uint GL_PROXY_TEXTURE_3D = 0x8070;
        public static uint GL_PROXY_TEXTURE_3D_EXT = 0x8070;
        public static uint GL_PROXY_TEXTURE_4D_SGIS = 0x8135;
        public static uint GL_TEXTURE_1D = 0x0DE0;
        public static uint GL_TEXTURE_2D = 0x0DE1;
        public static uint GL_TEXTURE_3D = 0x806F;
        public static uint GL_TEXTURE_3D_EXT = 0x806F;
        public static uint GL_TEXTURE_3D_OES = 0x806F;
        public static uint GL_TEXTURE_4D_SGIS = 0x8134;
        public static uint GL_TEXTURE_BASE_LEVEL = 0x813C;
        public static uint GL_TEXTURE_BASE_LEVEL_SGIS = 0x813C;
        public static uint GL_TEXTURE_MAX_LEVEL = 0x813D;
        public static uint GL_TEXTURE_MAX_LEVEL_SGIS = 0x813D;
        public static uint GL_TEXTURE_MAX_LOD = 0x813B;
        public static uint GL_TEXTURE_MAX_LOD_SGIS = 0x813B;
        public static uint GL_TEXTURE_MIN_LOD = 0x813A;
        public static uint GL_TEXTURE_MIN_LOD_SGIS = 0x813A;
        public static uint GL_DETAIL_TEXTURE_LEVEL_SGIS = 0x809A;
        public static uint GL_DETAIL_TEXTURE_MODE_SGIS = 0x809B;
        public static uint GL_DUAL_TEXTURE_SELECT_SGIS = 0x8124;
        public static uint GL_GENERATE_MIPMAP_SGIS = 0x8191;
        public static uint GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179;
        public static uint GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A;
        public static uint GL_QUAD_TEXTURE_SELECT_SGIS = 0x8125;
        public static uint GL_SHADOW_AMBIENT_SGIX = 0x80BF;
        public static uint GL_TEXTURE_BORDER_COLOR = 0x1004;
        public static uint GL_TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171;
        public static uint GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176;
        public static uint GL_TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172;
        public static uint GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175;
        public static uint GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173;
        public static uint GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174;
        public static uint GL_TEXTURE_COMPARE_SGIX = 0x819A;
        public static uint GL_TEXTURE_LOD_BIAS_R_SGIX = 0x8190;
        public static uint GL_TEXTURE_LOD_BIAS_S_SGIX = 0x818E;
        public static uint GL_TEXTURE_LOD_BIAS_T_SGIX = 0x818F;
        public static uint GL_TEXTURE_MAG_FILTER = 0x2800;
        public static uint GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x836B;
        public static uint GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x8369;
        public static uint GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x836A;
        public static uint GL_TEXTURE_MIN_FILTER = 0x2801;
        public static uint GL_TEXTURE_PRIORITY_EXT = 0x8066;
        public static uint GL_TEXTURE_WRAP_Q_SGIS = 0x8137;
        public static uint GL_TEXTURE_WRAP_R = 0x8072;
        public static uint GL_TEXTURE_WRAP_R_EXT = 0x8072;
        public static uint GL_TEXTURE_WRAP_R_OES = 0x8072;
        public static uint GL_TEXTURE_WRAP_S = 0x2802;
        public static uint GL_TEXTURE_WRAP_T = 0x2803;
        public static uint GL_ABGR_EXT = 0x8000;
        public static uint GL_ALPHA = 0x1906;
        public static uint GL_BLUE = 0x1905;
        public static uint GL_CMYKA_EXT = 0x800D;
        public static uint GL_CMYK_EXT = 0x800C;
        public static uint GL_DEPTH_COMPONENT = 0x1902;
        public static uint GL_GREEN = 0x1904;
        public static uint GL_RED = 0x1903;
        public static uint GL_RED_EXT = 0x1903;
        public static uint GL_RGB = 0x1907;
        public static uint GL_RGBA = 0x1908;
        public static uint GL_STENCIL_INDEX = 0x1901;
        public static uint GL_UNSIGNED_INT = 0x1405;
        public static uint GL_UNSIGNED_SHORT = 0x1403;
        public static uint GL_YCRCB_422_SGIX = 0x81BB;
        public static uint GL_YCRCB_444_SGIX = 0x81BC;
        public static uint GL_BYTE = 0x1400;
        public static uint GL_FLOAT = 0x1406;
        public static uint GL_INT = 0x1404;
        public static uint GL_SHORT = 0x1402;
        public static uint GL_UNSIGNED_BYTE = 0x1401;
        public static uint GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
        public static uint GL_UNSIGNED_BYTE_3_3_2_EXT = 0x8032;
        public static uint GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
        public static uint GL_UNSIGNED_INT_10_10_10_2_EXT = 0x8036;
        public static uint GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
        public static uint GL_UNSIGNED_INT_8_8_8_8_EXT = 0x8035;
        public static uint GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
        public static uint GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033;
        public static uint GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
        public static uint GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034;
        public static uint GL_BACK_LEFT = 0x0402;
        public static uint GL_BACK_RIGHT = 0x0403;
        public static uint GL_FRONT_LEFT = 0x0400;
        public static uint GL_FRONT_RIGHT = 0x0401;
        public static uint GL_LEFT = 0x0406;
        public static uint GL_NONE = 0;
        public static uint GL_NONE_OES = 0;
        public static uint GL_RIGHT = 0x0407;
        public static uint GL_COLOR_BUFFER_BIT = 0x00004000;
        public static uint GL_COVERAGE_BUFFER_BIT_NV = 0x00008000;
        public static uint GL_DEPTH_BUFFER_BIT = 0x00000100;
        public static uint GL_STENCIL_BUFFER_BIT = 0x00000400;
        public static uint GL_FALSE = 0;
        public static uint GL_TRUE = 1;
        public static uint GL_ASYNC_DRAW_PIXELS_SGIX = 0x835D;
        public static uint GL_ASYNC_HISTOGRAM_SGIX = 0x832C;
        public static uint GL_ASYNC_READ_PIXELS_SGIX = 0x835E;
        public static uint GL_ASYNC_TEX_IMAGE_SGIX = 0x835C;
        public static uint GL_BLEND = 0x0BE2;
        public static uint GL_CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183;
        public static uint GL_COLOR_LOGIC_OP = 0x0BF2;
        public static uint GL_COLOR_TABLE_SGI = 0x80D0;
        public static uint GL_CONVOLUTION_1D_EXT = 0x8010;
        public static uint GL_CONVOLUTION_2D_EXT = 0x8011;
        public static uint GL_CULL_FACE = 0x0B44;
        public static uint GL_DEPTH_TEST = 0x0B71;
        public static uint GL_DITHER = 0x0BD0;
        public static uint GL_FOG_OFFSET_SGIX = 0x8198;
        public static uint GL_FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401;
        public static uint GL_FRAGMENT_LIGHT0_SGIX = 0x840C;
        public static uint GL_FRAGMENT_LIGHT1_SGIX = 0x840D;
        public static uint GL_FRAGMENT_LIGHT2_SGIX = 0x840E;
        public static uint GL_FRAGMENT_LIGHT3_SGIX = 0x840F;
        public static uint GL_FRAGMENT_LIGHT4_SGIX = 0x8410;
        public static uint GL_FRAGMENT_LIGHT5_SGIX = 0x8411;
        public static uint GL_FRAGMENT_LIGHT6_SGIX = 0x8412;
        public static uint GL_FRAGMENT_LIGHT7_SGIX = 0x8413;
        public static uint GL_FRAGMENT_LIGHTING_SGIX = 0x8400;
        public static uint GL_FRAMEZOOM_SGIX = 0x818B;
        public static uint GL_HISTOGRAM_EXT = 0x8024;
        public static uint GL_INTERLACE_SGIX = 0x8094;
        public static uint GL_IR_INSTRUMENT1_SGIX = 0x817F;
        public static uint GL_LINE_SMOOTH = 0x0B20;
        public static uint GL_MINMAX_EXT = 0x802E;
        public static uint GL_MULTISAMPLE_SGIS = 0x809D;
        public static uint GL_PIXEL_TEXTURE_SGIS = 0x8353;
        public static uint GL_PIXEL_TEX_GEN_SGIX = 0x8139;
        public static uint GL_POLYGON_OFFSET_FILL = 0x8037;
        public static uint GL_POLYGON_OFFSET_LINE = 0x2A02;
        public static uint GL_POLYGON_OFFSET_POINT = 0x2A01;
        public static uint GL_POLYGON_SMOOTH = 0x0B41;
        public static uint GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2;
        public static uint GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1;
        public static uint GL_REFERENCE_PLANE_SGIX = 0x817D;
        public static uint GL_RESCALE_NORMAL_EXT = 0x803A;
        public static uint GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E;
        public static uint GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F;
        public static uint GL_SAMPLE_MASK_SGIS = 0x80A0;
        public static uint GL_SCISSOR_TEST = 0x0C11;
        public static uint GL_SEPARABLE_2D_EXT = 0x8012;
        public static uint GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB;
        public static uint GL_SPRITE_SGIX = 0x8148;
        public static uint GL_STENCIL_TEST = 0x0B90;
        public static uint GL_TEXTURE_COLOR_TABLE_SGI = 0x80BC;
        public static uint GL_CONSTANT_ALPHA_EXT = 0x8003;
        public static uint GL_CONSTANT_COLOR_EXT = 0x8001;
        public static uint GL_DST_ALPHA = 0x0304;
        public static uint GL_DST_COLOR = 0x0306;
        public static uint GL_ONE = 1;
        public static uint GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004;
        public static uint GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002;
        public static uint GL_ONE_MINUS_DST_ALPHA = 0x0305;
        public static uint GL_ONE_MINUS_DST_COLOR = 0x0307;
        public static uint GL_ONE_MINUS_SRC_ALPHA = 0x0303;
        public static uint GL_SRC_ALPHA = 0x0302;
        public static uint GL_SRC_ALPHA_SATURATE = 0x0308;
        public static uint GL_ZERO = 0;
        public static uint GL_ONE_MINUS_SRC_COLOR = 0x0301;
        public static uint GL_SRC_COLOR = 0x0300;
        public static uint GL_AND = 0x1501;
        public static uint GL_AND_INVERTED = 0x1504;
        public static uint GL_AND_REVERSE = 0x1502;
        public static uint GL_CLEAR = 0x1500;
        public static uint GL_COPY = 0x1503;
        public static uint GL_COPY_INVERTED = 0x150C;
        public static uint GL_EQUIV = 0x1509;
        public static uint GL_INVERT = 0x150A;
        public static uint GL_NAND = 0x150E;
        public static uint GL_NOOP = 0x1505;
        public static uint GL_NOR = 0x1508;
        public static uint GL_OR = 0x1507;
        public static uint GL_OR_INVERTED = 0x150D;
        public static uint GL_OR_REVERSE = 0x150B;
        public static uint GL_SET = 0x150F;
        public static uint GL_XOR = 0x1506;
        public static uint GL_ALWAYS = 0x0207;
        public static uint GL_EQUAL = 0x0202;
        public static uint GL_GEQUAL = 0x0206;
        public static uint GL_GREATER = 0x0204;
        public static uint GL_LEQUAL = 0x0203;
        public static uint GL_LESS = 0x0201;
        public static uint GL_NEVER = 0x0200;
        public static uint GL_NOTEQUAL = 0x0205;
        public static uint GL_DECR = 0x1E03;
        public static uint GL_INCR = 0x1E02;
        public static uint GL_KEEP = 0x1E00;
        public static uint GL_REPLACE = 0x1E01;
        public static uint GL_PACK_ALIGNMENT = 0x0D05;
        public static uint GL_PACK_IMAGE_DEPTH_SGIS = 0x8131;
        public static uint GL_PACK_IMAGE_HEIGHT = 0x806C;
        public static uint GL_PACK_IMAGE_HEIGHT_EXT = 0x806C;
        public static uint GL_PACK_LSB_FIRST = 0x0D01;
        public static uint GL_PACK_RESAMPLE_OML = 0x8984;
        public static uint GL_PACK_RESAMPLE_SGIX = 0x842C;
        public static uint GL_PACK_ROW_LENGTH = 0x0D02;
        public static uint GL_PACK_SKIP_IMAGES = 0x806B;
        public static uint GL_PACK_SKIP_IMAGES_EXT = 0x806B;
        public static uint GL_PACK_SKIP_PIXELS = 0x0D04;
        public static uint GL_PACK_SKIP_ROWS = 0x0D03;
        public static uint GL_PACK_SKIP_VOLUMES_SGIS = 0x8130;
        public static uint GL_PACK_SUBSAMPLE_RATE_SGIX = 0x85A0;
        public static uint GL_PACK_SWAP_BYTES = 0x0D00;
        public static uint GL_PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145;
        public static uint GL_PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144;
        public static uint GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143;
        public static uint GL_PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142;
        public static uint GL_PIXEL_TILE_HEIGHT_SGIX = 0x8141;
        public static uint GL_PIXEL_TILE_WIDTH_SGIX = 0x8140;
        public static uint GL_UNPACK_ALIGNMENT = 0x0CF5;
        public static uint GL_UNPACK_IMAGE_DEPTH_SGIS = 0x8133;
        public static uint GL_UNPACK_IMAGE_HEIGHT = 0x806E;
        public static uint GL_UNPACK_IMAGE_HEIGHT_EXT = 0x806E;
        public static uint GL_UNPACK_LSB_FIRST = 0x0CF1;
        public static uint GL_UNPACK_RESAMPLE_OML = 0x8985;
        public static uint GL_UNPACK_RESAMPLE_SGIX = 0x842D;
        public static uint GL_UNPACK_ROW_LENGTH = 0x0CF2;
        public static uint GL_UNPACK_ROW_LENGTH_EXT = 0x0CF2;
        public static uint GL_UNPACK_SKIP_IMAGES = 0x806D;
        public static uint GL_UNPACK_SKIP_IMAGES_EXT = 0x806D;
        public static uint GL_UNPACK_SKIP_PIXELS = 0x0CF4;
        public static uint GL_UNPACK_SKIP_PIXELS_EXT = 0x0CF4;
        public static uint GL_UNPACK_SKIP_ROWS = 0x0CF3;
        public static uint GL_UNPACK_SKIP_ROWS_EXT = 0x0CF3;
        public static uint GL_UNPACK_SKIP_VOLUMES_SGIS = 0x8132;
        public static uint GL_UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1;
        public static uint GL_UNPACK_SWAP_BYTES = 0x0CF0;
        public static uint GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
        public static uint GL_ALPHA_TEST_FUNC_QCOM = 0x0BC1;
        public static uint GL_ALPHA_TEST_QCOM = 0x0BC0;
        public static uint GL_ALPHA_TEST_REF_QCOM = 0x0BC2;
        public static uint GL_ASYNC_MARKER_SGIX = 0x8329;
        public static uint GL_BLEND_COLOR_EXT = 0x8005;
        public static uint GL_BLEND_DST = 0x0BE0;
        public static uint GL_BLEND_EQUATION_EXT = 0x8009;
        public static uint GL_BLEND_SRC = 0x0BE1;
        public static uint GL_COLOR_ARRAY_COUNT_EXT = 0x8084;
        public static uint GL_COLOR_CLEAR_VALUE = 0x0C22;
        public static uint GL_COLOR_MATRIX_SGI = 0x80B1;
        public static uint GL_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2;
        public static uint GL_COLOR_WRITEMASK = 0x0C23;
        public static uint GL_CULL_FACE_MODE = 0x0B45;
        public static uint GL_DEFORMATIONS_MASK_SGIX = 0x8196;
        public static uint GL_DEPTH_CLEAR_VALUE = 0x0B73;
        public static uint GL_DEPTH_FUNC = 0x0B74;
        public static uint GL_DEPTH_RANGE = 0x0B70;
        public static uint GL_DEPTH_WRITEMASK = 0x0B72;
        public static uint GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096;
        public static uint GL_DISTANCE_ATTENUATION_SGIS = 0x8129;
        public static uint GL_DOUBLEBUFFER = 0x0C32;
        public static uint GL_DRAW_BUFFER = 0x0C01;
        public static uint GL_DRAW_BUFFER_EXT = 0x0C01;
        public static uint GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D;
        public static uint GL_FOG_FUNC_POINTS_SGIS = 0x812B;
        public static uint GL_FOG_OFFSET_VALUE_SGIX = 0x8199;
        public static uint GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402;
        public static uint GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403;
        public static uint GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A;
        public static uint GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408;
        public static uint GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B;
        public static uint GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409;
        public static uint GL_FRAMEZOOM_FACTOR_SGIX = 0x818C;
        public static uint GL_FRONT_FACE = 0x0B46;
        public static uint GL_INDEX_ARRAY_COUNT_EXT = 0x8087;
        public static uint GL_INSTRUMENT_MEASUREMENTS_SGIX = 0x8181;
        public static uint GL_LIGHT_ENV_MODE_SGIX = 0x8407;
        public static uint GL_LINE_WIDTH = 0x0B21;
        public static uint GL_LINE_WIDTH_GRANULARITY = 0x0B23;
        public static uint GL_LINE_WIDTH_RANGE = 0x0B22;
        public static uint GL_LOGIC_OP_MODE = 0x0BF0;
        public static uint GL_MAX_3D_TEXTURE_SIZE_EXT = 0x8073;
        public static uint GL_MAX_4D_TEXTURE_SIZE_SGIS = 0x8138;
        public static uint GL_MAX_ACTIVE_LIGHTS_SGIX = 0x8405;
        public static uint GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360;
        public static uint GL_MAX_ASYNC_HISTOGRAM_SGIX = 0x832D;
        public static uint GL_MAX_ASYNC_READ_PIXELS_SGIX = 0x8361;
        public static uint GL_MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F;
        public static uint GL_MAX_CLIPMAP_DEPTH_SGIX = 0x8177;
        public static uint GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178;
        public static uint GL_MAX_CLIP_DISTANCES = 0x0D32;
        public static uint GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3;
        public static uint GL_MAX_FOG_FUNC_POINTS_SGIS = 0x812C;
        public static uint GL_MAX_FRAGMENT_LIGHTS_SGIX = 0x8404;
        public static uint GL_MAX_FRAMEZOOM_FACTOR_SGIX = 0x818D;
        public static uint GL_MAX_TEXTURE_SIZE = 0x0D33;
        public static uint GL_MAX_VIEWPORT_DIMS = 0x0D3A;
        public static uint GL_MODELVIEW0_MATRIX_EXT = 0x0BA6;
        public static uint GL_MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3;
        public static uint GL_NORMAL_ARRAY_COUNT_EXT = 0x8080;
        public static uint GL_PIXEL_TEX_GEN_MODE_SGIX = 0x832B;
        public static uint GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E;
        public static uint GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F;
        public static uint GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128;
        public static uint GL_POINT_SIZE = 0x0B11;
        public static uint GL_POINT_SIZE_GRANULARITY = 0x0B13;
        public static uint GL_POINT_SIZE_MAX_SGIS = 0x8127;
        public static uint GL_POINT_SIZE_MIN_SGIS = 0x8126;
        public static uint GL_POINT_SIZE_RANGE = 0x0B12;
        public static uint GL_POLYGON_MODE = 0x0B40;
        public static uint GL_POLYGON_OFFSET_BIAS_EXT = 0x8039;
        public static uint GL_POLYGON_OFFSET_FACTOR = 0x8038;
        public static uint GL_POLYGON_OFFSET_UNITS = 0x2A00;
        public static uint GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB;
        public static uint GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7;
        public static uint GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA;
        public static uint GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6;
        public static uint GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9;
        public static uint GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5;
        public static uint GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8;
        public static uint GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4;
        public static uint GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023;
        public static uint GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F;
        public static uint GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022;
        public static uint GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E;
        public static uint GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021;
        public static uint GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D;
        public static uint GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x8020;
        public static uint GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x801C;
        public static uint GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B;
        public static uint GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C;
        public static uint GL_READ_BUFFER = 0x0C02;
        public static uint GL_READ_BUFFER_EXT = 0x0C02;
        public static uint GL_READ_BUFFER_NV = 0x0C02;
        public static uint GL_REFERENCE_PLANE_EQUATION_SGIX = 0x817E;
        public static uint GL_SAMPLES_SGIS = 0x80A9;
        public static uint GL_SAMPLE_BUFFERS_SGIS = 0x80A8;
        public static uint GL_SAMPLE_MASK_INVERT_SGIS = 0x80AB;
        public static uint GL_SAMPLE_MASK_VALUE_SGIS = 0x80AA;
        public static uint GL_SAMPLE_PATTERN_SGIS = 0x80AC;
        public static uint GL_SCISSOR_BOX = 0x0C10;
        public static uint GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
        public static uint GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
        public static uint GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
        public static uint GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
        public static uint GL_SPRITE_AXIS_SGIX = 0x814A;
        public static uint GL_SPRITE_MODE_SGIX = 0x8149;
        public static uint GL_SPRITE_TRANSLATION_SGIX = 0x814B;
        public static uint GL_STENCIL_CLEAR_VALUE = 0x0B91;
        public static uint GL_STENCIL_FAIL = 0x0B94;
        public static uint GL_STENCIL_FUNC = 0x0B92;
        public static uint GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
        public static uint GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
        public static uint GL_STENCIL_REF = 0x0B97;
        public static uint GL_STENCIL_VALUE_MASK = 0x0B93;
        public static uint GL_STENCIL_WRITEMASK = 0x0B98;
        public static uint GL_STEREO = 0x0C33;
        public static uint GL_SUBPIXEL_BITS = 0x0D50;
        public static uint GL_TEXTURE_3D_BINDING_EXT = 0x806A;
        public static uint GL_TEXTURE_4D_BINDING_SGIS = 0x814F;
        public static uint GL_TEXTURE_BINDING_1D = 0x8068;
        public static uint GL_TEXTURE_BINDING_2D = 0x8069;
        public static uint GL_TEXTURE_BINDING_3D = 0x806A;
        public static uint GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B;
        public static uint GL_VERTEX_ARRAY_COUNT_EXT = 0x807D;
        public static uint GL_VIEWPORT = 0x0BA2;
        public static uint GL_EXTENSIONS = 0x1F03;
        public static uint GL_RENDERER = 0x1F01;
        public static uint GL_VENDOR = 0x1F00;
        public static uint GL_VERSION = 0x1F02;
        public static uint GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C;
        public static uint GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0;
        public static uint GL_TEXTURE_4DSIZE_SGIS = 0x8136;
        public static uint GL_TEXTURE_ALPHA_SIZE = 0x805F;
        public static uint GL_TEXTURE_BLUE_SIZE = 0x805E;
        public static uint GL_TEXTURE_BORDER_COLOR_NV = 0x1004;
        public static uint GL_TEXTURE_COMPARE_OPERATOR_SGIX = 0x819B;
        public static uint GL_TEXTURE_DEPTH_EXT = 0x8071;
        public static uint GL_TEXTURE_FILTER4_SIZE_SGIS = 0x8147;
        public static uint GL_TEXTURE_GEQUAL_R_SGIX = 0x819D;
        public static uint GL_TEXTURE_GREEN_SIZE = 0x805D;
        public static uint GL_TEXTURE_HEIGHT = 0x1001;
        public static uint GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
        public static uint GL_TEXTURE_LEQUAL_R_SGIX = 0x819C;
        public static uint GL_TEXTURE_RED_SIZE = 0x805C;
        public static uint GL_TEXTURE_WIDTH = 0x1000;
        public static uint GL_LINES = 0x0001;
        public static uint GL_LINES_ADJACENCY = 0x000A;
        public static uint GL_LINES_ADJACENCY_ARB = 0x000A;
        public static uint GL_LINES_ADJACENCY_EXT = 0x000A;
        public static uint GL_LINE_LOOP = 0x0002;
        public static uint GL_LINE_STRIP = 0x0003;
        public static uint GL_LINE_STRIP_ADJACENCY = 0x000B;
        public static uint GL_LINE_STRIP_ADJACENCY_ARB = 0x000B;
        public static uint GL_LINE_STRIP_ADJACENCY_EXT = 0x000B;
        public static uint GL_PATCHES = 0x000E;
        public static uint GL_POINTS = 0x0000;
        public static uint GL_TRIANGLES = 0x0004;
        public static uint GL_TRIANGLES_ADJACENCY = 0x000C;
        public static uint GL_TRIANGLES_ADJACENCY_ARB = 0x000C;
        public static uint GL_TRIANGLES_ADJACENCY_EXT = 0x000C;
        public static uint GL_TRIANGLE_FAN = 0x0006;
        public static uint GL_TRIANGLE_STRIP = 0x0005;
        public static uint GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
        public static uint GL_TRIANGLE_STRIP_ADJACENCY_ARB = 0x000D;
        public static uint GL_TRIANGLE_STRIP_ADJACENCY_EXT = 0x000D;
        public static uint GL_CLIP_DISTANCE0 = 0x3000;
        public static uint GL_CLIP_DISTANCE1 = 0x3001;
        public static uint GL_CLIP_DISTANCE2 = 0x3002;
        public static uint GL_CLIP_DISTANCE3 = 0x3003;
        public static uint GL_CLIP_DISTANCE4 = 0x3004;
        public static uint GL_CLIP_DISTANCE5 = 0x3005;
        public static uint GL_CLIP_DISTANCE6 = 0x3006;
        public static uint GL_CLIP_DISTANCE7 = 0x3007;
        public static uint GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8;
        public static uint GL_EYE_LINE_SGIS = 0x81F6;
        public static uint GL_EYE_POINT_SGIS = 0x81F4;
        public static uint GL_OBJECT_LINE_SGIS = 0x81F7;
        public static uint GL_OBJECT_POINT_SGIS = 0x81F5;
        public static uint GL_MULTISAMPLE_BIT_3DFX = 0x20000000;
        public static uint GL_MULTISAMPLE_BIT_ARB = 0x20000000;
        public static uint GL_MULTISAMPLE_BIT_EXT = 0x20000000;
        public static uint GL_GEOMETRY_DEFORMATION_SGIX = 0x8194;
        public static uint GL_TEXTURE_DEFORMATION_SGIX = 0x8195;
        public static uint GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB;
        public static uint GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7;
        public static uint GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA;
        public static uint GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6;
        public static uint GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9;
        public static uint GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5;
        public static uint GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8;
        public static uint GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4;
        public static uint GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023;
        public static uint GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F;
        public static uint GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022;
        public static uint GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E;
        public static uint GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021;
        public static uint GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D;
        public static uint GL_POST_CONVOLUTION_RED_BIAS = 0x8020;
        public static uint GL_POST_CONVOLUTION_RED_SCALE = 0x801C;
        public static uint GL_COLOR = 0x1800;
        public static uint GL_COLOR_EXT = 0x1800;
        public static uint GL_DEPTH = 0x1801;
        public static uint GL_DEPTH_EXT = 0x1801;
        public static uint GL_STENCIL = 0x1802;
        public static uint GL_STENCIL_EXT = 0x1802;
        public static uint GL_MODELVIEW0_EXT = 0x1700;
        public static uint GL_TEXTURE = 0x1702;
        public static uint GL_NO_ERROR = 0;
        public static uint GL_INVALID_ENUM = 0x0500;
        public static uint GL_INVALID_VALUE = 0x0501;
        public static uint GL_INVALID_OPERATION = 0x0502;
        public static uint GL_OUT_OF_MEMORY = 0x0505;
        public static uint GL_DOUBLE = 0x140A;
        public static uint GL_NEAREST = 0x2600;
        public static uint GL_LINEAR = 0x2601;
        public static uint GL_NEAREST_MIPMAP_NEAREST = 0x2700;
        public static uint GL_LINEAR_MIPMAP_NEAREST = 0x2701;
        public static uint GL_NEAREST_MIPMAP_LINEAR = 0x2702;
        public static uint GL_LINEAR_MIPMAP_LINEAR = 0x2703;
        public static uint GL_REPEAT = 0x2901;
        public static uint GL_R3_G3_B2 = 0x2A10;
        public static uint GL_RGB4 = 0x804F;
        public static uint GL_RGB5 = 0x8050;
        public static uint GL_RGB8 = 0x8051;
        public static uint GL_RGB10 = 0x8052;
        public static uint GL_RGB12 = 0x8053;
        public static uint GL_RGB16 = 0x8054;
        public static uint GL_RGBA2 = 0x8055;
        public static uint GL_RGBA4 = 0x8056;
        public static uint GL_RGB5_A1 = 0x8057;
        public static uint GL_RGBA8 = 0x8058;
        public static uint GL_RGB10_A2 = 0x8059;
        public static uint GL_RGBA12 = 0x805A;
        public static uint GL_RGBA16 = 0x805B;
        public static uint GL_TEXTURE_DEPTH = 0x8071;
        public static uint GL_MAX_3D_TEXTURE_SIZE = 0x8073;
        public static uint GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
        public static uint GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
        public static uint GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
        public static uint GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
        public static uint GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
        public static uint GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
        public static uint GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
        public static uint GL_BGR = 0x80E0;
        public static uint GL_BGRA = 0x80E1;
        public static uint GL_MAX_ELEMENTS_VERTICES = 0x80E8;
        public static uint GL_MAX_ELEMENTS_INDICES = 0x80E9;
        public static uint GL_CLAMP_TO_EDGE = 0x812F;
        public static uint GL_TEXTURE0 = 0x84C0;
        public static uint GL_TEXTURE1 = 0x84C1;
        public static uint GL_TEXTURE2 = 0x84C2;
        public static uint GL_TEXTURE3 = 0x84C3;
        public static uint GL_TEXTURE4 = 0x84C4;
        public static uint GL_TEXTURE5 = 0x84C5;
        public static uint GL_TEXTURE6 = 0x84C6;
        public static uint GL_TEXTURE7 = 0x84C7;
        public static uint GL_TEXTURE8 = 0x84C8;
        public static uint GL_TEXTURE9 = 0x84C9;
        public static uint GL_TEXTURE10 = 0x84CA;
        public static uint GL_TEXTURE11 = 0x84CB;
        public static uint GL_TEXTURE12 = 0x84CC;
        public static uint GL_TEXTURE13 = 0x84CD;
        public static uint GL_TEXTURE14 = 0x84CE;
        public static uint GL_TEXTURE15 = 0x84CF;
        public static uint GL_TEXTURE16 = 0x84D0;
        public static uint GL_TEXTURE17 = 0x84D1;
        public static uint GL_TEXTURE18 = 0x84D2;
        public static uint GL_TEXTURE19 = 0x84D3;
        public static uint GL_TEXTURE20 = 0x84D4;
        public static uint GL_TEXTURE21 = 0x84D5;
        public static uint GL_TEXTURE22 = 0x84D6;
        public static uint GL_TEXTURE23 = 0x84D7;
        public static uint GL_TEXTURE24 = 0x84D8;
        public static uint GL_TEXTURE25 = 0x84D9;
        public static uint GL_TEXTURE26 = 0x84DA;
        public static uint GL_TEXTURE27 = 0x84DB;
        public static uint GL_TEXTURE28 = 0x84DC;
        public static uint GL_TEXTURE29 = 0x84DD;
        public static uint GL_TEXTURE30 = 0x84DE;
        public static uint GL_TEXTURE31 = 0x84DF;
        public static uint GL_ACTIVE_TEXTURE = 0x84E0;
        public static uint GL_MULTISAMPLE = 0x809D;
        public static uint GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
        public static uint GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
        public static uint GL_SAMPLE_COVERAGE = 0x80A0;
        public static uint GL_SAMPLE_BUFFERS = 0x80A8;
        public static uint GL_SAMPLES = 0x80A9;
        public static uint GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
        public static uint GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
        public static uint GL_TEXTURE_CUBE_MAP = 0x8513;
        public static uint GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
        public static uint GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
        public static uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
        public static uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
        public static uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
        public static uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
        public static uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
        public static uint GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
        public static uint GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
        public static uint GL_COMPRESSED_RGB = 0x84ED;
        public static uint GL_COMPRESSED_RGBA = 0x84EE;
        public static uint GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
        public static uint GL_TEXTURE_COMPRESSED = 0x86A1;
        public static uint GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
        public static uint GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
        public static uint GL_CLAMP_TO_BORDER = 0x812D;
        public static uint GL_BLEND_DST_RGB = 0x80C8;
        public static uint GL_BLEND_SRC_RGB = 0x80C9;
        public static uint GL_BLEND_DST_ALPHA = 0x80CA;
        public static uint GL_BLEND_SRC_ALPHA = 0x80CB;
        public static uint GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
        public static uint GL_DEPTH_COMPONENT16 = 0x81A5;
        public static uint GL_DEPTH_COMPONENT24 = 0x81A6;
        public static uint GL_DEPTH_COMPONENT32 = 0x81A7;
        public static uint GL_MIRRORED_REPEAT = 0x8370;
        public static uint GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
        public static uint GL_TEXTURE_LOD_BIAS = 0x8501;
        public static uint GL_INCR_WRAP = 0x8507;
        public static uint GL_DECR_WRAP = 0x8508;
        public static uint GL_TEXTURE_DEPTH_SIZE = 0x884A;
        public static uint GL_TEXTURE_COMPARE_MODE = 0x884C;
        public static uint GL_TEXTURE_COMPARE_FUNC = 0x884D;
        public static uint GL_FUNC_ADD = 0x8006;
        public static uint GL_FUNC_SUBTRACT = 0x800A;
        public static uint GL_FUNC_REVERSE_SUBTRACT = 0x800B;
        public static uint GL_MIN = 0x8007;
        public static uint GL_MAX = 0x8008;
        public static uint GL_CONSTANT_COLOR = 0x8001;
        public static uint GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
        public static uint GL_CONSTANT_ALPHA = 0x8003;
        public static uint GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
        public static uint GL_BUFFER_SIZE = 0x8764;
        public static uint GL_BUFFER_USAGE = 0x8765;
        public static uint GL_QUERY_COUNTER_BITS = 0x8864;
        public static uint GL_CURRENT_QUERY = 0x8865;
        public static uint GL_QUERY_RESULT = 0x8866;
        public static uint GL_QUERY_RESULT_AVAILABLE = 0x8867;
        public static uint GL_ARRAY_BUFFER = 0x8892;
        public static uint GL_ELEMENT_ARRAY_BUFFER = 0x8893;
        public static uint GL_ARRAY_BUFFER_BINDING = 0x8894;
        public static uint GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
        public static uint GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
        public static uint GL_READ_ONLY = 0x88B8;
        public static uint GL_WRITE_ONLY = 0x88B9;
        public static uint GL_READ_WRITE = 0x88BA;
        public static uint GL_BUFFER_ACCESS = 0x88BB;
        public static uint GL_BUFFER_MAPPED = 0x88BC;
        public static uint GL_BUFFER_MAP_POINTER = 0x88BD;
        public static uint GL_STREAM_DRAW = 0x88E0;
        public static uint GL_STREAM_READ = 0x88E1;
        public static uint GL_STREAM_COPY = 0x88E2;
        public static uint GL_STATIC_DRAW = 0x88E4;
        public static uint GL_STATIC_READ = 0x88E5;
        public static uint GL_STATIC_COPY = 0x88E6;
        public static uint GL_DYNAMIC_DRAW = 0x88E8;
        public static uint GL_DYNAMIC_READ = 0x88E9;
        public static uint GL_DYNAMIC_COPY = 0x88EA;
        public static uint GL_SAMPLES_PASSED = 0x8914;
        public static uint GL_SRC1_ALPHA = 0x8589;
        public static uint GL_BLEND_EQUATION_RGB = 0x8009;
        public static uint GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
        public static uint GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
        public static uint GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
        public static uint GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
        public static uint GL_CURRENT_VERTEX_ATTRIB = 0x8626;
        public static uint GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
        public static uint GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
        public static uint GL_STENCIL_BACK_FUNC = 0x8800;
        public static uint GL_STENCIL_BACK_FAIL = 0x8801;
        public static uint GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
        public static uint GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
        public static uint GL_MAX_DRAW_BUFFERS = 0x8824;
        public static uint GL_DRAW_BUFFER0 = 0x8825;
        public static uint GL_DRAW_BUFFER1 = 0x8826;
        public static uint GL_DRAW_BUFFER2 = 0x8827;
        public static uint GL_DRAW_BUFFER3 = 0x8828;
        public static uint GL_DRAW_BUFFER4 = 0x8829;
        public static uint GL_DRAW_BUFFER5 = 0x882A;
        public static uint GL_DRAW_BUFFER6 = 0x882B;
        public static uint GL_DRAW_BUFFER7 = 0x882C;
        public static uint GL_DRAW_BUFFER8 = 0x882D;
        public static uint GL_DRAW_BUFFER9 = 0x882E;
        public static uint GL_DRAW_BUFFER10 = 0x882F;
        public static uint GL_DRAW_BUFFER11 = 0x8830;
        public static uint GL_DRAW_BUFFER12 = 0x8831;
        public static uint GL_DRAW_BUFFER13 = 0x8832;
        public static uint GL_DRAW_BUFFER14 = 0x8833;
        public static uint GL_DRAW_BUFFER15 = 0x8834;
        public static uint GL_BLEND_EQUATION_ALPHA = 0x883D;
        public static uint GL_MAX_VERTEX_ATTRIBS = 0x8869;
        public static uint GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
        public static uint GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
        public static uint GL_FRAGMENT_SHADER = 0x8B30;
        public static uint GL_VERTEX_SHADER = 0x8B31;
        public static uint GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
        public static uint GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
        public static uint GL_MAX_VARYING_FLOATS = 0x8B4B;
        public static uint GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
        public static uint GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
        public static uint GL_SHADER_TYPE = 0x8B4F;
        public static uint GL_FLOAT_VEC2 = 0x8B50;
        public static uint GL_FLOAT_VEC3 = 0x8B51;
        public static uint GL_FLOAT_VEC4 = 0x8B52;
        public static uint GL_INT_VEC2 = 0x8B53;
        public static uint GL_INT_VEC3 = 0x8B54;
        public static uint GL_INT_VEC4 = 0x8B55;
        public static uint GL_BOOL = 0x8B56;
        public static uint GL_BOOL_VEC2 = 0x8B57;
        public static uint GL_BOOL_VEC3 = 0x8B58;
        public static uint GL_BOOL_VEC4 = 0x8B59;
        public static uint GL_FLOAT_MAT2 = 0x8B5A;
        public static uint GL_FLOAT_MAT3 = 0x8B5B;
        public static uint GL_FLOAT_MAT4 = 0x8B5C;
        public static uint GL_SAMPLER_1D = 0x8B5D;
        public static uint GL_SAMPLER_2D = 0x8B5E;
        public static uint GL_SAMPLER_3D = 0x8B5F;
        public static uint GL_SAMPLER_CUBE = 0x8B60;
        public static uint GL_SAMPLER_1D_SHADOW = 0x8B61;
        public static uint GL_SAMPLER_2D_SHADOW = 0x8B62;
        public static uint GL_DELETE_STATUS = 0x8B80;
        public static uint GL_COMPILE_STATUS = 0x8B81;
        public static uint GL_LINK_STATUS = 0x8B82;
        public static uint GL_VALIDATE_STATUS = 0x8B83;
        public static uint GL_INFO_LOG_LENGTH = 0x8B84;
        public static uint GL_ATTACHED_SHADERS = 0x8B85;
        public static uint GL_ACTIVE_UNIFORMS = 0x8B86;
        public static uint GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
        public static uint GL_SHADER_SOURCE_LENGTH = 0x8B88;
        public static uint GL_ACTIVE_ATTRIBUTES = 0x8B89;
        public static uint GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
        public static uint GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
        public static uint GL_CURRENT_PROGRAM = 0x8B8D;
        public static uint GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
        public static uint GL_LOWER_LEFT = 0x8CA1;
        public static uint GL_UPPER_LEFT = 0x8CA2;
        public static uint GL_STENCIL_BACK_REF = 0x8CA3;
        public static uint GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
        public static uint GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
        public static uint GL_PIXEL_PACK_BUFFER = 0x88EB;
        public static uint GL_PIXEL_UNPACK_BUFFER = 0x88EC;
        public static uint GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
        public static uint GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
        public static uint GL_FLOAT_MAT2x3 = 0x8B65;
        public static uint GL_FLOAT_MAT2x4 = 0x8B66;
        public static uint GL_FLOAT_MAT3x2 = 0x8B67;
        public static uint GL_FLOAT_MAT3x4 = 0x8B68;
        public static uint GL_FLOAT_MAT4x2 = 0x8B69;
        public static uint GL_FLOAT_MAT4x3 = 0x8B6A;
        public static uint GL_SRGB = 0x8C40;
        public static uint GL_SRGB8 = 0x8C41;
        public static uint GL_SRGB_ALPHA = 0x8C42;
        public static uint GL_SRGB8_ALPHA8 = 0x8C43;
        public static uint GL_COMPRESSED_SRGB = 0x8C48;
        public static uint GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
        public static uint GL_COMPARE_REF_TO_TEXTURE = 0x884E;
        public static uint GL_MAJOR_VERSION = 0x821B;
        public static uint GL_MINOR_VERSION = 0x821C;
        public static uint GL_NUM_EXTENSIONS = 0x821D;
        public static uint GL_CONTEXT_FLAGS = 0x821E;
        public static uint GL_COMPRESSED_RED = 0x8225;
        public static uint GL_COMPRESSED_RG = 0x8226;
        public static uint GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
        public static uint GL_RGBA32F = 0x8814;
        public static uint GL_RGB32F = 0x8815;
        public static uint GL_RGBA16F = 0x881A;
        public static uint GL_RGB16F = 0x881B;
        public static uint GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
        public static uint GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
        public static uint GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
        public static uint GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
        public static uint GL_CLAMP_READ_COLOR = 0x891C;
        public static uint GL_FIXED_ONLY = 0x891D;
        public static uint GL_MAX_VARYING_COMPONENTS = 0x8B4B;
        public static uint GL_TEXTURE_1D_ARRAY = 0x8C18;
        public static uint GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
        public static uint GL_TEXTURE_2D_ARRAY = 0x8C1A;
        public static uint GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
        public static uint GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
        public static uint GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
        public static uint GL_R11F_G11F_B10F = 0x8C3A;
        public static uint GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
        public static uint GL_RGB9_E5 = 0x8C3D;
        public static uint GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
        public static uint GL_TEXTURE_SHARED_SIZE = 0x8C3F;
        public static uint GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
        public static uint GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
        public static uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
        public static uint GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
        public static uint GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
        public static uint GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
        public static uint GL_PRIMITIVES_GENERATED = 0x8C87;
        public static uint GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
        public static uint GL_RASTERIZER_DISCARD = 0x8C89;
        public static uint GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
        public static uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
        public static uint GL_INTERLEAVED_ATTRIBS = 0x8C8C;
        public static uint GL_SEPARATE_ATTRIBS = 0x8C8D;
        public static uint GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
        public static uint GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
        public static uint GL_RGBA32UI = 0x8D70;
        public static uint GL_RGB32UI = 0x8D71;
        public static uint GL_RGBA16UI = 0x8D76;
        public static uint GL_RGB16UI = 0x8D77;
        public static uint GL_RGBA8UI = 0x8D7C;
        public static uint GL_RGB8UI = 0x8D7D;
        public static uint GL_RGBA32I = 0x8D82;
        public static uint GL_RGB32I = 0x8D83;
        public static uint GL_RGBA16I = 0x8D88;
        public static uint GL_RGB16I = 0x8D89;
        public static uint GL_RGBA8I = 0x8D8E;
        public static uint GL_RGB8I = 0x8D8F;
        public static uint GL_RED_INTEGER = 0x8D94;
        public static uint GL_GREEN_INTEGER = 0x8D95;
        public static uint GL_BLUE_INTEGER = 0x8D96;
        public static uint GL_RGB_INTEGER = 0x8D98;
        public static uint GL_RGBA_INTEGER = 0x8D99;
        public static uint GL_BGR_INTEGER = 0x8D9A;
        public static uint GL_BGRA_INTEGER = 0x8D9B;
        public static uint GL_SAMPLER_1D_ARRAY = 0x8DC0;
        public static uint GL_SAMPLER_2D_ARRAY = 0x8DC1;
        public static uint GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
        public static uint GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
        public static uint GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
        public static uint GL_UNSIGNED_INT_VEC2 = 0x8DC6;
        public static uint GL_UNSIGNED_INT_VEC3 = 0x8DC7;
        public static uint GL_UNSIGNED_INT_VEC4 = 0x8DC8;
        public static uint GL_INT_SAMPLER_1D = 0x8DC9;
        public static uint GL_INT_SAMPLER_2D = 0x8DCA;
        public static uint GL_INT_SAMPLER_3D = 0x8DCB;
        public static uint GL_INT_SAMPLER_CUBE = 0x8DCC;
        public static uint GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
        public static uint GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
        public static uint GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
        public static uint GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
        public static uint GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
        public static uint GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
        public static uint GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
        public static uint GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
        public static uint GL_QUERY_WAIT = 0x8E13;
        public static uint GL_QUERY_NO_WAIT = 0x8E14;
        public static uint GL_QUERY_BY_REGION_WAIT = 0x8E15;
        public static uint GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
        public static uint GL_BUFFER_ACCESS_FLAGS = 0x911F;
        public static uint GL_BUFFER_MAP_LENGTH = 0x9120;
        public static uint GL_BUFFER_MAP_OFFSET = 0x9121;
        public static uint GL_DEPTH_COMPONENT32F = 0x8CAC;
        public static uint GL_DEPTH32F_STENCIL8 = 0x8CAD;
        public static uint GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
        public static uint GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
        public static uint GL_FRAMEBUFFER_DEFAULT = 0x8218;
        public static uint GL_FRAMEBUFFER_UNDEFINED = 0x8219;
        public static uint GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
        public static uint GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
        public static uint GL_DEPTH_STENCIL = 0x84F9;
        public static uint GL_UNSIGNED_INT_24_8 = 0x84FA;
        public static uint GL_DEPTH24_STENCIL8 = 0x88F0;
        public static uint GL_TEXTURE_STENCIL_SIZE = 0x88F1;
        public static uint GL_TEXTURE_RED_TYPE = 0x8C10;
        public static uint GL_TEXTURE_GREEN_TYPE = 0x8C11;
        public static uint GL_TEXTURE_BLUE_TYPE = 0x8C12;
        public static uint GL_TEXTURE_ALPHA_TYPE = 0x8C13;
        public static uint GL_TEXTURE_DEPTH_TYPE = 0x8C16;
        public static uint GL_UNSIGNED_NORMALIZED = 0x8C17;
        public static uint GL_FRAMEBUFFER_BINDING = 0x8CA6;
        public static uint GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
        public static uint GL_RENDERBUFFER_BINDING = 0x8CA7;
        public static uint GL_READ_FRAMEBUFFER = 0x8CA8;
        public static uint GL_DRAW_FRAMEBUFFER = 0x8CA9;
        public static uint GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
        public static uint GL_RENDERBUFFER_SAMPLES = 0x8CAB;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
        public static uint GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
        public static uint GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
        public static uint GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
        public static uint GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
        public static uint GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
        public static uint GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
        public static uint GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
        public static uint GL_COLOR_ATTACHMENT0 = 0x8CE0;
        public static uint GL_COLOR_ATTACHMENT1 = 0x8CE1;
        public static uint GL_COLOR_ATTACHMENT2 = 0x8CE2;
        public static uint GL_COLOR_ATTACHMENT3 = 0x8CE3;
        public static uint GL_COLOR_ATTACHMENT4 = 0x8CE4;
        public static uint GL_COLOR_ATTACHMENT5 = 0x8CE5;
        public static uint GL_COLOR_ATTACHMENT6 = 0x8CE6;
        public static uint GL_COLOR_ATTACHMENT7 = 0x8CE7;
        public static uint GL_COLOR_ATTACHMENT8 = 0x8CE8;
        public static uint GL_COLOR_ATTACHMENT9 = 0x8CE9;
        public static uint GL_COLOR_ATTACHMENT10 = 0x8CEA;
        public static uint GL_COLOR_ATTACHMENT11 = 0x8CEB;
        public static uint GL_COLOR_ATTACHMENT12 = 0x8CEC;
        public static uint GL_COLOR_ATTACHMENT13 = 0x8CED;
        public static uint GL_COLOR_ATTACHMENT14 = 0x8CEE;
        public static uint GL_COLOR_ATTACHMENT15 = 0x8CEF;
        public static uint GL_DEPTH_ATTACHMENT = 0x8D00;
        public static uint GL_STENCIL_ATTACHMENT = 0x8D20;
        public static uint GL_FRAMEBUFFER = 0x8D40;
        public static uint GL_RENDERBUFFER = 0x8D41;
        public static uint GL_RENDERBUFFER_WIDTH = 0x8D42;
        public static uint GL_RENDERBUFFER_HEIGHT = 0x8D43;
        public static uint GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
        public static uint GL_STENCIL_INDEX1 = 0x8D46;
        public static uint GL_STENCIL_INDEX4 = 0x8D47;
        public static uint GL_STENCIL_INDEX8 = 0x8D48;
        public static uint GL_STENCIL_INDEX16 = 0x8D49;
        public static uint GL_RENDERBUFFER_RED_SIZE = 0x8D50;
        public static uint GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
        public static uint GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
        public static uint GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
        public static uint GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
        public static uint GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
        public static uint GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
        public static uint GL_MAX_SAMPLES = 0x8D57;
        public static uint GL_INDEX = 0x8222;
        public static uint GL_FRAMEBUFFER_SRGB = 0x8DB9;
        public static uint GL_HALF_FLOAT = 0x140B;
        public static uint GL_MAP_READ_BIT = 0x0001;
        public static uint GL_MAP_WRITE_BIT = 0x0002;
        public static uint GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
        public static uint GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
        public static uint GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
        public static uint GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
        public static uint GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
        public static uint GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
        public static uint GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
        public static uint GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
        public static uint GL_RG = 0x8227;
        public static uint GL_RG_INTEGER = 0x8228;
        public static uint GL_R8 = 0x8229;
        public static uint GL_R16 = 0x822A;
        public static uint GL_RG8 = 0x822B;
        public static uint GL_RG16 = 0x822C;
        public static uint GL_R16F = 0x822D;
        public static uint GL_R32F = 0x822E;
        public static uint GL_RG16F = 0x822F;
        public static uint GL_RG32F = 0x8230;
        public static uint GL_R8I = 0x8231;
        public static uint GL_R8UI = 0x8232;
        public static uint GL_R16I = 0x8233;
        public static uint GL_R16UI = 0x8234;
        public static uint GL_R32I = 0x8235;
        public static uint GL_R32UI = 0x8236;
        public static uint GL_RG8I = 0x8237;
        public static uint GL_RG8UI = 0x8238;
        public static uint GL_RG16I = 0x8239;
        public static uint GL_RG16UI = 0x823A;
        public static uint GL_RG32I = 0x823B;
        public static uint GL_RG32UI = 0x823C;
        public static uint GL_VERTEX_ARRAY_BINDING = 0x85B5;
        public static uint GL_SAMPLER_2D_RECT = 0x8B63;
        public static uint GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
        public static uint GL_SAMPLER_BUFFER = 0x8DC2;
        public static uint GL_INT_SAMPLER_2D_RECT = 0x8DCD;
        public static uint GL_INT_SAMPLER_BUFFER = 0x8DD0;
        public static uint GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
        public static uint GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
        public static uint GL_TEXTURE_BUFFER = 0x8C2A;
        public static uint GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
        public static uint GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
        public static uint GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
        public static uint GL_TEXTURE_RECTANGLE = 0x84F5;
        public static uint GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
        public static uint GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
        public static uint GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
        public static uint GL_R8_SNORM = 0x8F94;
        public static uint GL_RG8_SNORM = 0x8F95;
        public static uint GL_RGB8_SNORM = 0x8F96;
        public static uint GL_RGBA8_SNORM = 0x8F97;
        public static uint GL_R16_SNORM = 0x8F98;
        public static uint GL_RG16_SNORM = 0x8F99;
        public static uint GL_RGB16_SNORM = 0x8F9A;
        public static uint GL_RGBA16_SNORM = 0x8F9B;
        public static uint GL_SIGNED_NORMALIZED = 0x8F9C;
        public static uint GL_PRIMITIVE_RESTART = 0x8F9D;
        public static uint GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
        public static uint GL_COPY_READ_BUFFER = 0x8F36;
        public static uint GL_COPY_WRITE_BUFFER = 0x8F37;
        public static uint GL_UNIFORM_BUFFER = 0x8A11;
        public static uint GL_UNIFORM_BUFFER_BINDING = 0x8A28;
        public static uint GL_UNIFORM_BUFFER_START = 0x8A29;
        public static uint GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
        public static uint GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
        public static uint GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
        public static uint GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
        public static uint GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
        public static uint GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
        public static uint GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
        public static uint GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
        public static uint GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
        public static uint GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
        public static uint GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
        public static uint GL_UNIFORM_TYPE = 0x8A37;
        public static uint GL_UNIFORM_SIZE = 0x8A38;
        public static uint GL_UNIFORM_NAME_LENGTH = 0x8A39;
        public static uint GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
        public static uint GL_UNIFORM_OFFSET = 0x8A3B;
        public static uint GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
        public static uint GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
        public static uint GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
        public static uint GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
        public static uint GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
        public static uint GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
        public static uint GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
        public static uint GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
        public static uint GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
        public static uint GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
        public static uint GL_INVALID_INDEX = 0xFFFFFFFF;
        public static uint GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
        public static uint GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
        public static uint GL_PROGRAM_POINT_SIZE = 0x8642;
        public static uint GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
        public static uint GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
        public static uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
        public static uint GL_GEOMETRY_SHADER = 0x8DD9;
        public static uint GL_GEOMETRY_VERTICES_OUT = 0x8916;
        public static uint GL_GEOMETRY_INPUT_TYPE = 0x8917;
        public static uint GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
        public static uint GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
        public static uint GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
        public static uint GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
        public static uint GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
        public static uint GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
        public static uint GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
        public static uint GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
        public static uint GL_CONTEXT_PROFILE_MASK = 0x9126;
        public static uint GL_DEPTH_CLAMP = 0x864F;
        public static uint GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
        public static uint GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
        public static uint GL_LAST_VERTEX_CONVENTION = 0x8E4E;
        public static uint GL_PROVOKING_VERTEX = 0x8E4F;
        public static uint GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
        public static uint GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
        public static uint GL_OBJECT_TYPE = 0x9112;
        public static uint GL_SYNC_CONDITION = 0x9113;
        public static uint GL_SYNC_STATUS = 0x9114;
        public static uint GL_SYNC_FLAGS = 0x9115;
        public static uint GL_SYNC_FENCE = 0x9116;
        public static uint GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
        public static uint GL_UNSIGNALED = 0x9118;
        public static uint GL_SIGNALED = 0x9119;
        public static uint GL_ALREADY_SIGNALED = 0x911A;
        public static uint GL_TIMEOUT_EXPIRED = 0x911B;
        public static uint GL_CONDITION_SATISFIED = 0x911C;
        public static uint GL_WAIT_FAILED = 0x911D;
        public static ulong GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;
        public static uint GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
        public static uint GL_SAMPLE_POSITION = 0x8E50;
        public static uint GL_SAMPLE_MASK = 0x8E51;
        public static uint GL_SAMPLE_MASK_VALUE = 0x8E52;
        public static uint GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
        public static uint GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
        public static uint GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
        public static uint GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
        public static uint GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
        public static uint GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
        public static uint GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
        public static uint GL_TEXTURE_SAMPLES = 0x9106;
        public static uint GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
        public static uint GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
        public static uint GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
        public static uint GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
        public static uint GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
        public static uint GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
        public static uint GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
        public static uint GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
        public static uint GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
        public static uint GL_MAX_INTEGER_SAMPLES = 0x9110;
        #endregion

        #region Commands
        public static void glCullFace(uint mode)
        {
            glCullFacePtr(mode);
        }
        public static void glFrontFace(uint mode)
        {
            glFrontFacePtr(mode);
        }
        public static void glHint(uint target, uint mode)
        {
            glHintPtr(target, mode);
        }
        public static void glLineWidth(float width)
        {
            glLineWidthPtr(width);
        }
        public static void glPointSize(float size)
        {
            glPointSizePtr(size);
        }
        public static void glPolygonMode(uint face, uint mode)
        {
            glPolygonModePtr(face, mode);
        }
        public static void glScissor(int x, int y, int width, int height)
        {
            glScissorPtr(x, y, width, height);
        }
        public static void glTexParameterf(uint target, uint pname, float param)
        {
            glTexParameterfPtr(target, pname, param);
        }
        public static void glTexParameterfv(uint target, uint pname, IntPtr @params)
        {
            glTexParameterfvPtr(target, pname, @params);
        }
        public static void glTexParameteri(uint target, uint pname, int param)
        {
            glTexParameteriPtr(target, pname, param);
        }
        public static void glTexParameteriv(uint target, uint pname, IntPtr @params)
        {
            glTexParameterivPtr(target, pname, @params);
        }
        public static void glTexImage1D(uint target, int level, int internalformat, int width, int border, uint format, uint type, IntPtr pixels)
        {
            glTexImage1DPtr(target, level, internalformat, width, border, format, type, pixels);
        }
        public static void glTexImage2D(uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, IntPtr pixels)
        {
            glTexImage2DPtr(target, level, internalformat, width, height, border, format, type, pixels);
        }
        public static void glDrawBuffer(uint mode)
        {
            glDrawBufferPtr(mode);
        }
        public static void glClear(uint mask)
        {
            glClearPtr(mask);
        }
        public static void glClearColor(float red, float green, float blue, float alpha)
        {
            glClearColorPtr(red, green, blue, alpha);
        }
        public static void glClearStencil(int s)
        {
            glClearStencilPtr(s);
        }
        public static void glClearDepth(double depth)
        {
            glClearDepthPtr(depth);
        }
        public static void glStencilMask(uint mask)
        {
            glStencilMaskPtr(mask);
        }
        public static void glColorMask(bool red, bool green, bool blue, bool alpha)
        {
            glColorMaskPtr(red, green, blue, alpha);
        }
        public static void glDepthMask(bool flag)
        {
            glDepthMaskPtr(flag);
        }
        public static void glDisable(uint cap)
        {
            glDisablePtr(cap);
        }
        public static void glEnable(uint cap)
        {
            glEnablePtr(cap);
        }
        public static void glFinish()
        {
            glFinishPtr();
        }
        public static void glFlush()
        {
            glFlushPtr();
        }
        public static void glBlendFunc(uint sfactor, uint dfactor)
        {
            glBlendFuncPtr(sfactor, dfactor);
        }
        public static void glLogicOp(uint opcode)
        {
            glLogicOpPtr(opcode);
        }
        public static void glStencilFunc(uint func, int @ref, uint mask)
        {
            glStencilFuncPtr(func, @ref, mask);
        }
        public static void glStencilOp(uint fail, uint zfail, uint zpass)
        {
            glStencilOpPtr(fail, zfail, zpass);
        }
        public static void glDepthFunc(uint func)
        {
            glDepthFuncPtr(func);
        }
        public static void glPixelStoref(uint pname, float param)
        {
            glPixelStorefPtr(pname, param);
        }
        public static void glPixelStorei(uint pname, int param)
        {
            glPixelStoreiPtr(pname, param);
        }
        public static void glReadBuffer(uint mode)
        {
            glReadBufferPtr(mode);
        }
        public static void glReadPixels(int x, int y, int width, int height, uint format, uint type, IntPtr pixels)
        {
            glReadPixelsPtr(x, y, width, height, format, type, pixels);
        }
        public static void glGetBooleanv(uint pname, IntPtr data)
        {
            glGetBooleanvPtr(pname, data);
        }
        public static void glGetDoublev(uint pname, IntPtr data)
        {
            glGetDoublevPtr(pname, data);
        }
        public static uint glGetError()
        {
            return glGetErrorPtr();
        }
        public static void glGetFloatv(uint pname, IntPtr data)
        {
            glGetFloatvPtr(pname, data);
        }
        public static void glGetIntegerv(uint pname, IntPtr data)
        {
            glGetIntegervPtr(pname, data);
        }
        public static IntPtr glGetString(uint name)
        {
            return glGetStringPtr(name);
        }
        public static void glGetTexImage(uint target, int level, uint format, uint type, IntPtr pixels)
        {
            glGetTexImagePtr(target, level, format, type, pixels);
        }
        public static void glGetTexParameterfv(uint target, uint pname, IntPtr @params)
        {
            glGetTexParameterfvPtr(target, pname, @params);
        }
        public static void glGetTexParameteriv(uint target, uint pname, IntPtr @params)
        {
            glGetTexParameterivPtr(target, pname, @params);
        }
        public static void glGetTexLevelParameterfv(uint target, int level, uint pname, IntPtr @params)
        {
            glGetTexLevelParameterfvPtr(target, level, pname, @params);
        }
        public static void glGetTexLevelParameteriv(uint target, int level, uint pname, IntPtr @params)
        {
            glGetTexLevelParameterivPtr(target, level, pname, @params);
        }
        public static bool glIsEnabled(uint cap)
        {
            return glIsEnabledPtr(cap);
        }
        public static void glDepthRange(double near, double far)
        {
            glDepthRangePtr(near, far);
        }
        public static void glViewport(int x, int y, int width, int height)
        {
            glViewportPtr(x, y, width, height);
        }
        public static void glDrawArrays(uint mode, int first, int count)
        {
            glDrawArraysPtr(mode, first, count);
        }
        public static void glDrawElements(uint mode, int count, uint type, IntPtr indices)
        {
            glDrawElementsPtr(mode, count, type, indices);
        }
        public static void glPolygonOffset(float factor, float units)
        {
            glPolygonOffsetPtr(factor, units);
        }
        public static void glCopyTexImage1D(uint target, int level, uint internalformat, int x, int y, int width, int border)
        {
            glCopyTexImage1DPtr(target, level, internalformat, x, y, width, border);
        }
        public static void glCopyTexImage2D(uint target, int level, uint internalformat, int x, int y, int width, int height, int border)
        {
            glCopyTexImage2DPtr(target, level, internalformat, x, y, width, height, border);
        }
        public static void glCopyTexSubImage1D(uint target, int level, int xoffset, int x, int y, int width)
        {
            glCopyTexSubImage1DPtr(target, level, xoffset, x, y, width);
        }
        public static void glCopyTexSubImage2D(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            glCopyTexSubImage2DPtr(target, level, xoffset, yoffset, x, y, width, height);
        }
        public static void glTexSubImage1D(uint target, int level, int xoffset, int width, uint format, uint type, IntPtr pixels)
        {
            glTexSubImage1DPtr(target, level, xoffset, width, format, type, pixels);
        }
        public static void glTexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, IntPtr pixels)
        {
            glTexSubImage2DPtr(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }
        public static void glBindTexture(uint target, uint texture)
        {
            glBindTexturePtr(target, texture);
        }
        public static void glDeleteTextures(int n, IntPtr textures)
        {
            glDeleteTexturesPtr(n, textures);
        }
        public static void glGenTextures(int n, IntPtr textures)
        {
            glGenTexturesPtr(n, textures);
        }
        public static bool glIsTexture(uint texture)
        {
            return glIsTexturePtr(texture);
        }
        public static void glDrawRangeElements(uint mode, uint start, uint end, int count, uint type, IntPtr indices)
        {
            glDrawRangeElementsPtr(mode, start, end, count, type, indices);
        }
        public static void glTexImage3D(uint target, int level, int internalformat, int width, int height, int depth, int border, uint format, uint type, IntPtr pixels)
        {
            glTexImage3DPtr(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }
        public static void glTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, IntPtr pixels)
        {
            glTexSubImage3DPtr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        public static void glCopyTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            glCopyTexSubImage3DPtr(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        public static void glActiveTexture(uint texture)
        {
            glActiveTexturePtr(texture);
        }
        public static void glSampleCoverage(float value, bool invert)
        {
            glSampleCoveragePtr(value, invert);
        }
        public static void glCompressedTexImage3D(uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
        {
            glCompressedTexImage3DPtr(target, level, internalformat, width, height, depth, border, imageSize, data);
        }
        public static void glCompressedTexImage2D(uint target, int level, uint internalformat, int width, int height, int border, int imageSize, IntPtr data)
        {
            glCompressedTexImage2DPtr(target, level, internalformat, width, height, border, imageSize, data);
        }
        public static void glCompressedTexImage1D(uint target, int level, uint internalformat, int width, int border, int imageSize, IntPtr data)
        {
            glCompressedTexImage1DPtr(target, level, internalformat, width, border, imageSize, data);
        }
        public static void glCompressedTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, IntPtr data)
        {
            glCompressedTexSubImage3DPtr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }
        public static void glCompressedTexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, IntPtr data)
        {
            glCompressedTexSubImage2DPtr(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }
        public static void glCompressedTexSubImage1D(uint target, int level, int xoffset, int width, uint format, int imageSize, IntPtr data)
        {
            glCompressedTexSubImage1DPtr(target, level, xoffset, width, format, imageSize, data);
        }
        public static void glGetCompressedTexImage(uint target, int level, IntPtr img)
        {
            glGetCompressedTexImagePtr(target, level, img);
        }
        public static void glBlendFuncSeparate(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha)
        {
            glBlendFuncSeparatePtr(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }
        public static void glMultiDrawArrays(uint mode, IntPtr first, IntPtr count, int drawcount)
        {
            glMultiDrawArraysPtr(mode, first, count, drawcount);
        }
        public static void glMultiDrawElements(uint mode, IntPtr count, uint type, IntPtr indices, int drawcount)
        {
            glMultiDrawElementsPtr(mode, count, type, indices, drawcount);
        }
        public static void glPointParameterf(uint pname, float param)
        {
            glPointParameterfPtr(pname, param);
        }
        public static void glPointParameterfv(uint pname, IntPtr @params)
        {
            glPointParameterfvPtr(pname, @params);
        }
        public static void glPointParameteri(uint pname, int param)
        {
            glPointParameteriPtr(pname, param);
        }
        public static void glPointParameteriv(uint pname, IntPtr @params)
        {
            glPointParameterivPtr(pname, @params);
        }
        public static void glBlendColor(float red, float green, float blue, float alpha)
        {
            glBlendColorPtr(red, green, blue, alpha);
        }
        public static void glBlendEquation(uint mode)
        {
            glBlendEquationPtr(mode);
        }
        public static void glGenQueries(int n, IntPtr ids)
        {
            glGenQueriesPtr(n, ids);
        }
        public static void glDeleteQueries(int n, IntPtr ids)
        {
            glDeleteQueriesPtr(n, ids);
        }
        public static bool glIsQuery(uint id)
        {
            return glIsQueryPtr(id);
        }
        public static void glBeginQuery(uint target, uint id)
        {
            glBeginQueryPtr(target, id);
        }
        public static void glEndQuery(uint target)
        {
            glEndQueryPtr(target);
        }
        public static void glGetQueryiv(uint target, uint pname, IntPtr @params)
        {
            glGetQueryivPtr(target, pname, @params);
        }
        public static void glGetQueryObjectiv(uint id, uint pname, IntPtr @params)
        {
            glGetQueryObjectivPtr(id, pname, @params);
        }
        public static void glGetQueryObjectuiv(uint id, uint pname, IntPtr @params)
        {
            glGetQueryObjectuivPtr(id, pname, @params);
        }
        public static void glBindBuffer(uint target, uint buffer)
        {
            glBindBufferPtr(target, buffer);
        }
        public static void glDeleteBuffers(int n, IntPtr buffers)
        {
            glDeleteBuffersPtr(n, buffers);
        }
        public static void glGenBuffers(int n, IntPtr buffers)
        {
            glGenBuffersPtr(n, buffers);
        }
        public static bool glIsBuffer(uint buffer)
        {
            return glIsBufferPtr(buffer);
        }
        public static void glBufferData(uint target, int size, IntPtr data, uint usage)
        {
            glBufferDataPtr(target, size, data, usage);
        }
        public static void glBufferSubData(uint target, IntPtr offset, int size, IntPtr data)
        {
            glBufferSubDataPtr(target, offset, size, data);
        }
        public static void glGetBufferSubData(uint target, IntPtr offset, int size, IntPtr data)
        {
            glGetBufferSubDataPtr(target, offset, size, data);
        }
        public static IntPtr glMapBuffer(uint target, uint access)
        {
            return glMapBufferPtr(target, access);
        }
        public static bool glUnmapBuffer(uint target)
        {
            return glUnmapBufferPtr(target);
        }
        public static void glGetBufferParameteriv(uint target, uint pname, IntPtr @params)
        {
            glGetBufferParameterivPtr(target, pname, @params);
        }
        public static void glGetBufferPointerv(uint target, uint pname, IntPtr @params)
        {
            glGetBufferPointervPtr(target, pname, @params);
        }
        public static void glBlendEquationSeparate(uint modeRGB, uint modeAlpha)
        {
            glBlendEquationSeparatePtr(modeRGB, modeAlpha);
        }
        public static void glDrawBuffers(int n, IntPtr bufs)
        {
            glDrawBuffersPtr(n, bufs);
        }
        public static void glStencilOpSeparate(uint face, uint sfail, uint dpfail, uint dppass)
        {
            glStencilOpSeparatePtr(face, sfail, dpfail, dppass);
        }
        public static void glStencilFuncSeparate(uint face, uint func, int @ref, uint mask)
        {
            glStencilFuncSeparatePtr(face, func, @ref, mask);
        }
        public static void glStencilMaskSeparate(uint face, uint mask)
        {
            glStencilMaskSeparatePtr(face, mask);
        }
        public static void glAttachShader(uint program, uint shader)
        {
            glAttachShaderPtr(program, shader);
        }
        public static void glBindAttribLocation(uint program, uint index, IntPtr name)
        {
            glBindAttribLocationPtr(program, index, name);
        }
        public static void glCompileShader(uint shader)
        {
            glCompileShaderPtr(shader);
        }
        public static uint glCreateProgram()
        {
            return glCreateProgramPtr();
        }
        public static uint glCreateShader(uint type)
        {
            return glCreateShaderPtr(type);
        }
        public static void glDeleteProgram(uint program)
        {
            glDeleteProgramPtr(program);
        }
        public static void glDeleteShader(uint shader)
        {
            glDeleteShaderPtr(shader);
        }
        public static void glDetachShader(uint program, uint shader)
        {
            glDetachShaderPtr(program, shader);
        }
        public static void glDisableVertexAttribArray(uint index)
        {
            glDisableVertexAttribArrayPtr(index);
        }
        public static void glEnableVertexAttribArray(uint index)
        {
            glEnableVertexAttribArrayPtr(index);
        }
        public static void glGetActiveAttrib(uint program, uint index, int bufSize, IntPtr length, IntPtr size, IntPtr type, IntPtr name)
        {
            glGetActiveAttribPtr(program, index, bufSize, length, size, type, name);
        }
        public static void glGetActiveUniform(uint program, uint index, int bufSize, IntPtr length, IntPtr size, IntPtr type, IntPtr name)
        {
            glGetActiveUniformPtr(program, index, bufSize, length, size, type, name);
        }
        public static void glGetAttachedShaders(uint program, int maxCount, IntPtr count, IntPtr shaders)
        {
            glGetAttachedShadersPtr(program, maxCount, count, shaders);
        }
        public static int glGetAttribLocation(uint program, IntPtr name)
        {
            return glGetAttribLocationPtr(program, name);
        }
        public static void glGetProgramiv(uint program, uint pname, IntPtr @params)
        {
            glGetProgramivPtr(program, pname, @params);
        }
        public static void glGetProgramInfoLog(uint program, int bufSize, IntPtr length, IntPtr infoLog)
        {
            glGetProgramInfoLogPtr(program, bufSize, length, infoLog);
        }
        public static void glGetShaderiv(uint shader, uint pname, IntPtr @params)
        {
            glGetShaderivPtr(shader, pname, @params);
        }
        public static void glGetShaderInfoLog(uint shader, int bufSize, IntPtr length, IntPtr infoLog)
        {
            glGetShaderInfoLogPtr(shader, bufSize, length, infoLog);
        }
        public static void glGetShaderSource(uint shader, int bufSize, IntPtr length, IntPtr source)
        {
            glGetShaderSourcePtr(shader, bufSize, length, source);
        }
        public static int glGetUniformLocation(uint program, IntPtr name)
        {
            return glGetUniformLocationPtr(program, name);
        }
        public static void glGetUniformfv(uint program, int location, IntPtr @params)
        {
            glGetUniformfvPtr(program, location, @params);
        }
        public static void glGetUniformiv(uint program, int location, IntPtr @params)
        {
            glGetUniformivPtr(program, location, @params);
        }
        public static void glGetVertexAttribdv(uint index, uint pname, IntPtr @params)
        {
            glGetVertexAttribdvPtr(index, pname, @params);
        }
        public static void glGetVertexAttribfv(uint index, uint pname, IntPtr @params)
        {
            glGetVertexAttribfvPtr(index, pname, @params);
        }
        public static void glGetVertexAttribiv(uint index, uint pname, IntPtr @params)
        {
            glGetVertexAttribivPtr(index, pname, @params);
        }
        public static void glGetVertexAttribPointerv(uint index, uint pname, IntPtr pointer)
        {
            glGetVertexAttribPointervPtr(index, pname, pointer);
        }
        public static bool glIsProgram(uint program)
        {
            return glIsProgramPtr(program);
        }
        public static bool glIsShader(uint shader)
        {
            return glIsShaderPtr(shader);
        }
        public static void glLinkProgram(uint program)
        {
            glLinkProgramPtr(program);
        }
        public static void glShaderSource(uint shader, int count, IntPtr @string, IntPtr length)
        {
            glShaderSourcePtr(shader, count, @string, length);
        }
        public static void glUseProgram(uint program)
        {
            glUseProgramPtr(program);
        }
        public static void glUniform1f(int location, float v0)
        {
            glUniform1fPtr(location, v0);
        }
        public static void glUniform2f(int location, float v0, float v1)
        {
            glUniform2fPtr(location, v0, v1);
        }
        public static void glUniform3f(int location, float v0, float v1, float v2)
        {
            glUniform3fPtr(location, v0, v1, v2);
        }
        public static void glUniform4f(int location, float v0, float v1, float v2, float v3)
        {
            glUniform4fPtr(location, v0, v1, v2, v3);
        }
        public static void glUniform1i(int location, int v0)
        {
            glUniform1iPtr(location, v0);
        }
        public static void glUniform2i(int location, int v0, int v1)
        {
            glUniform2iPtr(location, v0, v1);
        }
        public static void glUniform3i(int location, int v0, int v1, int v2)
        {
            glUniform3iPtr(location, v0, v1, v2);
        }
        public static void glUniform4i(int location, int v0, int v1, int v2, int v3)
        {
            glUniform4iPtr(location, v0, v1, v2, v3);
        }
        public static void glUniform1fv(int location, int count, IntPtr value)
        {
            glUniform1fvPtr(location, count, value);
        }
        public static void glUniform2fv(int location, int count, IntPtr value)
        {
            glUniform2fvPtr(location, count, value);
        }
        public static void glUniform3fv(int location, int count, IntPtr value)
        {
            glUniform3fvPtr(location, count, value);
        }
        public static void glUniform4fv(int location, int count, IntPtr value)
        {
            glUniform4fvPtr(location, count, value);
        }
        public static void glUniform1iv(int location, int count, IntPtr value)
        {
            glUniform1ivPtr(location, count, value);
        }
        public static void glUniform2iv(int location, int count, IntPtr value)
        {
            glUniform2ivPtr(location, count, value);
        }
        public static void glUniform3iv(int location, int count, IntPtr value)
        {
            glUniform3ivPtr(location, count, value);
        }
        public static void glUniform4iv(int location, int count, IntPtr value)
        {
            glUniform4ivPtr(location, count, value);
        }
        public static void glUniformMatrix2fv(int location, int count, bool transpose, IntPtr value)
        {
            glUniformMatrix2fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix3fv(int location, int count, bool transpose, IntPtr value)
        {
            glUniformMatrix3fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix4fv(int location, int count, bool transpose, IntPtr value)
        {
            glUniformMatrix4fvPtr(location, count, transpose, value);
        }
        public static void glValidateProgram(uint program)
        {
            glValidateProgramPtr(program);
        }
        public static void glVertexAttrib1d(uint index, double x)
        {
            glVertexAttrib1dPtr(index, x);
        }
        public static void glVertexAttrib1dv(uint index, IntPtr v)
        {
            glVertexAttrib1dvPtr(index, v);
        }
        public static void glVertexAttrib1f(uint index, float x)
        {
            glVertexAttrib1fPtr(index, x);
        }
        public static void glVertexAttrib1fv(uint index, IntPtr v)
        {
            glVertexAttrib1fvPtr(index, v);
        }
        public static void glVertexAttrib1s(uint index, short x)
        {
            glVertexAttrib1sPtr(index, x);
        }
        public static void glVertexAttrib1sv(uint index, IntPtr v)
        {
            glVertexAttrib1svPtr(index, v);
        }
        public static void glVertexAttrib2d(uint index, double x, double y)
        {
            glVertexAttrib2dPtr(index, x, y);
        }
        public static void glVertexAttrib2dv(uint index, IntPtr v)
        {
            glVertexAttrib2dvPtr(index, v);
        }
        public static void glVertexAttrib2f(uint index, float x, float y)
        {
            glVertexAttrib2fPtr(index, x, y);
        }
        public static void glVertexAttrib2fv(uint index, IntPtr v)
        {
            glVertexAttrib2fvPtr(index, v);
        }
        public static void glVertexAttrib2s(uint index, short x, short y)
        {
            glVertexAttrib2sPtr(index, x, y);
        }
        public static void glVertexAttrib2sv(uint index, IntPtr v)
        {
            glVertexAttrib2svPtr(index, v);
        }
        public static void glVertexAttrib3d(uint index, double x, double y, double z)
        {
            glVertexAttrib3dPtr(index, x, y, z);
        }
        public static void glVertexAttrib3dv(uint index, IntPtr v)
        {
            glVertexAttrib3dvPtr(index, v);
        }
        public static void glVertexAttrib3f(uint index, float x, float y, float z)
        {
            glVertexAttrib3fPtr(index, x, y, z);
        }
        public static void glVertexAttrib3fv(uint index, IntPtr v)
        {
            glVertexAttrib3fvPtr(index, v);
        }
        public static void glVertexAttrib3s(uint index, short x, short y, short z)
        {
            glVertexAttrib3sPtr(index, x, y, z);
        }
        public static void glVertexAttrib3sv(uint index, IntPtr v)
        {
            glVertexAttrib3svPtr(index, v);
        }
        public static void glVertexAttrib4Nbv(uint index, IntPtr v)
        {
            glVertexAttrib4NbvPtr(index, v);
        }
        public static void glVertexAttrib4Niv(uint index, IntPtr v)
        {
            glVertexAttrib4NivPtr(index, v);
        }
        public static void glVertexAttrib4Nsv(uint index, IntPtr v)
        {
            glVertexAttrib4NsvPtr(index, v);
        }
        public static void glVertexAttrib4Nub(uint index, byte x, byte y, byte z, byte w)
        {
            glVertexAttrib4NubPtr(index, x, y, z, w);
        }
        public static void glVertexAttrib4Nubv(uint index, IntPtr v)
        {
            glVertexAttrib4NubvPtr(index, v);
        }
        public static void glVertexAttrib4Nuiv(uint index, IntPtr v)
        {
            glVertexAttrib4NuivPtr(index, v);
        }
        public static void glVertexAttrib4Nusv(uint index, IntPtr v)
        {
            glVertexAttrib4NusvPtr(index, v);
        }
        public static void glVertexAttrib4bv(uint index, IntPtr v)
        {
            glVertexAttrib4bvPtr(index, v);
        }
        public static void glVertexAttrib4d(uint index, double x, double y, double z, double w)
        {
            glVertexAttrib4dPtr(index, x, y, z, w);
        }
        public static void glVertexAttrib4dv(uint index, IntPtr v)
        {
            glVertexAttrib4dvPtr(index, v);
        }
        public static void glVertexAttrib4f(uint index, float x, float y, float z, float w)
        {
            glVertexAttrib4fPtr(index, x, y, z, w);
        }
        public static void glVertexAttrib4fv(uint index, IntPtr v)
        {
            glVertexAttrib4fvPtr(index, v);
        }
        public static void glVertexAttrib4iv(uint index, IntPtr v)
        {
            glVertexAttrib4ivPtr(index, v);
        }
        public static void glVertexAttrib4s(uint index, short x, short y, short z, short w)
        {
            glVertexAttrib4sPtr(index, x, y, z, w);
        }
        public static void glVertexAttrib4sv(uint index, IntPtr v)
        {
            glVertexAttrib4svPtr(index, v);
        }
        public static void glVertexAttrib4ubv(uint index, IntPtr v)
        {
            glVertexAttrib4ubvPtr(index, v);
        }
        public static void glVertexAttrib4uiv(uint index, IntPtr v)
        {
            glVertexAttrib4uivPtr(index, v);
        }
        public static void glVertexAttrib4usv(uint index, IntPtr v)
        {
            glVertexAttrib4usvPtr(index, v);
        }
        public static void glVertexAttribPointer(uint index, int size, uint type, bool normalized, int stride, IntPtr pointer)
        {
            glVertexAttribPointerPtr(index, size, type, normalized, stride, pointer);
        }
        public static void glUniformMatrix2x3fv(int location, int count, bool transpose, IntPtr value)
        {
            glUniformMatrix2x3fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix3x2fv(int location, int count, bool transpose, IntPtr value)
        {
            glUniformMatrix3x2fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix2x4fv(int location, int count, bool transpose, IntPtr value)
        {
            glUniformMatrix2x4fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix4x2fv(int location, int count, bool transpose, IntPtr value)
        {
            glUniformMatrix4x2fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix3x4fv(int location, int count, bool transpose, IntPtr value)
        {
            glUniformMatrix3x4fvPtr(location, count, transpose, value);
        }
        public static void glUniformMatrix4x3fv(int location, int count, bool transpose, IntPtr value)
        {
            glUniformMatrix4x3fvPtr(location, count, transpose, value);
        }
        public static void glColorMaski(uint index, bool r, bool g, bool b, bool a)
        {
            glColorMaskiPtr(index, r, g, b, a);
        }
        public static void glGetBooleani_v(uint target, uint index, IntPtr data)
        {
            glGetBooleani_vPtr(target, index, data);
        }
        public static void glGetIntegeri_v(uint target, uint index, IntPtr data)
        {
            glGetIntegeri_vPtr(target, index, data);
        }
        public static void glEnablei(uint target, uint index)
        {
            glEnableiPtr(target, index);
        }
        public static void glDisablei(uint target, uint index)
        {
            glDisableiPtr(target, index);
        }
        public static bool glIsEnabledi(uint target, uint index)
        {
            return glIsEnablediPtr(target, index);
        }
        public static void glBeginTransformFeedback(uint primitiveMode)
        {
            glBeginTransformFeedbackPtr(primitiveMode);
        }
        public static void glEndTransformFeedback()
        {
            glEndTransformFeedbackPtr();
        }
        public static void glBindBufferRange(uint target, uint index, uint buffer, IntPtr offset, int size)
        {
            glBindBufferRangePtr(target, index, buffer, offset, size);
        }
        public static void glBindBufferBase(uint target, uint index, uint buffer)
        {
            glBindBufferBasePtr(target, index, buffer);
        }
        public static void glTransformFeedbackVaryings(uint program, int count, IntPtr varyings, uint bufferMode)
        {
            glTransformFeedbackVaryingsPtr(program, count, varyings, bufferMode);
        }
        public static void glGetTransformFeedbackVarying(uint program, uint index, int bufSize, IntPtr length, IntPtr size, IntPtr type, IntPtr name)
        {
            glGetTransformFeedbackVaryingPtr(program, index, bufSize, length, size, type, name);
        }
        public static void glClampColor(uint target, uint clamp)
        {
            glClampColorPtr(target, clamp);
        }
        public static void glBeginConditionalRender(uint id, uint mode)
        {
            glBeginConditionalRenderPtr(id, mode);
        }
        public static void glEndConditionalRender()
        {
            glEndConditionalRenderPtr();
        }
        public static void glVertexAttribIPointer(uint index, int size, uint type, int stride, IntPtr pointer)
        {
            glVertexAttribIPointerPtr(index, size, type, stride, pointer);
        }
        public static void glGetVertexAttribIiv(uint index, uint pname, IntPtr @params)
        {
            glGetVertexAttribIivPtr(index, pname, @params);
        }
        public static void glGetVertexAttribIuiv(uint index, uint pname, IntPtr @params)
        {
            glGetVertexAttribIuivPtr(index, pname, @params);
        }
        public static void glVertexAttribI1i(uint index, int x)
        {
            glVertexAttribI1iPtr(index, x);
        }
        public static void glVertexAttribI2i(uint index, int x, int y)
        {
            glVertexAttribI2iPtr(index, x, y);
        }
        public static void glVertexAttribI3i(uint index, int x, int y, int z)
        {
            glVertexAttribI3iPtr(index, x, y, z);
        }
        public static void glVertexAttribI4i(uint index, int x, int y, int z, int w)
        {
            glVertexAttribI4iPtr(index, x, y, z, w);
        }
        public static void glVertexAttribI1ui(uint index, uint x)
        {
            glVertexAttribI1uiPtr(index, x);
        }
        public static void glVertexAttribI2ui(uint index, uint x, uint y)
        {
            glVertexAttribI2uiPtr(index, x, y);
        }
        public static void glVertexAttribI3ui(uint index, uint x, uint y, uint z)
        {
            glVertexAttribI3uiPtr(index, x, y, z);
        }
        public static void glVertexAttribI4ui(uint index, uint x, uint y, uint z, uint w)
        {
            glVertexAttribI4uiPtr(index, x, y, z, w);
        }
        public static void glVertexAttribI1iv(uint index, IntPtr v)
        {
            glVertexAttribI1ivPtr(index, v);
        }
        public static void glVertexAttribI2iv(uint index, IntPtr v)
        {
            glVertexAttribI2ivPtr(index, v);
        }
        public static void glVertexAttribI3iv(uint index, IntPtr v)
        {
            glVertexAttribI3ivPtr(index, v);
        }
        public static void glVertexAttribI4iv(uint index, IntPtr v)
        {
            glVertexAttribI4ivPtr(index, v);
        }
        public static void glVertexAttribI1uiv(uint index, IntPtr v)
        {
            glVertexAttribI1uivPtr(index, v);
        }
        public static void glVertexAttribI2uiv(uint index, IntPtr v)
        {
            glVertexAttribI2uivPtr(index, v);
        }
        public static void glVertexAttribI3uiv(uint index, IntPtr v)
        {
            glVertexAttribI3uivPtr(index, v);
        }
        public static void glVertexAttribI4uiv(uint index, IntPtr v)
        {
            glVertexAttribI4uivPtr(index, v);
        }
        public static void glVertexAttribI4bv(uint index, IntPtr v)
        {
            glVertexAttribI4bvPtr(index, v);
        }
        public static void glVertexAttribI4sv(uint index, IntPtr v)
        {
            glVertexAttribI4svPtr(index, v);
        }
        public static void glVertexAttribI4ubv(uint index, IntPtr v)
        {
            glVertexAttribI4ubvPtr(index, v);
        }
        public static void glVertexAttribI4usv(uint index, IntPtr v)
        {
            glVertexAttribI4usvPtr(index, v);
        }
        public static void glGetUniformuiv(uint program, int location, IntPtr @params)
        {
            glGetUniformuivPtr(program, location, @params);
        }
        public static void glBindFragDataLocation(uint program, uint color, IntPtr name)
        {
            glBindFragDataLocationPtr(program, color, name);
        }
        public static int glGetFragDataLocation(uint program, IntPtr name)
        {
            return glGetFragDataLocationPtr(program, name);
        }
        public static void glUniform1ui(int location, uint v0)
        {
            glUniform1uiPtr(location, v0);
        }
        public static void glUniform2ui(int location, uint v0, uint v1)
        {
            glUniform2uiPtr(location, v0, v1);
        }
        public static void glUniform3ui(int location, uint v0, uint v1, uint v2)
        {
            glUniform3uiPtr(location, v0, v1, v2);
        }
        public static void glUniform4ui(int location, uint v0, uint v1, uint v2, uint v3)
        {
            glUniform4uiPtr(location, v0, v1, v2, v3);
        }
        public static void glUniform1uiv(int location, int count, IntPtr value)
        {
            glUniform1uivPtr(location, count, value);
        }
        public static void glUniform2uiv(int location, int count, IntPtr value)
        {
            glUniform2uivPtr(location, count, value);
        }
        public static void glUniform3uiv(int location, int count, IntPtr value)
        {
            glUniform3uivPtr(location, count, value);
        }
        public static void glUniform4uiv(int location, int count, IntPtr value)
        {
            glUniform4uivPtr(location, count, value);
        }
        public static void glTexParameterIiv(uint target, uint pname, IntPtr @params)
        {
            glTexParameterIivPtr(target, pname, @params);
        }
        public static void glTexParameterIuiv(uint target, uint pname, IntPtr @params)
        {
            glTexParameterIuivPtr(target, pname, @params);
        }
        public static void glGetTexParameterIiv(uint target, uint pname, IntPtr @params)
        {
            glGetTexParameterIivPtr(target, pname, @params);
        }
        public static void glGetTexParameterIuiv(uint target, uint pname, IntPtr @params)
        {
            glGetTexParameterIuivPtr(target, pname, @params);
        }
        public static void glClearBufferiv(uint buffer, int drawbuffer, IntPtr value)
        {
            glClearBufferivPtr(buffer, drawbuffer, value);
        }
        public static void glClearBufferuiv(uint buffer, int drawbuffer, IntPtr value)
        {
            glClearBufferuivPtr(buffer, drawbuffer, value);
        }
        public static void glClearBufferfv(uint buffer, int drawbuffer, IntPtr value)
        {
            glClearBufferfvPtr(buffer, drawbuffer, value);
        }
        public static void glClearBufferfi(uint buffer, int drawbuffer, float depth, int stencil)
        {
            glClearBufferfiPtr(buffer, drawbuffer, depth, stencil);
        }
        public static IntPtr glGetStringi(uint name, uint index)
        {
            return glGetStringiPtr(name, index);
        }
        public static bool glIsRenderbuffer(uint renderbuffer)
        {
            return glIsRenderbufferPtr(renderbuffer);
        }
        public static void glBindRenderbuffer(uint target, uint renderbuffer)
        {
            glBindRenderbufferPtr(target, renderbuffer);
        }
        public static void glDeleteRenderbuffers(int n, IntPtr renderbuffers)
        {
            glDeleteRenderbuffersPtr(n, renderbuffers);
        }
        public static void glGenRenderbuffers(int n, IntPtr renderbuffers)
        {
            glGenRenderbuffersPtr(n, renderbuffers);
        }
        public static void glRenderbufferStorage(uint target, uint internalformat, int width, int height)
        {
            glRenderbufferStoragePtr(target, internalformat, width, height);
        }
        public static void glGetRenderbufferParameteriv(uint target, uint pname, IntPtr @params)
        {
            glGetRenderbufferParameterivPtr(target, pname, @params);
        }
        public static bool glIsFramebuffer(uint framebuffer)
        {
            return glIsFramebufferPtr(framebuffer);
        }
        public static void glBindFramebuffer(uint target, uint framebuffer)
        {
            glBindFramebufferPtr(target, framebuffer);
        }
        public static void glDeleteFramebuffers(int n, IntPtr framebuffers)
        {
            glDeleteFramebuffersPtr(n, framebuffers);
        }
        public static void glGenFramebuffers(int n, IntPtr framebuffers)
        {
            glGenFramebuffersPtr(n, framebuffers);
        }
        public static uint glCheckFramebufferStatus(uint target)
        {
            return glCheckFramebufferStatusPtr(target);
        }
        public static void glFramebufferTexture1D(uint target, uint attachment, uint textarget, uint texture, int level)
        {
            glFramebufferTexture1DPtr(target, attachment, textarget, texture, level);
        }
        public static void glFramebufferTexture2D(uint target, uint attachment, uint textarget, uint texture, int level)
        {
            glFramebufferTexture2DPtr(target, attachment, textarget, texture, level);
        }
        public static void glFramebufferTexture3D(uint target, uint attachment, uint textarget, uint texture, int level, int zoffset)
        {
            glFramebufferTexture3DPtr(target, attachment, textarget, texture, level, zoffset);
        }
        public static void glFramebufferRenderbuffer(uint target, uint attachment, uint renderbuffertarget, uint renderbuffer)
        {
            glFramebufferRenderbufferPtr(target, attachment, renderbuffertarget, renderbuffer);
        }
        public static void glGetFramebufferAttachmentParameteriv(uint target, uint attachment, uint pname, IntPtr @params)
        {
            glGetFramebufferAttachmentParameterivPtr(target, attachment, pname, @params);
        }
        public static void glGenerateMipmap(uint target)
        {
            glGenerateMipmapPtr(target);
        }
        public static void glBlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter)
        {
            glBlitFramebufferPtr(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        public static void glRenderbufferStorageMultisample(uint target, int samples, uint internalformat, int width, int height)
        {
            glRenderbufferStorageMultisamplePtr(target, samples, internalformat, width, height);
        }
        public static void glFramebufferTextureLayer(uint target, uint attachment, uint texture, int level, int layer)
        {
            glFramebufferTextureLayerPtr(target, attachment, texture, level, layer);
        }
        public static IntPtr glMapBufferRange(uint target, IntPtr offset, int length, uint access)
        {
            return glMapBufferRangePtr(target, offset, length, access);
        }
        public static void glFlushMappedBufferRange(uint target, IntPtr offset, int length)
        {
            glFlushMappedBufferRangePtr(target, offset, length);
        }
        public static void glBindVertexArray(uint array)
        {
            glBindVertexArrayPtr(array);
        }
        public static void glDeleteVertexArrays(int n, IntPtr arrays)
        {
            glDeleteVertexArraysPtr(n, arrays);
        }
        public static void glGenVertexArrays(int n, IntPtr arrays)
        {
            glGenVertexArraysPtr(n, arrays);
        }
        public static bool glIsVertexArray(uint array)
        {
            return glIsVertexArrayPtr(array);
        }
        public static void glDrawArraysInstanced(uint mode, int first, int count, int instancecount)
        {
            glDrawArraysInstancedPtr(mode, first, count, instancecount);
        }
        public static void glDrawElementsInstanced(uint mode, int count, uint type, IntPtr indices, int instancecount)
        {
            glDrawElementsInstancedPtr(mode, count, type, indices, instancecount);
        }
        public static void glTexBuffer(uint target, uint internalformat, uint buffer)
        {
            glTexBufferPtr(target, internalformat, buffer);
        }
        public static void glPrimitiveRestartIndex(uint index)
        {
            glPrimitiveRestartIndexPtr(index);
        }
        public static void glCopyBufferSubData(uint readTarget, uint writeTarget, IntPtr readOffset, IntPtr writeOffset, int size)
        {
            glCopyBufferSubDataPtr(readTarget, writeTarget, readOffset, writeOffset, size);
        }
        public static void glGetUniformIndices(uint program, int uniformCount, IntPtr uniformNames, IntPtr uniformIndices)
        {
            glGetUniformIndicesPtr(program, uniformCount, uniformNames, uniformIndices);
        }
        public static void glGetActiveUniformsiv(uint program, int uniformCount, IntPtr uniformIndices, uint pname, IntPtr @params)
        {
            glGetActiveUniformsivPtr(program, uniformCount, uniformIndices, pname, @params);
        }
        public static void glGetActiveUniformName(uint program, uint uniformIndex, int bufSize, IntPtr length, IntPtr uniformName)
        {
            glGetActiveUniformNamePtr(program, uniformIndex, bufSize, length, uniformName);
        }
        public static uint glGetUniformBlockIndex(uint program, IntPtr uniformBlockName)
        {
            return glGetUniformBlockIndexPtr(program, uniformBlockName);
        }
        public static void glGetActiveUniformBlockiv(uint program, uint uniformBlockIndex, uint pname, IntPtr @params)
        {
            glGetActiveUniformBlockivPtr(program, uniformBlockIndex, pname, @params);
        }
        public static void glGetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, IntPtr length, IntPtr uniformBlockName)
        {
            glGetActiveUniformBlockNamePtr(program, uniformBlockIndex, bufSize, length, uniformBlockName);
        }
        public static void glUniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding)
        {
            glUniformBlockBindingPtr(program, uniformBlockIndex, uniformBlockBinding);
        }
        public static void glDrawElementsBaseVertex(uint mode, int count, uint type, IntPtr indices, int basevertex)
        {
            glDrawElementsBaseVertexPtr(mode, count, type, indices, basevertex);
        }
        public static void glDrawRangeElementsBaseVertex(uint mode, uint start, uint end, int count, uint type, IntPtr indices, int basevertex)
        {
            glDrawRangeElementsBaseVertexPtr(mode, start, end, count, type, indices, basevertex);
        }
        public static void glDrawElementsInstancedBaseVertex(uint mode, int count, uint type, IntPtr indices, int instancecount, int basevertex)
        {
            glDrawElementsInstancedBaseVertexPtr(mode, count, type, indices, instancecount, basevertex);
        }
        public static void glMultiDrawElementsBaseVertex(uint mode, IntPtr count, uint type, IntPtr indices, int drawcount, IntPtr basevertex)
        {
            glMultiDrawElementsBaseVertexPtr(mode, count, type, indices, drawcount, basevertex);
        }
        public static void glProvokingVertex(uint mode)
        {
            glProvokingVertexPtr(mode);
        }
        public static IntPtr glFenceSync(uint condition, uint flags)
        {
            return glFenceSyncPtr(condition, flags);
        }
        public static bool glIsSync(IntPtr sync)
        {
            return glIsSyncPtr(sync);
        }
        public static void glDeleteSync(IntPtr sync)
        {
            glDeleteSyncPtr(sync);
        }
        public static uint glClientWaitSync(IntPtr sync, uint flags, ulong timeout)
        {
            return glClientWaitSyncPtr(sync, flags, timeout);
        }
        public static void glWaitSync(IntPtr sync, uint flags, ulong timeout)
        {
            glWaitSyncPtr(sync, flags, timeout);
        }
        public static void glGetInteger64v(uint pname, IntPtr data)
        {
            glGetInteger64vPtr(pname, data);
        }
        public static void glGetSynciv(IntPtr sync, uint pname, int bufSize, IntPtr length, IntPtr values)
        {
            glGetSyncivPtr(sync, pname, bufSize, length, values);
        }
        public static void glGetInteger64i_v(uint target, uint index, IntPtr data)
        {
            glGetInteger64i_vPtr(target, index, data);
        }
        public static void glGetBufferParameteri64v(uint target, uint pname, IntPtr @params)
        {
            glGetBufferParameteri64vPtr(target, pname, @params);
        }
        public static void glFramebufferTexture(uint target, uint attachment, uint texture, int level)
        {
            glFramebufferTexturePtr(target, attachment, texture, level);
        }
        public static void glTexImage2DMultisample(uint target, int samples, uint internalformat, int width, int height, bool fixedsamplelocations)
        {
            glTexImage2DMultisamplePtr(target, samples, internalformat, width, height, fixedsamplelocations);
        }
        public static void glTexImage3DMultisample(uint target, int samples, uint internalformat, int width, int height, int depth, bool fixedsamplelocations)
        {
            glTexImage3DMultisamplePtr(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        public static void glGetMultisamplefv(uint pname, uint index, IntPtr val)
        {
            glGetMultisamplefvPtr(pname, index, val);
        }
        public static void glSampleMaski(uint index, uint mask)
        {
            glSampleMaskiPtr(index, mask);
        }
        #endregion

        #region Command Delegates
        private delegate void glCullFaceFunc(uint mode);
        private static glCullFaceFunc glCullFacePtr;
        private delegate void glFrontFaceFunc(uint mode);
        private static glFrontFaceFunc glFrontFacePtr;
        private delegate void glHintFunc(uint target, uint mode);
        private static glHintFunc glHintPtr;
        private delegate void glLineWidthFunc(float width);
        private static glLineWidthFunc glLineWidthPtr;
        private delegate void glPointSizeFunc(float size);
        private static glPointSizeFunc glPointSizePtr;
        private delegate void glPolygonModeFunc(uint face, uint mode);
        private static glPolygonModeFunc glPolygonModePtr;
        private delegate void glScissorFunc(int x, int y, int width, int height);
        private static glScissorFunc glScissorPtr;
        private delegate void glTexParameterfFunc(uint target, uint pname, float param);
        private static glTexParameterfFunc glTexParameterfPtr;
        private delegate void glTexParameterfvFunc(uint target, uint pname, IntPtr @params);
        private static glTexParameterfvFunc glTexParameterfvPtr;
        private delegate void glTexParameteriFunc(uint target, uint pname, int param);
        private static glTexParameteriFunc glTexParameteriPtr;
        private delegate void glTexParameterivFunc(uint target, uint pname, IntPtr @params);
        private static glTexParameterivFunc glTexParameterivPtr;
        private delegate void glTexImage1DFunc(uint target, int level, int internalformat, int width, int border, uint format, uint type, IntPtr pixels);
        private static glTexImage1DFunc glTexImage1DPtr;
        private delegate void glTexImage2DFunc(uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, IntPtr pixels);
        private static glTexImage2DFunc glTexImage2DPtr;
        private delegate void glDrawBufferFunc(uint mode);
        private static glDrawBufferFunc glDrawBufferPtr;
        private delegate void glClearFunc(uint mask);
        private static glClearFunc glClearPtr;
        private delegate void glClearColorFunc(float red, float green, float blue, float alpha);
        private static glClearColorFunc glClearColorPtr;
        private delegate void glClearStencilFunc(int s);
        private static glClearStencilFunc glClearStencilPtr;
        private delegate void glClearDepthFunc(double depth);
        private static glClearDepthFunc glClearDepthPtr;
        private delegate void glStencilMaskFunc(uint mask);
        private static glStencilMaskFunc glStencilMaskPtr;
        private delegate void glColorMaskFunc(bool red, bool green, bool blue, bool alpha);
        private static glColorMaskFunc glColorMaskPtr;
        private delegate void glDepthMaskFunc(bool flag);
        private static glDepthMaskFunc glDepthMaskPtr;
        private delegate void glDisableFunc(uint cap);
        private static glDisableFunc glDisablePtr;
        private delegate void glEnableFunc(uint cap);
        private static glEnableFunc glEnablePtr;
        private delegate void glFinishFunc();
        private static glFinishFunc glFinishPtr;
        private delegate void glFlushFunc();
        private static glFlushFunc glFlushPtr;
        private delegate void glBlendFuncFunc(uint sfactor, uint dfactor);
        private static glBlendFuncFunc glBlendFuncPtr;
        private delegate void glLogicOpFunc(uint opcode);
        private static glLogicOpFunc glLogicOpPtr;
        private delegate void glStencilFuncFunc(uint func, int @ref, uint mask);
        private static glStencilFuncFunc glStencilFuncPtr;
        private delegate void glStencilOpFunc(uint fail, uint zfail, uint zpass);
        private static glStencilOpFunc glStencilOpPtr;
        private delegate void glDepthFuncFunc(uint func);
        private static glDepthFuncFunc glDepthFuncPtr;
        private delegate void glPixelStorefFunc(uint pname, float param);
        private static glPixelStorefFunc glPixelStorefPtr;
        private delegate void glPixelStoreiFunc(uint pname, int param);
        private static glPixelStoreiFunc glPixelStoreiPtr;
        private delegate void glReadBufferFunc(uint mode);
        private static glReadBufferFunc glReadBufferPtr;
        private delegate void glReadPixelsFunc(int x, int y, int width, int height, uint format, uint type, IntPtr pixels);
        private static glReadPixelsFunc glReadPixelsPtr;
        private delegate void glGetBooleanvFunc(uint pname, IntPtr data);
        private static glGetBooleanvFunc glGetBooleanvPtr;
        private delegate void glGetDoublevFunc(uint pname, IntPtr data);
        private static glGetDoublevFunc glGetDoublevPtr;
        private delegate uint glGetErrorFunc();
        private static glGetErrorFunc glGetErrorPtr;
        private delegate void glGetFloatvFunc(uint pname, IntPtr data);
        private static glGetFloatvFunc glGetFloatvPtr;
        private delegate void glGetIntegervFunc(uint pname, IntPtr data);
        private static glGetIntegervFunc glGetIntegervPtr;
        private delegate IntPtr glGetStringFunc(uint name);
        private static glGetStringFunc glGetStringPtr;
        private delegate void glGetTexImageFunc(uint target, int level, uint format, uint type, IntPtr pixels);
        private static glGetTexImageFunc glGetTexImagePtr;
        private delegate void glGetTexParameterfvFunc(uint target, uint pname, IntPtr @params);
        private static glGetTexParameterfvFunc glGetTexParameterfvPtr;
        private delegate void glGetTexParameterivFunc(uint target, uint pname, IntPtr @params);
        private static glGetTexParameterivFunc glGetTexParameterivPtr;
        private delegate void glGetTexLevelParameterfvFunc(uint target, int level, uint pname, IntPtr @params);
        private static glGetTexLevelParameterfvFunc glGetTexLevelParameterfvPtr;
        private delegate void glGetTexLevelParameterivFunc(uint target, int level, uint pname, IntPtr @params);
        private static glGetTexLevelParameterivFunc glGetTexLevelParameterivPtr;
        private delegate bool glIsEnabledFunc(uint cap);
        private static glIsEnabledFunc glIsEnabledPtr;
        private delegate void glDepthRangeFunc(double near, double far);
        private static glDepthRangeFunc glDepthRangePtr;
        private delegate void glViewportFunc(int x, int y, int width, int height);
        private static glViewportFunc glViewportPtr;
        private delegate void glDrawArraysFunc(uint mode, int first, int count);
        private static glDrawArraysFunc glDrawArraysPtr;
        private delegate void glDrawElementsFunc(uint mode, int count, uint type, IntPtr indices);
        private static glDrawElementsFunc glDrawElementsPtr;
        private delegate void glPolygonOffsetFunc(float factor, float units);
        private static glPolygonOffsetFunc glPolygonOffsetPtr;
        private delegate void glCopyTexImage1DFunc(uint target, int level, uint internalformat, int x, int y, int width, int border);
        private static glCopyTexImage1DFunc glCopyTexImage1DPtr;
        private delegate void glCopyTexImage2DFunc(uint target, int level, uint internalformat, int x, int y, int width, int height, int border);
        private static glCopyTexImage2DFunc glCopyTexImage2DPtr;
        private delegate void glCopyTexSubImage1DFunc(uint target, int level, int xoffset, int x, int y, int width);
        private static glCopyTexSubImage1DFunc glCopyTexSubImage1DPtr;
        private delegate void glCopyTexSubImage2DFunc(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
        private static glCopyTexSubImage2DFunc glCopyTexSubImage2DPtr;
        private delegate void glTexSubImage1DFunc(uint target, int level, int xoffset, int width, uint format, uint type, IntPtr pixels);
        private static glTexSubImage1DFunc glTexSubImage1DPtr;
        private delegate void glTexSubImage2DFunc(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, IntPtr pixels);
        private static glTexSubImage2DFunc glTexSubImage2DPtr;
        private delegate void glBindTextureFunc(uint target, uint texture);
        private static glBindTextureFunc glBindTexturePtr;
        private delegate void glDeleteTexturesFunc(int n, IntPtr textures);
        private static glDeleteTexturesFunc glDeleteTexturesPtr;
        private delegate void glGenTexturesFunc(int n, IntPtr textures);
        private static glGenTexturesFunc glGenTexturesPtr;
        private delegate bool glIsTextureFunc(uint texture);
        private static glIsTextureFunc glIsTexturePtr;
        private delegate void glDrawRangeElementsFunc(uint mode, uint start, uint end, int count, uint type, IntPtr indices);
        private static glDrawRangeElementsFunc glDrawRangeElementsPtr;
        private delegate void glTexImage3DFunc(uint target, int level, int internalformat, int width, int height, int depth, int border, uint format, uint type, IntPtr pixels);
        private static glTexImage3DFunc glTexImage3DPtr;
        private delegate void glTexSubImage3DFunc(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, IntPtr pixels);
        private static glTexSubImage3DFunc glTexSubImage3DPtr;
        private delegate void glCopyTexSubImage3DFunc(uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
        private static glCopyTexSubImage3DFunc glCopyTexSubImage3DPtr;
        private delegate void glActiveTextureFunc(uint texture);
        private static glActiveTextureFunc glActiveTexturePtr;
        private delegate void glSampleCoverageFunc(float value, bool invert);
        private static glSampleCoverageFunc glSampleCoveragePtr;
        private delegate void glCompressedTexImage3DFunc(uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data);
        private static glCompressedTexImage3DFunc glCompressedTexImage3DPtr;
        private delegate void glCompressedTexImage2DFunc(uint target, int level, uint internalformat, int width, int height, int border, int imageSize, IntPtr data);
        private static glCompressedTexImage2DFunc glCompressedTexImage2DPtr;
        private delegate void glCompressedTexImage1DFunc(uint target, int level, uint internalformat, int width, int border, int imageSize, IntPtr data);
        private static glCompressedTexImage1DFunc glCompressedTexImage1DPtr;
        private delegate void glCompressedTexSubImage3DFunc(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, IntPtr data);
        private static glCompressedTexSubImage3DFunc glCompressedTexSubImage3DPtr;
        private delegate void glCompressedTexSubImage2DFunc(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, IntPtr data);
        private static glCompressedTexSubImage2DFunc glCompressedTexSubImage2DPtr;
        private delegate void glCompressedTexSubImage1DFunc(uint target, int level, int xoffset, int width, uint format, int imageSize, IntPtr data);
        private static glCompressedTexSubImage1DFunc glCompressedTexSubImage1DPtr;
        private delegate void glGetCompressedTexImageFunc(uint target, int level, IntPtr img);
        private static glGetCompressedTexImageFunc glGetCompressedTexImagePtr;
        private delegate void glBlendFuncSeparateFunc(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha);
        private static glBlendFuncSeparateFunc glBlendFuncSeparatePtr;
        private delegate void glMultiDrawArraysFunc(uint mode, IntPtr first, IntPtr count, int drawcount);
        private static glMultiDrawArraysFunc glMultiDrawArraysPtr;
        private delegate void glMultiDrawElementsFunc(uint mode, IntPtr count, uint type, IntPtr indices, int drawcount);
        private static glMultiDrawElementsFunc glMultiDrawElementsPtr;
        private delegate void glPointParameterfFunc(uint pname, float param);
        private static glPointParameterfFunc glPointParameterfPtr;
        private delegate void glPointParameterfvFunc(uint pname, IntPtr @params);
        private static glPointParameterfvFunc glPointParameterfvPtr;
        private delegate void glPointParameteriFunc(uint pname, int param);
        private static glPointParameteriFunc glPointParameteriPtr;
        private delegate void glPointParameterivFunc(uint pname, IntPtr @params);
        private static glPointParameterivFunc glPointParameterivPtr;
        private delegate void glBlendColorFunc(float red, float green, float blue, float alpha);
        private static glBlendColorFunc glBlendColorPtr;
        private delegate void glBlendEquationFunc(uint mode);
        private static glBlendEquationFunc glBlendEquationPtr;
        private delegate void glGenQueriesFunc(int n, IntPtr ids);
        private static glGenQueriesFunc glGenQueriesPtr;
        private delegate void glDeleteQueriesFunc(int n, IntPtr ids);
        private static glDeleteQueriesFunc glDeleteQueriesPtr;
        private delegate bool glIsQueryFunc(uint id);
        private static glIsQueryFunc glIsQueryPtr;
        private delegate void glBeginQueryFunc(uint target, uint id);
        private static glBeginQueryFunc glBeginQueryPtr;
        private delegate void glEndQueryFunc(uint target);
        private static glEndQueryFunc glEndQueryPtr;
        private delegate void glGetQueryivFunc(uint target, uint pname, IntPtr @params);
        private static glGetQueryivFunc glGetQueryivPtr;
        private delegate void glGetQueryObjectivFunc(uint id, uint pname, IntPtr @params);
        private static glGetQueryObjectivFunc glGetQueryObjectivPtr;
        private delegate void glGetQueryObjectuivFunc(uint id, uint pname, IntPtr @params);
        private static glGetQueryObjectuivFunc glGetQueryObjectuivPtr;
        private delegate void glBindBufferFunc(uint target, uint buffer);
        private static glBindBufferFunc glBindBufferPtr;
        private delegate void glDeleteBuffersFunc(int n, IntPtr buffers);
        private static glDeleteBuffersFunc glDeleteBuffersPtr;
        private delegate void glGenBuffersFunc(int n, IntPtr buffers);
        private static glGenBuffersFunc glGenBuffersPtr;
        private delegate bool glIsBufferFunc(uint buffer);
        private static glIsBufferFunc glIsBufferPtr;
        private delegate void glBufferDataFunc(uint target, int size, IntPtr data, uint usage);
        private static glBufferDataFunc glBufferDataPtr;
        private delegate void glBufferSubDataFunc(uint target, IntPtr offset, int size, IntPtr data);
        private static glBufferSubDataFunc glBufferSubDataPtr;
        private delegate void glGetBufferSubDataFunc(uint target, IntPtr offset, int size, IntPtr data);
        private static glGetBufferSubDataFunc glGetBufferSubDataPtr;
        private delegate IntPtr glMapBufferFunc(uint target, uint access);
        private static glMapBufferFunc glMapBufferPtr;
        private delegate bool glUnmapBufferFunc(uint target);
        private static glUnmapBufferFunc glUnmapBufferPtr;
        private delegate void glGetBufferParameterivFunc(uint target, uint pname, IntPtr @params);
        private static glGetBufferParameterivFunc glGetBufferParameterivPtr;
        private delegate void glGetBufferPointervFunc(uint target, uint pname, IntPtr @params);
        private static glGetBufferPointervFunc glGetBufferPointervPtr;
        private delegate void glBlendEquationSeparateFunc(uint modeRGB, uint modeAlpha);
        private static glBlendEquationSeparateFunc glBlendEquationSeparatePtr;
        private delegate void glDrawBuffersFunc(int n, IntPtr bufs);
        private static glDrawBuffersFunc glDrawBuffersPtr;
        private delegate void glStencilOpSeparateFunc(uint face, uint sfail, uint dpfail, uint dppass);
        private static glStencilOpSeparateFunc glStencilOpSeparatePtr;
        private delegate void glStencilFuncSeparateFunc(uint face, uint func, int @ref, uint mask);
        private static glStencilFuncSeparateFunc glStencilFuncSeparatePtr;
        private delegate void glStencilMaskSeparateFunc(uint face, uint mask);
        private static glStencilMaskSeparateFunc glStencilMaskSeparatePtr;
        private delegate void glAttachShaderFunc(uint program, uint shader);
        private static glAttachShaderFunc glAttachShaderPtr;
        private delegate void glBindAttribLocationFunc(uint program, uint index, IntPtr name);
        private static glBindAttribLocationFunc glBindAttribLocationPtr;
        private delegate void glCompileShaderFunc(uint shader);
        private static glCompileShaderFunc glCompileShaderPtr;
        private delegate uint glCreateProgramFunc();
        private static glCreateProgramFunc glCreateProgramPtr;
        private delegate uint glCreateShaderFunc(uint type);
        private static glCreateShaderFunc glCreateShaderPtr;
        private delegate void glDeleteProgramFunc(uint program);
        private static glDeleteProgramFunc glDeleteProgramPtr;
        private delegate void glDeleteShaderFunc(uint shader);
        private static glDeleteShaderFunc glDeleteShaderPtr;
        private delegate void glDetachShaderFunc(uint program, uint shader);
        private static glDetachShaderFunc glDetachShaderPtr;
        private delegate void glDisableVertexAttribArrayFunc(uint index);
        private static glDisableVertexAttribArrayFunc glDisableVertexAttribArrayPtr;
        private delegate void glEnableVertexAttribArrayFunc(uint index);
        private static glEnableVertexAttribArrayFunc glEnableVertexAttribArrayPtr;
        private delegate void glGetActiveAttribFunc(uint program, uint index, int bufSize, IntPtr length, IntPtr size, IntPtr type, IntPtr name);
        private static glGetActiveAttribFunc glGetActiveAttribPtr;
        private delegate void glGetActiveUniformFunc(uint program, uint index, int bufSize, IntPtr length, IntPtr size, IntPtr type, IntPtr name);
        private static glGetActiveUniformFunc glGetActiveUniformPtr;
        private delegate void glGetAttachedShadersFunc(uint program, int maxCount, IntPtr count, IntPtr shaders);
        private static glGetAttachedShadersFunc glGetAttachedShadersPtr;
        private delegate int glGetAttribLocationFunc(uint program, IntPtr name);
        private static glGetAttribLocationFunc glGetAttribLocationPtr;
        private delegate void glGetProgramivFunc(uint program, uint pname, IntPtr @params);
        private static glGetProgramivFunc glGetProgramivPtr;
        private delegate void glGetProgramInfoLogFunc(uint program, int bufSize, IntPtr length, IntPtr infoLog);
        private static glGetProgramInfoLogFunc glGetProgramInfoLogPtr;
        private delegate void glGetShaderivFunc(uint shader, uint pname, IntPtr @params);
        private static glGetShaderivFunc glGetShaderivPtr;
        private delegate void glGetShaderInfoLogFunc(uint shader, int bufSize, IntPtr length, IntPtr infoLog);
        private static glGetShaderInfoLogFunc glGetShaderInfoLogPtr;
        private delegate void glGetShaderSourceFunc(uint shader, int bufSize, IntPtr length, IntPtr source);
        private static glGetShaderSourceFunc glGetShaderSourcePtr;
        private delegate int glGetUniformLocationFunc(uint program, IntPtr name);
        private static glGetUniformLocationFunc glGetUniformLocationPtr;
        private delegate void glGetUniformfvFunc(uint program, int location, IntPtr @params);
        private static glGetUniformfvFunc glGetUniformfvPtr;
        private delegate void glGetUniformivFunc(uint program, int location, IntPtr @params);
        private static glGetUniformivFunc glGetUniformivPtr;
        private delegate void glGetVertexAttribdvFunc(uint index, uint pname, IntPtr @params);
        private static glGetVertexAttribdvFunc glGetVertexAttribdvPtr;
        private delegate void glGetVertexAttribfvFunc(uint index, uint pname, IntPtr @params);
        private static glGetVertexAttribfvFunc glGetVertexAttribfvPtr;
        private delegate void glGetVertexAttribivFunc(uint index, uint pname, IntPtr @params);
        private static glGetVertexAttribivFunc glGetVertexAttribivPtr;
        private delegate void glGetVertexAttribPointervFunc(uint index, uint pname, IntPtr pointer);
        private static glGetVertexAttribPointervFunc glGetVertexAttribPointervPtr;
        private delegate bool glIsProgramFunc(uint program);
        private static glIsProgramFunc glIsProgramPtr;
        private delegate bool glIsShaderFunc(uint shader);
        private static glIsShaderFunc glIsShaderPtr;
        private delegate void glLinkProgramFunc(uint program);
        private static glLinkProgramFunc glLinkProgramPtr;
        private delegate void glShaderSourceFunc(uint shader, int count, IntPtr @string, IntPtr length);
        private static glShaderSourceFunc glShaderSourcePtr;
        private delegate void glUseProgramFunc(uint program);
        private static glUseProgramFunc glUseProgramPtr;
        private delegate void glUniform1fFunc(int location, float v0);
        private static glUniform1fFunc glUniform1fPtr;
        private delegate void glUniform2fFunc(int location, float v0, float v1);
        private static glUniform2fFunc glUniform2fPtr;
        private delegate void glUniform3fFunc(int location, float v0, float v1, float v2);
        private static glUniform3fFunc glUniform3fPtr;
        private delegate void glUniform4fFunc(int location, float v0, float v1, float v2, float v3);
        private static glUniform4fFunc glUniform4fPtr;
        private delegate void glUniform1iFunc(int location, int v0);
        private static glUniform1iFunc glUniform1iPtr;
        private delegate void glUniform2iFunc(int location, int v0, int v1);
        private static glUniform2iFunc glUniform2iPtr;
        private delegate void glUniform3iFunc(int location, int v0, int v1, int v2);
        private static glUniform3iFunc glUniform3iPtr;
        private delegate void glUniform4iFunc(int location, int v0, int v1, int v2, int v3);
        private static glUniform4iFunc glUniform4iPtr;
        private delegate void glUniform1fvFunc(int location, int count, IntPtr value);
        private static glUniform1fvFunc glUniform1fvPtr;
        private delegate void glUniform2fvFunc(int location, int count, IntPtr value);
        private static glUniform2fvFunc glUniform2fvPtr;
        private delegate void glUniform3fvFunc(int location, int count, IntPtr value);
        private static glUniform3fvFunc glUniform3fvPtr;
        private delegate void glUniform4fvFunc(int location, int count, IntPtr value);
        private static glUniform4fvFunc glUniform4fvPtr;
        private delegate void glUniform1ivFunc(int location, int count, IntPtr value);
        private static glUniform1ivFunc glUniform1ivPtr;
        private delegate void glUniform2ivFunc(int location, int count, IntPtr value);
        private static glUniform2ivFunc glUniform2ivPtr;
        private delegate void glUniform3ivFunc(int location, int count, IntPtr value);
        private static glUniform3ivFunc glUniform3ivPtr;
        private delegate void glUniform4ivFunc(int location, int count, IntPtr value);
        private static glUniform4ivFunc glUniform4ivPtr;
        private delegate void glUniformMatrix2fvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix2fvFunc glUniformMatrix2fvPtr;
        private delegate void glUniformMatrix3fvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix3fvFunc glUniformMatrix3fvPtr;
        private delegate void glUniformMatrix4fvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix4fvFunc glUniformMatrix4fvPtr;
        private delegate void glValidateProgramFunc(uint program);
        private static glValidateProgramFunc glValidateProgramPtr;
        private delegate void glVertexAttrib1dFunc(uint index, double x);
        private static glVertexAttrib1dFunc glVertexAttrib1dPtr;
        private delegate void glVertexAttrib1dvFunc(uint index, IntPtr v);
        private static glVertexAttrib1dvFunc glVertexAttrib1dvPtr;
        private delegate void glVertexAttrib1fFunc(uint index, float x);
        private static glVertexAttrib1fFunc glVertexAttrib1fPtr;
        private delegate void glVertexAttrib1fvFunc(uint index, IntPtr v);
        private static glVertexAttrib1fvFunc glVertexAttrib1fvPtr;
        private delegate void glVertexAttrib1sFunc(uint index, short x);
        private static glVertexAttrib1sFunc glVertexAttrib1sPtr;
        private delegate void glVertexAttrib1svFunc(uint index, IntPtr v);
        private static glVertexAttrib1svFunc glVertexAttrib1svPtr;
        private delegate void glVertexAttrib2dFunc(uint index, double x, double y);
        private static glVertexAttrib2dFunc glVertexAttrib2dPtr;
        private delegate void glVertexAttrib2dvFunc(uint index, IntPtr v);
        private static glVertexAttrib2dvFunc glVertexAttrib2dvPtr;
        private delegate void glVertexAttrib2fFunc(uint index, float x, float y);
        private static glVertexAttrib2fFunc glVertexAttrib2fPtr;
        private delegate void glVertexAttrib2fvFunc(uint index, IntPtr v);
        private static glVertexAttrib2fvFunc glVertexAttrib2fvPtr;
        private delegate void glVertexAttrib2sFunc(uint index, short x, short y);
        private static glVertexAttrib2sFunc glVertexAttrib2sPtr;
        private delegate void glVertexAttrib2svFunc(uint index, IntPtr v);
        private static glVertexAttrib2svFunc glVertexAttrib2svPtr;
        private delegate void glVertexAttrib3dFunc(uint index, double x, double y, double z);
        private static glVertexAttrib3dFunc glVertexAttrib3dPtr;
        private delegate void glVertexAttrib3dvFunc(uint index, IntPtr v);
        private static glVertexAttrib3dvFunc glVertexAttrib3dvPtr;
        private delegate void glVertexAttrib3fFunc(uint index, float x, float y, float z);
        private static glVertexAttrib3fFunc glVertexAttrib3fPtr;
        private delegate void glVertexAttrib3fvFunc(uint index, IntPtr v);
        private static glVertexAttrib3fvFunc glVertexAttrib3fvPtr;
        private delegate void glVertexAttrib3sFunc(uint index, short x, short y, short z);
        private static glVertexAttrib3sFunc glVertexAttrib3sPtr;
        private delegate void glVertexAttrib3svFunc(uint index, IntPtr v);
        private static glVertexAttrib3svFunc glVertexAttrib3svPtr;
        private delegate void glVertexAttrib4NbvFunc(uint index, IntPtr v);
        private static glVertexAttrib4NbvFunc glVertexAttrib4NbvPtr;
        private delegate void glVertexAttrib4NivFunc(uint index, IntPtr v);
        private static glVertexAttrib4NivFunc glVertexAttrib4NivPtr;
        private delegate void glVertexAttrib4NsvFunc(uint index, IntPtr v);
        private static glVertexAttrib4NsvFunc glVertexAttrib4NsvPtr;
        private delegate void glVertexAttrib4NubFunc(uint index, byte x, byte y, byte z, byte w);
        private static glVertexAttrib4NubFunc glVertexAttrib4NubPtr;
        private delegate void glVertexAttrib4NubvFunc(uint index, IntPtr v);
        private static glVertexAttrib4NubvFunc glVertexAttrib4NubvPtr;
        private delegate void glVertexAttrib4NuivFunc(uint index, IntPtr v);
        private static glVertexAttrib4NuivFunc glVertexAttrib4NuivPtr;
        private delegate void glVertexAttrib4NusvFunc(uint index, IntPtr v);
        private static glVertexAttrib4NusvFunc glVertexAttrib4NusvPtr;
        private delegate void glVertexAttrib4bvFunc(uint index, IntPtr v);
        private static glVertexAttrib4bvFunc glVertexAttrib4bvPtr;
        private delegate void glVertexAttrib4dFunc(uint index, double x, double y, double z, double w);
        private static glVertexAttrib4dFunc glVertexAttrib4dPtr;
        private delegate void glVertexAttrib4dvFunc(uint index, IntPtr v);
        private static glVertexAttrib4dvFunc glVertexAttrib4dvPtr;
        private delegate void glVertexAttrib4fFunc(uint index, float x, float y, float z, float w);
        private static glVertexAttrib4fFunc glVertexAttrib4fPtr;
        private delegate void glVertexAttrib4fvFunc(uint index, IntPtr v);
        private static glVertexAttrib4fvFunc glVertexAttrib4fvPtr;
        private delegate void glVertexAttrib4ivFunc(uint index, IntPtr v);
        private static glVertexAttrib4ivFunc glVertexAttrib4ivPtr;
        private delegate void glVertexAttrib4sFunc(uint index, short x, short y, short z, short w);
        private static glVertexAttrib4sFunc glVertexAttrib4sPtr;
        private delegate void glVertexAttrib4svFunc(uint index, IntPtr v);
        private static glVertexAttrib4svFunc glVertexAttrib4svPtr;
        private delegate void glVertexAttrib4ubvFunc(uint index, IntPtr v);
        private static glVertexAttrib4ubvFunc glVertexAttrib4ubvPtr;
        private delegate void glVertexAttrib4uivFunc(uint index, IntPtr v);
        private static glVertexAttrib4uivFunc glVertexAttrib4uivPtr;
        private delegate void glVertexAttrib4usvFunc(uint index, IntPtr v);
        private static glVertexAttrib4usvFunc glVertexAttrib4usvPtr;
        private delegate void glVertexAttribPointerFunc(uint index, int size, uint type, bool normalized, int stride, IntPtr pointer);
        private static glVertexAttribPointerFunc glVertexAttribPointerPtr;
        private delegate void glUniformMatrix2x3fvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix2x3fvFunc glUniformMatrix2x3fvPtr;
        private delegate void glUniformMatrix3x2fvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix3x2fvFunc glUniformMatrix3x2fvPtr;
        private delegate void glUniformMatrix2x4fvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix2x4fvFunc glUniformMatrix2x4fvPtr;
        private delegate void glUniformMatrix4x2fvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix4x2fvFunc glUniformMatrix4x2fvPtr;
        private delegate void glUniformMatrix3x4fvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix3x4fvFunc glUniformMatrix3x4fvPtr;
        private delegate void glUniformMatrix4x3fvFunc(int location, int count, bool transpose, IntPtr value);
        private static glUniformMatrix4x3fvFunc glUniformMatrix4x3fvPtr;
        private delegate void glColorMaskiFunc(uint index, bool r, bool g, bool b, bool a);
        private static glColorMaskiFunc glColorMaskiPtr;
        private delegate void glGetBooleani_vFunc(uint target, uint index, IntPtr data);
        private static glGetBooleani_vFunc glGetBooleani_vPtr;
        private delegate void glGetIntegeri_vFunc(uint target, uint index, IntPtr data);
        private static glGetIntegeri_vFunc glGetIntegeri_vPtr;
        private delegate void glEnableiFunc(uint target, uint index);
        private static glEnableiFunc glEnableiPtr;
        private delegate void glDisableiFunc(uint target, uint index);
        private static glDisableiFunc glDisableiPtr;
        private delegate bool glIsEnablediFunc(uint target, uint index);
        private static glIsEnablediFunc glIsEnablediPtr;
        private delegate void glBeginTransformFeedbackFunc(uint primitiveMode);
        private static glBeginTransformFeedbackFunc glBeginTransformFeedbackPtr;
        private delegate void glEndTransformFeedbackFunc();
        private static glEndTransformFeedbackFunc glEndTransformFeedbackPtr;
        private delegate void glBindBufferRangeFunc(uint target, uint index, uint buffer, IntPtr offset, int size);
        private static glBindBufferRangeFunc glBindBufferRangePtr;
        private delegate void glBindBufferBaseFunc(uint target, uint index, uint buffer);
        private static glBindBufferBaseFunc glBindBufferBasePtr;
        private delegate void glTransformFeedbackVaryingsFunc(uint program, int count, IntPtr varyings, uint bufferMode);
        private static glTransformFeedbackVaryingsFunc glTransformFeedbackVaryingsPtr;
        private delegate void glGetTransformFeedbackVaryingFunc(uint program, uint index, int bufSize, IntPtr length, IntPtr size, IntPtr type, IntPtr name);
        private static glGetTransformFeedbackVaryingFunc glGetTransformFeedbackVaryingPtr;
        private delegate void glClampColorFunc(uint target, uint clamp);
        private static glClampColorFunc glClampColorPtr;
        private delegate void glBeginConditionalRenderFunc(uint id, uint mode);
        private static glBeginConditionalRenderFunc glBeginConditionalRenderPtr;
        private delegate void glEndConditionalRenderFunc();
        private static glEndConditionalRenderFunc glEndConditionalRenderPtr;
        private delegate void glVertexAttribIPointerFunc(uint index, int size, uint type, int stride, IntPtr pointer);
        private static glVertexAttribIPointerFunc glVertexAttribIPointerPtr;
        private delegate void glGetVertexAttribIivFunc(uint index, uint pname, IntPtr @params);
        private static glGetVertexAttribIivFunc glGetVertexAttribIivPtr;
        private delegate void glGetVertexAttribIuivFunc(uint index, uint pname, IntPtr @params);
        private static glGetVertexAttribIuivFunc glGetVertexAttribIuivPtr;
        private delegate void glVertexAttribI1iFunc(uint index, int x);
        private static glVertexAttribI1iFunc glVertexAttribI1iPtr;
        private delegate void glVertexAttribI2iFunc(uint index, int x, int y);
        private static glVertexAttribI2iFunc glVertexAttribI2iPtr;
        private delegate void glVertexAttribI3iFunc(uint index, int x, int y, int z);
        private static glVertexAttribI3iFunc glVertexAttribI3iPtr;
        private delegate void glVertexAttribI4iFunc(uint index, int x, int y, int z, int w);
        private static glVertexAttribI4iFunc glVertexAttribI4iPtr;
        private delegate void glVertexAttribI1uiFunc(uint index, uint x);
        private static glVertexAttribI1uiFunc glVertexAttribI1uiPtr;
        private delegate void glVertexAttribI2uiFunc(uint index, uint x, uint y);
        private static glVertexAttribI2uiFunc glVertexAttribI2uiPtr;
        private delegate void glVertexAttribI3uiFunc(uint index, uint x, uint y, uint z);
        private static glVertexAttribI3uiFunc glVertexAttribI3uiPtr;
        private delegate void glVertexAttribI4uiFunc(uint index, uint x, uint y, uint z, uint w);
        private static glVertexAttribI4uiFunc glVertexAttribI4uiPtr;
        private delegate void glVertexAttribI1ivFunc(uint index, IntPtr v);
        private static glVertexAttribI1ivFunc glVertexAttribI1ivPtr;
        private delegate void glVertexAttribI2ivFunc(uint index, IntPtr v);
        private static glVertexAttribI2ivFunc glVertexAttribI2ivPtr;
        private delegate void glVertexAttribI3ivFunc(uint index, IntPtr v);
        private static glVertexAttribI3ivFunc glVertexAttribI3ivPtr;
        private delegate void glVertexAttribI4ivFunc(uint index, IntPtr v);
        private static glVertexAttribI4ivFunc glVertexAttribI4ivPtr;
        private delegate void glVertexAttribI1uivFunc(uint index, IntPtr v);
        private static glVertexAttribI1uivFunc glVertexAttribI1uivPtr;
        private delegate void glVertexAttribI2uivFunc(uint index, IntPtr v);
        private static glVertexAttribI2uivFunc glVertexAttribI2uivPtr;
        private delegate void glVertexAttribI3uivFunc(uint index, IntPtr v);
        private static glVertexAttribI3uivFunc glVertexAttribI3uivPtr;
        private delegate void glVertexAttribI4uivFunc(uint index, IntPtr v);
        private static glVertexAttribI4uivFunc glVertexAttribI4uivPtr;
        private delegate void glVertexAttribI4bvFunc(uint index, IntPtr v);
        private static glVertexAttribI4bvFunc glVertexAttribI4bvPtr;
        private delegate void glVertexAttribI4svFunc(uint index, IntPtr v);
        private static glVertexAttribI4svFunc glVertexAttribI4svPtr;
        private delegate void glVertexAttribI4ubvFunc(uint index, IntPtr v);
        private static glVertexAttribI4ubvFunc glVertexAttribI4ubvPtr;
        private delegate void glVertexAttribI4usvFunc(uint index, IntPtr v);
        private static glVertexAttribI4usvFunc glVertexAttribI4usvPtr;
        private delegate void glGetUniformuivFunc(uint program, int location, IntPtr @params);
        private static glGetUniformuivFunc glGetUniformuivPtr;
        private delegate void glBindFragDataLocationFunc(uint program, uint color, IntPtr name);
        private static glBindFragDataLocationFunc glBindFragDataLocationPtr;
        private delegate int glGetFragDataLocationFunc(uint program, IntPtr name);
        private static glGetFragDataLocationFunc glGetFragDataLocationPtr;
        private delegate void glUniform1uiFunc(int location, uint v0);
        private static glUniform1uiFunc glUniform1uiPtr;
        private delegate void glUniform2uiFunc(int location, uint v0, uint v1);
        private static glUniform2uiFunc glUniform2uiPtr;
        private delegate void glUniform3uiFunc(int location, uint v0, uint v1, uint v2);
        private static glUniform3uiFunc glUniform3uiPtr;
        private delegate void glUniform4uiFunc(int location, uint v0, uint v1, uint v2, uint v3);
        private static glUniform4uiFunc glUniform4uiPtr;
        private delegate void glUniform1uivFunc(int location, int count, IntPtr value);
        private static glUniform1uivFunc glUniform1uivPtr;
        private delegate void glUniform2uivFunc(int location, int count, IntPtr value);
        private static glUniform2uivFunc glUniform2uivPtr;
        private delegate void glUniform3uivFunc(int location, int count, IntPtr value);
        private static glUniform3uivFunc glUniform3uivPtr;
        private delegate void glUniform4uivFunc(int location, int count, IntPtr value);
        private static glUniform4uivFunc glUniform4uivPtr;
        private delegate void glTexParameterIivFunc(uint target, uint pname, IntPtr @params);
        private static glTexParameterIivFunc glTexParameterIivPtr;
        private delegate void glTexParameterIuivFunc(uint target, uint pname, IntPtr @params);
        private static glTexParameterIuivFunc glTexParameterIuivPtr;
        private delegate void glGetTexParameterIivFunc(uint target, uint pname, IntPtr @params);
        private static glGetTexParameterIivFunc glGetTexParameterIivPtr;
        private delegate void glGetTexParameterIuivFunc(uint target, uint pname, IntPtr @params);
        private static glGetTexParameterIuivFunc glGetTexParameterIuivPtr;
        private delegate void glClearBufferivFunc(uint buffer, int drawbuffer, IntPtr value);
        private static glClearBufferivFunc glClearBufferivPtr;
        private delegate void glClearBufferuivFunc(uint buffer, int drawbuffer, IntPtr value);
        private static glClearBufferuivFunc glClearBufferuivPtr;
        private delegate void glClearBufferfvFunc(uint buffer, int drawbuffer, IntPtr value);
        private static glClearBufferfvFunc glClearBufferfvPtr;
        private delegate void glClearBufferfiFunc(uint buffer, int drawbuffer, float depth, int stencil);
        private static glClearBufferfiFunc glClearBufferfiPtr;
        private delegate IntPtr glGetStringiFunc(uint name, uint index);
        private static glGetStringiFunc glGetStringiPtr;
        private delegate bool glIsRenderbufferFunc(uint renderbuffer);
        private static glIsRenderbufferFunc glIsRenderbufferPtr;
        private delegate void glBindRenderbufferFunc(uint target, uint renderbuffer);
        private static glBindRenderbufferFunc glBindRenderbufferPtr;
        private delegate void glDeleteRenderbuffersFunc(int n, IntPtr renderbuffers);
        private static glDeleteRenderbuffersFunc glDeleteRenderbuffersPtr;
        private delegate void glGenRenderbuffersFunc(int n, IntPtr renderbuffers);
        private static glGenRenderbuffersFunc glGenRenderbuffersPtr;
        private delegate void glRenderbufferStorageFunc(uint target, uint internalformat, int width, int height);
        private static glRenderbufferStorageFunc glRenderbufferStoragePtr;
        private delegate void glGetRenderbufferParameterivFunc(uint target, uint pname, IntPtr @params);
        private static glGetRenderbufferParameterivFunc glGetRenderbufferParameterivPtr;
        private delegate bool glIsFramebufferFunc(uint framebuffer);
        private static glIsFramebufferFunc glIsFramebufferPtr;
        private delegate void glBindFramebufferFunc(uint target, uint framebuffer);
        private static glBindFramebufferFunc glBindFramebufferPtr;
        private delegate void glDeleteFramebuffersFunc(int n, IntPtr framebuffers);
        private static glDeleteFramebuffersFunc glDeleteFramebuffersPtr;
        private delegate void glGenFramebuffersFunc(int n, IntPtr framebuffers);
        private static glGenFramebuffersFunc glGenFramebuffersPtr;
        private delegate uint glCheckFramebufferStatusFunc(uint target);
        private static glCheckFramebufferStatusFunc glCheckFramebufferStatusPtr;
        private delegate void glFramebufferTexture1DFunc(uint target, uint attachment, uint textarget, uint texture, int level);
        private static glFramebufferTexture1DFunc glFramebufferTexture1DPtr;
        private delegate void glFramebufferTexture2DFunc(uint target, uint attachment, uint textarget, uint texture, int level);
        private static glFramebufferTexture2DFunc glFramebufferTexture2DPtr;
        private delegate void glFramebufferTexture3DFunc(uint target, uint attachment, uint textarget, uint texture, int level, int zoffset);
        private static glFramebufferTexture3DFunc glFramebufferTexture3DPtr;
        private delegate void glFramebufferRenderbufferFunc(uint target, uint attachment, uint renderbuffertarget, uint renderbuffer);
        private static glFramebufferRenderbufferFunc glFramebufferRenderbufferPtr;
        private delegate void glGetFramebufferAttachmentParameterivFunc(uint target, uint attachment, uint pname, IntPtr @params);
        private static glGetFramebufferAttachmentParameterivFunc glGetFramebufferAttachmentParameterivPtr;
        private delegate void glGenerateMipmapFunc(uint target);
        private static glGenerateMipmapFunc glGenerateMipmapPtr;
        private delegate void glBlitFramebufferFunc(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter);
        private static glBlitFramebufferFunc glBlitFramebufferPtr;
        private delegate void glRenderbufferStorageMultisampleFunc(uint target, int samples, uint internalformat, int width, int height);
        private static glRenderbufferStorageMultisampleFunc glRenderbufferStorageMultisamplePtr;
        private delegate void glFramebufferTextureLayerFunc(uint target, uint attachment, uint texture, int level, int layer);
        private static glFramebufferTextureLayerFunc glFramebufferTextureLayerPtr;
        private delegate IntPtr glMapBufferRangeFunc(uint target, IntPtr offset, int length, uint access);
        private static glMapBufferRangeFunc glMapBufferRangePtr;
        private delegate void glFlushMappedBufferRangeFunc(uint target, IntPtr offset, int length);
        private static glFlushMappedBufferRangeFunc glFlushMappedBufferRangePtr;
        private delegate void glBindVertexArrayFunc(uint array);
        private static glBindVertexArrayFunc glBindVertexArrayPtr;
        private delegate void glDeleteVertexArraysFunc(int n, IntPtr arrays);
        private static glDeleteVertexArraysFunc glDeleteVertexArraysPtr;
        private delegate void glGenVertexArraysFunc(int n, IntPtr arrays);
        private static glGenVertexArraysFunc glGenVertexArraysPtr;
        private delegate bool glIsVertexArrayFunc(uint array);
        private static glIsVertexArrayFunc glIsVertexArrayPtr;
        private delegate void glDrawArraysInstancedFunc(uint mode, int first, int count, int instancecount);
        private static glDrawArraysInstancedFunc glDrawArraysInstancedPtr;
        private delegate void glDrawElementsInstancedFunc(uint mode, int count, uint type, IntPtr indices, int instancecount);
        private static glDrawElementsInstancedFunc glDrawElementsInstancedPtr;
        private delegate void glTexBufferFunc(uint target, uint internalformat, uint buffer);
        private static glTexBufferFunc glTexBufferPtr;
        private delegate void glPrimitiveRestartIndexFunc(uint index);
        private static glPrimitiveRestartIndexFunc glPrimitiveRestartIndexPtr;
        private delegate void glCopyBufferSubDataFunc(uint readTarget, uint writeTarget, IntPtr readOffset, IntPtr writeOffset, int size);
        private static glCopyBufferSubDataFunc glCopyBufferSubDataPtr;
        private delegate void glGetUniformIndicesFunc(uint program, int uniformCount, IntPtr uniformNames, IntPtr uniformIndices);
        private static glGetUniformIndicesFunc glGetUniformIndicesPtr;
        private delegate void glGetActiveUniformsivFunc(uint program, int uniformCount, IntPtr uniformIndices, uint pname, IntPtr @params);
        private static glGetActiveUniformsivFunc glGetActiveUniformsivPtr;
        private delegate void glGetActiveUniformNameFunc(uint program, uint uniformIndex, int bufSize, IntPtr length, IntPtr uniformName);
        private static glGetActiveUniformNameFunc glGetActiveUniformNamePtr;
        private delegate uint glGetUniformBlockIndexFunc(uint program, IntPtr uniformBlockName);
        private static glGetUniformBlockIndexFunc glGetUniformBlockIndexPtr;
        private delegate void glGetActiveUniformBlockivFunc(uint program, uint uniformBlockIndex, uint pname, IntPtr @params);
        private static glGetActiveUniformBlockivFunc glGetActiveUniformBlockivPtr;
        private delegate void glGetActiveUniformBlockNameFunc(uint program, uint uniformBlockIndex, int bufSize, IntPtr length, IntPtr uniformBlockName);
        private static glGetActiveUniformBlockNameFunc glGetActiveUniformBlockNamePtr;
        private delegate void glUniformBlockBindingFunc(uint program, uint uniformBlockIndex, uint uniformBlockBinding);
        private static glUniformBlockBindingFunc glUniformBlockBindingPtr;
        private delegate void glDrawElementsBaseVertexFunc(uint mode, int count, uint type, IntPtr indices, int basevertex);
        private static glDrawElementsBaseVertexFunc glDrawElementsBaseVertexPtr;
        private delegate void glDrawRangeElementsBaseVertexFunc(uint mode, uint start, uint end, int count, uint type, IntPtr indices, int basevertex);
        private static glDrawRangeElementsBaseVertexFunc glDrawRangeElementsBaseVertexPtr;
        private delegate void glDrawElementsInstancedBaseVertexFunc(uint mode, int count, uint type, IntPtr indices, int instancecount, int basevertex);
        private static glDrawElementsInstancedBaseVertexFunc glDrawElementsInstancedBaseVertexPtr;
        private delegate void glMultiDrawElementsBaseVertexFunc(uint mode, IntPtr count, uint type, IntPtr indices, int drawcount, IntPtr basevertex);
        private static glMultiDrawElementsBaseVertexFunc glMultiDrawElementsBaseVertexPtr;
        private delegate void glProvokingVertexFunc(uint mode);
        private static glProvokingVertexFunc glProvokingVertexPtr;
        private delegate IntPtr glFenceSyncFunc(uint condition, uint flags);
        private static glFenceSyncFunc glFenceSyncPtr;
        private delegate bool glIsSyncFunc(IntPtr sync);
        private static glIsSyncFunc glIsSyncPtr;
        private delegate void glDeleteSyncFunc(IntPtr sync);
        private static glDeleteSyncFunc glDeleteSyncPtr;
        private delegate uint glClientWaitSyncFunc(IntPtr sync, uint flags, ulong timeout);
        private static glClientWaitSyncFunc glClientWaitSyncPtr;
        private delegate void glWaitSyncFunc(IntPtr sync, uint flags, ulong timeout);
        private static glWaitSyncFunc glWaitSyncPtr;
        private delegate void glGetInteger64vFunc(uint pname, IntPtr data);
        private static glGetInteger64vFunc glGetInteger64vPtr;
        private delegate void glGetSyncivFunc(IntPtr sync, uint pname, int bufSize, IntPtr length, IntPtr values);
        private static glGetSyncivFunc glGetSyncivPtr;
        private delegate void glGetInteger64i_vFunc(uint target, uint index, IntPtr data);
        private static glGetInteger64i_vFunc glGetInteger64i_vPtr;
        private delegate void glGetBufferParameteri64vFunc(uint target, uint pname, IntPtr @params);
        private static glGetBufferParameteri64vFunc glGetBufferParameteri64vPtr;
        private delegate void glFramebufferTextureFunc(uint target, uint attachment, uint texture, int level);
        private static glFramebufferTextureFunc glFramebufferTexturePtr;
        private delegate void glTexImage2DMultisampleFunc(uint target, int samples, uint internalformat, int width, int height, bool fixedsamplelocations);
        private static glTexImage2DMultisampleFunc glTexImage2DMultisamplePtr;
        private delegate void glTexImage3DMultisampleFunc(uint target, int samples, uint internalformat, int width, int height, int depth, bool fixedsamplelocations);
        private static glTexImage3DMultisampleFunc glTexImage3DMultisamplePtr;
        private delegate void glGetMultisamplefvFunc(uint pname, uint index, IntPtr val);
        private static glGetMultisamplefvFunc glGetMultisamplefvPtr;
        private delegate void glSampleMaskiFunc(uint index, uint mask);
        private static glSampleMaskiFunc glSampleMaskiPtr;
        #endregion

        #region Interop
        public static Func<string, IntPtr> GetProcAddress = null;

        public static void LoadAllFunctions()
        {
            glCullFacePtr = (glCullFaceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCullFace"), typeof(glCullFaceFunc));
            glFrontFacePtr = (glFrontFaceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFrontFace"), typeof(glFrontFaceFunc));
            glHintPtr = (glHintFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glHint"), typeof(glHintFunc));
            glLineWidthPtr = (glLineWidthFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLineWidth"), typeof(glLineWidthFunc));
            glPointSizePtr = (glPointSizeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointSize"), typeof(glPointSizeFunc));
            glPolygonModePtr = (glPolygonModeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPolygonMode"), typeof(glPolygonModeFunc));
            glScissorPtr = (glScissorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glScissor"), typeof(glScissorFunc));
            glTexParameterfPtr = (glTexParameterfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterf"), typeof(glTexParameterfFunc));
            glTexParameterfvPtr = (glTexParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterfv"), typeof(glTexParameterfvFunc));
            glTexParameteriPtr = (glTexParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameteri"), typeof(glTexParameteriFunc));
            glTexParameterivPtr = (glTexParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameteriv"), typeof(glTexParameterivFunc));
            glTexImage1DPtr = (glTexImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage1D"), typeof(glTexImage1DFunc));
            glTexImage2DPtr = (glTexImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage2D"), typeof(glTexImage2DFunc));
            glDrawBufferPtr = (glDrawBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawBuffer"), typeof(glDrawBufferFunc));
            glClearPtr = (glClearFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClear"), typeof(glClearFunc));
            glClearColorPtr = (glClearColorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearColor"), typeof(glClearColorFunc));
            glClearStencilPtr = (glClearStencilFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearStencil"), typeof(glClearStencilFunc));
            glClearDepthPtr = (glClearDepthFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearDepth"), typeof(glClearDepthFunc));
            glStencilMaskPtr = (glStencilMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilMask"), typeof(glStencilMaskFunc));
            glColorMaskPtr = (glColorMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorMask"), typeof(glColorMaskFunc));
            glDepthMaskPtr = (glDepthMaskFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthMask"), typeof(glDepthMaskFunc));
            glDisablePtr = (glDisableFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDisable"), typeof(glDisableFunc));
            glEnablePtr = (glEnableFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnable"), typeof(glEnableFunc));
            glFinishPtr = (glFinishFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFinish"), typeof(glFinishFunc));
            glFlushPtr = (glFlushFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFlush"), typeof(glFlushFunc));
            glBlendFuncPtr = (glBlendFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendFunc"), typeof(glBlendFuncFunc));
            glLogicOpPtr = (glLogicOpFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLogicOp"), typeof(glLogicOpFunc));
            glStencilFuncPtr = (glStencilFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilFunc"), typeof(glStencilFuncFunc));
            glStencilOpPtr = (glStencilOpFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilOp"), typeof(glStencilOpFunc));
            glDepthFuncPtr = (glDepthFuncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthFunc"), typeof(glDepthFuncFunc));
            glPixelStorefPtr = (glPixelStorefFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelStoref"), typeof(glPixelStorefFunc));
            glPixelStoreiPtr = (glPixelStoreiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPixelStorei"), typeof(glPixelStoreiFunc));
            glReadBufferPtr = (glReadBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glReadBuffer"), typeof(glReadBufferFunc));
            glReadPixelsPtr = (glReadPixelsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glReadPixels"), typeof(glReadPixelsFunc));
            glGetBooleanvPtr = (glGetBooleanvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBooleanv"), typeof(glGetBooleanvFunc));
            glGetDoublevPtr = (glGetDoublevFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetDoublev"), typeof(glGetDoublevFunc));
            glGetErrorPtr = (glGetErrorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetError"), typeof(glGetErrorFunc));
            glGetFloatvPtr = (glGetFloatvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFloatv"), typeof(glGetFloatvFunc));
            glGetIntegervPtr = (glGetIntegervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetIntegerv"), typeof(glGetIntegervFunc));
            glGetStringPtr = (glGetStringFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetString"), typeof(glGetStringFunc));
            glGetTexImagePtr = (glGetTexImageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexImage"), typeof(glGetTexImageFunc));
            glGetTexParameterfvPtr = (glGetTexParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameterfv"), typeof(glGetTexParameterfvFunc));
            glGetTexParameterivPtr = (glGetTexParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameteriv"), typeof(glGetTexParameterivFunc));
            glGetTexLevelParameterfvPtr = (glGetTexLevelParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexLevelParameterfv"), typeof(glGetTexLevelParameterfvFunc));
            glGetTexLevelParameterivPtr = (glGetTexLevelParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexLevelParameteriv"), typeof(glGetTexLevelParameterivFunc));
            glIsEnabledPtr = (glIsEnabledFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsEnabled"), typeof(glIsEnabledFunc));
            glDepthRangePtr = (glDepthRangeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDepthRange"), typeof(glDepthRangeFunc));
            glViewportPtr = (glViewportFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glViewport"), typeof(glViewportFunc));
            glDrawArraysPtr = (glDrawArraysFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawArrays"), typeof(glDrawArraysFunc));
            glDrawElementsPtr = (glDrawElementsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElements"), typeof(glDrawElementsFunc));
            glPolygonOffsetPtr = (glPolygonOffsetFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPolygonOffset"), typeof(glPolygonOffsetFunc));
            glCopyTexImage1DPtr = (glCopyTexImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexImage1D"), typeof(glCopyTexImage1DFunc));
            glCopyTexImage2DPtr = (glCopyTexImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexImage2D"), typeof(glCopyTexImage2DFunc));
            glCopyTexSubImage1DPtr = (glCopyTexSubImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexSubImage1D"), typeof(glCopyTexSubImage1DFunc));
            glCopyTexSubImage2DPtr = (glCopyTexSubImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexSubImage2D"), typeof(glCopyTexSubImage2DFunc));
            glTexSubImage1DPtr = (glTexSubImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexSubImage1D"), typeof(glTexSubImage1DFunc));
            glTexSubImage2DPtr = (glTexSubImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexSubImage2D"), typeof(glTexSubImage2DFunc));
            glBindTexturePtr = (glBindTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindTexture"), typeof(glBindTextureFunc));
            glDeleteTexturesPtr = (glDeleteTexturesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteTextures"), typeof(glDeleteTexturesFunc));
            glGenTexturesPtr = (glGenTexturesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenTextures"), typeof(glGenTexturesFunc));
            glIsTexturePtr = (glIsTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsTexture"), typeof(glIsTextureFunc));
            glDrawRangeElementsPtr = (glDrawRangeElementsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawRangeElements"), typeof(glDrawRangeElementsFunc));
            glTexImage3DPtr = (glTexImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage3D"), typeof(glTexImage3DFunc));
            glTexSubImage3DPtr = (glTexSubImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexSubImage3D"), typeof(glTexSubImage3DFunc));
            glCopyTexSubImage3DPtr = (glCopyTexSubImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyTexSubImage3D"), typeof(glCopyTexSubImage3DFunc));
            glActiveTexturePtr = (glActiveTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glActiveTexture"), typeof(glActiveTextureFunc));
            glSampleCoveragePtr = (glSampleCoverageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSampleCoverage"), typeof(glSampleCoverageFunc));
            glCompressedTexImage3DPtr = (glCompressedTexImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexImage3D"), typeof(glCompressedTexImage3DFunc));
            glCompressedTexImage2DPtr = (glCompressedTexImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexImage2D"), typeof(glCompressedTexImage2DFunc));
            glCompressedTexImage1DPtr = (glCompressedTexImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexImage1D"), typeof(glCompressedTexImage1DFunc));
            glCompressedTexSubImage3DPtr = (glCompressedTexSubImage3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexSubImage3D"), typeof(glCompressedTexSubImage3DFunc));
            glCompressedTexSubImage2DPtr = (glCompressedTexSubImage2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexSubImage2D"), typeof(glCompressedTexSubImage2DFunc));
            glCompressedTexSubImage1DPtr = (glCompressedTexSubImage1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompressedTexSubImage1D"), typeof(glCompressedTexSubImage1DFunc));
            glGetCompressedTexImagePtr = (glGetCompressedTexImageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetCompressedTexImage"), typeof(glGetCompressedTexImageFunc));
            glBlendFuncSeparatePtr = (glBlendFuncSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendFuncSeparate"), typeof(glBlendFuncSeparateFunc));
            glMultiDrawArraysPtr = (glMultiDrawArraysFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiDrawArrays"), typeof(glMultiDrawArraysFunc));
            glMultiDrawElementsPtr = (glMultiDrawElementsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiDrawElements"), typeof(glMultiDrawElementsFunc));
            glPointParameterfPtr = (glPointParameterfFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameterf"), typeof(glPointParameterfFunc));
            glPointParameterfvPtr = (glPointParameterfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameterfv"), typeof(glPointParameterfvFunc));
            glPointParameteriPtr = (glPointParameteriFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameteri"), typeof(glPointParameteriFunc));
            glPointParameterivPtr = (glPointParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPointParameteriv"), typeof(glPointParameterivFunc));
            glBlendColorPtr = (glBlendColorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendColor"), typeof(glBlendColorFunc));
            glBlendEquationPtr = (glBlendEquationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendEquation"), typeof(glBlendEquationFunc));
            glGenQueriesPtr = (glGenQueriesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenQueries"), typeof(glGenQueriesFunc));
            glDeleteQueriesPtr = (glDeleteQueriesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteQueries"), typeof(glDeleteQueriesFunc));
            glIsQueryPtr = (glIsQueryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsQuery"), typeof(glIsQueryFunc));
            glBeginQueryPtr = (glBeginQueryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBeginQuery"), typeof(glBeginQueryFunc));
            glEndQueryPtr = (glEndQueryFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEndQuery"), typeof(glEndQueryFunc));
            glGetQueryivPtr = (glGetQueryivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetQueryiv"), typeof(glGetQueryivFunc));
            glGetQueryObjectivPtr = (glGetQueryObjectivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetQueryObjectiv"), typeof(glGetQueryObjectivFunc));
            glGetQueryObjectuivPtr = (glGetQueryObjectuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetQueryObjectuiv"), typeof(glGetQueryObjectuivFunc));
            glBindBufferPtr = (glBindBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindBuffer"), typeof(glBindBufferFunc));
            glDeleteBuffersPtr = (glDeleteBuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteBuffers"), typeof(glDeleteBuffersFunc));
            glGenBuffersPtr = (glGenBuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenBuffers"), typeof(glGenBuffersFunc));
            glIsBufferPtr = (glIsBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsBuffer"), typeof(glIsBufferFunc));
            glBufferDataPtr = (glBufferDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBufferData"), typeof(glBufferDataFunc));
            glBufferSubDataPtr = (glBufferSubDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBufferSubData"), typeof(glBufferSubDataFunc));
            glGetBufferSubDataPtr = (glGetBufferSubDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBufferSubData"), typeof(glGetBufferSubDataFunc));
            glMapBufferPtr = (glMapBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMapBuffer"), typeof(glMapBufferFunc));
            glUnmapBufferPtr = (glUnmapBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUnmapBuffer"), typeof(glUnmapBufferFunc));
            glGetBufferParameterivPtr = (glGetBufferParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBufferParameteriv"), typeof(glGetBufferParameterivFunc));
            glGetBufferPointervPtr = (glGetBufferPointervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBufferPointerv"), typeof(glGetBufferPointervFunc));
            glBlendEquationSeparatePtr = (glBlendEquationSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlendEquationSeparate"), typeof(glBlendEquationSeparateFunc));
            glDrawBuffersPtr = (glDrawBuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawBuffers"), typeof(glDrawBuffersFunc));
            glStencilOpSeparatePtr = (glStencilOpSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilOpSeparate"), typeof(glStencilOpSeparateFunc));
            glStencilFuncSeparatePtr = (glStencilFuncSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilFuncSeparate"), typeof(glStencilFuncSeparateFunc));
            glStencilMaskSeparatePtr = (glStencilMaskSeparateFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glStencilMaskSeparate"), typeof(glStencilMaskSeparateFunc));
            glAttachShaderPtr = (glAttachShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glAttachShader"), typeof(glAttachShaderFunc));
            glBindAttribLocationPtr = (glBindAttribLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindAttribLocation"), typeof(glBindAttribLocationFunc));
            glCompileShaderPtr = (glCompileShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCompileShader"), typeof(glCompileShaderFunc));
            glCreateProgramPtr = (glCreateProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCreateProgram"), typeof(glCreateProgramFunc));
            glCreateShaderPtr = (glCreateShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCreateShader"), typeof(glCreateShaderFunc));
            glDeleteProgramPtr = (glDeleteProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteProgram"), typeof(glDeleteProgramFunc));
            glDeleteShaderPtr = (glDeleteShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteShader"), typeof(glDeleteShaderFunc));
            glDetachShaderPtr = (glDetachShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDetachShader"), typeof(glDetachShaderFunc));
            glDisableVertexAttribArrayPtr = (glDisableVertexAttribArrayFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDisableVertexAttribArray"), typeof(glDisableVertexAttribArrayFunc));
            glEnableVertexAttribArrayPtr = (glEnableVertexAttribArrayFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnableVertexAttribArray"), typeof(glEnableVertexAttribArrayFunc));
            glGetActiveAttribPtr = (glGetActiveAttribFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveAttrib"), typeof(glGetActiveAttribFunc));
            glGetActiveUniformPtr = (glGetActiveUniformFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveUniform"), typeof(glGetActiveUniformFunc));
            glGetAttachedShadersPtr = (glGetAttachedShadersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetAttachedShaders"), typeof(glGetAttachedShadersFunc));
            glGetAttribLocationPtr = (glGetAttribLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetAttribLocation"), typeof(glGetAttribLocationFunc));
            glGetProgramivPtr = (glGetProgramivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramiv"), typeof(glGetProgramivFunc));
            glGetProgramInfoLogPtr = (glGetProgramInfoLogFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetProgramInfoLog"), typeof(glGetProgramInfoLogFunc));
            glGetShaderivPtr = (glGetShaderivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetShaderiv"), typeof(glGetShaderivFunc));
            glGetShaderInfoLogPtr = (glGetShaderInfoLogFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetShaderInfoLog"), typeof(glGetShaderInfoLogFunc));
            glGetShaderSourcePtr = (glGetShaderSourceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetShaderSource"), typeof(glGetShaderSourceFunc));
            glGetUniformLocationPtr = (glGetUniformLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformLocation"), typeof(glGetUniformLocationFunc));
            glGetUniformfvPtr = (glGetUniformfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformfv"), typeof(glGetUniformfvFunc));
            glGetUniformivPtr = (glGetUniformivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformiv"), typeof(glGetUniformivFunc));
            glGetVertexAttribdvPtr = (glGetVertexAttribdvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribdv"), typeof(glGetVertexAttribdvFunc));
            glGetVertexAttribfvPtr = (glGetVertexAttribfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribfv"), typeof(glGetVertexAttribfvFunc));
            glGetVertexAttribivPtr = (glGetVertexAttribivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribiv"), typeof(glGetVertexAttribivFunc));
            glGetVertexAttribPointervPtr = (glGetVertexAttribPointervFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribPointerv"), typeof(glGetVertexAttribPointervFunc));
            glIsProgramPtr = (glIsProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsProgram"), typeof(glIsProgramFunc));
            glIsShaderPtr = (glIsShaderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsShader"), typeof(glIsShaderFunc));
            glLinkProgramPtr = (glLinkProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glLinkProgram"), typeof(glLinkProgramFunc));
            glShaderSourcePtr = (glShaderSourceFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glShaderSource"), typeof(glShaderSourceFunc));
            glUseProgramPtr = (glUseProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUseProgram"), typeof(glUseProgramFunc));
            glUniform1fPtr = (glUniform1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1f"), typeof(glUniform1fFunc));
            glUniform2fPtr = (glUniform2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2f"), typeof(glUniform2fFunc));
            glUniform3fPtr = (glUniform3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3f"), typeof(glUniform3fFunc));
            glUniform4fPtr = (glUniform4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4f"), typeof(glUniform4fFunc));
            glUniform1iPtr = (glUniform1iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1i"), typeof(glUniform1iFunc));
            glUniform2iPtr = (glUniform2iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2i"), typeof(glUniform2iFunc));
            glUniform3iPtr = (glUniform3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3i"), typeof(glUniform3iFunc));
            glUniform4iPtr = (glUniform4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4i"), typeof(glUniform4iFunc));
            glUniform1fvPtr = (glUniform1fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1fv"), typeof(glUniform1fvFunc));
            glUniform2fvPtr = (glUniform2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2fv"), typeof(glUniform2fvFunc));
            glUniform3fvPtr = (glUniform3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3fv"), typeof(glUniform3fvFunc));
            glUniform4fvPtr = (glUniform4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4fv"), typeof(glUniform4fvFunc));
            glUniform1ivPtr = (glUniform1ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1iv"), typeof(glUniform1ivFunc));
            glUniform2ivPtr = (glUniform2ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2iv"), typeof(glUniform2ivFunc));
            glUniform3ivPtr = (glUniform3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3iv"), typeof(glUniform3ivFunc));
            glUniform4ivPtr = (glUniform4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4iv"), typeof(glUniform4ivFunc));
            glUniformMatrix2fvPtr = (glUniformMatrix2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix2fv"), typeof(glUniformMatrix2fvFunc));
            glUniformMatrix3fvPtr = (glUniformMatrix3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix3fv"), typeof(glUniformMatrix3fvFunc));
            glUniformMatrix4fvPtr = (glUniformMatrix4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix4fv"), typeof(glUniformMatrix4fvFunc));
            glValidateProgramPtr = (glValidateProgramFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glValidateProgram"), typeof(glValidateProgramFunc));
            glVertexAttrib1dPtr = (glVertexAttrib1dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1d"), typeof(glVertexAttrib1dFunc));
            glVertexAttrib1dvPtr = (glVertexAttrib1dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1dv"), typeof(glVertexAttrib1dvFunc));
            glVertexAttrib1fPtr = (glVertexAttrib1fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1f"), typeof(glVertexAttrib1fFunc));
            glVertexAttrib1fvPtr = (glVertexAttrib1fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1fv"), typeof(glVertexAttrib1fvFunc));
            glVertexAttrib1sPtr = (glVertexAttrib1sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1s"), typeof(glVertexAttrib1sFunc));
            glVertexAttrib1svPtr = (glVertexAttrib1svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib1sv"), typeof(glVertexAttrib1svFunc));
            glVertexAttrib2dPtr = (glVertexAttrib2dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2d"), typeof(glVertexAttrib2dFunc));
            glVertexAttrib2dvPtr = (glVertexAttrib2dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2dv"), typeof(glVertexAttrib2dvFunc));
            glVertexAttrib2fPtr = (glVertexAttrib2fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2f"), typeof(glVertexAttrib2fFunc));
            glVertexAttrib2fvPtr = (glVertexAttrib2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2fv"), typeof(glVertexAttrib2fvFunc));
            glVertexAttrib2sPtr = (glVertexAttrib2sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2s"), typeof(glVertexAttrib2sFunc));
            glVertexAttrib2svPtr = (glVertexAttrib2svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib2sv"), typeof(glVertexAttrib2svFunc));
            glVertexAttrib3dPtr = (glVertexAttrib3dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3d"), typeof(glVertexAttrib3dFunc));
            glVertexAttrib3dvPtr = (glVertexAttrib3dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3dv"), typeof(glVertexAttrib3dvFunc));
            glVertexAttrib3fPtr = (glVertexAttrib3fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3f"), typeof(glVertexAttrib3fFunc));
            glVertexAttrib3fvPtr = (glVertexAttrib3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3fv"), typeof(glVertexAttrib3fvFunc));
            glVertexAttrib3sPtr = (glVertexAttrib3sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3s"), typeof(glVertexAttrib3sFunc));
            glVertexAttrib3svPtr = (glVertexAttrib3svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib3sv"), typeof(glVertexAttrib3svFunc));
            glVertexAttrib4NbvPtr = (glVertexAttrib4NbvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Nbv"), typeof(glVertexAttrib4NbvFunc));
            glVertexAttrib4NivPtr = (glVertexAttrib4NivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Niv"), typeof(glVertexAttrib4NivFunc));
            glVertexAttrib4NsvPtr = (glVertexAttrib4NsvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Nsv"), typeof(glVertexAttrib4NsvFunc));
            glVertexAttrib4NubPtr = (glVertexAttrib4NubFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Nub"), typeof(glVertexAttrib4NubFunc));
            glVertexAttrib4NubvPtr = (glVertexAttrib4NubvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Nubv"), typeof(glVertexAttrib4NubvFunc));
            glVertexAttrib4NuivPtr = (glVertexAttrib4NuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Nuiv"), typeof(glVertexAttrib4NuivFunc));
            glVertexAttrib4NusvPtr = (glVertexAttrib4NusvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4Nusv"), typeof(glVertexAttrib4NusvFunc));
            glVertexAttrib4bvPtr = (glVertexAttrib4bvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4bv"), typeof(glVertexAttrib4bvFunc));
            glVertexAttrib4dPtr = (glVertexAttrib4dFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4d"), typeof(glVertexAttrib4dFunc));
            glVertexAttrib4dvPtr = (glVertexAttrib4dvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4dv"), typeof(glVertexAttrib4dvFunc));
            glVertexAttrib4fPtr = (glVertexAttrib4fFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4f"), typeof(glVertexAttrib4fFunc));
            glVertexAttrib4fvPtr = (glVertexAttrib4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4fv"), typeof(glVertexAttrib4fvFunc));
            glVertexAttrib4ivPtr = (glVertexAttrib4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4iv"), typeof(glVertexAttrib4ivFunc));
            glVertexAttrib4sPtr = (glVertexAttrib4sFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4s"), typeof(glVertexAttrib4sFunc));
            glVertexAttrib4svPtr = (glVertexAttrib4svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4sv"), typeof(glVertexAttrib4svFunc));
            glVertexAttrib4ubvPtr = (glVertexAttrib4ubvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4ubv"), typeof(glVertexAttrib4ubvFunc));
            glVertexAttrib4uivPtr = (glVertexAttrib4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4uiv"), typeof(glVertexAttrib4uivFunc));
            glVertexAttrib4usvPtr = (glVertexAttrib4usvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttrib4usv"), typeof(glVertexAttrib4usvFunc));
            glVertexAttribPointerPtr = (glVertexAttribPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribPointer"), typeof(glVertexAttribPointerFunc));
            glUniformMatrix2x3fvPtr = (glUniformMatrix2x3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix2x3fv"), typeof(glUniformMatrix2x3fvFunc));
            glUniformMatrix3x2fvPtr = (glUniformMatrix3x2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix3x2fv"), typeof(glUniformMatrix3x2fvFunc));
            glUniformMatrix2x4fvPtr = (glUniformMatrix2x4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix2x4fv"), typeof(glUniformMatrix2x4fvFunc));
            glUniformMatrix4x2fvPtr = (glUniformMatrix4x2fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix4x2fv"), typeof(glUniformMatrix4x2fvFunc));
            glUniformMatrix3x4fvPtr = (glUniformMatrix3x4fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix3x4fv"), typeof(glUniformMatrix3x4fvFunc));
            glUniformMatrix4x3fvPtr = (glUniformMatrix4x3fvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformMatrix4x3fv"), typeof(glUniformMatrix4x3fvFunc));
            glColorMaskiPtr = (glColorMaskiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glColorMaski"), typeof(glColorMaskiFunc));
            glGetBooleani_vPtr = (glGetBooleani_vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBooleani_v"), typeof(glGetBooleani_vFunc));
            glGetIntegeri_vPtr = (glGetIntegeri_vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetIntegeri_v"), typeof(glGetIntegeri_vFunc));
            glEnableiPtr = (glEnableiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEnablei"), typeof(glEnableiFunc));
            glDisableiPtr = (glDisableiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDisablei"), typeof(glDisableiFunc));
            glIsEnablediPtr = (glIsEnablediFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsEnabledi"), typeof(glIsEnablediFunc));
            glBeginTransformFeedbackPtr = (glBeginTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBeginTransformFeedback"), typeof(glBeginTransformFeedbackFunc));
            glEndTransformFeedbackPtr = (glEndTransformFeedbackFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEndTransformFeedback"), typeof(glEndTransformFeedbackFunc));
            glBindBufferRangePtr = (glBindBufferRangeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindBufferRange"), typeof(glBindBufferRangeFunc));
            glBindBufferBasePtr = (glBindBufferBaseFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindBufferBase"), typeof(glBindBufferBaseFunc));
            glTransformFeedbackVaryingsPtr = (glTransformFeedbackVaryingsFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTransformFeedbackVaryings"), typeof(glTransformFeedbackVaryingsFunc));
            glGetTransformFeedbackVaryingPtr = (glGetTransformFeedbackVaryingFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTransformFeedbackVarying"), typeof(glGetTransformFeedbackVaryingFunc));
            glClampColorPtr = (glClampColorFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClampColor"), typeof(glClampColorFunc));
            glBeginConditionalRenderPtr = (glBeginConditionalRenderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBeginConditionalRender"), typeof(glBeginConditionalRenderFunc));
            glEndConditionalRenderPtr = (glEndConditionalRenderFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glEndConditionalRender"), typeof(glEndConditionalRenderFunc));
            glVertexAttribIPointerPtr = (glVertexAttribIPointerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribIPointer"), typeof(glVertexAttribIPointerFunc));
            glGetVertexAttribIivPtr = (glGetVertexAttribIivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribIiv"), typeof(glGetVertexAttribIivFunc));
            glGetVertexAttribIuivPtr = (glGetVertexAttribIuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetVertexAttribIuiv"), typeof(glGetVertexAttribIuivFunc));
            glVertexAttribI1iPtr = (glVertexAttribI1iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI1i"), typeof(glVertexAttribI1iFunc));
            glVertexAttribI2iPtr = (glVertexAttribI2iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI2i"), typeof(glVertexAttribI2iFunc));
            glVertexAttribI3iPtr = (glVertexAttribI3iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI3i"), typeof(glVertexAttribI3iFunc));
            glVertexAttribI4iPtr = (glVertexAttribI4iFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4i"), typeof(glVertexAttribI4iFunc));
            glVertexAttribI1uiPtr = (glVertexAttribI1uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI1ui"), typeof(glVertexAttribI1uiFunc));
            glVertexAttribI2uiPtr = (glVertexAttribI2uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI2ui"), typeof(glVertexAttribI2uiFunc));
            glVertexAttribI3uiPtr = (glVertexAttribI3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI3ui"), typeof(glVertexAttribI3uiFunc));
            glVertexAttribI4uiPtr = (glVertexAttribI4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4ui"), typeof(glVertexAttribI4uiFunc));
            glVertexAttribI1ivPtr = (glVertexAttribI1ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI1iv"), typeof(glVertexAttribI1ivFunc));
            glVertexAttribI2ivPtr = (glVertexAttribI2ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI2iv"), typeof(glVertexAttribI2ivFunc));
            glVertexAttribI3ivPtr = (glVertexAttribI3ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI3iv"), typeof(glVertexAttribI3ivFunc));
            glVertexAttribI4ivPtr = (glVertexAttribI4ivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4iv"), typeof(glVertexAttribI4ivFunc));
            glVertexAttribI1uivPtr = (glVertexAttribI1uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI1uiv"), typeof(glVertexAttribI1uivFunc));
            glVertexAttribI2uivPtr = (glVertexAttribI2uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI2uiv"), typeof(glVertexAttribI2uivFunc));
            glVertexAttribI3uivPtr = (glVertexAttribI3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI3uiv"), typeof(glVertexAttribI3uivFunc));
            glVertexAttribI4uivPtr = (glVertexAttribI4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4uiv"), typeof(glVertexAttribI4uivFunc));
            glVertexAttribI4bvPtr = (glVertexAttribI4bvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4bv"), typeof(glVertexAttribI4bvFunc));
            glVertexAttribI4svPtr = (glVertexAttribI4svFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4sv"), typeof(glVertexAttribI4svFunc));
            glVertexAttribI4ubvPtr = (glVertexAttribI4ubvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4ubv"), typeof(glVertexAttribI4ubvFunc));
            glVertexAttribI4usvPtr = (glVertexAttribI4usvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glVertexAttribI4usv"), typeof(glVertexAttribI4usvFunc));
            glGetUniformuivPtr = (glGetUniformuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformuiv"), typeof(glGetUniformuivFunc));
            glBindFragDataLocationPtr = (glBindFragDataLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindFragDataLocation"), typeof(glBindFragDataLocationFunc));
            glGetFragDataLocationPtr = (glGetFragDataLocationFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFragDataLocation"), typeof(glGetFragDataLocationFunc));
            glUniform1uiPtr = (glUniform1uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1ui"), typeof(glUniform1uiFunc));
            glUniform2uiPtr = (glUniform2uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2ui"), typeof(glUniform2uiFunc));
            glUniform3uiPtr = (glUniform3uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3ui"), typeof(glUniform3uiFunc));
            glUniform4uiPtr = (glUniform4uiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4ui"), typeof(glUniform4uiFunc));
            glUniform1uivPtr = (glUniform1uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform1uiv"), typeof(glUniform1uivFunc));
            glUniform2uivPtr = (glUniform2uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform2uiv"), typeof(glUniform2uivFunc));
            glUniform3uivPtr = (glUniform3uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform3uiv"), typeof(glUniform3uivFunc));
            glUniform4uivPtr = (glUniform4uivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniform4uiv"), typeof(glUniform4uivFunc));
            glTexParameterIivPtr = (glTexParameterIivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterIiv"), typeof(glTexParameterIivFunc));
            glTexParameterIuivPtr = (glTexParameterIuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexParameterIuiv"), typeof(glTexParameterIuivFunc));
            glGetTexParameterIivPtr = (glGetTexParameterIivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameterIiv"), typeof(glGetTexParameterIivFunc));
            glGetTexParameterIuivPtr = (glGetTexParameterIuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetTexParameterIuiv"), typeof(glGetTexParameterIuivFunc));
            glClearBufferivPtr = (glClearBufferivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearBufferiv"), typeof(glClearBufferivFunc));
            glClearBufferuivPtr = (glClearBufferuivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearBufferuiv"), typeof(glClearBufferuivFunc));
            glClearBufferfvPtr = (glClearBufferfvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearBufferfv"), typeof(glClearBufferfvFunc));
            glClearBufferfiPtr = (glClearBufferfiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClearBufferfi"), typeof(glClearBufferfiFunc));
            glGetStringiPtr = (glGetStringiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetStringi"), typeof(glGetStringiFunc));
            glIsRenderbufferPtr = (glIsRenderbufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsRenderbuffer"), typeof(glIsRenderbufferFunc));
            glBindRenderbufferPtr = (glBindRenderbufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindRenderbuffer"), typeof(glBindRenderbufferFunc));
            glDeleteRenderbuffersPtr = (glDeleteRenderbuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteRenderbuffers"), typeof(glDeleteRenderbuffersFunc));
            glGenRenderbuffersPtr = (glGenRenderbuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenRenderbuffers"), typeof(glGenRenderbuffersFunc));
            glRenderbufferStoragePtr = (glRenderbufferStorageFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRenderbufferStorage"), typeof(glRenderbufferStorageFunc));
            glGetRenderbufferParameterivPtr = (glGetRenderbufferParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetRenderbufferParameteriv"), typeof(glGetRenderbufferParameterivFunc));
            glIsFramebufferPtr = (glIsFramebufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsFramebuffer"), typeof(glIsFramebufferFunc));
            glBindFramebufferPtr = (glBindFramebufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindFramebuffer"), typeof(glBindFramebufferFunc));
            glDeleteFramebuffersPtr = (glDeleteFramebuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteFramebuffers"), typeof(glDeleteFramebuffersFunc));
            glGenFramebuffersPtr = (glGenFramebuffersFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenFramebuffers"), typeof(glGenFramebuffersFunc));
            glCheckFramebufferStatusPtr = (glCheckFramebufferStatusFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCheckFramebufferStatus"), typeof(glCheckFramebufferStatusFunc));
            glFramebufferTexture1DPtr = (glFramebufferTexture1DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferTexture1D"), typeof(glFramebufferTexture1DFunc));
            glFramebufferTexture2DPtr = (glFramebufferTexture2DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferTexture2D"), typeof(glFramebufferTexture2DFunc));
            glFramebufferTexture3DPtr = (glFramebufferTexture3DFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferTexture3D"), typeof(glFramebufferTexture3DFunc));
            glFramebufferRenderbufferPtr = (glFramebufferRenderbufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferRenderbuffer"), typeof(glFramebufferRenderbufferFunc));
            glGetFramebufferAttachmentParameterivPtr = (glGetFramebufferAttachmentParameterivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetFramebufferAttachmentParameteriv"), typeof(glGetFramebufferAttachmentParameterivFunc));
            glGenerateMipmapPtr = (glGenerateMipmapFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenerateMipmap"), typeof(glGenerateMipmapFunc));
            glBlitFramebufferPtr = (glBlitFramebufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBlitFramebuffer"), typeof(glBlitFramebufferFunc));
            glRenderbufferStorageMultisamplePtr = (glRenderbufferStorageMultisampleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glRenderbufferStorageMultisample"), typeof(glRenderbufferStorageMultisampleFunc));
            glFramebufferTextureLayerPtr = (glFramebufferTextureLayerFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferTextureLayer"), typeof(glFramebufferTextureLayerFunc));
            glMapBufferRangePtr = (glMapBufferRangeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMapBufferRange"), typeof(glMapBufferRangeFunc));
            glFlushMappedBufferRangePtr = (glFlushMappedBufferRangeFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFlushMappedBufferRange"), typeof(glFlushMappedBufferRangeFunc));
            glBindVertexArrayPtr = (glBindVertexArrayFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glBindVertexArray"), typeof(glBindVertexArrayFunc));
            glDeleteVertexArraysPtr = (glDeleteVertexArraysFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteVertexArrays"), typeof(glDeleteVertexArraysFunc));
            glGenVertexArraysPtr = (glGenVertexArraysFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGenVertexArrays"), typeof(glGenVertexArraysFunc));
            glIsVertexArrayPtr = (glIsVertexArrayFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsVertexArray"), typeof(glIsVertexArrayFunc));
            glDrawArraysInstancedPtr = (glDrawArraysInstancedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawArraysInstanced"), typeof(glDrawArraysInstancedFunc));
            glDrawElementsInstancedPtr = (glDrawElementsInstancedFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElementsInstanced"), typeof(glDrawElementsInstancedFunc));
            glTexBufferPtr = (glTexBufferFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexBuffer"), typeof(glTexBufferFunc));
            glPrimitiveRestartIndexPtr = (glPrimitiveRestartIndexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glPrimitiveRestartIndex"), typeof(glPrimitiveRestartIndexFunc));
            glCopyBufferSubDataPtr = (glCopyBufferSubDataFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glCopyBufferSubData"), typeof(glCopyBufferSubDataFunc));
            glGetUniformIndicesPtr = (glGetUniformIndicesFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformIndices"), typeof(glGetUniformIndicesFunc));
            glGetActiveUniformsivPtr = (glGetActiveUniformsivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveUniformsiv"), typeof(glGetActiveUniformsivFunc));
            glGetActiveUniformNamePtr = (glGetActiveUniformNameFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveUniformName"), typeof(glGetActiveUniformNameFunc));
            glGetUniformBlockIndexPtr = (glGetUniformBlockIndexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetUniformBlockIndex"), typeof(glGetUniformBlockIndexFunc));
            glGetActiveUniformBlockivPtr = (glGetActiveUniformBlockivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveUniformBlockiv"), typeof(glGetActiveUniformBlockivFunc));
            glGetActiveUniformBlockNamePtr = (glGetActiveUniformBlockNameFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetActiveUniformBlockName"), typeof(glGetActiveUniformBlockNameFunc));
            glUniformBlockBindingPtr = (glUniformBlockBindingFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glUniformBlockBinding"), typeof(glUniformBlockBindingFunc));
            glDrawElementsBaseVertexPtr = (glDrawElementsBaseVertexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElementsBaseVertex"), typeof(glDrawElementsBaseVertexFunc));
            glDrawRangeElementsBaseVertexPtr = (glDrawRangeElementsBaseVertexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawRangeElementsBaseVertex"), typeof(glDrawRangeElementsBaseVertexFunc));
            glDrawElementsInstancedBaseVertexPtr = (glDrawElementsInstancedBaseVertexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDrawElementsInstancedBaseVertex"), typeof(glDrawElementsInstancedBaseVertexFunc));
            glMultiDrawElementsBaseVertexPtr = (glMultiDrawElementsBaseVertexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glMultiDrawElementsBaseVertex"), typeof(glMultiDrawElementsBaseVertexFunc));
            glProvokingVertexPtr = (glProvokingVertexFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glProvokingVertex"), typeof(glProvokingVertexFunc));
            glFenceSyncPtr = (glFenceSyncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFenceSync"), typeof(glFenceSyncFunc));
            glIsSyncPtr = (glIsSyncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glIsSync"), typeof(glIsSyncFunc));
            glDeleteSyncPtr = (glDeleteSyncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glDeleteSync"), typeof(glDeleteSyncFunc));
            glClientWaitSyncPtr = (glClientWaitSyncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glClientWaitSync"), typeof(glClientWaitSyncFunc));
            glWaitSyncPtr = (glWaitSyncFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glWaitSync"), typeof(glWaitSyncFunc));
            glGetInteger64vPtr = (glGetInteger64vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetInteger64v"), typeof(glGetInteger64vFunc));
            glGetSyncivPtr = (glGetSyncivFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetSynciv"), typeof(glGetSyncivFunc));
            glGetInteger64i_vPtr = (glGetInteger64i_vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetInteger64i_v"), typeof(glGetInteger64i_vFunc));
            glGetBufferParameteri64vPtr = (glGetBufferParameteri64vFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetBufferParameteri64v"), typeof(glGetBufferParameteri64vFunc));
            glFramebufferTexturePtr = (glFramebufferTextureFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glFramebufferTexture"), typeof(glFramebufferTextureFunc));
            glTexImage2DMultisamplePtr = (glTexImage2DMultisampleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage2DMultisample"), typeof(glTexImage2DMultisampleFunc));
            glTexImage3DMultisamplePtr = (glTexImage3DMultisampleFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glTexImage3DMultisample"), typeof(glTexImage3DMultisampleFunc));
            glGetMultisamplefvPtr = (glGetMultisamplefvFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glGetMultisamplefv"), typeof(glGetMultisamplefvFunc));
            glSampleMaskiPtr = (glSampleMaskiFunc)Marshal.GetDelegateForFunctionPointer(GetProcAddress("glSampleMaski"), typeof(glSampleMaskiFunc));
        }

        public static void LoadFunction(string name)
        {
            var memberInfo = typeof(GL32Core).GetField(name + "Ptr", BindingFlags.NonPublic | BindingFlags.Static);
            memberInfo.SetValue(null, Marshal.GetDelegateForFunctionPointer(GetProcAddress(name), memberInfo.FieldType));
        }
        #endregion
    }
}
